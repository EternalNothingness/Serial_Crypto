
zephyr.elf:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 c1 9f 00 00 	mov    0x9fc1(%rip),%rax        # bfd0 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 ba 9d 00 00    	pushq  0x9dba(%rip)        # bde0 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 bb 9d 00 00 	bnd jmpq *0x9dbb(%rip)        # bde8 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	pushq  $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmpq 2020 <.plt>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	pushq  $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmpq 2020 <.plt>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	pushq  $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmpq 2020 <.plt>
    226f:	90                   	nop
    2270:	f3 0f 1e fa          	endbr64 
    2274:	68 24 00 00 00       	pushq  $0x24
    2279:	f2 e9 a1 fd ff ff    	bnd jmpq 2020 <.plt>
    227f:	90                   	nop
    2280:	f3 0f 1e fa          	endbr64 
    2284:	68 25 00 00 00       	pushq  $0x25
    2289:	f2 e9 91 fd ff ff    	bnd jmpq 2020 <.plt>
    228f:	90                   	nop
    2290:	f3 0f 1e fa          	endbr64 
    2294:	68 26 00 00 00       	pushq  $0x26
    2299:	f2 e9 81 fd ff ff    	bnd jmpq 2020 <.plt>
    229f:	90                   	nop
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	68 27 00 00 00       	pushq  $0x27
    22a9:	f2 e9 71 fd ff ff    	bnd jmpq 2020 <.plt>
    22af:	90                   	nop
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	68 28 00 00 00       	pushq  $0x28
    22b9:	f2 e9 61 fd ff ff    	bnd jmpq 2020 <.plt>
    22bf:	90                   	nop
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	68 29 00 00 00       	pushq  $0x29
    22c9:	f2 e9 51 fd ff ff    	bnd jmpq 2020 <.plt>
    22cf:	90                   	nop
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	68 2a 00 00 00       	pushq  $0x2a
    22d9:	f2 e9 41 fd ff ff    	bnd jmpq 2020 <.plt>
    22df:	90                   	nop
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	68 2b 00 00 00       	pushq  $0x2b
    22e9:	f2 e9 31 fd ff ff    	bnd jmpq 2020 <.plt>
    22ef:	90                   	nop
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	68 2c 00 00 00       	pushq  $0x2c
    22f9:	f2 e9 21 fd ff ff    	bnd jmpq 2020 <.plt>
    22ff:	90                   	nop
    2300:	f3 0f 1e fa          	endbr64 
    2304:	68 2d 00 00 00       	pushq  $0x2d
    2309:	f2 e9 11 fd ff ff    	bnd jmpq 2020 <.plt>
    230f:	90                   	nop
    2310:	f3 0f 1e fa          	endbr64 
    2314:	68 2e 00 00 00       	pushq  $0x2e
    2319:	f2 e9 01 fd ff ff    	bnd jmpq 2020 <.plt>
    231f:	90                   	nop
    2320:	f3 0f 1e fa          	endbr64 
    2324:	68 2f 00 00 00       	pushq  $0x2f
    2329:	f2 e9 f1 fc ff ff    	bnd jmpq 2020 <.plt>
    232f:	90                   	nop
    2330:	f3 0f 1e fa          	endbr64 
    2334:	68 30 00 00 00       	pushq  $0x30
    2339:	f2 e9 e1 fc ff ff    	bnd jmpq 2020 <.plt>
    233f:	90                   	nop
    2340:	f3 0f 1e fa          	endbr64 
    2344:	68 31 00 00 00       	pushq  $0x31
    2349:	f2 e9 d1 fc ff ff    	bnd jmpq 2020 <.plt>
    234f:	90                   	nop
    2350:	f3 0f 1e fa          	endbr64 
    2354:	68 32 00 00 00       	pushq  $0x32
    2359:	f2 e9 c1 fc ff ff    	bnd jmpq 2020 <.plt>
    235f:	90                   	nop
    2360:	f3 0f 1e fa          	endbr64 
    2364:	68 33 00 00 00       	pushq  $0x33
    2369:	f2 e9 b1 fc ff ff    	bnd jmpq 2020 <.plt>
    236f:	90                   	nop
    2370:	f3 0f 1e fa          	endbr64 
    2374:	68 34 00 00 00       	pushq  $0x34
    2379:	f2 e9 a1 fc ff ff    	bnd jmpq 2020 <.plt>
    237f:	90                   	nop

Disassembly of section .plt.got:

0000000000002380 <__cxa_finalize@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 5d 9c 00 00 	bnd jmpq *0x9c5d(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000002390 <ptsname@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 55 9a 00 00 	bnd jmpq *0x9a55(%rip)        # bdf0 <ptsname@GLIBC_2.2.5>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <__snprintf_chk@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 4d 9a 00 00 	bnd jmpq *0x9a4d(%rip)        # bdf8 <__snprintf_chk@GLIBC_2.3.4>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <free@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 45 9a 00 00 	bnd jmpq *0x9a45(%rip)        # be00 <free@GLIBC_2.2.5>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <pthread_create@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 3d 9a 00 00 	bnd jmpq *0x9a3d(%rip)        # be08 <pthread_create@GLIBC_2.2.5>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <strcasecmp@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 35 9a 00 00 	bnd jmpq *0x9a35(%rip)        # be10 <strcasecmp@GLIBC_2.2.5>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <pthread_detach@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 2d 9a 00 00 	bnd jmpq *0x9a2d(%rip)        # be18 <pthread_detach@GLIBC_2.2.5>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <__vfprintf_chk@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 25 9a 00 00 	bnd jmpq *0x9a25(%rip)        # be20 <__vfprintf_chk@GLIBC_2.3.4>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__errno_location@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 1d 9a 00 00 	bnd jmpq *0x9a1d(%rip)        # be28 <__errno_location@GLIBC_2.2.5>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <pthread_cond_broadcast@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 15 9a 00 00 	bnd jmpq *0x9a15(%rip)        # be30 <pthread_cond_broadcast@GLIBC_2.3.2>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <pthread_cancel@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 0d 9a 00 00 	bnd jmpq *0x9a0d(%rip)        # be38 <pthread_cancel@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <isatty@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 05 9a 00 00 	bnd jmpq *0x9a05(%rip)        # be40 <isatty@GLIBC_2.2.5>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <sigaction@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 fd 99 00 00 	bnd jmpq *0x99fd(%rip)        # be48 <sigaction@GLIBC_2.2.5>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <__pthread_register_cancel@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 f5 99 00 00 	bnd jmpq *0x99f5(%rip)        # be50 <__pthread_register_cancel@GLIBC_2.3.3>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <strtod@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 ed 99 00 00 	bnd jmpq *0x99ed(%rip)        # be58 <strtod@GLIBC_2.2.5>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <fcntl@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 e5 99 00 00 	bnd jmpq *0x99e5(%rip)        # be60 <fcntl@GLIBC_2.2.5>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <clock_gettime@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 dd 99 00 00 	bnd jmpq *0x99dd(%rip)        # be68 <clock_gettime@GLIBC_2.17>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <write@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 d5 99 00 00 	bnd jmpq *0x99d5(%rip)        # be70 <write@GLIBC_2.2.5>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <pthread_cond_wait@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 cd 99 00 00 	bnd jmpq *0x99cd(%rip)        # be78 <pthread_cond_wait@GLIBC_2.3.2>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <__stack_chk_fail@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 c5 99 00 00 	bnd jmpq *0x99c5(%rip)        # be80 <__stack_chk_fail@GLIBC_2.4>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024c0 <system@plt>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	f2 ff 25 bd 99 00 00 	bnd jmpq *0x99bd(%rip)        # be88 <system@GLIBC_2.2.5>
    24cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024d0 <snprintf@plt>:
    24d0:	f3 0f 1e fa          	endbr64 
    24d4:	f2 ff 25 b5 99 00 00 	bnd jmpq *0x99b5(%rip)        # be90 <snprintf@GLIBC_2.2.5>
    24db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024e0 <nanosleep@plt>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	f2 ff 25 ad 99 00 00 	bnd jmpq *0x99ad(%rip)        # be98 <nanosleep@GLIBC_2.2.5>
    24eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024f0 <strnlen@plt>:
    24f0:	f3 0f 1e fa          	endbr64 
    24f4:	f2 ff 25 a5 99 00 00 	bnd jmpq *0x99a5(%rip)        # bea0 <strnlen@GLIBC_2.2.5>
    24fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002500 <close@plt>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	f2 ff 25 9d 99 00 00 	bnd jmpq *0x999d(%rip)        # bea8 <close@GLIBC_2.2.5>
    250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002510 <read@plt>:
    2510:	f3 0f 1e fa          	endbr64 
    2514:	f2 ff 25 95 99 00 00 	bnd jmpq *0x9995(%rip)        # beb0 <read@GLIBC_2.2.5>
    251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002520 <strtoull@plt>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	f2 ff 25 8d 99 00 00 	bnd jmpq *0x998d(%rip)        # beb8 <strtoull@GLIBC_2.2.5>
    252b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002530 <calloc@plt>:
    2530:	f3 0f 1e fa          	endbr64 
    2534:	f2 ff 25 85 99 00 00 	bnd jmpq *0x9985(%rip)        # bec0 <calloc@GLIBC_2.2.5>
    253b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002540 <strcmp@plt>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	f2 ff 25 7d 99 00 00 	bnd jmpq *0x997d(%rip)        # bec8 <strcmp@GLIBC_2.2.5>
    254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002550 <strtoll@plt>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	f2 ff 25 75 99 00 00 	bnd jmpq *0x9975(%rip)        # bed0 <strtoll@GLIBC_2.2.5>
    255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002560 <unlockpt@plt>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	f2 ff 25 6d 99 00 00 	bnd jmpq *0x996d(%rip)        # bed8 <unlockpt@GLIBC_2.2.5>
    256b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002570 <__memcpy_chk@plt>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	f2 ff 25 65 99 00 00 	bnd jmpq *0x9965(%rip)        # bee0 <__memcpy_chk@GLIBC_2.3.4>
    257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002580 <sigemptyset@plt>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	f2 ff 25 5d 99 00 00 	bnd jmpq *0x995d(%rip)        # bee8 <sigemptyset@GLIBC_2.2.5>
    258b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002590 <strtol@plt>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	f2 ff 25 55 99 00 00 	bnd jmpq *0x9955(%rip)        # bef0 <strtol@GLIBC_2.2.5>
    259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025a0 <pthread_mutex_unlock@plt>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	f2 ff 25 4d 99 00 00 	bnd jmpq *0x994d(%rip)        # bef8 <pthread_mutex_unlock@GLIBC_2.2.5>
    25ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025b0 <pthread_exit@plt>:
    25b0:	f3 0f 1e fa          	endbr64 
    25b4:	f2 ff 25 45 99 00 00 	bnd jmpq *0x9945(%rip)        # bf00 <pthread_exit@GLIBC_2.2.5>
    25bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025c0 <malloc@plt>:
    25c0:	f3 0f 1e fa          	endbr64 
    25c4:	f2 ff 25 3d 99 00 00 	bnd jmpq *0x993d(%rip)        # bf08 <malloc@GLIBC_2.2.5>
    25cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025d0 <realloc@plt>:
    25d0:	f3 0f 1e fa          	endbr64 
    25d4:	f2 ff 25 35 99 00 00 	bnd jmpq *0x9935(%rip)        # bf10 <realloc@GLIBC_2.2.5>
    25db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025e0 <setvbuf@plt>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	f2 ff 25 2d 99 00 00 	bnd jmpq *0x992d(%rip)        # bf18 <setvbuf@GLIBC_2.2.5>
    25eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025f0 <pthread_self@plt>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	f2 ff 25 25 99 00 00 	bnd jmpq *0x9925(%rip)        # bf20 <pthread_self@GLIBC_2.2.5>
    25fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002600 <tcgetattr@plt>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	f2 ff 25 1d 99 00 00 	bnd jmpq *0x991d(%rip)        # bf28 <tcgetattr@GLIBC_2.2.5>
    260b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002610 <tcsetattr@plt>:
    2610:	f3 0f 1e fa          	endbr64 
    2614:	f2 ff 25 15 99 00 00 	bnd jmpq *0x9915(%rip)        # bf30 <tcsetattr@GLIBC_2.2.5>
    261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002620 <strtoul@plt>:
    2620:	f3 0f 1e fa          	endbr64 
    2624:	f2 ff 25 0d 99 00 00 	bnd jmpq *0x990d(%rip)        # bf38 <strtoul@GLIBC_2.2.5>
    262b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002630 <grantpt@plt>:
    2630:	f3 0f 1e fa          	endbr64 
    2634:	f2 ff 25 05 99 00 00 	bnd jmpq *0x9905(%rip)        # bf40 <grantpt@GLIBC_2.2.5>
    263b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002640 <__memset_chk@plt>:
    2640:	f3 0f 1e fa          	endbr64 
    2644:	f2 ff 25 fd 98 00 00 	bnd jmpq *0x98fd(%rip)        # bf48 <__memset_chk@GLIBC_2.3.4>
    264b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002650 <__pthread_unwind_next@plt>:
    2650:	f3 0f 1e fa          	endbr64 
    2654:	f2 ff 25 f5 98 00 00 	bnd jmpq *0x98f5(%rip)        # bf50 <__pthread_unwind_next@GLIBC_2.3.3>
    265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002660 <exit@plt>:
    2660:	f3 0f 1e fa          	endbr64 
    2664:	f2 ff 25 ed 98 00 00 	bnd jmpq *0x98ed(%rip)        # bf58 <exit@GLIBC_2.2.5>
    266b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002670 <__fprintf_chk@plt>:
    2670:	f3 0f 1e fa          	endbr64 
    2674:	f2 ff 25 e5 98 00 00 	bnd jmpq *0x98e5(%rip)        # bf60 <__fprintf_chk@GLIBC_2.3.4>
    267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002680 <__sigsetjmp@plt>:
    2680:	f3 0f 1e fa          	endbr64 
    2684:	f2 ff 25 dd 98 00 00 	bnd jmpq *0x98dd(%rip)        # bf68 <__sigsetjmp@GLIBC_2.2.5>
    268b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002690 <posix_openpt@plt>:
    2690:	f3 0f 1e fa          	endbr64 
    2694:	f2 ff 25 d5 98 00 00 	bnd jmpq *0x98d5(%rip)        # bf70 <posix_openpt@GLIBC_2.2.5>
    269b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026a0 <sleep@plt>:
    26a0:	f3 0f 1e fa          	endbr64 
    26a4:	f2 ff 25 cd 98 00 00 	bnd jmpq *0x98cd(%rip)        # bf78 <sleep@GLIBC_2.2.5>
    26ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026b0 <pthread_mutex_lock@plt>:
    26b0:	f3 0f 1e fa          	endbr64 
    26b4:	f2 ff 25 c5 98 00 00 	bnd jmpq *0x98c5(%rip)        # bf80 <pthread_mutex_lock@GLIBC_2.2.5>
    26bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026c0 <__ctype_b_loc@plt>:
    26c0:	f3 0f 1e fa          	endbr64 
    26c4:	f2 ff 25 bd 98 00 00 	bnd jmpq *0x98bd(%rip)        # bf88 <__ctype_b_loc@GLIBC_2.3>
    26cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026d0 <__sprintf_chk@plt>:
    26d0:	f3 0f 1e fa          	endbr64 
    26d4:	f2 ff 25 b5 98 00 00 	bnd jmpq *0x98b5(%rip)        # bf90 <__sprintf_chk@GLIBC_2.3.4>
    26db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000026e0 <_start>:
    26e0:	f3 0f 1e fa          	endbr64 
    26e4:	31 ed                	xor    %ebp,%ebp
    26e6:	49 89 d1             	mov    %rdx,%r9
    26e9:	5e                   	pop    %rsi
    26ea:	48 89 e2             	mov    %rsp,%rdx
    26ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    26f1:	50                   	push   %rax
    26f2:	54                   	push   %rsp
    26f3:	4c 8d 05 46 01 00 00 	lea    0x146(%rip),%r8        # 2840 <__libc_csu_fini>
    26fa:	48 8d 0d cf 00 00 00 	lea    0xcf(%rip),%rcx        # 27d0 <__libc_csu_init>
    2701:	48 8d 3d c2 3d 00 00 	lea    0x3dc2(%rip),%rdi        # 64ca <main>
    2708:	ff 15 ba 98 00 00    	callq  *0x98ba(%rip)        # bfc8 <__libc_start_main@GLIBC_2.2.5>
    270e:	f4                   	hlt    
    270f:	90                   	nop

0000000000002710 <deregister_tm_clones>:
    2710:	48 8d 3d 69 9d 00 00 	lea    0x9d69(%rip),%rdi        # c480 <__TMC_END__>
    2717:	48 8d 05 62 9d 00 00 	lea    0x9d62(%rip),%rax        # c480 <__TMC_END__>
    271e:	48 39 f8             	cmp    %rdi,%rax
    2721:	74 15                	je     2738 <deregister_tm_clones+0x28>
    2723:	48 8b 05 76 98 00 00 	mov    0x9876(%rip),%rax        # bfa0 <_ITM_deregisterTMCloneTable>
    272a:	48 85 c0             	test   %rax,%rax
    272d:	74 09                	je     2738 <deregister_tm_clones+0x28>
    272f:	ff e0                	jmpq   *%rax
    2731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2738:	c3                   	retq   
    2739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002740 <register_tm_clones>:
    2740:	48 8d 3d 39 9d 00 00 	lea    0x9d39(%rip),%rdi        # c480 <__TMC_END__>
    2747:	48 8d 35 32 9d 00 00 	lea    0x9d32(%rip),%rsi        # c480 <__TMC_END__>
    274e:	48 29 fe             	sub    %rdi,%rsi
    2751:	48 89 f0             	mov    %rsi,%rax
    2754:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2758:	48 c1 f8 03          	sar    $0x3,%rax
    275c:	48 01 c6             	add    %rax,%rsi
    275f:	48 d1 fe             	sar    %rsi
    2762:	74 14                	je     2778 <register_tm_clones+0x38>
    2764:	48 8b 05 75 98 00 00 	mov    0x9875(%rip),%rax        # bfe0 <_ITM_registerTMCloneTable>
    276b:	48 85 c0             	test   %rax,%rax
    276e:	74 08                	je     2778 <register_tm_clones+0x38>
    2770:	ff e0                	jmpq   *%rax
    2772:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2778:	c3                   	retq   
    2779:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002780 <__do_global_dtors_aux>:
    2780:	f3 0f 1e fa          	endbr64 
    2784:	80 3d 21 ce 00 00 00 	cmpb   $0x0,0xce21(%rip)        # f5ac <completed.8060>
    278b:	75 2b                	jne    27b8 <__do_global_dtors_aux+0x38>
    278d:	55                   	push   %rbp
    278e:	48 83 3d 52 98 00 00 	cmpq   $0x0,0x9852(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    2795:	00 
    2796:	48 89 e5             	mov    %rsp,%rbp
    2799:	74 0c                	je     27a7 <__do_global_dtors_aux+0x27>
    279b:	48 8b 3d 9e 9c 00 00 	mov    0x9c9e(%rip),%rdi        # c440 <__dso_handle>
    27a2:	e8 d9 fb ff ff       	callq  2380 <__cxa_finalize@plt>
    27a7:	e8 64 ff ff ff       	callq  2710 <deregister_tm_clones>
    27ac:	c6 05 f9 cd 00 00 01 	movb   $0x1,0xcdf9(%rip)        # f5ac <completed.8060>
    27b3:	5d                   	pop    %rbp
    27b4:	c3                   	retq   
    27b5:	0f 1f 00             	nopl   (%rax)
    27b8:	c3                   	retq   
    27b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027c0 <frame_dummy>:
    27c0:	f3 0f 1e fa          	endbr64 
    27c4:	e9 77 ff ff ff       	jmpq   2740 <register_tm_clones>
    27c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027d0 <__libc_csu_init>:
    27d0:	f3 0f 1e fa          	endbr64 
    27d4:	41 57                	push   %r15
    27d6:	4c 8d 3d 73 93 00 00 	lea    0x9373(%rip),%r15        # bb50 <__frame_dummy_init_array_entry>
    27dd:	41 56                	push   %r14
    27df:	49 89 d6             	mov    %rdx,%r14
    27e2:	41 55                	push   %r13
    27e4:	49 89 f5             	mov    %rsi,%r13
    27e7:	41 54                	push   %r12
    27e9:	41 89 fc             	mov    %edi,%r12d
    27ec:	55                   	push   %rbp
    27ed:	48 8d 2d 64 93 00 00 	lea    0x9364(%rip),%rbp        # bb58 <__do_global_dtors_aux_fini_array_entry>
    27f4:	53                   	push   %rbx
    27f5:	4c 29 fd             	sub    %r15,%rbp
    27f8:	48 83 ec 08          	sub    $0x8,%rsp
    27fc:	e8 ff f7 ff ff       	callq  2000 <_init>
    2801:	48 c1 fd 03          	sar    $0x3,%rbp
    2805:	74 1f                	je     2826 <__libc_csu_init+0x56>
    2807:	31 db                	xor    %ebx,%ebx
    2809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2810:	4c 89 f2             	mov    %r14,%rdx
    2813:	4c 89 ee             	mov    %r13,%rsi
    2816:	44 89 e7             	mov    %r12d,%edi
    2819:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    281d:	48 83 c3 01          	add    $0x1,%rbx
    2821:	48 39 dd             	cmp    %rbx,%rbp
    2824:	75 ea                	jne    2810 <__libc_csu_init+0x40>
    2826:	48 83 c4 08          	add    $0x8,%rsp
    282a:	5b                   	pop    %rbx
    282b:	5d                   	pop    %rbp
    282c:	41 5c                	pop    %r12
    282e:	41 5d                	pop    %r13
    2830:	41 5e                	pop    %r14
    2832:	41 5f                	pop    %r15
    2834:	c3                   	retq   
    2835:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    283c:	00 00 00 00 

0000000000002840 <__libc_csu_fini>:
    2840:	f3 0f 1e fa          	endbr64 
    2844:	c3                   	retq   

0000000000002845 <z_impl_uart_poll_in>:
				      unsigned char *p_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	return api->poll_in(dev, p_char);
    2845:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2849:	ff 20                	jmpq   *(%rax)

000000000000284b <k_usleep.constprop.0>:
	if (z_syscall_trap()) {
		return (int32_t) arch_syscall_invoke1(*(uintptr_t *)&us, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    284b:	bf 01 00 00 00       	mov    $0x1,%edi
    2850:	e9 12 5d 00 00       	jmpq   8567 <z_impl_k_usleep>

0000000000002855 <uart_out>:
	}

	return; // sollte nie geschehen
}

void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2855:	f3 0f 1e fa          	endbr64 
    2859:	41 55                	push   %r13
	// ## setup area ##
	ARG_UNUSED(ptr1);
	ARG_UNUSED(ptr2);
	ARG_UNUSED(ptr3);

	char *output=malloc(DATA_SIZE_MAX*sizeof(char));
    285b:	bf ff 00 00 00       	mov    $0xff,%edi
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2860:	41 54                	push   %r12

	// ## main loop ##
	for(;;){
		memset(output, 0, strlen(output)); // Inhalt resetten
    2862:	49 83 cc ff          	or     $0xffffffffffffffff,%r12
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2866:	55                   	push   %rbp
    2867:	53                   	push   %rbx
    2868:	50                   	push   %rax
	char *output=malloc(DATA_SIZE_MAX*sizeof(char));
    2869:	e8 52 fd ff ff       	callq  25c0 <malloc@plt>
    286e:	48 89 c5             	mov    %rax,%rbp
		memset(output, 0, strlen(output)); // Inhalt resetten
    2871:	31 c0                	xor    %eax,%eax
    2873:	48 89 ef             	mov    %rbp,%rdi
    2876:	4c 89 e1             	mov    %r12,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    2879:	31 f6                	xor    %esi,%esi
    287b:	f2 ae                	repnz scas %es:(%rdi),%al
    287d:	48 89 ef             	mov    %rbp,%rdi
    2880:	48 89 c8             	mov    %rcx,%rax
    2883:	b9 ff 00 00 00       	mov    $0xff,%ecx
    2888:	48 f7 d0             	not    %rax
    288b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    288f:	e8 ac fd ff ff       	callq  2640 <__memset_chk@plt>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    2894:	48 8d 3d 35 c2 00 00 	lea    0xc235(%rip),%rdi        # ead0 <uart_msgq>
    289b:	31 d2                	xor    %edx,%edx
    289d:	48 89 ee             	mov    %rbp,%rsi
    28a0:	e8 c6 53 00 00       	callq  7c6b <z_impl_k_msgq_get>
    28a5:	89 c3                	mov    %eax,%ebx
		if(k_msgq_get(&uart_msgq, output, K_NO_WAIT)==0){ // Abfrage der uart message queue
    28a7:	85 c0                	test   %eax,%eax
    28a9:	75 71                	jne    291c <uart_out+0xc7>
			printk("Going to send data to the uart: <%s>\n", output);
    28ab:	48 89 ee             	mov    %rbp,%rsi
    28ae:	48 8d 3d f7 6a 00 00 	lea    0x6af7(%rip),%rdi        # 93ac <default_cmd+0x14c>
    28b5:	31 c0                	xor    %eax,%eax
    28b7:	e8 11 06 00 00       	callq  2ecd <printk>
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    28bc:	31 c0                	xor    %eax,%eax
    28be:	4c 89 e1             	mov    %r12,%rcx
    28c1:	48 89 ef             	mov    %rbp,%rdi
    28c4:	48 63 d3             	movslq %ebx,%rdx
    28c7:	f2 ae                	repnz scas %es:(%rdi),%al
    28c9:	48 89 c8             	mov    %rcx,%rax
    28cc:	48 f7 d0             	not    %rax
    28cf:	48 ff c8             	dec    %rax
    28d2:	48 39 c2             	cmp    %rax,%rdx
    28d5:	73 37                	jae    290e <uart_out+0xb9>
				uart_poll_out(uart_dev, *(output+i));
    28d7:	48 8d 05 a2 cb 00 00 	lea    0xcba2(%rip),%rax        # f480 <uart_dev>
    28de:	4c 8d 6c 15 00       	lea    0x0(%rbp,%rdx,1),%r13
    28e3:	41 0f b6 75 00       	movzbl 0x0(%r13),%esi
    28e8:	48 8b 38             	mov    (%rax),%rdi
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    28eb:	48 8b 47 10          	mov    0x10(%rdi),%rax
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    28ef:	ff c3                	inc    %ebx
    28f1:	ff 50 08             	callq  *0x8(%rax)
				printk("Sent byte: <0x%x>\n", *(output+i));
    28f4:	41 0f be 75 00       	movsbl 0x0(%r13),%esi
    28f9:	48 8d 3d d2 6a 00 00 	lea    0x6ad2(%rip),%rdi        # 93d2 <default_cmd+0x172>
    2900:	31 c0                	xor    %eax,%eax
    2902:	e8 c6 05 00 00       	callq  2ecd <printk>
				k_usleep(1); // Abgeben des Prozessors
    2907:	e8 3f ff ff ff       	callq  284b <k_usleep.constprop.0>
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    290c:	eb ae                	jmp    28bc <uart_out+0x67>
			}
			printk("Finished transmission\n\n");
    290e:	48 8d 3d d0 6a 00 00 	lea    0x6ad0(%rip),%rdi        # 93e5 <default_cmd+0x185>
    2915:	31 c0                	xor    %eax,%eax
    2917:	e8 b1 05 00 00       	callq  2ecd <printk>
		}
		k_usleep(1); // Abgeben des Prozessors
    291c:	e8 2a ff ff ff       	callq  284b <k_usleep.constprop.0>
		memset(output, 0, strlen(output)); // Inhalt resetten
    2921:	e9 4b ff ff ff       	jmpq   2871 <uart_out+0x1c>

0000000000002926 <uart_in>:
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    2926:	f3 0f 1e fa          	endbr64 
    292a:	41 57                	push   %r15
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    292c:	bf ff 00 00 00       	mov    $0xff,%edi
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    2931:	41 56                	push   %r14
    2933:	41 55                	push   %r13
    2935:	41 54                	push   %r12
    2937:	55                   	push   %rbp
    2938:	53                   	push   %rbx
	uint8_t len = 0;
    2939:	31 db                	xor    %ebx,%ebx
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    293b:	48 83 ec 18          	sub    $0x18,%rsp
    293f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2946:	00 00 
    2948:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    294d:	31 c0                	xor    %eax,%eax
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    294f:	e8 6c fc ff ff       	callq  25c0 <malloc@plt>
		switch(state){
    2954:	48 8d 2d 09 cc 00 00 	lea    0xcc09(%rip),%rbp        # f564 <state>
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    295b:	49 89 c4             	mov    %rax,%r12
		switch(state){
    295e:	8b 45 00             	mov    0x0(%rbp),%eax
    2961:	83 f8 02             	cmp    $0x2,%eax
    2964:	0f 84 b0 00 00 00    	je     2a1a <uart_in+0xf4>
    296a:	83 f8 03             	cmp    $0x3,%eax
    296d:	0f 84 ff 00 00 00    	je     2a72 <uart_in+0x14c>
    2973:	85 c0                	test   %eax,%eax
    2975:	0f 85 c4 01 00 00    	jne    2b3f <uart_in+0x219>
				if(!uart_poll_in(uart_dev, &input)){
    297b:	48 8d 05 fe ca 00 00 	lea    0xcafe(%rip),%rax        # f480 <uart_dev>
    2982:	48 8b 38             	mov    (%rax),%rdi
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&p_char, K_SYSCALL_UART_POLL_IN);
	}
#endif
	compiler_barrier();
	return z_impl_uart_poll_in(dev, p_char);
    2985:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    298a:	e8 b6 fe ff ff       	callq  2845 <z_impl_uart_poll_in>
    298f:	85 c0                	test   %eax,%eax
    2991:	0f 85 a8 01 00 00    	jne    2b3f <uart_in+0x219>
					printk("received command: %c\n", (char)input);
    2997:	0f be 74 24 07       	movsbl 0x7(%rsp),%esi
    299c:	48 8d 3d 5a 6a 00 00 	lea    0x6a5a(%rip),%rdi        # 93fd <default_cmd+0x19d>
    29a3:	e8 25 05 00 00       	callq  2ecd <printk>
					switch(input){
    29a8:	8a 44 24 07          	mov    0x7(%rsp),%al
    29ac:	3c 44                	cmp    $0x44,%al
    29ae:	74 50                	je     2a00 <uart_in+0xda>
    29b0:	3c 50                	cmp    $0x50,%al
    29b2:	74 32                	je     29e6 <uart_in+0xc0>
    29b4:	3c 2e                	cmp    $0x2e,%al
    29b6:	0f 85 83 01 00 00    	jne    2b3f <uart_in+0x219>
							printk("Sending '.' back\n\n");
    29bc:	48 8d 3d 50 6a 00 00 	lea    0x6a50(%rip),%rdi        # 9413 <default_cmd+0x1b3>
    29c3:	31 c0                	xor    %eax,%eax
    29c5:	e8 03 05 00 00       	callq  2ecd <printk>
	return z_impl_k_msgq_put(msgq, data, timeout);
    29ca:	48 8d 3d ff c0 00 00 	lea    0xc0ff(%rip),%rdi        # ead0 <uart_msgq>
    29d1:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    29d5:	48 8d 35 4a 6a 00 00 	lea    0x6a4a(%rip),%rsi        # 9426 <default_cmd+0x1c6>
    29dc:	e8 93 51 00 00       	callq  7b74 <z_impl_k_msgq_put>
							break;
    29e1:	e9 59 01 00 00       	jmpq   2b3f <uart_in+0x219>
							printk("Changing state to st_avail\n\n");
    29e6:	48 8d 3d 3c 6a 00 00 	lea    0x6a3c(%rip),%rdi        # 9429 <default_cmd+0x1c9>
    29ed:	31 c0                	xor    %eax,%eax
    29ef:	e8 d9 04 00 00       	callq  2ecd <printk>
							state = st_avail;
    29f4:	c7 45 00 01 00 00 00 	movl   $0x1,0x0(%rbp)
							break;
    29fb:	e9 3f 01 00 00       	jmpq   2b3f <uart_in+0x219>
							printk("Changing state to st_decrypt\n\n");
    2a00:	48 8d 3d 3f 6a 00 00 	lea    0x6a3f(%rip),%rdi        # 9446 <default_cmd+0x1e6>
    2a07:	31 c0                	xor    %eax,%eax
    2a09:	e8 bf 04 00 00       	callq  2ecd <printk>
							state = st_decrypt;
    2a0e:	c7 45 00 02 00 00 00 	movl   $0x2,0x0(%rbp)
							break;
    2a15:	e9 25 01 00 00       	jmpq   2b3f <uart_in+0x219>
				if(!uart_poll_in(uart_dev, &input)){
    2a1a:	48 8d 05 5f ca 00 00 	lea    0xca5f(%rip),%rax        # f480 <uart_dev>
    2a21:	48 8b 38             	mov    (%rax),%rdi
    2a24:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    2a29:	e8 17 fe ff ff       	callq  2845 <z_impl_uart_poll_in>
    2a2e:	85 c0                	test   %eax,%eax
    2a30:	0f 85 09 01 00 00    	jne    2b3f <uart_in+0x219>
					op = op_decrypt;
    2a36:	48 8d 05 23 cb 00 00 	lea    0xcb23(%rip),%rax        # f560 <op>
					len = input;
    2a3d:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
					printk("Length of incoming ciphertext is %i\n", len);
    2a42:	48 8d 3d 1c 6a 00 00 	lea    0x6a1c(%rip),%rdi        # 9465 <default_cmd+0x205>
					op = op_decrypt;
    2a49:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
					printk("Length of incoming ciphertext is %i\n", len);
    2a4f:	31 c0                	xor    %eax,%eax
					len = input;
    2a51:	89 f3                	mov    %esi,%ebx
					printk("Length of incoming ciphertext is %i\n", len);
    2a53:	e8 75 04 00 00       	callq  2ecd <printk>
					printk("Changing state to st_data\n\n");
    2a58:	48 8d 3d 2b 6a 00 00 	lea    0x6a2b(%rip),%rdi        # 948a <default_cmd+0x22a>
    2a5f:	31 c0                	xor    %eax,%eax
    2a61:	e8 67 04 00 00       	callq  2ecd <printk>
					state = st_data;
    2a66:	c7 45 00 03 00 00 00 	movl   $0x3,0x0(%rbp)
    2a6d:	e9 cd 00 00 00       	jmpq   2b3f <uart_in+0x219>
    2a72:	4c 8d 35 07 ca 00 00 	lea    0xca07(%rip),%r14        # f480 <uart_dev>
		switch(state){
    2a79:	45 31 ed             	xor    %r13d,%r13d
				for(uint8_t i=0; len!=0; len--){
    2a7c:	84 db                	test   %bl,%bl
    2a7e:	49 8b 3e             	mov    (%r14),%rdi
    2a81:	4c 8d 7c 24 07       	lea    0x7(%rsp),%r15
    2a86:	74 3e                	je     2ac6 <uart_in+0x1a0>
    2a88:	4c 89 fe             	mov    %r15,%rsi
    2a8b:	e8 b5 fd ff ff       	callq  2845 <z_impl_uart_poll_in>
					if(!uart_poll_in(uart_dev, &input)){
    2a90:	85 c0                	test   %eax,%eax
    2a92:	75 22                	jne    2ab6 <uart_in+0x190>
						printk("received data: <0x%x>\n", input);
    2a94:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
    2a99:	48 8d 3d 06 6a 00 00 	lea    0x6a06(%rip),%rdi        # 94a6 <default_cmd+0x246>
    2aa0:	e8 28 04 00 00       	callq  2ecd <printk>
						*(data+i) = input;
    2aa5:	8a 54 24 07          	mov    0x7(%rsp),%dl
    2aa9:	41 0f b6 c5          	movzbl %r13b,%eax
						i++;
    2aad:	41 ff c5             	inc    %r13d
						*(data+i) = input;
    2ab0:	41 88 14 04          	mov    %dl,(%r12,%rax,1)
						i++;
    2ab4:	eb 02                	jmp    2ab8 <uart_in+0x192>
						len++;
    2ab6:	ff c3                	inc    %ebx
					k_usleep(1); //  Prozessor abgeben
    2ab8:	e8 8e fd ff ff       	callq  284b <k_usleep.constprop.0>
				for(uint8_t i=0; len!=0; len--){
    2abd:	ff cb                	dec    %ebx
    2abf:	eb bb                	jmp    2a7c <uart_in+0x156>
					k_usleep(1); // Prozessor abgeben
    2ac1:	e8 85 fd ff ff       	callq  284b <k_usleep.constprop.0>
					if(!uart_poll_in(uart_dev, &input)){
    2ac6:	49 8b 3e             	mov    (%r14),%rdi
    2ac9:	4c 89 fe             	mov    %r15,%rsi
    2acc:	e8 74 fd ff ff       	callq  2845 <z_impl_uart_poll_in>
    2ad1:	85 c0                	test   %eax,%eax
    2ad3:	75 ec                	jne    2ac1 <uart_in+0x19b>
						switch(op){
    2ad5:	48 8d 05 84 ca 00 00 	lea    0xca84(%rip),%rax        # f560 <op>
    2adc:	83 38 00             	cmpl   $0x0,(%rax)
    2adf:	75 3b                	jne    2b1c <uart_in+0x1f6>
								printk("Sending data <%s> to processing thread\n", data);
    2ae1:	4c 89 e6             	mov    %r12,%rsi
    2ae4:	48 8d 3d d2 69 00 00 	lea    0x69d2(%rip),%rdi        # 94bd <default_cmd+0x25d>
    2aeb:	31 c0                	xor    %eax,%eax
    2aed:	e8 db 03 00 00       	callq  2ecd <printk>
    2af2:	48 8d 3d 8f bf 00 00 	lea    0xbf8f(%rip),%rdi        # ea88 <processing_msgq>
    2af9:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2afd:	4c 89 e6             	mov    %r12,%rsi
    2b00:	e8 6f 50 00 00       	callq  7b74 <z_impl_k_msgq_put>
								printk("Changing state to st_op_decrypt\n\n");
    2b05:	48 8d 3d d9 69 00 00 	lea    0x69d9(%rip),%rdi        # 94e5 <default_cmd+0x285>
    2b0c:	31 c0                	xor    %eax,%eax
    2b0e:	e8 ba 03 00 00       	callq  2ecd <printk>
								state = st_op_decrypt;
    2b13:	c7 45 00 04 00 00 00 	movl   $0x4,0x0(%rbp)
								break;
    2b1a:	eb 23                	jmp    2b3f <uart_in+0x219>
								printk("Error: unknwown operand!\n");
    2b1c:	48 8d 3d e4 69 00 00 	lea    0x69e4(%rip),%rdi        # 9507 <default_cmd+0x2a7>
    2b23:	31 c0                	xor    %eax,%eax
    2b25:	e8 a3 03 00 00       	callq  2ecd <printk>
								printk("Changing state to st_init\n\n");
    2b2a:	48 8d 3d f0 69 00 00 	lea    0x69f0(%rip),%rdi        # 9521 <default_cmd+0x2c1>
    2b31:	31 c0                	xor    %eax,%eax
    2b33:	e8 95 03 00 00       	callq  2ecd <printk>
								state = st_init;
    2b38:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
		k_usleep(1); // Prozessor abgeben
    2b3f:	e8 07 fd ff ff       	callq  284b <k_usleep.constprop.0>
		switch(state){
    2b44:	e9 15 fe ff ff       	jmpq   295e <uart_in+0x38>

0000000000002b49 <validate_hw_compatibility>:
	return plaintext;
}

int validate_hw_compatibility(void)
// ubernommen aus Krypto-Sample von Zephyr
{
    2b49:	f3 0f 1e fa          	endbr64 
    2b4d:	51                   	push   %rcx
        uint32_t flags = 0U;

        flags = cipher_query_hwcaps(crypto_dev);
    2b4e:	48 8d 05 1b c9 00 00 	lea    0xc91b(%rip),%rax        # f470 <crypto_dev>
    2b55:	48 8b 38             	mov    (%rax),%rdi
	struct crypto_driver_api *api;
	int tmp;

	api = (struct crypto_driver_api *) dev->api;

	tmp = api->query_hw_caps(dev);
    2b58:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2b5c:	ff 10                	callq  *(%rax)
        if ((flags & CAP_RAW_KEY) == 0U) {
                return -1;
        }

        if ((flags & CAP_SYNC_OPS) == 0U) {
                return -1;
    2b5e:	41 83 c8 ff          	or     $0xffffffff,%r8d
        if ((flags & CAP_SYNC_OPS) == 0U) {
    2b62:	89 c2                	mov    %eax,%edx
    2b64:	83 e2 22             	and    $0x22,%edx
    2b67:	83 fa 22             	cmp    $0x22,%edx
    2b6a:	75 14                	jne    2b80 <validate_hw_compatibility+0x37>
        }

        if ((flags & CAP_SEPARATE_IO_BUFS) == 0U) {
    2b6c:	a8 10                	test   $0x10,%al
    2b6e:	74 10                	je     2b80 <validate_hw_compatibility+0x37>
                return -1;
        }

        cap_flags = CAP_RAW_KEY | CAP_SYNC_OPS | CAP_SEPARATE_IO_BUFS;
    2b70:	48 8d 05 f1 c9 00 00 	lea    0xc9f1(%rip),%rax        # f568 <cap_flags>

        return 0;
    2b77:	45 31 c0             	xor    %r8d,%r8d
        cap_flags = CAP_RAW_KEY | CAP_SYNC_OPS | CAP_SEPARATE_IO_BUFS;
    2b7a:	c7 00 32 00 00 00    	movl   $0x32,(%rax)
}
    2b80:	44 89 c0             	mov    %r8d,%eax
    2b83:	5a                   	pop    %rdx
    2b84:	c3                   	retq   

0000000000002b85 <zephyr_app_main>:
void main(void){
    2b85:	f3 0f 1e fa          	endbr64 
    2b89:	53                   	push   %rbx
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2b8a:	48 8d 3d b4 69 00 00 	lea    0x69b4(%rip),%rdi        # 9545 <default_cmd+0x2e5>
    2b91:	e8 f8 4d 00 00       	callq  798e <z_impl_device_get_binding>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2b96:	48 8d 1d e3 c8 00 00 	lea    0xc8e3(%rip),%rbx        # f480 <uart_dev>
		printk("UART not found\n");
    2b9d:	48 8d 3d a8 69 00 00 	lea    0x69a8(%rip),%rdi        # 954c <default_cmd+0x2ec>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2ba4:	48 89 03             	mov    %rax,(%rbx)
	if(!uart_dev){
    2ba7:	48 85 c0             	test   %rax,%rax
    2baa:	74 75                	je     2c21 <zephyr_app_main+0x9c>
	printk("UART found\n");
    2bac:	31 c0                	xor    %eax,%eax
    2bae:	48 8d 3d a7 69 00 00 	lea    0x69a7(%rip),%rdi        # 955c <default_cmd+0x2fc>
    2bb5:	e8 13 03 00 00       	callq  2ecd <printk>
	uartconf.baudrate = 9600;
    2bba:	48 8d 35 b7 c8 00 00 	lea    0xc8b7(%rip),%rsi        # f478 <uartconf>
	if(!uart_configure(uart_dev, &uartconf)){
    2bc1:	48 8b 3b             	mov    (%rbx),%rdi
	uartconf.baudrate = 9600;
    2bc4:	48 b8 80 25 00 00 00 	movabs $0x3010000002580,%rax
    2bcb:	01 03 00 
    2bce:	48 89 06             	mov    %rax,(%rsi)
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    2bd1:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2bd5:	48 8b 40 18          	mov    0x18(%rax),%rax
    2bd9:	48 85 c0             	test   %rax,%rax
    2bdc:	74 0d                	je     2beb <zephyr_app_main+0x66>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    2bde:	ff d0                	callq  *%rax
		printk("Configuration of UART failed\n");
    2be0:	48 8d 3d 81 69 00 00 	lea    0x6981(%rip),%rdi        # 9568 <default_cmd+0x308>
	if(!uart_configure(uart_dev, &uartconf)){
    2be7:	85 c0                	test   %eax,%eax
    2be9:	74 36                	je     2c21 <zephyr_app_main+0x9c>
	printk("UART configured\n");
    2beb:	48 8d 3d 94 69 00 00 	lea    0x6994(%rip),%rdi        # 9586 <default_cmd+0x326>
    2bf2:	31 c0                	xor    %eax,%eax
    2bf4:	e8 d4 02 00 00       	callq  2ecd <printk>
    2bf9:	48 8d 3d 97 69 00 00 	lea    0x6997(%rip),%rdi        # 9597 <default_cmd+0x337>
    2c00:	e8 89 4d 00 00       	callq  798e <z_impl_device_get_binding>
	crypto_dev = device_get_binding(CRYPTO_DRV_NAME);
    2c05:	48 8d 15 64 c8 00 00 	lea    0xc864(%rip),%rdx        # f470 <crypto_dev>
    2c0c:	48 89 02             	mov    %rax,(%rdx)
	if(validate_hw_compatibility()!=0){
    2c0f:	e8 35 ff ff ff       	callq  2b49 <validate_hw_compatibility>
    2c14:	85 c0                	test   %eax,%eax
    2c16:	74 0f                	je     2c27 <zephyr_app_main+0xa2>
		printk("Crypto device not compatible\n");
    2c18:	48 8d 3d 82 69 00 00 	lea    0x6982(%rip),%rdi        # 95a1 <default_cmd+0x341>
    2c1f:	31 c0                	xor    %eax,%eax
}
    2c21:	5b                   	pop    %rbx
		printk("Crypto device not compatible\n");
    2c22:	e9 a6 02 00 00       	jmpq   2ecd <printk>
	printk("Crypto device is compatible\n");
    2c27:	48 8d 3d 91 69 00 00 	lea    0x6991(%rip),%rdi        # 95bf <default_cmd+0x35f>
    2c2e:	31 c0                	xor    %eax,%eax
		printk("\nmain is waiting for death\n"); // "main is alive" ist mir irgendwie zu langweilig...
    2c30:	48 8d 1d a5 69 00 00 	lea    0x69a5(%rip),%rbx        # 95dc <default_cmd+0x37c>
	printk("Crypto device is compatible\n");
    2c37:	e8 91 02 00 00       	callq  2ecd <printk>
		printk("\nmain is waiting for death\n"); // "main is alive" ist mir irgendwie zu langweilig...
    2c3c:	48 89 df             	mov    %rbx,%rdi
    2c3f:	31 c0                	xor    %eax,%eax
    2c41:	e8 87 02 00 00       	callq  2ecd <printk>
	return z_impl_k_sleep(timeout);
    2c46:	bf e8 03 00 00       	mov    $0x3e8,%edi
    2c4b:	e8 df 58 00 00       	callq  852f <z_impl_k_sleep>
    2c50:	eb ea                	jmp    2c3c <zephyr_app_main+0xb7>

0000000000002c52 <cbc_mode>:

void cbc_mode(uint8_t *key, uint8_t *iv, uint8_t *ciphertext, uint8_t **plaintext)
// uebernommen aus Krypto-Sample von Zephyr und von Mitterhuber
{
    2c52:	f3 0f 1e fa          	endbr64 
    2c56:	41 55                	push   %r13
    2c58:	49 89 f8             	mov    %rdi,%r8
    2c5b:	41 54                	push   %r12
    2c5d:	49 89 d4             	mov    %rdx,%r12
    2c60:	55                   	push   %rbp
    2c61:	53                   	push   %rbx
    2c62:	48 89 cb             	mov    %rcx,%rbx
	//uint8_t encrypted[80] = {0};
        //uint8_t decrypted[64] = {0};
        struct cipher_ctx ini = {
    2c65:	b9 0d 00 00 00       	mov    $0xd,%ecx
{
    2c6a:	48 83 ec 78          	sub    $0x78,%rsp
                .in_len = sizeof(ciphertext),
                .out_buf = *plaintext,
                .out_buf_max = sizeof(*plaintext),
        };

        if (cipher_begin_session(crypto_dev, &ini, CRYPTO_CIPHER_ALGO_AES,
    2c6e:	4c 8d 2d fb c7 00 00 	lea    0xc7fb(%rip),%r13        # f470 <crypto_dev>
        struct cipher_ctx ini = {
    2c75:	48 8d 15 ec c8 00 00 	lea    0xc8ec(%rip),%rdx        # f568 <cap_flags>
{
    2c7c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2c83:	00 00 
    2c85:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    2c8a:	31 c0                	xor    %eax,%eax
        struct cipher_ctx ini = {
    2c8c:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
	flags = (ctx->flags & (CAP_SYNC_OPS | CAP_ASYNC_OPS));
	__ASSERT(flags != 0U, "sync/async type missing");
	__ASSERT(flags != (CAP_SYNC_OPS |  CAP_ASYNC_OPS),
			"conflicting options for sync/async");

	return api->begin_session(dev, ctx, algo, mode, optype);
    2c91:	48 8d 6c 24 30       	lea    0x30(%rsp),%rbp
    2c96:	66 c7 44 24 64 08 00 	movw   $0x8,0x64(%rsp)
    2c9d:	8b 12                	mov    (%rdx),%edx
        struct cipher_pkt decrypt = {
    2c9f:	4c 89 64 24 08       	mov    %r12,0x8(%rsp)
    2ca4:	48 89 ee             	mov    %rbp,%rsi
        struct cipher_ctx ini = {
    2ca7:	66 89 54 24 66       	mov    %dx,0x66(%rsp)
    2cac:	ba 01 00 00 00       	mov    $0x1,%edx
    2cb1:	f3 ab                	rep stos %eax,%es:(%rdi)
        struct cipher_pkt decrypt = {
    2cb3:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    2cb8:	b9 08 00 00 00       	mov    $0x8,%ecx
        struct cipher_ctx ini = {
    2cbd:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
        struct cipher_pkt decrypt = {
    2cc2:	f3 ab                	rep stos %eax,%es:(%rdi)
    2cc4:	48 8b 03             	mov    (%rbx),%rax
        if (cipher_begin_session(crypto_dev, &ini, CRYPTO_CIPHER_ALGO_AES,
    2cc7:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    2ccb:	45 31 c0             	xor    %r8d,%r8d
        struct cipher_pkt decrypt = {
    2cce:	c7 44 24 10 08 00 00 	movl   $0x8,0x10(%rsp)
    2cd5:	00 
    2cd6:	b9 02 00 00 00       	mov    $0x2,%ecx
    2cdb:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2ce0:	c7 44 24 20 08 00 00 	movl   $0x8,0x20(%rsp)
    2ce7:	00 
	ctx->ops.cipher_mode = mode;
    2ce8:	c7 44 24 30 02 00 00 	movl   $0x2,0x30(%rsp)
    2cef:	00 
	api = (struct crypto_driver_api *) dev->api;
    2cf0:	48 8b 47 10          	mov    0x10(%rdi),%rax
	ctx->device = dev;
    2cf4:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
	return api->begin_session(dev, ctx, algo, mode, optype);
    2cf9:	ff 50 08             	callq  *0x8(%rax)
        if (cipher_begin_session(crypto_dev, &ini, CRYPTO_CIPHER_ALGO_AES,
    2cfc:	85 c0                	test   %eax,%eax
    2cfe:	74 0c                	je     2d0c <cbc_mode+0xba>
                                 CRYPTO_CIPHER_MODE_CBC,
                                 CRYPTO_CIPHER_OP_DECRYPT)){
		*plaintext = "XERROR\n";
    2d00:	48 8d 05 36 68 00 00 	lea    0x6836(%rip),%rax        # 953d <default_cmd+0x2dd>
    2d07:	48 89 03             	mov    %rax,(%rbx)
                return;
    2d0a:	eb 52                	jmp    2d5e <cbc_mode+0x10c>
				struct cipher_pkt *pkt, uint8_t *iv)
{
	__ASSERT(ctx->ops.cipher_mode == CRYPTO_CIPHER_MODE_CBC, "CBC mode "
		 "session invoking a different mode handler");

	pkt->ctx = ctx;
    2d0c:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	return ctx->ops.cbc_crypt_hndlr(ctx, pkt, iv);
    2d11:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    2d16:	4c 89 e2             	mov    %r12,%rdx
    2d19:	48 89 ef             	mov    %rbp,%rdi
    2d1c:	ff 54 24 38          	callq  *0x38(%rsp)
        }

        if (cipher_cbc_op(&ini, &decrypt, ciphertext)) {
    2d20:	85 c0                	test   %eax,%eax
    2d22:	74 1a                	je     2d3e <cbc_mode+0xec>
                printk("CBC mode DECRYPT - Failed\n");
    2d24:	31 c0                	xor    %eax,%eax
    2d26:	48 8d 3d cb 68 00 00 	lea    0x68cb(%rip),%rdi        # 95f8 <default_cmd+0x398>
    2d2d:	e8 9b 01 00 00       	callq  2ecd <printk>
		*plaintext = "XERROR\n";
    2d32:	48 8d 05 04 68 00 00 	lea    0x6804(%rip),%rax        # 953d <default_cmd+0x2dd>
    2d39:	48 89 03             	mov    %rax,(%rbx)
                goto out;
    2d3c:	eb 12                	jmp    2d50 <cbc_mode+0xfe>
        }

       printk("Output length (decryption): %d\n", decrypt.out_len);
    2d3e:	8b 74 24 24          	mov    0x24(%rsp),%esi
    2d42:	48 8d 3d ca 68 00 00 	lea    0x68ca(%rip),%rdi        # 9613 <default_cmd+0x3b3>
    2d49:	31 c0                	xor    %eax,%eax
    2d4b:	e8 7d 01 00 00       	callq  2ecd <printk>
out:
        cipher_free_session(crypto_dev, &ini);
    2d50:	49 8b 7d 00          	mov    0x0(%r13),%rdi
	return api->free_session(dev, ctx);
    2d54:	48 89 ee             	mov    %rbp,%rsi
    2d57:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2d5b:	ff 50 10             	callq  *0x10(%rax)
}
    2d5e:	48 8b 44 24 68       	mov    0x68(%rsp),%rax
    2d63:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2d6a:	00 00 
    2d6c:	74 05                	je     2d73 <cbc_mode+0x121>
    2d6e:	e8 3d f7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2d73:	48 83 c4 78          	add    $0x78,%rsp
    2d77:	5b                   	pop    %rbx
    2d78:	5d                   	pop    %rbp
    2d79:	41 5c                	pop    %r12
    2d7b:	41 5d                	pop    %r13
    2d7d:	c3                   	retq   

0000000000002d7e <processing>:
void processing(void *ptr1, void *ptr2, void *ptr3){
    2d7e:	f3 0f 1e fa          	endbr64 
    2d82:	55                   	push   %rbp
	uint8_t *plaintext=malloc(DATA_SIZE_MAX*sizeof(char));
    2d83:	bf ff 00 00 00       	mov    $0xff,%edi
void processing(void *ptr1, void *ptr2, void *ptr3){
    2d88:	53                   	push   %rbx
    2d89:	48 83 ec 18          	sub    $0x18,%rsp
    2d8d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2d94:	00 00 
    2d96:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2d9b:	31 c0                	xor    %eax,%eax
	uint8_t *plaintext=malloc(DATA_SIZE_MAX*sizeof(char));
    2d9d:	e8 1e f8 ff ff       	callq  25c0 <malloc@plt>
	uint8_t *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2da2:	bf ff 00 00 00       	mov    $0xff,%edi
	uint8_t *plaintext=malloc(DATA_SIZE_MAX*sizeof(char));
    2da7:	48 89 04 24          	mov    %rax,(%rsp)
	uint8_t *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2dab:	e8 10 f8 ff ff       	callq  25c0 <malloc@plt>
		switch(state){
    2db0:	48 8d 2d ad c7 00 00 	lea    0xc7ad(%rip),%rbp        # f564 <state>
	uint8_t *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2db7:	48 89 c3             	mov    %rax,%rbx
		switch(state){
    2dba:	8b 45 00             	mov    0x0(%rbp),%eax
    2dbd:	83 f8 01             	cmp    $0x1,%eax
    2dc0:	74 0a                	je     2dcc <processing+0x4e>
    2dc2:	83 f8 04             	cmp    $0x4,%eax
    2dc5:	74 12                	je     2dd9 <processing+0x5b>
    2dc7:	e9 81 00 00 00       	jmpq   2e4d <processing+0xcf>
	return z_impl_k_msgq_put(msgq, data, timeout);
    2dcc:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2dd0:	48 8d 35 5c 68 00 00 	lea    0x685c(%rip),%rsi        # 9633 <default_cmd+0x3d3>
    2dd7:	eb 53                	jmp    2e2c <processing+0xae>
	return z_impl_k_msgq_get(msgq, data, timeout);
    2dd9:	48 8d 3d a8 bc 00 00 	lea    0xbca8(%rip),%rdi        # ea88 <processing_msgq>
    2de0:	31 d2                	xor    %edx,%edx
    2de2:	48 89 de             	mov    %rbx,%rsi
    2de5:	e8 81 4e 00 00       	callq  7c6b <z_impl_k_msgq_get>
				if(k_msgq_get(&processing_msgq, (void*)ciphertext, K_NO_WAIT)==0){
    2dea:	85 c0                	test   %eax,%eax
    2dec:	75 5f                	jne    2e4d <processing+0xcf>
					printk("Going to decrypt ciphertext: <%s>\n", ciphertext);
    2dee:	48 89 de             	mov    %rbx,%rsi
    2df1:	48 8d 3d 51 68 00 00 	lea    0x6851(%rip),%rdi        # 9649 <default_cmd+0x3e9>
    2df8:	e8 d0 00 00 00       	callq  2ecd <printk>
					cbc_mode(key, iv, ciphertext, &plaintext);
    2dfd:	48 8d 35 68 68 00 00 	lea    0x6868(%rip),%rsi        # 966c <default_cmd+0x40c>
    2e04:	48 89 e1             	mov    %rsp,%rcx
    2e07:	48 89 da             	mov    %rbx,%rdx
    2e0a:	48 89 f7             	mov    %rsi,%rdi
    2e0d:	e8 40 fe ff ff       	callq  2c52 <cbc_mode>
					printk("Sending plaintext <%s> to uart_out\n", plaintext);
    2e12:	48 8b 34 24          	mov    (%rsp),%rsi
    2e16:	48 8d 3d 60 68 00 00 	lea    0x6860(%rip),%rdi        # 967d <default_cmd+0x41d>
    2e1d:	31 c0                	xor    %eax,%eax
    2e1f:	e8 a9 00 00 00       	callq  2ecd <printk>
					k_msgq_put(&uart_msgq, plaintext, K_FOREVER);
    2e24:	48 8b 34 24          	mov    (%rsp),%rsi
	return z_impl_k_msgq_put(msgq, data, timeout);
    2e28:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2e2c:	48 8d 3d 9d bc 00 00 	lea    0xbc9d(%rip),%rdi        # ead0 <uart_msgq>
    2e33:	e8 3c 4d 00 00       	callq  7b74 <z_impl_k_msgq_put>
					printk("Changing state to st_init\n\n");
    2e38:	48 8d 3d e2 66 00 00 	lea    0x66e2(%rip),%rdi        # 9521 <default_cmd+0x2c1>
    2e3f:	31 c0                	xor    %eax,%eax
    2e41:	e8 87 00 00 00       	callq  2ecd <printk>
					state = st_init;
    2e46:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
		k_usleep(1); // Abgeben des Prozessors
    2e4d:	e8 f9 f9 ff ff       	callq  284b <k_usleep.constprop.0>
		switch(state){
    2e52:	e9 63 ff ff ff       	jmpq   2dba <processing+0x3c>

0000000000002e57 <arch_printk_char_out>:
 *
 * @return 0
 */
/* LCOV_EXCL_START */
__attribute__((weak)) int arch_printk_char_out(int c)
{
    2e57:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2e5b:	31 c0                	xor    %eax,%eax
    2e5d:	c3                   	retq   

0000000000002e5e <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2e5e:	f3 0f 1e fa          	endbr64 
	struct out_context *ctx = ctx_p;

	ctx->count++;
	return _char_out(c);
    2e62:	48 8d 05 df 95 00 00 	lea    0x95df(%rip),%rax        # c448 <_char_out>
	ctx->count++;
    2e69:	ff 06                	incl   (%rsi)
	return _char_out(c);
    2e6b:	ff 20                	jmpq   *(%rax)

0000000000002e6d <__printk_hook_install>:
{
    2e6d:	f3 0f 1e fa          	endbr64 
	_char_out = fn;
    2e71:	48 8d 05 d0 95 00 00 	lea    0x95d0(%rip),%rax        # c448 <_char_out>
    2e78:	48 89 38             	mov    %rdi,(%rax)
}
    2e7b:	c3                   	retq   

0000000000002e7c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2e7c:	f3 0f 1e fa          	endbr64 
    2e80:	48 83 ec 18          	sub    $0x18,%rsp
    2e84:	48 89 fa             	mov    %rdi,%rdx
    2e87:	48 89 f1             	mov    %rsi,%rcx
    2e8a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2e91:	00 00 
    2e93:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2e98:	31 c0                	xor    %eax,%eax
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2e9a:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    2e9f:	48 8d 3d b8 ff ff ff 	lea    -0x48(%rip),%rdi        # 2e5e <char_out>
	struct out_context ctx = { 0 };
    2ea6:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    2ead:	00 
	cbvprintf(char_out, &ctx, fmt, ap);
    2eae:	e8 84 03 00 00       	callq  3237 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2eb3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2eb8:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2ebf:	00 00 
    2ec1:	74 05                	je     2ec8 <vprintk+0x4c>
    2ec3:	e8 e8 f5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2ec8:	48 83 c4 18          	add    $0x18,%rsp
    2ecc:	c3                   	retq   

0000000000002ecd <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    2ecd:	f3 0f 1e fa          	endbr64 
    2ed1:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    2ed8:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    2edd:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    2ee2:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    2ee7:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    2eec:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    2ef1:	84 c0                	test   %al,%al
    2ef3:	74 37                	je     2f2c <printk+0x5f>
    2ef5:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    2efa:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    2eff:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    2f04:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    2f0b:	00 
    2f0c:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    2f13:	00 
    2f14:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    2f1b:	00 
    2f1c:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    2f23:	00 
    2f24:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    2f2b:	00 
    2f2c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2f33:	00 00 
    2f35:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2f3a:	31 c0                	xor    %eax,%eax
	va_list ap;

	va_start(ap, fmt);
    2f3c:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    2f43:	00 

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    2f44:	48 89 e6             	mov    %rsp,%rsi
	va_start(ap, fmt);
    2f47:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    2f4e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2f53:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    2f58:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2f5d:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    2f64:	00 
		vprintk(fmt, ap);
    2f65:	e8 12 ff ff ff       	callq  2e7c <vprintk>
	}
	va_end(ap);
}
    2f6a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2f6f:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2f76:	00 00 
    2f78:	74 05                	je     2f7f <printk+0xb2>
    2f7a:	e8 31 f5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2f7f:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    2f86:	c3                   	retq   

0000000000002f87 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2f87:	f3 0f 1e fa          	endbr64 
    2f8b:	50                   	push   %rax
    2f8c:	58                   	pop    %rax
    2f8d:	49 89 f8             	mov    %rdi,%r8
    2f90:	50                   	push   %rax
    2f91:	48 89 f7             	mov    %rsi,%rdi
    2f94:	48 89 d6             	mov    %rdx,%rsi
    2f97:	48 89 ca             	mov    %rcx,%rdx
	entry(p1, p2, p3);
    2f9a:	41 ff d0             	callq  *%r8
	return z_impl_k_current_get();
    2f9d:	e8 fe 55 00 00       	callq  85a0 <z_impl_k_current_get>
    2fa2:	48 89 c7             	mov    %rax,%rdi
	z_impl_k_thread_abort(thread);
    2fa5:	e8 06 26 00 00       	callq  55b0 <z_impl_k_thread_abort>
	/*
	 * Compiler can't tell that k_thread_abort() won't return and issues a
	 * warning unless we tell it that control never gets this far.
	 */

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2faa:	ba 26 00 00 00       	mov    $0x26,%edx
    2faf:	48 8d 35 13 67 00 00 	lea    0x6713(%rip),%rsi        # 96c9 <default_cmd+0x469>
    2fb6:	31 c0                	xor    %eax,%eax
    2fb8:	48 8d 3d 33 67 00 00 	lea    0x6733(%rip),%rdi        # 96f2 <default_cmd+0x492>
    2fbf:	e8 d0 35 00 00       	callq  6594 <posix_print_error_and_exit>

0000000000002fc4 <chunk_size>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2fc4:	89 f6                	mov    %esi,%esi
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    2fc6:	8b 44 f7 04          	mov    0x4(%rdi,%rsi,8),%eax
    2fca:	d1 e8                	shr    %eax
}
    2fcc:	c3                   	retq   

0000000000002fcd <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2fcd:	89 f6                	mov    %esi,%esi
{
    2fcf:	41 89 d0             	mov    %edx,%r8d
	void *cmem = &buf[c];
    2fd2:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax

	if (big_heap(h)) {
		if (used) {
    2fd6:	8b 48 04             	mov    0x4(%rax),%ecx
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    2fd9:	89 ca                	mov    %ecx,%edx
    2fdb:	83 e2 fe             	and    $0xfffffffe,%edx
		if (used) {
    2fde:	45 84 c0             	test   %r8b,%r8b
    2fe1:	74 05                	je     2fe8 <set_chunk_used+0x1b>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    2fe3:	83 c9 01             	or     $0x1,%ecx
    2fe6:	89 ca                	mov    %ecx,%edx
    2fe8:	89 50 04             	mov    %edx,0x4(%rax)
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
    2feb:	c3                   	retq   

0000000000002fec <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2fec:	89 f2                	mov    %esi,%edx
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    2fee:	e8 d1 ff ff ff       	callq  2fc4 <chunk_size>
	if (!solo_free_header(h, c)) {
    2ff3:	83 f8 01             	cmp    $0x1,%eax
    2ff6:	74 5b                	je     3053 <free_list_add+0x67>
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    2ff8:	ff c8                	dec    %eax
	return 31 - __builtin_clz(usable_sz);
    2ffa:	b9 1f 00 00 00       	mov    $0x1f,%ecx
    2fff:	0f bd c0             	bsr    %eax,%eax
    3002:	83 f0 1f             	xor    $0x1f,%eax
    3005:	29 c1                	sub    %eax,%ecx
	if (b->next == 0U) {
    3007:	48 63 c1             	movslq %ecx,%rax
    300a:	4c 8d 14 87          	lea    (%rdi,%rax,4),%r10
    300e:	89 d0                	mov    %edx,%eax
    3010:	41 8b 72 10          	mov    0x10(%r10),%esi
    3014:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
    301b:	00 
    301c:	4c 8d 0c 07          	lea    (%rdi,%rax,1),%r9
    3020:	4c 8d 44 07 04       	lea    0x4(%rdi,%rax,1),%r8
    3025:	85 f6                	test   %esi,%esi
    3027:	75 15                	jne    303e <free_list_add+0x52>
		h->avail_buckets |= (1 << bidx);
    3029:	b8 01 00 00 00       	mov    $0x1,%eax
    302e:	d3 e0                	shl    %cl,%eax
    3030:	09 47 0c             	or     %eax,0xc(%rdi)
		b->next = c;
    3033:	41 89 52 10          	mov    %edx,0x10(%r10)
		((uint32_t *)cmem)[f] = val;
    3037:	41 89 11             	mov    %edx,(%r9)
    303a:	41 89 10             	mov    %edx,(%r8)
}
    303d:	c3                   	retq   
	void *cmem = &buf[c];
    303e:	89 f0                	mov    %esi,%eax
		return ((uint32_t *)cmem)[f];
    3040:	48 8d 4c c7 08       	lea    0x8(%rdi,%rax,8),%rcx
    3045:	8b 01                	mov    (%rcx),%eax
		((uint32_t *)cmem)[f] = val;
    3047:	41 89 01             	mov    %eax,(%r9)
    304a:	41 89 30             	mov    %esi,(%r8)
    304d:	89 54 c7 0c          	mov    %edx,0xc(%rdi,%rax,8)
    3051:	89 11                	mov    %edx,(%rcx)
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
    3053:	c3                   	retq   

0000000000003054 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3054:	f3 0f 1e fa          	endbr64 
    3058:	49 89 f8             	mov    %rdi,%r8
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    305b:	4c 8d 4c 16 f8       	lea    -0x8(%rsi,%rdx,1),%r9
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3060:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    3064:	ba 20 00 00 00       	mov    $0x20,%edx
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    3069:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    306d:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    3071:	49 29 f9             	sub    %rdi,%r9
	heap->heap = h;
    3074:	49 89 38             	mov    %rdi,(%r8)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    3077:	49 c1 e9 03          	shr    $0x3,%r9
	h->avail_buckets = 0;
    307b:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    3082:	41 8d 41 ff          	lea    -0x1(%r9),%eax
	h->end_chunk = heap_sz;
    3086:	44 89 4f 08          	mov    %r9d,0x8(%rdi)
	return 31 - __builtin_clz(usable_sz);
    308a:	0f bd c0             	bsr    %eax,%eax
    308d:	83 f0 1f             	xor    $0x1f,%eax
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    3090:	29 c2                	sub    %eax,%edx
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    3092:	48 63 c2             	movslq %edx,%rax
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    3095:	4c 8d 14 85 17 00 00 	lea    0x17(,%rax,4),%r10
    309c:	00 
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    309d:	31 c0                	xor    %eax,%eax
    309f:	49 c1 ea 03          	shr    $0x3,%r10
    30a3:	39 c2                	cmp    %eax,%edx
    30a5:	7e 0d                	jle    30b4 <sys_heap_init+0x60>
		h->buckets[i].next = 0;
    30a7:	c7 44 87 10 00 00 00 	movl   $0x0,0x10(%rdi,%rax,4)
    30ae:	00 
	for (int i = 0; i < nb_buckets; i++) {
    30af:	48 ff c0             	inc    %rax
    30b2:	eb ef                	jmp    30a3 <sys_heap_init+0x4f>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    30b4:	43 8d 04 12          	lea    (%r10,%r10,1),%eax
		((uint32_t *)cmem)[f] = val;
    30b8:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
    30be:	ba 01 00 00 00       	mov    $0x1,%edx
    30c3:	31 f6                	xor    %esi,%esi
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    30c5:	89 47 04             	mov    %eax,0x4(%rdi)
    30c8:	e8 00 ff ff ff       	callq  2fcd <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    30cd:	44 89 ca             	mov    %r9d,%edx
		((uint32_t *)cmem)[f] = val;
    30d0:	46 89 14 d7          	mov    %r10d,(%rdi,%r10,8)
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    30d4:	44 89 ce             	mov    %r9d,%esi
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    30d7:	44 29 d2             	sub    %r10d,%edx
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    30da:	8d 04 12             	lea    (%rdx,%rdx,1),%eax
    30dd:	42 89 44 d7 04       	mov    %eax,0x4(%rdi,%r10,8)
	void *cmem = &buf[c];
    30e2:	44 89 c8             	mov    %r9d,%eax
		((uint32_t *)cmem)[f] = val;
    30e5:	89 14 c7             	mov    %edx,(%rdi,%rax,8)
	set_chunk_used(h, heap_sz, true);
    30e8:	ba 01 00 00 00       	mov    $0x1,%edx
    30ed:	c7 44 c7 04 00 00 00 	movl   $0x0,0x4(%rdi,%rax,8)
    30f4:	00 
    30f5:	e8 d3 fe ff ff       	callq  2fcd <set_chunk_used>

	free_list_add(h, chunk0_size);
    30fa:	44 89 d6             	mov    %r10d,%esi
    30fd:	e9 ea fe ff ff       	jmpq   2fec <free_list_add>

0000000000003102 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    3102:	41 56                	push   %r14
    3104:	49 89 f6             	mov    %rsi,%r14
    3107:	41 55                	push   %r13
    3109:	49 89 fd             	mov    %rdi,%r13
    310c:	41 54                	push   %r12
    310e:	49 89 cc             	mov    %rcx,%r12
    3111:	55                   	push   %rbp
    3112:	48 89 d5             	mov    %rdx,%rbp
    3115:	53                   	push   %rbx
	size_t count = 0;
    3116:	31 db                	xor    %ebx,%ebx

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3118:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
    311d:	49 39 c4             	cmp    %rax,%r12
    3120:	76 16                	jbe    3138 <outs+0x36>
		int rc = out((int)*sp++, ctx);
    3122:	31 c0                	xor    %eax,%eax
    3124:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
    3129:	4c 89 f6             	mov    %r14,%rsi
    312c:	41 ff d5             	callq  *%r13

		if (rc < 0) {
    312f:	85 c0                	test   %eax,%eax
    3131:	78 17                	js     314a <outs+0x48>
			return rc;
		}
		++count;
    3133:	48 ff c3             	inc    %rbx
    3136:	eb e0                	jmp    3118 <outs+0x16>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3138:	4d 85 e4             	test   %r12,%r12
    313b:	74 04                	je     3141 <outs+0x3f>
	}

	return (int)count;
    313d:	89 d8                	mov    %ebx,%eax
    313f:	eb 09                	jmp    314a <outs+0x48>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3141:	80 7c 1d 00 00       	cmpb   $0x0,0x0(%rbp,%rbx,1)
    3146:	75 da                	jne    3122 <outs+0x20>
    3148:	eb f3                	jmp    313d <outs+0x3b>
}
    314a:	5b                   	pop    %rbx
    314b:	5d                   	pop    %rbp
    314c:	41 5c                	pop    %r12
    314e:	41 5d                	pop    %r13
    3150:	41 5e                	pop    %r14
    3152:	c3                   	retq   

0000000000003153 <extract_decimal>:
{
    3153:	55                   	push   %rbp
    3154:	53                   	push   %rbx
    3155:	48 89 fb             	mov    %rdi,%rbx
    3158:	51                   	push   %rcx
	const char *sp = *str;
    3159:	48 8b 2f             	mov    (%rdi),%rbp
	while (isdigit((int)(unsigned char)*sp)) {
    315c:	e8 5f f5 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    3161:	48 8b 08             	mov    (%rax),%rcx
	size_t val = 0;
    3164:	31 c0                	xor    %eax,%eax
	while (isdigit((int)(unsigned char)*sp)) {
    3166:	48 0f be 55 00       	movsbq 0x0(%rbp),%rdx
    316b:	0f b6 f2             	movzbl %dl,%esi
    316e:	f6 44 71 01 08       	testb  $0x8,0x1(%rcx,%rsi,2)
    3173:	74 0e                	je     3183 <extract_decimal+0x30>
		val = 10U * val + *sp++ - '0';
    3175:	48 6b c0 0a          	imul   $0xa,%rax,%rax
    3179:	48 ff c5             	inc    %rbp
    317c:	48 8d 44 10 d0       	lea    -0x30(%rax,%rdx,1),%rax
    3181:	eb e3                	jmp    3166 <extract_decimal+0x13>
	*str = sp;
    3183:	48 89 2b             	mov    %rbp,(%rbx)
}
    3186:	5a                   	pop    %rdx
    3187:	5b                   	pop    %rbx
    3188:	5d                   	pop    %rbp
    3189:	c3                   	retq   

000000000000318a <encode_uint>:
{
    318a:	41 55                	push   %r13
    318c:	49 89 fd             	mov    %rdi,%r13
    318f:	41 54                	push   %r12
    3191:	49 89 cc             	mov    %rcx,%r12
    3194:	55                   	push   %rbp
    3195:	48 89 d5             	mov    %rdx,%rbp
    3198:	53                   	push   %rbx
    3199:	48 89 f3             	mov    %rsi,%rbx
    319c:	41 50                	push   %r8
	bool upcase = isupper((int)conv->specifier);
    319e:	e8 1d f5 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    31a3:	0f b6 4b 03          	movzbl 0x3(%rbx),%ecx
    31a7:	49 89 c0             	mov    %rax,%r8
    31aa:	49 8b 10             	mov    (%r8),%rdx
    31ad:	48 89 c8             	mov    %rcx,%rax
	switch (specifier) {
    31b0:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    31b6:	66 8b 0c 4a          	mov    (%rdx,%rcx,2),%cx
    31ba:	66 81 e1 00 01       	and    $0x100,%cx
    31bf:	3c 6f                	cmp    $0x6f,%al
    31c1:	74 3b                	je     31fe <encode_uint+0x74>
    31c3:	77 04                	ja     31c9 <encode_uint+0x3f>
		return 16;
    31c5:	3c 58                	cmp    $0x58,%al
    31c7:	eb 05                	jmp    31ce <encode_uint+0x44>
	switch (specifier) {
    31c9:	83 e0 f7             	and    $0xfffffff7,%eax
		return 16;
    31cc:	3c 70                	cmp    $0x70,%al
    31ce:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
    31d4:	b8 10 00 00 00       	mov    $0x10,%eax
    31d9:	4c 0f 44 c0          	cmove  %rax,%r8
	char *bp = bps + (bpe - bps);
    31dd:	eb 1f                	jmp    31fe <encode_uint+0x74>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    31df:	8d 72 57             	lea    0x57(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    31e2:	66 85 c9             	test   %cx,%cx
    31e5:	74 03                	je     31ea <encode_uint+0x60>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    31e7:	8d 72 37             	lea    0x37(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    31ea:	49 ff cc             	dec    %r12
    31ed:	41 88 34 24          	mov    %sil,(%r12)
	} while ((value != 0) && (bps < bp));
    31f1:	4d 39 c5             	cmp    %r8,%r13
    31f4:	72 1b                	jb     3211 <encode_uint+0x87>
    31f6:	49 39 ec             	cmp    %rbp,%r12
    31f9:	76 16                	jbe    3211 <encode_uint+0x87>
		value /= radix;
    31fb:	49 89 c5             	mov    %rax,%r13
		unsigned int lsv = (unsigned int)(value % radix);
    31fe:	4c 89 e8             	mov    %r13,%rax
    3201:	31 d2                	xor    %edx,%edx
    3203:	49 f7 f0             	div    %r8
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3206:	8d 72 30             	lea    0x30(%rdx),%esi
    3209:	48 83 fa 09          	cmp    $0x9,%rdx
    320d:	76 db                	jbe    31ea <encode_uint+0x60>
    320f:	eb ce                	jmp    31df <encode_uint+0x55>
	if (conv->flag_hash) {
    3211:	f6 03 20             	testb  $0x20,(%rbx)
    3214:	74 16                	je     322c <encode_uint+0xa2>
		if (radix == 8) {
    3216:	49 83 f8 08          	cmp    $0x8,%r8
    321a:	75 06                	jne    3222 <encode_uint+0x98>
			conv->altform_0 = true;
    321c:	80 4b 02 08          	orb    $0x8,0x2(%rbx)
    3220:	eb 0a                	jmp    322c <encode_uint+0xa2>
		} else if (radix == 16) {
    3222:	49 83 f8 10          	cmp    $0x10,%r8
    3226:	75 04                	jne    322c <encode_uint+0xa2>
			conv->altform_0c = true;
    3228:	80 4b 02 10          	orb    $0x10,0x2(%rbx)
}
    322c:	5a                   	pop    %rdx
    322d:	4c 89 e0             	mov    %r12,%rax
    3230:	5b                   	pop    %rbx
    3231:	5d                   	pop    %rbp
    3232:	41 5c                	pop    %r12
    3234:	41 5d                	pop    %r13
    3236:	c3                   	retq   

0000000000003237 <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3237:	f3 0f 1e fa          	endbr64 
    323b:	41 57                	push   %r15
    323d:	49 89 f7             	mov    %rsi,%r15
    3240:	41 56                	push   %r14
    3242:	49 89 fe             	mov    %rdi,%r14
    3245:	41 55                	push   %r13
    3247:	49 89 d5             	mov    %rdx,%r13
    324a:	41 54                	push   %r12
    324c:	49 89 cc             	mov    %rcx,%r12
    324f:	55                   	push   %rbp
    3250:	53                   	push   %rbx
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    3251:	31 db                	xor    %ebx,%ebx
{
    3253:	48 83 ec 78          	sub    $0x78,%rsp
    3257:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    325e:	00 00 
    3260:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    3265:	31 c0                	xor    %eax,%eax
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3267:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
    326c:	40 84 ff             	test   %dil,%dil
    326f:	0f 84 d2 09 00 00    	je     3c47 <cbvprintf+0xa10>
		if (*fp != '%') {
    3275:	49 8d 6d 01          	lea    0x1(%r13),%rbp
			OUTC(*fp++);
    3279:	4c 89 fe             	mov    %r15,%rsi
		if (*fp != '%') {
    327c:	40 80 ff 25          	cmp    $0x25,%dil
    3280:	0f 85 89 06 00 00    	jne    390f <cbvprintf+0x6d8>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    3286:	31 c0                	xor    %eax,%eax
    3288:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    328d:	b9 08 00 00 00       	mov    $0x8,%ecx
    3292:	f3 ab                	rep stos %eax,%es:(%rdi)
	if (*sp == '%') {
    3294:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    3299:	41 80 7d 01 25       	cmpb   $0x25,0x1(%r13)
    329e:	75 1c                	jne    32bc <cbvprintf+0x85>
		conv->specifier = *sp++;
    32a0:	c6 44 24 43 25       	movb   $0x25,0x43(%rsp)
    32a5:	49 8d 6d 02          	lea    0x2(%r13),%rbp
		return sp;
    32a9:	e9 df 02 00 00       	jmpq   358d <cbvprintf+0x356>
		switch (*sp) {
    32ae:	7e 15                	jle    32c5 <cbvprintf+0x8e>
    32b0:	3c 2d                	cmp    $0x2d,%al
    32b2:	75 1b                	jne    32cf <cbvprintf+0x98>
			conv->flag_dash = true;
    32b4:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
			++sp;
    32b9:	48 ff c5             	inc    %rbp
		switch (*sp) {
    32bc:	8a 45 00             	mov    0x0(%rbp),%al
    32bf:	3c 2b                	cmp    $0x2b,%al
    32c1:	75 eb                	jne    32ae <cbvprintf+0x77>
    32c3:	eb 25                	jmp    32ea <cbvprintf+0xb3>
    32c5:	3c 20                	cmp    $0x20,%al
    32c7:	74 28                	je     32f1 <cbvprintf+0xba>
    32c9:	3c 23                	cmp    $0x23,%al
    32cb:	74 2b                	je     32f8 <cbvprintf+0xc1>
    32cd:	eb 04                	jmp    32d3 <cbvprintf+0x9c>
    32cf:	3c 30                	cmp    $0x30,%al
    32d1:	74 2c                	je     32ff <cbvprintf+0xc8>
	if (conv->flag_zero && conv->flag_dash) {
    32d3:	8a 44 24 40          	mov    0x40(%rsp),%al
    32d7:	89 c2                	mov    %eax,%edx
    32d9:	83 e2 44             	and    $0x44,%edx
    32dc:	80 fa 44             	cmp    $0x44,%dl
    32df:	75 25                	jne    3306 <cbvprintf+0xcf>
		conv->flag_zero = false;
    32e1:	83 e0 bf             	and    $0xffffffbf,%eax
    32e4:	88 44 24 40          	mov    %al,0x40(%rsp)
    32e8:	eb 1c                	jmp    3306 <cbvprintf+0xcf>
			conv->flag_plus = true;
    32ea:	80 4c 24 40 08       	orb    $0x8,0x40(%rsp)
			break;
    32ef:	eb c8                	jmp    32b9 <cbvprintf+0x82>
			conv->flag_space = true;
    32f1:	80 4c 24 40 10       	orb    $0x10,0x40(%rsp)
			break;
    32f6:	eb c1                	jmp    32b9 <cbvprintf+0x82>
			conv->flag_hash = true;
    32f8:	80 4c 24 40 20       	orb    $0x20,0x40(%rsp)
			break;
    32fd:	eb ba                	jmp    32b9 <cbvprintf+0x82>
			conv->flag_zero = true;
    32ff:	80 4c 24 40 40       	orb    $0x40,0x40(%rsp)
			break;
    3304:	eb b3                	jmp    32b9 <cbvprintf+0x82>
	conv->width_present = true;
    3306:	80 4c 24 40 80       	orb    $0x80,0x40(%rsp)
    330b:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	if (*sp == '*') {
    3310:	80 7d 00 2a          	cmpb   $0x2a,0x0(%rbp)
    3314:	75 0a                	jne    3320 <cbvprintf+0xe9>
		conv->width_star = true;
    3316:	80 4c 24 41 01       	orb    $0x1,0x41(%rsp)
		return ++sp;
    331b:	48 ff c5             	inc    %rbp
    331e:	eb 5d                	jmp    337d <cbvprintf+0x146>
	size_t width = extract_decimal(&sp);
    3320:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    3325:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    332a:	e8 24 fe ff ff       	callq  3153 <extract_decimal>
	if (sp != wp) {
    332f:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    3334:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    3339:	48 39 e9             	cmp    %rbp,%rcx
    333c:	74 3f                	je     337d <cbvprintf+0x146>
		conv->width_present = true;
    333e:	8a 54 24 40          	mov    0x40(%rsp),%dl
		conv->width_value = width;
    3342:	89 44 24 44          	mov    %eax,0x44(%rsp)
				      || (width != (size_t)conv->width_value));
    3346:	bf 01 00 00 00       	mov    $0x1,%edi
		conv->width_present = true;
    334b:	83 ca 80             	or     $0xffffff80,%edx
    334e:	88 54 24 40          	mov    %dl,0x40(%rsp)
		conv->unsupported |= ((conv->width_value < 0)
    3352:	d0 ea                	shr    %dl
    3354:	83 e2 01             	and    $0x1,%edx
				      || (width != (size_t)conv->width_value));
    3357:	85 c0                	test   %eax,%eax
    3359:	78 0e                	js     3369 <cbvprintf+0x132>
    335b:	48 63 f8             	movslq %eax,%rdi
    335e:	48 39 c7             	cmp    %rax,%rdi
    3361:	40 0f 95 c7          	setne  %dil
    3365:	40 0f b6 ff          	movzbl %dil,%edi
		conv->unsupported |= ((conv->width_value < 0)
    3369:	8a 44 24 40          	mov    0x40(%rsp),%al
    336d:	09 fa                	or     %edi,%edx
    336f:	48 89 cd             	mov    %rcx,%rbp
    3372:	01 d2                	add    %edx,%edx
    3374:	83 e0 fd             	and    $0xfffffffd,%eax
    3377:	09 c2                	or     %eax,%edx
    3379:	88 54 24 40          	mov    %dl,0x40(%rsp)
	sp = extract_prec(conv, sp);
    337d:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	conv->prec_present = (*sp == '.');
    3382:	8a 4d 00             	mov    0x0(%rbp),%cl
    3385:	80 f9 2e             	cmp    $0x2e,%cl
    3388:	0f 94 c0             	sete   %al
    338b:	8d 14 00             	lea    (%rax,%rax,1),%edx
    338e:	8a 44 24 41          	mov    0x41(%rsp),%al
    3392:	83 e0 fd             	and    $0xfffffffd,%eax
    3395:	09 d0                	or     %edx,%eax
    3397:	88 44 24 41          	mov    %al,0x41(%rsp)
	if (!conv->prec_present) {
    339b:	80 f9 2e             	cmp    $0x2e,%cl
    339e:	75 6b                	jne    340b <cbvprintf+0x1d4>
	++sp;
    33a0:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    33a4:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
	if (*sp == '*') {
    33a9:	80 7d 01 2a          	cmpb   $0x2a,0x1(%rbp)
    33ad:	75 0d                	jne    33bc <cbvprintf+0x185>
		conv->prec_star = true;
    33af:	83 c8 04             	or     $0x4,%eax
		return ++sp;
    33b2:	48 83 c5 02          	add    $0x2,%rbp
		conv->prec_star = true;
    33b6:	88 44 24 41          	mov    %al,0x41(%rsp)
		return ++sp;
    33ba:	eb 4f                	jmp    340b <cbvprintf+0x1d4>
	size_t prec = extract_decimal(&sp);
    33bc:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    33c1:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    33c6:	e8 88 fd ff ff       	callq  3153 <extract_decimal>
			      || (prec != (size_t)conv->prec_value));
    33cb:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    33d0:	b9 01 00 00 00       	mov    $0x1,%ecx
	size_t prec = extract_decimal(&sp);
    33d5:	48 89 c2             	mov    %rax,%rdx
	conv->prec_value = prec;
    33d8:	89 44 24 48          	mov    %eax,0x48(%rsp)
	conv->unsupported |= ((conv->prec_value < 0)
    33dc:	8a 44 24 40          	mov    0x40(%rsp),%al
    33e0:	d0 e8                	shr    %al
    33e2:	83 e0 01             	and    $0x1,%eax
			      || (prec != (size_t)conv->prec_value));
    33e5:	85 d2                	test   %edx,%edx
    33e7:	78 0c                	js     33f5 <cbvprintf+0x1be>
    33e9:	48 63 ca             	movslq %edx,%rcx
    33ec:	48 39 d1             	cmp    %rdx,%rcx
    33ef:	0f 95 c1             	setne  %cl
    33f2:	0f b6 c9             	movzbl %cl,%ecx
	conv->unsupported |= ((conv->prec_value < 0)
    33f5:	8a 54 24 40          	mov    0x40(%rsp),%dl
    33f9:	09 c8                	or     %ecx,%eax
	return sp;
    33fb:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
	conv->unsupported |= ((conv->prec_value < 0)
    3400:	01 c0                	add    %eax,%eax
    3402:	83 e2 fd             	and    $0xfffffffd,%edx
    3405:	09 d0                	or     %edx,%eax
    3407:	88 44 24 40          	mov    %al,0x40(%rsp)
	switch (*sp) {
    340b:	8a 4d 00             	mov    0x0(%rbp),%cl
    340e:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    3412:	80 f9 6c             	cmp    $0x6c,%cl
    3415:	74 54                	je     346b <cbvprintf+0x234>
    3417:	7f 22                	jg     343b <cbvprintf+0x204>
    3419:	80 f9 68             	cmp    $0x68,%cl
    341c:	74 33                	je     3451 <cbvprintf+0x21a>
    341e:	80 f9 6a             	cmp    $0x6a,%cl
    3421:	74 6e                	je     3491 <cbvprintf+0x25a>
    3423:	80 f9 4c             	cmp    $0x4c,%cl
    3426:	75 7d                	jne    34a5 <cbvprintf+0x26e>
		conv->unsupported = true;
    3428:	8b 44 24 40          	mov    0x40(%rsp),%eax
    342c:	66 25 fd 87          	and    $0x87fd,%ax
    3430:	66 0d 02 40          	or     $0x4002,%ax
    3434:	66 89 44 24 40       	mov    %ax,0x40(%rsp)
		break;
    3439:	eb 72                	jmp    34ad <cbvprintf+0x276>
	switch (*sp) {
    343b:	80 f9 74             	cmp    $0x74,%cl
    343e:	8a 44 24 41          	mov    0x41(%rsp),%al
    3442:	74 59                	je     349d <cbvprintf+0x266>
    3444:	80 f9 7a             	cmp    $0x7a,%cl
    3447:	75 5c                	jne    34a5 <cbvprintf+0x26e>
		conv->length_mod = LENGTH_Z;
    3449:	83 e0 87             	and    $0xffffff87,%eax
    344c:	83 c8 30             	or     $0x30,%eax
    344f:	eb 3a                	jmp    348b <cbvprintf+0x254>
		if (*++sp == 'h') {
    3451:	80 7d 01 68          	cmpb   $0x68,0x1(%rbp)
    3455:	8a 44 24 41          	mov    0x41(%rsp),%al
    3459:	75 08                	jne    3463 <cbvprintf+0x22c>
			conv->length_mod = LENGTH_HH;
    345b:	83 e0 87             	and    $0xffffff87,%eax
    345e:	83 c8 08             	or     $0x8,%eax
    3461:	eb 18                	jmp    347b <cbvprintf+0x244>
			conv->length_mod = LENGTH_H;
    3463:	83 e0 87             	and    $0xffffff87,%eax
    3466:	83 c8 10             	or     $0x10,%eax
    3469:	eb 20                	jmp    348b <cbvprintf+0x254>
		if (*++sp == 'l') {
    346b:	80 7d 01 6c          	cmpb   $0x6c,0x1(%rbp)
    346f:	8a 44 24 41          	mov    0x41(%rsp),%al
    3473:	75 10                	jne    3485 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    3475:	83 e0 87             	and    $0xffffff87,%eax
    3478:	83 c8 20             	or     $0x20,%eax
    347b:	88 44 24 41          	mov    %al,0x41(%rsp)
			++sp;
    347f:	48 8d 55 02          	lea    0x2(%rbp),%rdx
    3483:	eb 28                	jmp    34ad <cbvprintf+0x276>
			conv->length_mod = LENGTH_L;
    3485:	83 e0 87             	and    $0xffffff87,%eax
    3488:	83 c8 18             	or     $0x18,%eax
    348b:	88 44 24 41          	mov    %al,0x41(%rsp)
    348f:	eb 1c                	jmp    34ad <cbvprintf+0x276>
		conv->length_mod = LENGTH_J;
    3491:	8a 44 24 41          	mov    0x41(%rsp),%al
    3495:	83 e0 87             	and    $0xffffff87,%eax
    3498:	83 c8 28             	or     $0x28,%eax
    349b:	eb ee                	jmp    348b <cbvprintf+0x254>
		conv->length_mod = LENGTH_T;
    349d:	83 e0 87             	and    $0xffffff87,%eax
    34a0:	83 c8 38             	or     $0x38,%eax
    34a3:	eb e6                	jmp    348b <cbvprintf+0x254>
		conv->length_mod = LENGTH_NONE;
    34a5:	80 64 24 41 87       	andb   $0x87,0x41(%rsp)
		break;
    34aa:	48 89 ea             	mov    %rbp,%rdx
	conv->specifier = *sp++;
    34ad:	8a 02                	mov    (%rdx),%al
    34af:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
    34b3:	8a 54 24 41          	mov    0x41(%rsp),%dl
    34b7:	88 44 24 43          	mov    %al,0x43(%rsp)
	switch (conv->specifier) {
    34bb:	3c 78                	cmp    $0x78,%al
    34bd:	0f 8f ab 00 00 00    	jg     356e <cbvprintf+0x337>
    34c3:	3c 57                	cmp    $0x57,%al
    34c5:	7f 11                	jg     34d8 <cbvprintf+0x2a1>
    34c7:	3c 41                	cmp    $0x41,%al
    34c9:	74 62                	je     352d <cbvprintf+0x2f6>
    34cb:	83 e8 45             	sub    $0x45,%eax
    34ce:	3c 02                	cmp    $0x2,%al
    34d0:	0f 87 98 00 00 00    	ja     356e <cbvprintf+0x337>
    34d6:	eb 55                	jmp    352d <cbvprintf+0x2f6>
    34d8:	8d 48 a8             	lea    -0x58(%rax),%ecx
    34db:	80 f9 20             	cmp    $0x20,%cl
    34de:	0f 87 8a 00 00 00    	ja     356e <cbvprintf+0x337>
    34e4:	48 8d 3d bd 5d 00 00 	lea    0x5dbd(%rip),%rdi        # 92a8 <default_cmd+0x48>
    34eb:	0f b6 c9             	movzbl %cl,%ecx
    34ee:	48 63 0c 8f          	movslq (%rdi,%rcx,4),%rcx
    34f2:	48 01 f9             	add    %rdi,%rcx
    34f5:	3e ff e1             	notrack jmpq *%rcx
		conv->specifier_cat = SPECIFIER_SINT;
    34f8:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    34fc:	83 e1 f8             	and    $0xfffffff8,%ecx
    34ff:	83 c9 01             	or     $0x1,%ecx
    3502:	eb 0a                	jmp    350e <cbvprintf+0x2d7>
		conv->specifier_cat = SPECIFIER_UINT;
    3504:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    3508:	83 e1 f8             	and    $0xfffffff8,%ecx
    350b:	83 c9 02             	or     $0x2,%ecx
    350e:	f3 0f 1e fa          	endbr64 
		if (conv->length_mod == LENGTH_UPPER_L) {
    3512:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_UINT;
    3515:	88 4c 24 42          	mov    %cl,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    3519:	80 fa 40             	cmp    $0x40,%dl
    351c:	75 05                	jne    3523 <cbvprintf+0x2ec>
			conv->invalid = true;
    351e:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    3523:	31 c9                	xor    %ecx,%ecx
		if (conv->specifier == 'c') {
    3525:	3c 63                	cmp    $0x63,%al
    3527:	75 4c                	jne    3575 <cbvprintf+0x33e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3529:	84 d2                	test   %dl,%dl
    352b:	eb 3c                	jmp    3569 <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_FP;
    352d:	8a 44 24 42          	mov    0x42(%rsp),%al
			unsupported = true;
    3531:	b1 01                	mov    $0x1,%cl
		conv->specifier_cat = SPECIFIER_FP;
    3533:	83 e0 f8             	and    $0xfffffff8,%eax
    3536:	83 c8 04             	or     $0x4,%eax
    3539:	88 44 24 42          	mov    %al,0x42(%rsp)
			break;
    353d:	eb 36                	jmp    3575 <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    353f:	8a 44 24 42          	mov    0x42(%rsp),%al
		if (conv->length_mod == LENGTH_UPPER_L) {
    3543:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_PTR;
    3546:	83 e0 f8             	and    $0xfffffff8,%eax
    3549:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod == LENGTH_UPPER_L) {
    354c:	80 fa 40             	cmp    $0x40,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    354f:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    3553:	0f 94 c1             	sete   %cl
    3556:	eb 1d                	jmp    3575 <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    3558:	8a 44 24 42          	mov    0x42(%rsp),%al
    355c:	83 e0 f8             	and    $0xfffffff8,%eax
    355f:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod != LENGTH_NONE) {
    3562:	80 e2 78             	and    $0x78,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    3565:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod != LENGTH_NONE) {
    3569:	0f 95 c1             	setne  %cl
    356c:	eb 07                	jmp    3575 <cbvprintf+0x33e>
		conv->invalid = true;
    356e:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    3573:	31 c9                	xor    %ecx,%ecx
	conv->unsupported |= unsupported;
    3575:	8a 54 24 40          	mov    0x40(%rsp),%dl
    3579:	89 d0                	mov    %edx,%eax
    357b:	83 e2 fd             	and    $0xfffffffd,%edx
    357e:	d0 e8                	shr    %al
    3580:	83 e0 01             	and    $0x1,%eax
    3583:	09 c8                	or     %ecx,%eax
    3585:	01 c0                	add    %eax,%eax
    3587:	09 d0                	or     %edx,%eax
    3589:	88 44 24 40          	mov    %al,0x40(%rsp)
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set with if present.
		 */
		if (conv->width_star) {
    358d:	8a 4c 24 41          	mov    0x41(%rsp),%cl
    3591:	f6 c1 01             	test   $0x1,%cl
    3594:	74 3c                	je     35d2 <cbvprintf+0x39b>
			width = va_arg(ap, int);
    3596:	41 8b 14 24          	mov    (%r12),%edx
    359a:	83 fa 2f             	cmp    $0x2f,%edx
    359d:	77 10                	ja     35af <cbvprintf+0x378>
    359f:	89 d0                	mov    %edx,%eax
    35a1:	83 c2 08             	add    $0x8,%edx
    35a4:	49 03 44 24 10       	add    0x10(%r12),%rax
    35a9:	41 89 14 24          	mov    %edx,(%r12)
    35ad:	eb 0e                	jmp    35bd <cbvprintf+0x386>
    35af:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    35b4:	48 8d 50 08          	lea    0x8(%rax),%rdx
    35b8:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    35bd:	8b 00                	mov    (%rax),%eax
    35bf:	89 44 24 08          	mov    %eax,0x8(%rsp)

			if (width < 0) {
    35c3:	85 c0                	test   %eax,%eax
    35c5:	79 22                	jns    35e9 <cbvprintf+0x3b2>
				conv->flag_dash = true;
    35c7:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
				width = -width;
    35cc:	f7 5c 24 08          	negl   0x8(%rsp)
    35d0:	eb 17                	jmp    35e9 <cbvprintf+0x3b2>
			}
		} else if (conv->width_present) {
    35d2:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
		int width = -1;
    35d7:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
    35de:	ff 
		} else if (conv->width_present) {
    35df:	79 08                	jns    35e9 <cbvprintf+0x3b2>
			width = conv->width_value;
    35e1:	8b 44 24 44          	mov    0x44(%rsp),%eax
    35e5:	89 44 24 08          	mov    %eax,0x8(%rsp)

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    35e9:	f6 c1 04             	test   $0x4,%cl
    35ec:	74 3a                	je     3628 <cbvprintf+0x3f1>
			int arg = va_arg(ap, int);
    35ee:	41 8b 14 24          	mov    (%r12),%edx
    35f2:	83 fa 2f             	cmp    $0x2f,%edx
    35f5:	77 10                	ja     3607 <cbvprintf+0x3d0>
    35f7:	89 d0                	mov    %edx,%eax
    35f9:	83 c2 08             	add    $0x8,%edx
    35fc:	49 03 44 24 10       	add    0x10(%r12),%rax
    3601:	41 89 14 24          	mov    %edx,(%r12)
    3605:	eb 0e                	jmp    3615 <cbvprintf+0x3de>
    3607:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    360c:	48 8d 50 08          	lea    0x8(%rax),%rdx
    3610:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    3615:	44 8b 10             	mov    (%rax),%r10d

			if (arg < 0) {
    3618:	45 85 d2             	test   %r10d,%r10d
    361b:	79 19                	jns    3636 <cbvprintf+0x3ff>
				conv->prec_present = false;
    361d:	80 64 24 41 fd       	andb   $0xfd,0x41(%rsp)
		int precision = -1;
    3622:	41 83 ca ff          	or     $0xffffffff,%r10d
    3626:	eb 0e                	jmp    3636 <cbvprintf+0x3ff>
    3628:	41 83 ca ff          	or     $0xffffffff,%r10d
			} else {
				precision = arg;
			}
		} else if (conv->prec_present) {
    362c:	80 e1 02             	and    $0x2,%cl
    362f:	74 05                	je     3636 <cbvprintf+0x3ff>
			precision = conv->prec_value;
    3631:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3636:	8a 54 24 41          	mov    0x41(%rsp),%dl
			= (enum specifier_cat_enum)conv->specifier_cat;
    363a:	8a 44 24 42          	mov    0x42(%rsp),%al
		conv->pad0_value = 0;
    363e:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
    3645:	00 00 
			= (enum length_mod_enum)conv->length_mod;
    3647:	c0 ea 03             	shr    $0x3,%dl
		enum specifier_cat_enum specifier_cat
    364a:	83 e0 07             	and    $0x7,%eax
			= (enum length_mod_enum)conv->length_mod;
    364d:	83 e2 0f             	and    $0xf,%edx
		enum length_mod_enum length_mod
    3650:	0f b6 ca             	movzbl %dl,%ecx
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3653:	83 f8 01             	cmp    $0x1,%eax
    3656:	0f 85 d8 00 00 00    	jne    3734 <cbvprintf+0x4fd>
			switch (length_mod) {
    365c:	41 8b 04 24          	mov    (%r12),%eax
    3660:	80 fa 05             	cmp    $0x5,%dl
    3663:	0f 84 1e 01 00 00    	je     3787 <cbvprintf+0x550>
    3669:	77 10                	ja     367b <cbvprintf+0x444>
    366b:	80 fa 03             	cmp    $0x3,%dl
    366e:	74 3f                	je     36af <cbvprintf+0x478>
    3670:	80 fa 04             	cmp    $0x4,%dl
    3673:	0f 84 0e 01 00 00    	je     3787 <cbvprintf+0x550>
    3679:	eb 0c                	jmp    3687 <cbvprintf+0x450>
    367b:	8d 7a 0a             	lea    0xa(%rdx),%edi
    367e:	83 e7 0f             	and    $0xf,%edi
    3681:	40 80 ff 01          	cmp    $0x1,%dil
    3685:	76 5e                	jbe    36e5 <cbvprintf+0x4ae>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
    3687:	83 f8 2f             	cmp    $0x2f,%eax
    368a:	77 10                	ja     369c <cbvprintf+0x465>
    368c:	89 c7                	mov    %eax,%edi
    368e:	83 c0 08             	add    $0x8,%eax
    3691:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    3696:	41 89 04 24          	mov    %eax,(%r12)
    369a:	eb 0e                	jmp    36aa <cbvprintf+0x473>
    369c:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    36a1:	48 8d 47 08          	lea    0x8(%rdi),%rax
    36a5:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    36aa:	48 63 07             	movslq (%rdi),%rax
    36ad:	eb 5c                	jmp    370b <cbvprintf+0x4d4>
				break;
			case LENGTH_L:
				if (WCHAR_IS_SIGNED
    36af:	80 7c 24 43 63       	cmpb   $0x63,0x43(%rsp)
    36b4:	0f 85 cd 00 00 00    	jne    3787 <cbvprintf+0x550>
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
    36ba:	83 f8 2f             	cmp    $0x2f,%eax
    36bd:	77 10                	ja     36cf <cbvprintf+0x498>
    36bf:	89 c1                	mov    %eax,%ecx
    36c1:	83 c0 08             	add    $0x8,%eax
    36c4:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    36c9:	41 89 04 24          	mov    %eax,(%r12)
    36cd:	eb 0e                	jmp    36dd <cbvprintf+0x4a6>
    36cf:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    36d4:	48 8d 41 08          	lea    0x8(%rcx),%rax
    36d8:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    36dd:	48 63 01             	movslq (%rcx),%rax
    36e0:	e9 b1 01 00 00       	jmpq   3896 <cbvprintf+0x65f>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
    36e5:	83 f8 2f             	cmp    $0x2f,%eax
    36e8:	77 10                	ja     36fa <cbvprintf+0x4c3>
    36ea:	89 c7                	mov    %eax,%edi
    36ec:	83 c0 08             	add    $0x8,%eax
    36ef:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    36f4:	41 89 04 24          	mov    %eax,(%r12)
    36f8:	eb 0e                	jmp    3708 <cbvprintf+0x4d1>
    36fa:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    36ff:	48 8d 47 08          	lea    0x8(%rdi),%rax
    3703:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    3708:	48 8b 07             	mov    (%rdi),%rax
				value->sint =
    370b:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    3710:	83 f9 01             	cmp    $0x1,%ecx
    3713:	75 0b                	jne    3720 <cbvprintf+0x4e9>
				value->sint = (char)value->sint;
    3715:	48 0f be 44 24 30    	movsbq 0x30(%rsp),%rax
    371b:	e9 76 01 00 00       	jmpq   3896 <cbvprintf+0x65f>
			} else if (length_mod == LENGTH_H) {
    3720:	83 f9 02             	cmp    $0x2,%ecx
    3723:	0f 85 72 01 00 00    	jne    389b <cbvprintf+0x664>
				value->sint = (short)value->sint;
    3729:	48 0f bf 44 24 30    	movswq 0x30(%rsp),%rax
    372f:	e9 62 01 00 00       	jmpq   3896 <cbvprintf+0x65f>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3734:	83 f8 02             	cmp    $0x2,%eax
    3737:	0f 85 ca 00 00 00    	jne    3807 <cbvprintf+0x5d0>
			switch (length_mod) {
    373d:	41 8b 04 24          	mov    (%r12),%eax
    3741:	80 fa 05             	cmp    $0x5,%dl
    3744:	74 41                	je     3787 <cbvprintf+0x550>
    3746:	77 0c                	ja     3754 <cbvprintf+0x51d>
    3748:	80 fa 03             	cmp    $0x3,%dl
    374b:	74 3a                	je     3787 <cbvprintf+0x550>
    374d:	80 fa 04             	cmp    $0x4,%dl
    3750:	74 35                	je     3787 <cbvprintf+0x550>
    3752:	eb 0c                	jmp    3760 <cbvprintf+0x529>
    3754:	8d 7a 0a             	lea    0xa(%rdx),%edi
    3757:	83 e7 0f             	and    $0xf,%edi
    375a:	40 80 ff 01          	cmp    $0x1,%dil
    375e:	76 52                	jbe    37b2 <cbvprintf+0x57b>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
    3760:	83 f8 2f             	cmp    $0x2f,%eax
    3763:	77 10                	ja     3775 <cbvprintf+0x53e>
    3765:	89 c7                	mov    %eax,%edi
    3767:	83 c0 08             	add    $0x8,%eax
    376a:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    376f:	41 89 04 24          	mov    %eax,(%r12)
    3773:	eb 0e                	jmp    3783 <cbvprintf+0x54c>
    3775:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    377a:	48 8d 47 08          	lea    0x8(%rdi),%rax
    377e:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    3783:	8b 07                	mov    (%rdi),%eax
    3785:	eb 51                	jmp    37d8 <cbvprintf+0x5a1>
					(uint_value_type)va_arg(ap,
						unsigned long long);
				break;
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
    3787:	83 f8 2f             	cmp    $0x2f,%eax
    378a:	77 10                	ja     379c <cbvprintf+0x565>
    378c:	89 c1                	mov    %eax,%ecx
    378e:	83 c0 08             	add    $0x8,%eax
    3791:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    3796:	41 89 04 24          	mov    %eax,(%r12)
    379a:	eb 0e                	jmp    37aa <cbvprintf+0x573>
    379c:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    37a1:	48 8d 41 08          	lea    0x8(%rcx),%rax
    37a5:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    37aa:	48 8b 01             	mov    (%rcx),%rax
    37ad:	e9 e4 00 00 00       	jmpq   3896 <cbvprintf+0x65f>
								uintmax_t);
				break;
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
    37b2:	83 f8 2f             	cmp    $0x2f,%eax
    37b5:	77 10                	ja     37c7 <cbvprintf+0x590>
    37b7:	89 c7                	mov    %eax,%edi
    37b9:	83 c0 08             	add    $0x8,%eax
    37bc:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    37c1:	41 89 04 24          	mov    %eax,(%r12)
    37c5:	eb 0e                	jmp    37d5 <cbvprintf+0x59e>
    37c7:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    37cc:	48 8d 47 08          	lea    0x8(%rdi),%rax
    37d0:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    37d5:	48 8b 07             	mov    (%rdi),%rax
				value->uint =
    37d8:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    37dd:	83 f9 01             	cmp    $0x1,%ecx
    37e0:	75 0e                	jne    37f0 <cbvprintf+0x5b9>
				value->uint = (unsigned char)value->uint;
    37e2:	48 81 64 24 30 ff 00 	andq   $0xff,0x30(%rsp)
    37e9:	00 00 
    37eb:	e9 ab 00 00 00       	jmpq   389b <cbvprintf+0x664>
			} else if (length_mod == LENGTH_H) {
    37f0:	83 f9 02             	cmp    $0x2,%ecx
    37f3:	0f 85 a2 00 00 00    	jne    389b <cbvprintf+0x664>
				value->uint = (unsigned short)value->uint;
    37f9:	48 81 64 24 30 ff ff 	andq   $0xffff,0x30(%rsp)
    3800:	00 00 
    3802:	e9 94 00 00 00       	jmpq   389b <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    3807:	83 f8 04             	cmp    $0x4,%eax
    380a:	75 5b                	jne    3867 <cbvprintf+0x630>
			if (length_mod == LENGTH_UPPER_L) {
    380c:	83 f9 08             	cmp    $0x8,%ecx
    380f:	75 1e                	jne    382f <cbvprintf+0x5f8>
				value->ldbl = va_arg(ap, long double);
    3811:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3816:	48 83 c0 0f          	add    $0xf,%rax
    381a:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    381e:	48 8d 48 10          	lea    0x10(%rax),%rcx
    3822:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    3827:	db 28                	fldt   (%rax)
    3829:	db 7c 24 30          	fstpt  0x30(%rsp)
    382d:	eb 6c                	jmp    389b <cbvprintf+0x664>
			} else {
				value->dbl = va_arg(ap, double);
    382f:	41 8b 4c 24 04       	mov    0x4(%r12),%ecx
    3834:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
    383a:	77 11                	ja     384d <cbvprintf+0x616>
    383c:	89 c8                	mov    %ecx,%eax
    383e:	83 c1 10             	add    $0x10,%ecx
    3841:	49 03 44 24 10       	add    0x10(%r12),%rax
    3846:	41 89 4c 24 04       	mov    %ecx,0x4(%r12)
    384b:	eb 0e                	jmp    385b <cbvprintf+0x624>
    384d:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3852:	48 8d 48 08          	lea    0x8(%rax),%rcx
    3856:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    385b:	f2 0f 10 00          	movsd  (%rax),%xmm0
    385f:	f2 0f 11 44 24 30    	movsd  %xmm0,0x30(%rsp)
    3865:	eb 34                	jmp    389b <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3867:	83 f8 03             	cmp    $0x3,%eax
    386a:	75 2f                	jne    389b <cbvprintf+0x664>
			value->ptr = va_arg(ap, void *);
    386c:	41 8b 0c 24          	mov    (%r12),%ecx
    3870:	83 f9 2f             	cmp    $0x2f,%ecx
    3873:	77 10                	ja     3885 <cbvprintf+0x64e>
    3875:	89 c8                	mov    %ecx,%eax
    3877:	83 c1 08             	add    $0x8,%ecx
    387a:	49 03 44 24 10       	add    0x10(%r12),%rax
    387f:	41 89 0c 24          	mov    %ecx,(%r12)
    3883:	eb 0e                	jmp    3893 <cbvprintf+0x65c>
    3885:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    388a:	48 8d 48 08          	lea    0x8(%rax),%rcx
    388e:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    3893:	48 8b 00             	mov    (%rax),%rax
    3896:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    389b:	8a 4c 24 40          	mov    0x40(%rsp),%cl
    389f:	f6 c1 03             	test   $0x3,%cl
    38a2:	74 23                	je     38c7 <cbvprintf+0x690>
			OUTS(sp, fp);
    38a4:	48 89 e9             	mov    %rbp,%rcx
    38a7:	4c 89 ea             	mov    %r13,%rdx
    38aa:	4c 89 fe             	mov    %r15,%rsi
    38ad:	4c 89 f7             	mov    %r14,%rdi
    38b0:	e8 4d f8 ff ff       	callq  3102 <outs>
    38b5:	85 c0                	test   %eax,%eax
    38b7:	0f 88 8c 03 00 00    	js     3c49 <cbvprintf+0xa12>
    38bd:	48 98                	cltq   
    38bf:	48 01 c3             	add    %rax,%rbx
			continue;
    38c2:	e9 78 03 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    38c7:	8a 44 24 43          	mov    0x43(%rsp),%al
    38cb:	3c 78                	cmp    $0x78,%al
    38cd:	0f 87 6c 03 00 00    	ja     3c3f <cbvprintf+0xa08>
    38d3:	3c 62                	cmp    $0x62,%al
    38d5:	77 11                	ja     38e8 <cbvprintf+0x6b1>
    38d7:	3c 25                	cmp    $0x25,%al
    38d9:	74 2c                	je     3907 <cbvprintf+0x6d0>
    38db:	3c 58                	cmp    $0x58,%al
    38dd:	0f 84 c6 00 00 00    	je     39a9 <cbvprintf+0x772>
    38e3:	e9 57 03 00 00       	jmpq   3c3f <cbvprintf+0xa08>
    38e8:	83 e8 63             	sub    $0x63,%eax
    38eb:	3c 15                	cmp    $0x15,%al
    38ed:	0f 87 4c 03 00 00    	ja     3c3f <cbvprintf+0xa08>
    38f3:	48 8d 3d 32 5a 00 00 	lea    0x5a32(%rip),%rdi        # 932c <default_cmd+0xcc>
    38fa:	0f b6 c0             	movzbl %al,%eax
    38fd:	48 63 04 87          	movslq (%rdi,%rax,4),%rax
    3901:	48 01 f8             	add    %rdi,%rax
    3904:	3e ff e0             	notrack jmpq *%rax
		case '%':
			OUTC('%');
    3907:	4c 89 fe             	mov    %r15,%rsi
    390a:	bf 25 00 00 00       	mov    $0x25,%edi
    390f:	31 c0                	xor    %eax,%eax
    3911:	41 ff d6             	callq  *%r14
    3914:	85 c0                	test   %eax,%eax
    3916:	0f 88 2d 03 00 00    	js     3c49 <cbvprintf+0xa12>
    391c:	48 ff c3             	inc    %rbx
			break;
    391f:	e9 1b 03 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		case 's': {
			bps = (const char *)value->ptr;
    3924:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13

			size_t len;

			if (precision >= 0) {
    3929:	45 85 d2             	test   %r10d,%r10d
    392c:	78 0d                	js     393b <cbvprintf+0x704>
				len = strnlen(bps, precision);
    392e:	49 63 f2             	movslq %r10d,%rsi
    3931:	4c 89 ef             	mov    %r13,%rdi
    3934:	e8 b7 eb ff ff       	callq  24f0 <strnlen@plt>
    3939:	eb 14                	jmp    394f <cbvprintf+0x718>
			} else {
				len = strlen(bps);
    393b:	31 c0                	xor    %eax,%eax
    393d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    3941:	4c 89 ef             	mov    %r13,%rdi
    3944:	f2 ae                	repnz scas %es:(%rdi),%al
    3946:	48 89 c8             	mov    %rcx,%rax
    3949:	48 f7 d0             	not    %rax
    394c:	48 ff c8             	dec    %rax
			}

			bpe = bps + len;
    394f:	4c 01 e8             	add    %r13,%rax
		char sign = 0;
    3952:	45 31 c9             	xor    %r9d,%r9d
			bpe = bps + len;
    3955:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			precision = -1;

			break;
    395a:	e9 55 01 00 00       	jmpq   3ab4 <cbvprintf+0x87d>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    395f:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			bpe = buf + 1;
			break;
    3964:	45 31 c9             	xor    %r9d,%r9d
			bps = buf;
    3967:	4c 8d 6c 24 52       	lea    0x52(%rsp),%r13
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    396c:	88 44 24 52          	mov    %al,0x52(%rsp)
			bpe = buf + 1;
    3970:	48 8d 44 24 53       	lea    0x53(%rsp),%rax
    3975:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			break;
    397a:	e9 3e 01 00 00       	jmpq   3abd <cbvprintf+0x886>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
				sign = '+';
    397f:	41 b1 2b             	mov    $0x2b,%r9b
			if (conv->flag_plus) {
    3982:	f6 c1 08             	test   $0x8,%cl
    3985:	75 0b                	jne    3992 <cbvprintf+0x75b>
			} else if (conv->flag_space) {
				sign = ' ';
    3987:	80 e1 10             	and    $0x10,%cl
    398a:	41 0f 95 c1          	setne  %r9b
    398e:	41 c1 e1 05          	shl    $0x5,%r9d

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    3992:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			if (sint < 0) {
    3997:	48 85 c0             	test   %rax,%rax
    399a:	79 10                	jns    39ac <cbvprintf+0x775>
				sign = '-';
				value->uint = (uint_value_type)-sint;
    399c:	48 f7 d8             	neg    %rax
				sign = '-';
    399f:	41 b1 2d             	mov    $0x2d,%r9b
				value->uint = (uint_value_type)-sint;
    39a2:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    39a7:	eb 03                	jmp    39ac <cbvprintf+0x775>
		switch (conv->specifier) {
    39a9:	45 31 c9             	xor    %r9d,%r9d
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    39ac:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    39b1:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    39b6:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    39bb:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    39c0:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    39c5:	e8 c0 f7 ff ff       	callq  318a <encode_uint>
    39ca:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
    39cf:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    39d4:	49 89 c5             	mov    %rax,%r13
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    39d7:	45 85 d2             	test   %r10d,%r10d
    39da:	48 8d 44 24 68       	lea    0x68(%rsp),%rax
    39df:	0f 88 ca 00 00 00    	js     3aaf <cbvprintf+0x878>
				size_t len = bpe - bps;
    39e5:	48 89 c1             	mov    %rax,%rcx
				 * conversions with precision.
				 */
				conv->flag_zero = false;

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    39e8:	49 63 d2             	movslq %r10d,%rdx
				conv->flag_zero = false;
    39eb:	80 64 24 40 bf       	andb   $0xbf,0x40(%rsp)
				size_t len = bpe - bps;
    39f0:	4c 29 e9             	sub    %r13,%rcx
		const char *bpe = buf + sizeof(buf);
    39f3:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
				if (len < (size_t)precision) {
    39f8:	48 39 ca             	cmp    %rcx,%rdx
    39fb:	0f 86 b3 00 00 00    	jbe    3ab4 <cbvprintf+0x87d>
					conv->pad0_value = precision - (int)len;
    3a01:	41 29 ca             	sub    %ecx,%r10d
    3a04:	44 89 54 24 44       	mov    %r10d,0x44(%rsp)
    3a09:	e9 a6 00 00 00       	jmpq   3ab4 <cbvprintf+0x87d>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3a0e:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3a13:	48 8d 05 02 5d 00 00 	lea    0x5d02(%rip),%rax        # 971c <default_cmd+0x4bc>
    3a1a:	45 31 c9             	xor    %r9d,%r9d
    3a1d:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			bps = "(nil)";
    3a22:	4c 8d 68 fb          	lea    -0x5(%rax),%r13
			if (value->ptr != NULL) {
    3a26:	48 85 ff             	test   %rdi,%rdi
    3a29:	0f 84 8e 00 00 00    	je     3abd <cbvprintf+0x886>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a2f:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    3a34:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    3a39:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    3a3e:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    3a43:	e8 42 f7 ff ff       	callq  318a <encode_uint>
				goto prec_int_pad0;
    3a48:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    3a4d:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3a52:	49 89 c5             	mov    %rax,%r13
				conv->altform_0c = true;
    3a55:	66 8b 44 24 42       	mov    0x42(%rsp),%ax
    3a5a:	66 25 ef 00          	and    $0xef,%ax
    3a5e:	66 0d 10 78          	or     $0x7810,%ax
    3a62:	66 89 44 24 42       	mov    %ax,0x42(%rsp)
				goto prec_int_pad0;
    3a67:	e9 6b ff ff ff       	jmpq   39d7 <cbvprintf+0x7a0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3a6c:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    3a71:	48 63 c3             	movslq %ebx,%rax
    3a74:	80 fa 07             	cmp    $0x7,%dl
    3a77:	0f 87 c2 01 00 00    	ja     3c3f <cbvprintf+0xa08>
    3a7d:	48 8d 35 00 59 00 00 	lea    0x5900(%rip),%rsi        # 9384 <default_cmd+0x124>
    3a84:	0f b6 d2             	movzbl %dl,%edx
    3a87:	48 63 14 96          	movslq (%rsi,%rdx,4),%rdx
    3a8b:	48 01 f2             	add    %rsi,%rdx
    3a8e:	3e ff e2             	notrack jmpq *%rdx
		*(int *)dp = count;
    3a91:	89 01                	mov    %eax,(%rcx)
		break;
    3a93:	e9 a7 01 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		*(signed char *)dp = (signed char)count;
    3a98:	88 19                	mov    %bl,(%rcx)
		break;
    3a9a:	e9 a0 01 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		*(short *)dp = (short)count;
    3a9f:	66 89 19             	mov    %bx,(%rcx)
		break;
    3aa2:	e9 98 01 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    3aa7:	48 89 01             	mov    %rax,(%rcx)
		break;
    3aaa:	e9 90 01 00 00       	jmpq   3c3f <cbvprintf+0xa08>
		const char *bpe = buf + sizeof(buf);
    3aaf:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    3ab4:	4d 85 ed             	test   %r13,%r13
    3ab7:	0f 84 82 01 00 00    	je     3c3f <cbvprintf+0xa08>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    3abd:	48 8b 44 24 10       	mov    0x10(%rsp),%rax

		if (sign != 0) {
			nj_len += 1U;
		}

		if (conv->altform_0c) {
    3ac2:	8a 4c 24 42          	mov    0x42(%rsp),%cl
		size_t nj_len = (bpe - bps);
    3ac6:	4c 29 e8             	sub    %r13,%rax
			nj_len += 1U;
    3ac9:	41 80 f9 01          	cmp    $0x1,%r9b
    3acd:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		if (conv->altform_0c) {
    3ad1:	f6 c1 10             	test   $0x10,%cl
    3ad4:	74 06                	je     3adc <cbvprintf+0x8a5>
			nj_len += 2U;
    3ad6:	48 83 c0 02          	add    $0x2,%rax
    3ada:	eb 0c                	jmp    3ae8 <cbvprintf+0x8b1>
		} else if (conv->altform_0) {
    3adc:	89 ca                	mov    %ecx,%edx
    3ade:	83 e2 08             	and    $0x8,%edx
			nj_len += 1U;
    3ae1:	80 fa 01             	cmp    $0x1,%dl
    3ae4:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		}

		nj_len += conv->pad0_value;
    3ae8:	48 63 54 24 44       	movslq 0x44(%rsp),%rdx
    3aed:	48 01 d0             	add    %rdx,%rax
		if (conv->pad_fp) {
    3af0:	80 e1 40             	and    $0x40,%cl
    3af3:	74 08                	je     3afd <cbvprintf+0x8c6>
			nj_len += conv->pad0_pre_exp;
    3af5:	48 63 54 24 48       	movslq 0x48(%rsp),%rdx
    3afa:	48 01 d0             	add    %rdx,%rax
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3afd:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
    3b02:	7e 73                	jle    3b77 <cbvprintf+0x940>
			width -= (int)nj_len;
    3b04:	29 44 24 08          	sub    %eax,0x8(%rsp)

			if (!conv->flag_dash) {
    3b08:	8a 44 24 40          	mov    0x40(%rsp),%al
    3b0c:	a8 04                	test   $0x4,%al
    3b0e:	75 67                	jne    3b77 <cbvprintf+0x940>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3b10:	a8 40                	test   $0x40,%al
    3b12:	74 21                	je     3b35 <cbvprintf+0x8fe>
					if (sign != 0) {
    3b14:	45 84 c9             	test   %r9b,%r9b
    3b17:	74 20                	je     3b39 <cbvprintf+0x902>
						OUTC(sign);
    3b19:	31 c0                	xor    %eax,%eax
    3b1b:	41 0f be f9          	movsbl %r9b,%edi
    3b1f:	4c 89 fe             	mov    %r15,%rsi
    3b22:	41 ff d6             	callq  *%r14
    3b25:	85 c0                	test   %eax,%eax
    3b27:	0f 88 1c 01 00 00    	js     3c49 <cbvprintf+0xa12>
    3b2d:	48 ff c3             	inc    %rbx
						sign = 0;
    3b30:	45 31 c9             	xor    %r9d,%r9d
    3b33:	eb 04                	jmp    3b39 <cbvprintf+0x902>
				char pad = ' ';
    3b35:	b0 20                	mov    $0x20,%al
    3b37:	eb 02                	jmp    3b3b <cbvprintf+0x904>
					}
					pad = '0';
    3b39:	b0 30                	mov    $0x30,%al
    3b3b:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
				}

				while (width-- > 0) {
					OUTC(pad);
    3b3f:	0f be d0             	movsbl %al,%edx
				while (width-- > 0) {
    3b42:	ff 4c 24 08          	decl   0x8(%rsp)
    3b46:	85 c9                	test   %ecx,%ecx
    3b48:	7e 2d                	jle    3b77 <cbvprintf+0x940>
					OUTC(pad);
    3b4a:	31 c0                	xor    %eax,%eax
    3b4c:	44 88 4c 24 1f       	mov    %r9b,0x1f(%rsp)
    3b51:	4c 89 fe             	mov    %r15,%rsi
    3b54:	89 d7                	mov    %edx,%edi
    3b56:	89 54 24 18          	mov    %edx,0x18(%rsp)
    3b5a:	41 ff d6             	callq  *%r14
    3b5d:	85 c0                	test   %eax,%eax
    3b5f:	0f 88 e4 00 00 00    	js     3c49 <cbvprintf+0xa12>
				while (width-- > 0) {
    3b65:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
    3b69:	8b 54 24 18          	mov    0x18(%rsp),%edx
					OUTC(pad);
    3b6d:	48 ff c3             	inc    %rbx
    3b70:	44 8a 4c 24 1f       	mov    0x1f(%rsp),%r9b
    3b75:	eb cb                	jmp    3b42 <cbvprintf+0x90b>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3b77:	45 84 c9             	test   %r9b,%r9b
    3b7a:	74 17                	je     3b93 <cbvprintf+0x95c>
			OUTC(sign);
    3b7c:	31 c0                	xor    %eax,%eax
    3b7e:	41 0f be f9          	movsbl %r9b,%edi
    3b82:	4c 89 fe             	mov    %r15,%rsi
    3b85:	41 ff d6             	callq  *%r14
    3b88:	85 c0                	test   %eax,%eax
    3b8a:	0f 88 b9 00 00 00    	js     3c49 <cbvprintf+0xa12>
    3b90:	48 ff c3             	inc    %rbx
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    3b93:	8a 44 24 42          	mov    0x42(%rsp),%al
    3b97:	a8 10                	test   $0x10,%al
    3b99:	75 04                	jne    3b9f <cbvprintf+0x968>
    3b9b:	a8 08                	test   $0x8,%al
    3b9d:	74 18                	je     3bb7 <cbvprintf+0x980>
				OUTC('0');
    3b9f:	31 c0                	xor    %eax,%eax
    3ba1:	4c 89 fe             	mov    %r15,%rsi
    3ba4:	bf 30 00 00 00       	mov    $0x30,%edi
    3ba9:	41 ff d6             	callq  *%r14
    3bac:	85 c0                	test   %eax,%eax
    3bae:	0f 88 95 00 00 00    	js     3c49 <cbvprintf+0xa12>
    3bb4:	48 ff c3             	inc    %rbx
			}

			if (conv->altform_0c) {
    3bb7:	f6 44 24 42 10       	testb  $0x10,0x42(%rsp)
    3bbc:	74 14                	je     3bd2 <cbvprintf+0x99b>
				OUTC(conv->specifier);
    3bbe:	31 c0                	xor    %eax,%eax
    3bc0:	0f b6 7c 24 43       	movzbl 0x43(%rsp),%edi
    3bc5:	4c 89 fe             	mov    %r15,%rsi
    3bc8:	41 ff d6             	callq  *%r14
    3bcb:	85 c0                	test   %eax,%eax
    3bcd:	78 7a                	js     3c49 <cbvprintf+0xa12>
    3bcf:	48 ff c3             	inc    %rbx
			}

			pad_len = conv->pad0_value;
			while (pad_len-- > 0) {
    3bd2:	8b 44 24 44          	mov    0x44(%rsp),%eax
    3bd6:	01 d8                	add    %ebx,%eax
    3bd8:	89 44 24 18          	mov    %eax,0x18(%rsp)
    3bdc:	8b 44 24 18          	mov    0x18(%rsp),%eax
    3be0:	29 d8                	sub    %ebx,%eax
    3be2:	85 c0                	test   %eax,%eax
    3be4:	7e 16                	jle    3bfc <cbvprintf+0x9c5>
				OUTC('0');
    3be6:	31 c0                	xor    %eax,%eax
    3be8:	4c 89 fe             	mov    %r15,%rsi
    3beb:	bf 30 00 00 00       	mov    $0x30,%edi
    3bf0:	41 ff d6             	callq  *%r14
    3bf3:	85 c0                	test   %eax,%eax
    3bf5:	78 52                	js     3c49 <cbvprintf+0xa12>
    3bf7:	48 ff c3             	inc    %rbx
    3bfa:	eb e0                	jmp    3bdc <cbvprintf+0x9a5>
			}

			OUTS(bps, bpe);
    3bfc:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    3c01:	4c 89 ea             	mov    %r13,%rdx
    3c04:	4c 89 fe             	mov    %r15,%rsi
    3c07:	4c 89 f7             	mov    %r14,%rdi
    3c0a:	e8 f3 f4 ff ff       	callq  3102 <outs>
    3c0f:	85 c0                	test   %eax,%eax
    3c11:	78 36                	js     3c49 <cbvprintf+0xa12>
    3c13:	44 8b 6c 24 08       	mov    0x8(%rsp),%r13d
    3c18:	48 98                	cltq   
    3c1a:	48 01 c3             	add    %rax,%rbx
    3c1d:	41 01 dd             	add    %ebx,%r13d
		}

		/* Finish left justification */
		while (width > 0) {
    3c20:	44 89 e8             	mov    %r13d,%eax
    3c23:	29 d8                	sub    %ebx,%eax
    3c25:	85 c0                	test   %eax,%eax
    3c27:	7e 16                	jle    3c3f <cbvprintf+0xa08>
			OUTC(' ');
    3c29:	31 c0                	xor    %eax,%eax
    3c2b:	4c 89 fe             	mov    %r15,%rsi
    3c2e:	bf 20 00 00 00       	mov    $0x20,%edi
    3c33:	41 ff d6             	callq  *%r14
    3c36:	85 c0                	test   %eax,%eax
    3c38:	78 0f                	js     3c49 <cbvprintf+0xa12>
    3c3a:	48 ff c3             	inc    %rbx
			--width;
    3c3d:	eb e1                	jmp    3c20 <cbvprintf+0x9e9>
			OUTS(bps, bpe);
    3c3f:	49 89 ed             	mov    %rbp,%r13
    3c42:	e9 20 f6 ff ff       	jmpq   3267 <cbvprintf+0x30>
		}
	}

	return count;
    3c47:	89 d8                	mov    %ebx,%eax
#undef OUTS
#undef OUTC
}
    3c49:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
    3c4e:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    3c55:	00 00 
    3c57:	74 05                	je     3c5e <cbvprintf+0xa27>
    3c59:	e8 52 e8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3c5e:	48 83 c4 78          	add    $0x78,%rsp
    3c62:	5b                   	pop    %rbx
    3c63:	5d                   	pop    %rbp
    3c64:	41 5c                	pop    %r12
    3c66:	41 5d                	pop    %r13
    3c68:	41 5e                	pop    %r14
    3c6a:	41 5f                	pop    %r15
    3c6c:	c3                   	retq   

0000000000003c6d <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    3c6d:	f3 0f 1e fa          	endbr64 
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3c71:	c3                   	retq   

0000000000003c72 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3c72:	f3 0f 1e fa          	endbr64 
    3c76:	50                   	push   %rax
    3c77:	48 8d 3d c7 58 00 00 	lea    0x58c7(%rip),%rdi        # 9545 <default_cmd+0x2e5>
    3c7e:	e8 0b 3d 00 00       	callq  798e <z_impl_device_get_binding>
	__printk_hook_install(console_out);
    3c83:	48 8d 3d 10 00 00 00 	lea    0x10(%rip),%rdi        # 3c9a <console_out>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3c8a:	48 89 05 f7 b7 00 00 	mov    %rax,0xb7f7(%rip)        # f488 <uart_console_dev>
	__printk_hook_install(console_out);
    3c91:	e8 d7 f1 ff ff       	callq  2e6d <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    3c96:	31 c0                	xor    %eax,%eax
    3c98:	5a                   	pop    %rdx
    3c99:	c3                   	retq   

0000000000003c9a <console_out>:
{
    3c9a:	f3 0f 1e fa          	endbr64 
    3c9e:	41 54                	push   %r12
    3ca0:	41 89 fc             	mov    %edi,%r12d
	if ('\n' == c) {
    3ca3:	83 ff 0a             	cmp    $0xa,%edi
    3ca6:	75 13                	jne    3cbb <console_out+0x21>
    3ca8:	48 8b 3d d9 b7 00 00 	mov    0xb7d9(%rip),%rdi        # f488 <uart_console_dev>
	api->poll_out(dev, out_char);
    3caf:	48 8b 47 10          	mov    0x10(%rdi),%rax
    3cb3:	be 0d 00 00 00       	mov    $0xd,%esi
    3cb8:	ff 50 08             	callq  *0x8(%rax)
	uart_poll_out(uart_console_dev, c);
    3cbb:	48 8b 3d c6 b7 00 00 	mov    0xb7c6(%rip),%rdi        # f488 <uart_console_dev>
    3cc2:	48 8b 47 10          	mov    0x10(%rdi),%rax
    3cc6:	41 0f b6 f4          	movzbl %r12b,%esi
    3cca:	ff 50 08             	callq  *0x8(%rax)
}
    3ccd:	44 89 e0             	mov    %r12d,%eax
    3cd0:	41 5c                	pop    %r12
    3cd2:	c3                   	retq   

0000000000003cd3 <native_posix_console_init>:
	}
}
#endif /* CONFIG_NATIVE_POSIX_STDIN_CONSOLE */

static int native_posix_console_init(const struct device *arg)
{
    3cd3:	f3 0f 1e fa          	endbr64 
    3cd7:	50                   	push   %rax
	setvbuf(stdout, NULL, _IOLBF, 512);
    3cd8:	48 8b 05 c9 82 00 00 	mov    0x82c9(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    3cdf:	b9 00 02 00 00       	mov    $0x200,%ecx
    3ce4:	31 f6                	xor    %esi,%esi
    3ce6:	ba 01 00 00 00       	mov    $0x1,%edx
    3ceb:	48 8b 38             	mov    (%rax),%rdi
    3cee:	e8 ed e8 ff ff       	callq  25e0 <setvbuf@plt>
	setvbuf(stderr, NULL, _IOLBF, 512);
    3cf3:	48 8b 05 f6 82 00 00 	mov    0x82f6(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    3cfa:	ba 01 00 00 00       	mov    $0x1,%edx
    3cff:	31 f6                	xor    %esi,%esi
    3d01:	b9 00 02 00 00       	mov    $0x200,%ecx
    3d06:	48 8b 38             	mov    (%rax),%rdi
    3d09:	e8 d2 e8 ff ff       	callq  25e0 <setvbuf@plt>
	__printk_hook_install(putchar);
    3d0e:	48 8b 3d 83 82 00 00 	mov    0x8283(%rip),%rdi        # bf98 <putchar@GLIBC_2.2.5>
    3d15:	e8 53 f1 ff ff       	callq  2e6d <__printk_hook_install>
#if defined(CONFIG_NATIVE_POSIX_STDOUT_CONSOLE)
	native_posix_stdout_init();
#endif

	return 0;
}
    3d1a:	31 c0                	xor    %eax,%eax
    3d1c:	5a                   	pop    %rdx
    3d1d:	c3                   	retq   

0000000000003d1e <np_timer_isr>:
/**
 * Interrupt handler for the timer interrupt
 * Announce to the kernel that a number of ticks have passed
 */
static void np_timer_isr(const void *arg)
{
    3d1e:	f3 0f 1e fa          	endbr64 
    3d22:	50                   	push   %rax
	ARG_UNUSED(arg);

	uint64_t now = hwm_get_time();
    3d23:	e8 75 1e 00 00       	callq  5b9d <hwm_get_time>
	int32_t elapsed_ticks = (now - last_tick_time)/tick_period;
    3d28:	48 8b 35 61 b7 00 00 	mov    0xb761(%rip),%rsi        # f490 <last_tick_time>
    3d2f:	48 8b 0d 62 b7 00 00 	mov    0xb762(%rip),%rcx        # f498 <tick_period>
    3d36:	31 d2                	xor    %edx,%edx
    3d38:	48 29 f0             	sub    %rsi,%rax
    3d3b:	48 f7 f1             	div    %rcx

	last_tick_time += elapsed_ticks*tick_period;
    3d3e:	48 63 d0             	movslq %eax,%rdx
	sys_clock_announce(elapsed_ticks);
    3d41:	89 c7                	mov    %eax,%edi
	last_tick_time += elapsed_ticks*tick_period;
    3d43:	48 0f af d1          	imul   %rcx,%rdx
    3d47:	48 01 f2             	add    %rsi,%rdx
    3d4a:	48 89 15 3f b7 00 00 	mov    %rdx,0xb73f(%rip)        # f490 <last_tick_time>
}
    3d51:	5a                   	pop    %rdx
	sys_clock_announce(elapsed_ticks);
    3d52:	e9 16 4d 00 00       	jmpq   8a6d <sys_clock_announce>

0000000000003d57 <sys_clock_driver_init>:
 * @brief Initialize system timer driver
 *
 * Enable the hw timer, setting its tick period, and setup its interrupt
 */
int sys_clock_driver_init(const struct device *dev)
{
    3d57:	f3 0f 1e fa          	endbr64 
    3d5b:	50                   	push   %rax
	ARG_UNUSED(dev);

	tick_period = 1000000ul / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    3d5c:	48 c7 05 31 b7 00 00 	movq   $0x2710,0xb731(%rip)        # f498 <tick_period>
    3d63:	10 27 00 00 

	last_tick_time = hwm_get_time();
    3d67:	e8 31 1e 00 00       	callq  5b9d <hwm_get_time>
	hwtimer_enable(tick_period);
    3d6c:	48 8b 3d 25 b7 00 00 	mov    0xb725(%rip),%rdi        # f498 <tick_period>
	last_tick_time = hwm_get_time();
    3d73:	48 89 05 16 b7 00 00 	mov    %rax,0xb716(%rip)        # f490 <last_tick_time>
	hwtimer_enable(tick_period);
    3d7a:	e8 bf 20 00 00       	callq  5e3e <hwtimer_enable>

	IRQ_CONNECT(TIMER_TICK_IRQ, 1, np_timer_isr, 0, 0);
    3d7f:	31 c9                	xor    %ecx,%ecx
    3d81:	48 8d 15 96 ff ff ff 	lea    -0x6a(%rip),%rdx        # 3d1e <np_timer_isr>
    3d88:	31 f6                	xor    %esi,%esi
    3d8a:	31 ff                	xor    %edi,%edi
    3d8c:	e8 97 24 00 00       	callq  6228 <posix_isr_declare>
    3d91:	31 d2                	xor    %edx,%edx
    3d93:	be 01 00 00 00       	mov    $0x1,%esi
    3d98:	31 ff                	xor    %edi,%edi
    3d9a:	e8 ae 24 00 00       	callq  624d <posix_irq_priority_set>
	irq_enable(TIMER_TICK_IRQ);
    3d9f:	31 ff                	xor    %edi,%edi
    3da1:	e8 00 14 00 00       	callq  51a6 <arch_irq_enable>

	return 0;
}
    3da6:	31 c0                	xor    %eax,%eax
    3da8:	5a                   	pop    %rdx
    3da9:	c3                   	retq   

0000000000003daa <sys_clock_set_timeout>:
 * @param ticks Timeout in tick units
 * @param idle Hint to the driver that the system is about to enter
 *        the idle state immediately after setting the timeout
 */
void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    3daa:	f3 0f 1e fa          	endbr64 

	/* Note that we treat INT_MAX literally as anyhow the maximum amount of
	 * ticks we can report with sys_clock_announce() is INT_MAX
	 */
	if (ticks == K_TICKS_FOREVER) {
		silent_ticks = INT64_MAX;
    3dae:	49 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%r8
    3db5:	ff ff 7f 
	if (ticks == K_TICKS_FOREVER) {
    3db8:	83 ff ff             	cmp    $0xffffffff,%edi
    3dbb:	74 0c                	je     3dc9 <sys_clock_set_timeout+0x1f>
	} else if (ticks > 0) {
		silent_ticks = ticks - 1;
	} else {
		silent_ticks = 0;
    3dbd:	45 31 c0             	xor    %r8d,%r8d
	} else if (ticks > 0) {
    3dc0:	85 ff                	test   %edi,%edi
    3dc2:	7e 05                	jle    3dc9 <sys_clock_set_timeout+0x1f>
		silent_ticks = ticks - 1;
    3dc4:	ff cf                	dec    %edi
    3dc6:	4c 63 c7             	movslq %edi,%r8
	}
	hwtimer_set_silent_ticks(silent_ticks);
    3dc9:	4c 89 c7             	mov    %r8,%rdi
    3dcc:	e9 1f 22 00 00       	jmpq   5ff0 <hwtimer_set_silent_ticks>

0000000000003dd1 <sys_clock_elapsed>:
 * last call to sys_clock_announce() was made.  The kernel will call
 * this with appropriate locking, the driver needs only provide an
 * instantaneous answer.
 */
uint32_t sys_clock_elapsed(void)
{
    3dd1:	f3 0f 1e fa          	endbr64 
    3dd5:	50                   	push   %rax
	return (hwm_get_time() - last_tick_time)/tick_period;
    3dd6:	e8 c2 1d 00 00       	callq  5b9d <hwm_get_time>
    3ddb:	31 d2                	xor    %edx,%edx
    3ddd:	48 2b 05 ac b6 00 00 	sub    0xb6ac(%rip),%rax        # f490 <last_tick_time>
    3de4:	48 f7 35 ad b6 00 00 	divq   0xb6ad(%rip)        # f498 <tick_period>
}
    3deb:	5a                   	pop    %rdx
    3dec:	c3                   	retq   

0000000000003ded <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
    3ded:	f3 0f 1e fa          	endbr64 
    3df1:	41 89 f1             	mov    %esi,%r9d
    3df4:	89 c8                	mov    %ecx,%eax
    3df6:	48 89 d6             	mov    %rdx,%rsi
	if (from_len <= to_len) {
    3df9:	44 39 c9             	cmp    %r9d,%ecx
    3dfc:	77 05                	ja     3e03 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    3dfe:	89 c9                	mov    %ecx,%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    3e00:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		return from_len;
    3e02:	c3                   	retq   
	} else {
		return TC_CRYPTO_FAIL;
    3e03:	31 c0                	xor    %eax,%eax
	}
}
    3e05:	c3                   	retq   

0000000000003e06 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
    3e06:	f3 0f 1e fa          	endbr64 
	(void)memset(to, val, len);
    3e0a:	89 d1                	mov    %edx,%ecx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    3e0c:	89 f0                	mov    %esi,%eax
    3e0e:	f3 aa                	rep stos %al,%es:(%rdi)
}
    3e10:	c3                   	retq   

0000000000003e11 <_double_byte>:

/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
    3e11:	f3 0f 1e fa          	endbr64 
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    3e15:	89 f8                	mov    %edi,%eax
    3e17:	b2 1b                	mov    $0x1b,%dl
    3e19:	01 ff                	add    %edi,%edi
    3e1b:	c0 e8 07             	shr    $0x7,%al
    3e1e:	0f af c2             	imul   %edx,%eax
    3e21:	31 f8                	xor    %edi,%eax
}
    3e23:	c3                   	retq   

0000000000003e24 <_compare>:

int _compare(const uint8_t *a, const uint8_t *b, size_t size)
{
    3e24:	f3 0f 1e fa          	endbr64 
	const uint8_t *tempa = a;
	const uint8_t *tempb = b;
	uint8_t result = 0;

	for (unsigned int i = 0; i < size; i++) {
    3e28:	45 31 c0             	xor    %r8d,%r8d
	uint8_t result = 0;
    3e2b:	31 c0                	xor    %eax,%eax
	for (unsigned int i = 0; i < size; i++) {
    3e2d:	44 89 c1             	mov    %r8d,%ecx
    3e30:	48 39 d1             	cmp    %rdx,%rcx
    3e33:	73 12                	jae    3e47 <_compare+0x23>
		result |= tempa[i] ^ tempb[i];
    3e35:	44 8a 0c 0f          	mov    (%rdi,%rcx,1),%r9b
    3e39:	44 32 0c 0e          	xor    (%rsi,%rcx,1),%r9b
	for (unsigned int i = 0; i < size; i++) {
    3e3d:	41 ff c0             	inc    %r8d
		result |= tempa[i] ^ tempb[i];
    3e40:	44 89 c9             	mov    %r9d,%ecx
    3e43:	09 c8                	or     %ecx,%eax
	for (unsigned int i = 0; i < size; i++) {
    3e45:	eb e6                	jmp    3e2d <_compare+0x9>
	}
	return result;
    3e47:	0f b6 c0             	movzbl %al,%eax
}
    3e4a:	c3                   	retq   

0000000000003e4b <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3e4b:	8a 46 03             	mov    0x3(%rsi),%al
    3e4e:	30 07                	xor    %al,(%rdi)
    3e50:	8a 46 02             	mov    0x2(%rsi),%al
    3e53:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3e56:	8a 46 01             	mov    0x1(%rsi),%al
    3e59:	30 47 02             	xor    %al,0x2(%rdi)
    3e5c:	8b 06                	mov    (%rsi),%eax
    3e5e:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3e61:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    3e65:	30 47 04             	xor    %al,0x4(%rdi)
    3e68:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    3e6c:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3e6f:	8a 46 05             	mov    0x5(%rsi),%al
    3e72:	30 47 06             	xor    %al,0x6(%rdi)
    3e75:	8b 46 04             	mov    0x4(%rsi),%eax
    3e78:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3e7b:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    3e7f:	30 47 08             	xor    %al,0x8(%rdi)
    3e82:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    3e86:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3e89:	8a 46 09             	mov    0x9(%rsi),%al
    3e8c:	30 47 0a             	xor    %al,0xa(%rdi)
    3e8f:	8b 46 08             	mov    0x8(%rsi),%eax
    3e92:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3e95:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    3e99:	30 47 0c             	xor    %al,0xc(%rdi)
    3e9c:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    3ea0:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3ea3:	8a 46 0d             	mov    0xd(%rsi),%al
    3ea6:	30 47 0e             	xor    %al,0xe(%rdi)
    3ea9:	8b 46 0c             	mov    0xc(%rsi),%eax
    3eac:	30 47 0f             	xor    %al,0xf(%rdi)
}
    3eaf:	c3                   	retq   

0000000000003eb0 <inv_shift_rows>:
 * This inv_shift_rows also implements the matrix flip required for
 * inv_mix_columns, but performs it here to reduce the number of memory
 * operations.
 */
static inline void inv_shift_rows(uint8_t *s)
{
    3eb0:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3eb4:	b9 10 00 00 00       	mov    $0x10,%ecx
    3eb9:	be 10 00 00 00       	mov    $0x10,%esi
{
    3ebe:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3ec5:	00 00 
    3ec7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3ecc:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3ece:	8a 07                	mov    (%rdi),%al
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3ed0:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3ed5:	88 44 24 08          	mov    %al,0x8(%rsp)
    3ed9:	8a 47 0d             	mov    0xd(%rdi),%al
    3edc:	88 44 24 09          	mov    %al,0x9(%rsp)
    3ee0:	8a 47 0a             	mov    0xa(%rdi),%al
    3ee3:	88 44 24 0a          	mov    %al,0xa(%rsp)
    3ee7:	8a 47 07             	mov    0x7(%rdi),%al
    3eea:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
    3eee:	8a 47 04             	mov    0x4(%rdi),%al
    3ef1:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3ef5:	8a 47 01             	mov    0x1(%rdi),%al
    3ef8:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3efc:	8a 47 0e             	mov    0xe(%rdi),%al
    3eff:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3f03:	8a 47 0b             	mov    0xb(%rdi),%al
    3f06:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
    3f0a:	8a 47 08             	mov    0x8(%rdi),%al
    3f0d:	88 44 24 10          	mov    %al,0x10(%rsp)
    3f11:	8a 47 05             	mov    0x5(%rdi),%al
    3f14:	88 44 24 11          	mov    %al,0x11(%rsp)
    3f18:	8a 47 02             	mov    0x2(%rdi),%al
    3f1b:	88 44 24 12          	mov    %al,0x12(%rsp)
    3f1f:	8a 47 0f             	mov    0xf(%rdi),%al
    3f22:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
    3f26:	8a 47 0c             	mov    0xc(%rdi),%al
    3f29:	88 44 24 14          	mov    %al,0x14(%rsp)
    3f2d:	8a 47 09             	mov    0x9(%rdi),%al
    3f30:	88 44 24 15          	mov    %al,0x15(%rsp)
    3f34:	8a 47 06             	mov    0x6(%rdi),%al
    3f37:	88 44 24 16          	mov    %al,0x16(%rsp)
    3f3b:	8a 47 03             	mov    0x3(%rdi),%al
    3f3e:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3f42:	e8 a6 fe ff ff       	callq  3ded <_copy>
}
    3f47:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    3f4c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3f53:	00 00 
    3f55:	74 05                	je     3f5c <inv_shift_rows+0xac>
    3f57:	e8 54 e5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3f5c:	48 83 c4 28          	add    $0x28,%rsp
    3f60:	c3                   	retq   

0000000000003f61 <mult_row_column>:
{
    3f61:	41 57                	push   %r15
    3f63:	41 56                	push   %r14
    3f65:	41 55                	push   %r13
    3f67:	41 54                	push   %r12
    3f69:	55                   	push   %rbp
    3f6a:	48 89 fd             	mov    %rdi,%rbp
    3f6d:	53                   	push   %rbx
    3f6e:	48 89 f3             	mov    %rsi,%rbx
    3f71:	48 83 ec 18          	sub    $0x18,%rsp
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    3f75:	0f b6 3e             	movzbl (%rsi),%edi
    3f78:	e8 94 fe ff ff       	callq  3e11 <_double_byte>
    3f7d:	0f b6 f8             	movzbl %al,%edi
    3f80:	e8 8c fe ff ff       	callq  3e11 <_double_byte>
    3f85:	0f b6 f8             	movzbl %al,%edi
    3f88:	e8 84 fe ff ff       	callq  3e11 <_double_byte>
    3f8d:	0f b6 3b             	movzbl (%rbx),%edi
    3f90:	41 89 c7             	mov    %eax,%r15d
    3f93:	e8 79 fe ff ff       	callq  3e11 <_double_byte>
    3f98:	0f b6 f8             	movzbl %al,%edi
    3f9b:	e8 71 fe ff ff       	callq  3e11 <_double_byte>
    3fa0:	0f b6 3b             	movzbl (%rbx),%edi
    3fa3:	41 89 c6             	mov    %eax,%r14d
    3fa6:	e8 66 fe ff ff       	callq  3e11 <_double_byte>
    3fab:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3faf:	41 89 c5             	mov    %eax,%r13d
    3fb2:	e8 5a fe ff ff       	callq  3e11 <_double_byte>
    3fb7:	0f b6 f8             	movzbl %al,%edi
    3fba:	e8 52 fe ff ff       	callq  3e11 <_double_byte>
    3fbf:	0f b6 f8             	movzbl %al,%edi
    3fc2:	e8 4a fe ff ff       	callq  3e11 <_double_byte>
    3fc7:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3fcb:	41 89 c4             	mov    %eax,%r12d
    3fce:	e8 3e fe ff ff       	callq  3e11 <_double_byte>
    3fd3:	8a 53 01             	mov    0x1(%rbx),%dl
    3fd6:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3fda:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3fde:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3fe2:	e8 2a fe ff ff       	callq  3e11 <_double_byte>
    3fe7:	0f b6 f8             	movzbl %al,%edi
    3fea:	e8 22 fe ff ff       	callq  3e11 <_double_byte>
    3fef:	0f b6 f8             	movzbl %al,%edi
    3ff2:	e8 1a fe ff ff       	callq  3e11 <_double_byte>
    3ff7:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3ffb:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3fff:	e8 0d fe ff ff       	callq  3e11 <_double_byte>
    4004:	0f b6 f8             	movzbl %al,%edi
    4007:	e8 05 fe ff ff       	callq  3e11 <_double_byte>
    400c:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4010:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    4014:	32 53 02             	xor    0x2(%rbx),%dl
    4017:	88 44 24 0e          	mov    %al,0xe(%rsp)
    401b:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    401f:	e8 ed fd ff ff       	callq  3e11 <_double_byte>
    4024:	0f b6 f8             	movzbl %al,%edi
    4027:	e8 e5 fd ff ff       	callq  3e11 <_double_byte>
    402c:	0f b6 f8             	movzbl %al,%edi
    402f:	e8 dd fd ff ff       	callq  3e11 <_double_byte>
    4034:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    4038:	41 89 c0             	mov    %eax,%r8d
    403b:	8a 43 03             	mov    0x3(%rbx),%al
    403e:	31 d0                	xor    %edx,%eax
    4040:	44 31 f8             	xor    %r15d,%eax
    4043:	44 31 f0             	xor    %r14d,%eax
    4046:	44 31 e8             	xor    %r13d,%eax
    4049:	44 31 e0             	xor    %r12d,%eax
    404c:	33 44 24 0c          	xor    0xc(%rsp),%eax
    4050:	32 44 24 0d          	xor    0xd(%rsp),%al
    4054:	32 44 24 0e          	xor    0xe(%rsp),%al
    4058:	44 31 c0             	xor    %r8d,%eax
    405b:	88 45 00             	mov    %al,0x0(%rbp)
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    405e:	0f b6 3b             	movzbl (%rbx),%edi
    4061:	e8 ab fd ff ff       	callq  3e11 <_double_byte>
    4066:	0f b6 f8             	movzbl %al,%edi
    4069:	e8 a3 fd ff ff       	callq  3e11 <_double_byte>
    406e:	0f b6 f8             	movzbl %al,%edi
    4071:	e8 9b fd ff ff       	callq  3e11 <_double_byte>
    4076:	8a 13                	mov    (%rbx),%dl
    4078:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    407c:	41 89 c7             	mov    %eax,%r15d
    407f:	88 54 24 0e          	mov    %dl,0xe(%rsp)
    4083:	e8 89 fd ff ff       	callq  3e11 <_double_byte>
    4088:	0f b6 f8             	movzbl %al,%edi
    408b:	e8 81 fd ff ff       	callq  3e11 <_double_byte>
    4090:	0f b6 f8             	movzbl %al,%edi
    4093:	e8 79 fd ff ff       	callq  3e11 <_double_byte>
    4098:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    409c:	41 89 c6             	mov    %eax,%r14d
    409f:	e8 6d fd ff ff       	callq  3e11 <_double_byte>
    40a4:	0f b6 f8             	movzbl %al,%edi
    40a7:	e8 65 fd ff ff       	callq  3e11 <_double_byte>
    40ac:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    40b0:	41 89 c5             	mov    %eax,%r13d
    40b3:	e8 59 fd ff ff       	callq  3e11 <_double_byte>
    40b8:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    40bc:	41 89 c4             	mov    %eax,%r12d
    40bf:	e8 4d fd ff ff       	callq  3e11 <_double_byte>
    40c4:	0f b6 f8             	movzbl %al,%edi
    40c7:	e8 45 fd ff ff       	callq  3e11 <_double_byte>
    40cc:	0f b6 f8             	movzbl %al,%edi
    40cf:	e8 3d fd ff ff       	callq  3e11 <_double_byte>
    40d4:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    40d8:	88 44 24 0c          	mov    %al,0xc(%rsp)
    40dc:	e8 30 fd ff ff       	callq  3e11 <_double_byte>
    40e1:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    40e5:	8a 54 24 0e          	mov    0xe(%rsp),%dl
    40e9:	32 53 02             	xor    0x2(%rbx),%dl
    40ec:	88 44 24 0d          	mov    %al,0xd(%rsp)
    40f0:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    40f4:	e8 18 fd ff ff       	callq  3e11 <_double_byte>
    40f9:	0f b6 f8             	movzbl %al,%edi
    40fc:	e8 10 fd ff ff       	callq  3e11 <_double_byte>
    4101:	0f b6 f8             	movzbl %al,%edi
    4104:	e8 08 fd ff ff       	callq  3e11 <_double_byte>
    4109:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    410d:	88 44 24 0e          	mov    %al,0xe(%rsp)
    4111:	e8 fb fc ff ff       	callq  3e11 <_double_byte>
    4116:	0f b6 f8             	movzbl %al,%edi
    4119:	e8 f3 fc ff ff       	callq  3e11 <_double_byte>
    411e:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    4122:	41 89 c0             	mov    %eax,%r8d
    4125:	8a 43 03             	mov    0x3(%rbx),%al
    4128:	31 d0                	xor    %edx,%eax
    412a:	44 31 f8             	xor    %r15d,%eax
    412d:	44 31 f0             	xor    %r14d,%eax
    4130:	44 31 e8             	xor    %r13d,%eax
    4133:	44 31 e0             	xor    %r12d,%eax
    4136:	33 44 24 0c          	xor    0xc(%rsp),%eax
    413a:	32 44 24 0d          	xor    0xd(%rsp),%al
    413e:	32 44 24 0e          	xor    0xe(%rsp),%al
    4142:	44 31 c0             	xor    %r8d,%eax
    4145:	88 45 01             	mov    %al,0x1(%rbp)
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    4148:	0f b6 3b             	movzbl (%rbx),%edi
    414b:	e8 c1 fc ff ff       	callq  3e11 <_double_byte>
    4150:	0f b6 f8             	movzbl %al,%edi
    4153:	e8 b9 fc ff ff       	callq  3e11 <_double_byte>
    4158:	0f b6 f8             	movzbl %al,%edi
    415b:	e8 b1 fc ff ff       	callq  3e11 <_double_byte>
    4160:	0f b6 3b             	movzbl (%rbx),%edi
    4163:	41 89 c7             	mov    %eax,%r15d
    4166:	e8 a6 fc ff ff       	callq  3e11 <_double_byte>
    416b:	0f b6 f8             	movzbl %al,%edi
    416e:	e8 9e fc ff ff       	callq  3e11 <_double_byte>
    4173:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    4177:	44 8a 23             	mov    (%rbx),%r12b
    417a:	41 89 c6             	mov    %eax,%r14d
    417d:	e8 8f fc ff ff       	callq  3e11 <_double_byte>
    4182:	0f b6 f8             	movzbl %al,%edi
    4185:	e8 87 fc ff ff       	callq  3e11 <_double_byte>
    418a:	0f b6 f8             	movzbl %al,%edi
    418d:	e8 7f fc ff ff       	callq  3e11 <_double_byte>
    4192:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    4196:	44 32 63 01          	xor    0x1(%rbx),%r12b
    419a:	41 89 c5             	mov    %eax,%r13d
    419d:	e8 6f fc ff ff       	callq  3e11 <_double_byte>
    41a2:	0f b6 f8             	movzbl %al,%edi
    41a5:	e8 67 fc ff ff       	callq  3e11 <_double_byte>
    41aa:	0f b6 f8             	movzbl %al,%edi
    41ad:	e8 5f fc ff ff       	callq  3e11 <_double_byte>
    41b2:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    41b6:	88 44 24 0c          	mov    %al,0xc(%rsp)
    41ba:	e8 52 fc ff ff       	callq  3e11 <_double_byte>
    41bf:	0f b6 f8             	movzbl %al,%edi
    41c2:	e8 4a fc ff ff       	callq  3e11 <_double_byte>
    41c7:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    41cb:	88 44 24 0d          	mov    %al,0xd(%rsp)
    41cf:	e8 3d fc ff ff       	callq  3e11 <_double_byte>
    41d4:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    41d8:	88 44 24 0e          	mov    %al,0xe(%rsp)
    41dc:	e8 30 fc ff ff       	callq  3e11 <_double_byte>
    41e1:	0f b6 f8             	movzbl %al,%edi
    41e4:	e8 28 fc ff ff       	callq  3e11 <_double_byte>
    41e9:	0f b6 f8             	movzbl %al,%edi
    41ec:	e8 20 fc ff ff       	callq  3e11 <_double_byte>
    41f1:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    41f5:	88 44 24 0f          	mov    %al,0xf(%rsp)
    41f9:	e8 13 fc ff ff       	callq  3e11 <_double_byte>
    41fe:	41 89 c0             	mov    %eax,%r8d
    4201:	8a 43 03             	mov    0x3(%rbx),%al
    4204:	44 31 e0             	xor    %r12d,%eax
    4207:	44 31 f8             	xor    %r15d,%eax
    420a:	44 31 f0             	xor    %r14d,%eax
    420d:	44 31 e8             	xor    %r13d,%eax
    4210:	33 44 24 0c          	xor    0xc(%rsp),%eax
    4214:	32 44 24 0d          	xor    0xd(%rsp),%al
    4218:	32 44 24 0e          	xor    0xe(%rsp),%al
    421c:	32 44 24 0f          	xor    0xf(%rsp),%al
    4220:	44 31 c0             	xor    %r8d,%eax
    4223:	88 45 02             	mov    %al,0x2(%rbp)
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    4226:	0f b6 3b             	movzbl (%rbx),%edi
    4229:	e8 e3 fb ff ff       	callq  3e11 <_double_byte>
    422e:	0f b6 f8             	movzbl %al,%edi
    4231:	e8 db fb ff ff       	callq  3e11 <_double_byte>
    4236:	0f b6 f8             	movzbl %al,%edi
    4239:	e8 d3 fb ff ff       	callq  3e11 <_double_byte>
    423e:	0f b6 3b             	movzbl (%rbx),%edi
    4241:	41 89 c4             	mov    %eax,%r12d
    4244:	e8 c8 fb ff ff       	callq  3e11 <_double_byte>
    4249:	8a 13                	mov    (%rbx),%dl
    424b:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    424f:	41 89 c7             	mov    %eax,%r15d
    4252:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    4256:	e8 b6 fb ff ff       	callq  3e11 <_double_byte>
    425b:	0f b6 f8             	movzbl %al,%edi
    425e:	e8 ae fb ff ff       	callq  3e11 <_double_byte>
    4263:	0f b6 f8             	movzbl %al,%edi
    4266:	e8 a6 fb ff ff       	callq  3e11 <_double_byte>
    426b:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    426f:	41 89 c6             	mov    %eax,%r14d
    4272:	e8 9a fb ff ff       	callq  3e11 <_double_byte>
    4277:	0f b6 f8             	movzbl %al,%edi
    427a:	e8 92 fb ff ff       	callq  3e11 <_double_byte>
    427f:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    4283:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    4287:	32 53 01             	xor    0x1(%rbx),%dl
    428a:	41 89 c5             	mov    %eax,%r13d
    428d:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    4291:	e8 7b fb ff ff       	callq  3e11 <_double_byte>
    4296:	0f b6 f8             	movzbl %al,%edi
    4299:	e8 73 fb ff ff       	callq  3e11 <_double_byte>
    429e:	0f b6 f8             	movzbl %al,%edi
    42a1:	e8 6b fb ff ff       	callq  3e11 <_double_byte>
    42a6:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    42aa:	32 53 02             	xor    0x2(%rbx),%dl
    42ad:	41 31 d4             	xor    %edx,%r12d
    42b0:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    42b4:	45 31 fc             	xor    %r15d,%r12d
    42b7:	45 31 f4             	xor    %r14d,%r12d
    42ba:	45 31 ec             	xor    %r13d,%r12d
    42bd:	41 31 c4             	xor    %eax,%r12d
    42c0:	e8 4c fb ff ff       	callq  3e11 <_double_byte>
    42c5:	0f b6 f8             	movzbl %al,%edi
    42c8:	e8 44 fb ff ff       	callq  3e11 <_double_byte>
    42cd:	0f b6 f8             	movzbl %al,%edi
    42d0:	e8 3c fb ff ff       	callq  3e11 <_double_byte>
    42d5:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    42d9:	41 89 c5             	mov    %eax,%r13d
    42dc:	e8 30 fb ff ff       	callq  3e11 <_double_byte>
    42e1:	45 31 ec             	xor    %r13d,%r12d
    42e4:	0f b6 f8             	movzbl %al,%edi
    42e7:	e8 25 fb ff ff       	callq  3e11 <_double_byte>
    42ec:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    42f0:	41 89 c6             	mov    %eax,%r14d
    42f3:	e8 19 fb ff ff       	callq  3e11 <_double_byte>
    42f8:	45 31 f4             	xor    %r14d,%r12d
    42fb:	41 31 c4             	xor    %eax,%r12d
    42fe:	44 88 65 03          	mov    %r12b,0x3(%rbp)
}
    4302:	48 83 c4 18          	add    $0x18,%rsp
    4306:	5b                   	pop    %rbx
    4307:	5d                   	pop    %rbp
    4308:	41 5c                	pop    %r12
    430a:	41 5d                	pop    %r13
    430c:	41 5e                	pop    %r14
    430e:	41 5f                	pop    %r15
    4310:	c3                   	retq   

0000000000004311 <tc_aes_decrypt>:

int tc_aes_decrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4311:	f3 0f 1e fa          	endbr64 
    4315:	41 57                	push   %r15
    4317:	41 56                	push   %r14
    4319:	41 55                	push   %r13
    431b:	41 54                	push   %r12
    431d:	49 89 d4             	mov    %rdx,%r12
    4320:	55                   	push   %rbp
    4321:	53                   	push   %rbx
    4322:	48 83 ec 48          	sub    $0x48,%rsp
    4326:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    432b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4332:	00 00 
    4334:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4339:	31 c0                	xor    %eax,%eax

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    433b:	48 85 d2             	test   %rdx,%rdx
    433e:	0f 94 c2             	sete   %dl
	} else if (in == (const uint8_t *) 0) {
    4341:	48 85 f6             	test   %rsi,%rsi
    4344:	0f 94 c0             	sete   %al
	} else if (s == (TCAesKeySched_t) 0) {
    4347:	08 c2                	or     %al,%dl
    4349:	0f 85 21 01 00 00    	jne    4470 <tc_aes_decrypt+0x15f>
    434f:	48 85 ff             	test   %rdi,%rdi
    4352:	0f 84 18 01 00 00    	je     4470 <tc_aes_decrypt+0x15f>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    4358:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
    435d:	48 89 f2             	mov    %rsi,%rdx
    4360:	b9 10 00 00 00       	mov    $0x10,%ecx
    4365:	be 10 00 00 00       	mov    $0x10,%esi
    436a:	48 89 ef             	mov    %rbp,%rdi
    436d:	4d 8d b4 24 90 00 00 	lea    0x90(%r12),%r14
    4374:	00 
		s[i] = inv_sbox[s[i]];
    4375:	4c 8d 3d 84 4c 00 00 	lea    0x4c84(%rip),%r15        # 9000 <inv_sbox>
	(void)_copy(state, sizeof(state), in, sizeof(state));
    437c:	e8 6c fa ff ff       	callq  3ded <_copy>

	add_round_key(state, s->words + Nb*Nr);
    4381:	49 8d b4 24 a0 00 00 	lea    0xa0(%r12),%rsi
    4388:	00 
    4389:	48 89 ef             	mov    %rbp,%rdi
    438c:	e8 ba fa ff ff       	callq  3e4b <add_round_key>

	for (i = Nr - 1; i > 0; --i) {
		inv_shift_rows(state);
    4391:	48 89 ef             	mov    %rbp,%rdi
    4394:	49 89 ed             	mov    %rbp,%r13
    4397:	48 8d 5c 24 28       	lea    0x28(%rsp),%rbx
    439c:	e8 0f fb ff ff       	callq  3eb0 <inv_shift_rows>
    43a1:	48 89 e8             	mov    %rbp,%rax
		s[i] = inv_sbox[s[i]];
    43a4:	0f b6 10             	movzbl (%rax),%edx
    43a7:	48 ff c0             	inc    %rax
    43aa:	41 8a 14 17          	mov    (%r15,%rdx,1),%dl
    43ae:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb*Nk); ++i) {
    43b1:	48 39 d8             	cmp    %rbx,%rax
    43b4:	75 ee                	jne    43a4 <tc_aes_decrypt+0x93>
		inv_sub_bytes(state);
		add_round_key(state, s->words + Nb*i);
    43b6:	4c 89 f6             	mov    %r14,%rsi
    43b9:	48 89 ef             	mov    %rbp,%rdi
    43bc:	49 83 ee 10          	sub    $0x10,%r14
    43c0:	e8 86 fa ff ff       	callq  3e4b <add_round_key>
	mult_row_column(t, s);
    43c5:	48 89 ee             	mov    %rbp,%rsi
    43c8:	48 89 df             	mov    %rbx,%rdi
    43cb:	e8 91 fb ff ff       	callq  3f61 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    43d0:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
    43d5:	48 8d 7c 24 2c       	lea    0x2c(%rsp),%rdi
    43da:	e8 82 fb ff ff       	callq  3f61 <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    43df:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    43e4:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    43e9:	e8 73 fb ff ff       	callq  3f61 <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    43ee:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
    43f3:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
    43f8:	e8 64 fb ff ff       	callq  3f61 <mult_row_column>
	(void)_copy(s, sizeof(t), t, sizeof(t));
    43fd:	b9 10 00 00 00       	mov    $0x10,%ecx
    4402:	48 89 da             	mov    %rbx,%rdx
    4405:	48 89 ef             	mov    %rbp,%rdi
    4408:	be 10 00 00 00       	mov    $0x10,%esi
    440d:	e8 db f9 ff ff       	callq  3ded <_copy>
	for (i = Nr - 1; i > 0; --i) {
    4412:	4d 39 e6             	cmp    %r12,%r14
    4415:	0f 85 76 ff ff ff    	jne    4391 <tc_aes_decrypt+0x80>
		inv_mix_columns(state);
	}

	inv_shift_rows(state);
    441b:	48 89 ef             	mov    %rbp,%rdi
    441e:	e8 8d fa ff ff       	callq  3eb0 <inv_shift_rows>
		s[i] = inv_sbox[s[i]];
    4423:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
    4428:	49 ff c5             	inc    %r13
    442b:	41 8a 04 07          	mov    (%r15,%rax,1),%al
    442f:	41 88 45 ff          	mov    %al,-0x1(%r13)
	for (i = 0; i < (Nb*Nk); ++i) {
    4433:	49 39 dd             	cmp    %rbx,%r13
    4436:	75 eb                	jne    4423 <tc_aes_decrypt+0x112>
	inv_sub_bytes(state);
	add_round_key(state, s->words);
    4438:	4c 89 e6             	mov    %r12,%rsi
    443b:	48 89 ef             	mov    %rbp,%rdi
    443e:	e8 08 fa ff ff       	callq  3e4b <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4443:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4448:	b9 10 00 00 00       	mov    $0x10,%ecx
    444d:	48 89 ea             	mov    %rbp,%rdx
    4450:	be 10 00 00 00       	mov    $0x10,%esi
    4455:	e8 93 f9 ff ff       	callq  3ded <_copy>

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    445a:	ba 10 00 00 00       	mov    $0x10,%edx
    445f:	31 f6                	xor    %esi,%esi
    4461:	48 89 ef             	mov    %rbp,%rdi
    4464:	e8 9d f9 ff ff       	callq  3e06 <_set>


	return TC_CRYPTO_SUCCESS;
    4469:	b8 01 00 00 00       	mov    $0x1,%eax
    446e:	eb 02                	jmp    4472 <tc_aes_decrypt+0x161>
		return TC_CRYPTO_FAIL;
    4470:	31 c0                	xor    %eax,%eax
}
    4472:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
    4477:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    447e:	00 00 
    4480:	74 05                	je     4487 <tc_aes_decrypt+0x176>
    4482:	e8 29 e0 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4487:	48 83 c4 48          	add    $0x48,%rsp
    448b:	5b                   	pop    %rbx
    448c:	5d                   	pop    %rbp
    448d:	41 5c                	pop    %r12
    448f:	41 5d                	pop    %r13
    4491:	41 5e                	pop    %r14
    4493:	41 5f                	pop    %r15
    4495:	c3                   	retq   

0000000000004496 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    4496:	8a 46 03             	mov    0x3(%rsi),%al
    4499:	30 07                	xor    %al,(%rdi)
    449b:	8a 46 02             	mov    0x2(%rsi),%al
    449e:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    44a1:	8a 46 01             	mov    0x1(%rsi),%al
    44a4:	30 47 02             	xor    %al,0x2(%rdi)
    44a7:	8b 06                	mov    (%rsi),%eax
    44a9:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    44ac:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    44b0:	30 47 04             	xor    %al,0x4(%rdi)
    44b3:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    44b7:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    44ba:	8a 46 05             	mov    0x5(%rsi),%al
    44bd:	30 47 06             	xor    %al,0x6(%rdi)
    44c0:	8b 46 04             	mov    0x4(%rsi),%eax
    44c3:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    44c6:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    44ca:	30 47 08             	xor    %al,0x8(%rdi)
    44cd:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    44d1:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    44d4:	8a 46 09             	mov    0x9(%rsi),%al
    44d7:	30 47 0a             	xor    %al,0xa(%rdi)
    44da:	8b 46 08             	mov    0x8(%rsi),%eax
    44dd:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    44e0:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    44e4:	30 47 0c             	xor    %al,0xc(%rdi)
    44e7:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    44eb:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    44ee:	8a 46 0d             	mov    0xd(%rsi),%al
    44f1:	30 47 0e             	xor    %al,0xe(%rdi)
    44f4:	8b 46 0c             	mov    0xc(%rsi),%eax
    44f7:	30 47 0f             	xor    %al,0xf(%rdi)
}
    44fa:	c3                   	retq   

00000000000044fb <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    44fb:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
    44ff:	b9 10 00 00 00       	mov    $0x10,%ecx
    4504:	be 10 00 00 00       	mov    $0x10,%esi
{
    4509:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4510:	00 00 
    4512:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    4517:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4519:	8a 07                	mov    (%rdi),%al
	(void) _copy(s, sizeof(t), t, sizeof(t));
    451b:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4520:	88 44 24 08          	mov    %al,0x8(%rsp)
    4524:	8a 47 05             	mov    0x5(%rdi),%al
    4527:	88 44 24 09          	mov    %al,0x9(%rsp)
    452b:	8a 47 0a             	mov    0xa(%rdi),%al
    452e:	88 44 24 0a          	mov    %al,0xa(%rsp)
    4532:	8a 47 0f             	mov    0xf(%rdi),%al
    4535:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    4539:	8a 47 04             	mov    0x4(%rdi),%al
    453c:	88 44 24 0c          	mov    %al,0xc(%rsp)
    4540:	8a 47 09             	mov    0x9(%rdi),%al
    4543:	88 44 24 0d          	mov    %al,0xd(%rsp)
    4547:	8a 47 0e             	mov    0xe(%rdi),%al
    454a:	88 44 24 0e          	mov    %al,0xe(%rsp)
    454e:	8a 47 03             	mov    0x3(%rdi),%al
    4551:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    4555:	8a 47 08             	mov    0x8(%rdi),%al
    4558:	88 44 24 10          	mov    %al,0x10(%rsp)
    455c:	8a 47 0d             	mov    0xd(%rdi),%al
    455f:	88 44 24 11          	mov    %al,0x11(%rsp)
    4563:	8a 47 02             	mov    0x2(%rdi),%al
    4566:	88 44 24 12          	mov    %al,0x12(%rsp)
    456a:	8a 47 07             	mov    0x7(%rdi),%al
    456d:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    4571:	8a 47 0c             	mov    0xc(%rdi),%al
    4574:	88 44 24 14          	mov    %al,0x14(%rsp)
    4578:	8a 47 01             	mov    0x1(%rdi),%al
    457b:	88 44 24 15          	mov    %al,0x15(%rsp)
    457f:	8a 47 06             	mov    0x6(%rdi),%al
    4582:	88 44 24 16          	mov    %al,0x16(%rsp)
    4586:	8a 47 0b             	mov    0xb(%rdi),%al
    4589:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void) _copy(s, sizeof(t), t, sizeof(t));
    458d:	e8 5b f8 ff ff       	callq  3ded <_copy>
}
    4592:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    4597:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    459e:	00 00 
    45a0:	74 05                	je     45a7 <shift_rows+0xac>
    45a2:	e8 09 df ff ff       	callq  24b0 <__stack_chk_fail@plt>
    45a7:	48 83 c4 28          	add    $0x28,%rsp
    45ab:	c3                   	retq   

00000000000045ac <mult_row_column>:
{
    45ac:	41 55                	push   %r13
    45ae:	41 54                	push   %r12
    45b0:	49 89 fc             	mov    %rdi,%r12
    45b3:	55                   	push   %rbp
    45b4:	53                   	push   %rbx
    45b5:	48 89 f3             	mov    %rsi,%rbx
    45b8:	50                   	push   %rax
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    45b9:	0f b6 3e             	movzbl (%rsi),%edi
    45bc:	e8 50 f8 ff ff       	callq  3e11 <_double_byte>
    45c1:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    45c5:	89 c5                	mov    %eax,%ebp
    45c7:	e8 45 f8 ff ff       	callq  3e11 <_double_byte>
    45cc:	41 89 c0             	mov    %eax,%r8d
    45cf:	8a 43 01             	mov    0x1(%rbx),%al
    45d2:	32 43 02             	xor    0x2(%rbx),%al
    45d5:	32 43 03             	xor    0x3(%rbx),%al
    45d8:	31 e8                	xor    %ebp,%eax
    45da:	44 31 c0             	xor    %r8d,%eax
    45dd:	41 88 04 24          	mov    %al,(%r12)
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    45e1:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    45e5:	40 8a 2b             	mov    (%rbx),%bpl
    45e8:	e8 24 f8 ff ff       	callq  3e11 <_double_byte>
    45ed:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    45f1:	41 89 c5             	mov    %eax,%r13d
    45f4:	e8 18 f8 ff ff       	callq  3e11 <_double_byte>
    45f9:	41 89 c0             	mov    %eax,%r8d
    45fc:	8a 43 02             	mov    0x2(%rbx),%al
    45ff:	31 e8                	xor    %ebp,%eax
    4601:	32 43 03             	xor    0x3(%rbx),%al
    4604:	44 31 e8             	xor    %r13d,%eax
    4607:	44 31 c0             	xor    %r8d,%eax
    460a:	41 88 44 24 01       	mov    %al,0x1(%r12)
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    460f:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    4613:	40 8a 2b             	mov    (%rbx),%bpl
    4616:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    461a:	e8 f2 f7 ff ff       	callq  3e11 <_double_byte>
    461f:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4623:	41 89 c5             	mov    %eax,%r13d
    4626:	e8 e6 f7 ff ff       	callq  3e11 <_double_byte>
    462b:	40 32 6b 03          	xor    0x3(%rbx),%bpl
    462f:	44 31 ed             	xor    %r13d,%ebp
    4632:	31 c5                	xor    %eax,%ebp
    4634:	41 88 6c 24 02       	mov    %bpl,0x2(%r12)
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4639:	0f b6 3b             	movzbl (%rbx),%edi
    463c:	e8 d0 f7 ff ff       	callq  3e11 <_double_byte>
    4641:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4645:	40 8a 2b             	mov    (%rbx),%bpl
    4648:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    464c:	40 32 6b 02          	xor    0x2(%rbx),%bpl
    4650:	31 c5                	xor    %eax,%ebp
    4652:	e8 ba f7 ff ff       	callq  3e11 <_double_byte>
    4657:	31 c5                	xor    %eax,%ebp
    4659:	41 88 6c 24 03       	mov    %bpl,0x3(%r12)
}
    465e:	5a                   	pop    %rdx
    465f:	5b                   	pop    %rbx
    4660:	5d                   	pop    %rbp
    4661:	41 5c                	pop    %r12
    4663:	41 5d                	pop    %r13
    4665:	c3                   	retq   

0000000000004666 <tc_aes128_set_encrypt_key>:
{
    4666:	f3 0f 1e fa          	endbr64 
    466a:	48 83 ec 48          	sub    $0x48,%rsp
    466e:	49 89 f8             	mov    %rdi,%r8
    4671:	49 89 f1             	mov    %rsi,%r9
	const unsigned int rconst[11] = {
    4674:	b9 0b 00 00 00       	mov    $0xb,%ecx
{
    4679:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4680:	00 00 
    4682:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4687:	31 c0                	xor    %eax,%eax
	const unsigned int rconst[11] = {
    4689:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
    468e:	48 8d 35 6b 4a 00 00 	lea    0x4a6b(%rip),%rsi        # 9100 <inv_sbox+0x100>
    4695:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
	} else if (k == (const uint8_t *) 0) {
    4697:	4d 85 c0             	test   %r8,%r8
    469a:	0f 84 ad 00 00 00    	je     474d <tc_aes128_set_encrypt_key+0xe7>
    46a0:	4d 85 c9             	test   %r9,%r9
    46a3:	0f 84 a4 00 00 00    	je     474d <tc_aes128_set_encrypt_key+0xe7>
    46a9:	31 d2                	xor    %edx,%edx
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    46ab:	41 0f b6 04 11       	movzbl (%r9,%rdx,1),%eax
    46b0:	41 0f b6 4c 11 01    	movzbl 0x1(%r9,%rdx,1),%ecx
    46b6:	c1 e0 18             	shl    $0x18,%eax
    46b9:	c1 e1 10             	shl    $0x10,%ecx
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    46bc:	09 c8                	or     %ecx,%eax
    46be:	41 0f b6 4c 11 03    	movzbl 0x3(%r9,%rdx,1),%ecx
    46c4:	09 c8                	or     %ecx,%eax
    46c6:	41 0f b6 4c 11 02    	movzbl 0x2(%r9,%rdx,1),%ecx
    46cc:	c1 e1 08             	shl    $0x8,%ecx
    46cf:	09 c8                	or     %ecx,%eax
    46d1:	41 89 04 10          	mov    %eax,(%r8,%rdx,1)
	for (i = 0; i < Nk; ++i) {
    46d5:	48 83 c2 04          	add    $0x4,%rdx
    46d9:	48 83 fa 10          	cmp    $0x10,%rdx
    46dd:	75 cc                	jne    46ab <tc_aes128_set_encrypt_key+0x45>
    46df:	be 04 00 00 00       	mov    $0x4,%esi
			t = subword(rotword(t)) ^ rconst[i/Nk];
    46e4:	48 8d 3d 55 4a 00 00 	lea    0x4a55(%rip),%rdi        # 9140 <sbox>
		t = s->words[i-1];
    46eb:	41 8b 44 b0 fc       	mov    -0x4(%r8,%rsi,4),%eax
		if ((i % Nk) == 0) {
    46f0:	40 f6 c6 03          	test   $0x3,%sil
    46f4:	75 3e                	jne    4734 <tc_aes128_set_encrypt_key+0xce>
	return (((a) >> 24)|((a) << 8));
    46f6:	c1 c0 08             	rol    $0x8,%eax
			t = subword(rotword(t)) ^ rconst[i/Nk];
    46f9:	89 c2                	mov    %eax,%edx
    46fb:	c1 ea 18             	shr    $0x18,%edx
    46fe:	0f b6 0c 17          	movzbl (%rdi,%rdx,1),%ecx
    4702:	0f b6 d0             	movzbl %al,%edx
    4705:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    4709:	c1 e1 18             	shl    $0x18,%ecx
    470c:	09 d1                	or     %edx,%ecx
    470e:	89 c2                	mov    %eax,%edx
    4710:	c1 ea 10             	shr    $0x10,%edx
    4713:	0f b6 d2             	movzbl %dl,%edx
    4716:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    471a:	c1 e2 10             	shl    $0x10,%edx
    471d:	09 d1                	or     %edx,%ecx
    471f:	0f b6 d4             	movzbl %ah,%edx
    4722:	0f b6 04 17          	movzbl (%rdi,%rdx,1),%eax
    4726:	89 f2                	mov    %esi,%edx
    4728:	c1 ea 02             	shr    $0x2,%edx
    472b:	c1 e0 08             	shl    $0x8,%eax
    472e:	09 c8                	or     %ecx,%eax
    4730:	33 44 94 0c          	xor    0xc(%rsp,%rdx,4),%eax
		s->words[i] = s->words[i-Nk] ^ t;
    4734:	41 33 44 b0 f0       	xor    -0x10(%r8,%rsi,4),%eax
    4739:	41 89 04 b0          	mov    %eax,(%r8,%rsi,4)
	for (; i < (Nb * (Nr + 1)); ++i) {
    473d:	48 ff c6             	inc    %rsi
    4740:	48 83 fe 2c          	cmp    $0x2c,%rsi
    4744:	75 a5                	jne    46eb <tc_aes128_set_encrypt_key+0x85>
	return TC_CRYPTO_SUCCESS;
    4746:	b8 01 00 00 00       	mov    $0x1,%eax
    474b:	eb 02                	jmp    474f <tc_aes128_set_encrypt_key+0xe9>
		return TC_CRYPTO_FAIL;
    474d:	31 c0                	xor    %eax,%eax
}
    474f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    4754:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    475b:	00 00 
    475d:	74 05                	je     4764 <tc_aes128_set_encrypt_key+0xfe>
    475f:	e8 4c dd ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4764:	48 83 c4 48          	add    $0x48,%rsp
    4768:	c3                   	retq   

0000000000004769 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4769:	f3 0f 1e fa          	endbr64 
    476d:	41 57                	push   %r15
    476f:	41 56                	push   %r14
    4771:	41 55                	push   %r13
    4773:	41 54                	push   %r12
    4775:	49 89 d4             	mov    %rdx,%r12
    4778:	55                   	push   %rbp
    4779:	53                   	push   %rbx
    477a:	48 83 ec 38          	sub    $0x38,%rsp
    477e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4785:	00 00 
    4787:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    478c:	31 c0                	xor    %eax,%eax
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    478e:	48 85 f6             	test   %rsi,%rsi
    4791:	0f 94 c2             	sete   %dl
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    4794:	4d 85 e4             	test   %r12,%r12
    4797:	0f 94 c0             	sete   %al
    479a:	08 c2                	or     %al,%dl
    479c:	0f 85 25 01 00 00    	jne    48c7 <tc_aes_encrypt+0x15e>
    47a2:	49 89 fd             	mov    %rdi,%r13
    47a5:	48 85 ff             	test   %rdi,%rdi
    47a8:	0f 84 19 01 00 00    	je     48c7 <tc_aes_encrypt+0x15e>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    47ae:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    47b3:	48 89 f2             	mov    %rsi,%rdx
    47b6:	b9 10 00 00 00       	mov    $0x10,%ecx
    47bb:	be 10 00 00 00       	mov    $0x10,%esi
    47c0:	48 89 ef             	mov    %rbp,%rdi
    47c3:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
    47c8:	e8 20 f6 ff ff       	callq  3ded <_copy>
	add_round_key(state, s->words);
    47cd:	4c 89 e6             	mov    %r12,%rsi
    47d0:	48 89 ef             	mov    %rbp,%rdi
    47d3:	49 81 c4 a0 00 00 00 	add    $0xa0,%r12
    47da:	e8 b7 fc ff ff       	callq  4496 <add_round_key>
		s[i] = sbox[s[i]];
    47df:	4c 8d 05 5a 49 00 00 	lea    0x495a(%rip),%r8        # 9140 <sbox>
	for (i = 0; i < (Nb * Nk); ++i) {
    47e6:	48 89 eb             	mov    %rbp,%rbx
    47e9:	4c 8d 7c 24 18       	lea    0x18(%rsp),%r15
{
    47ee:	48 89 e8             	mov    %rbp,%rax
		s[i] = sbox[s[i]];
    47f1:	0f b6 10             	movzbl (%rax),%edx
    47f4:	48 ff c0             	inc    %rax
    47f7:	41 8a 14 10          	mov    (%r8,%rdx,1),%dl
    47fb:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb * Nk); ++i) {
    47fe:	4c 39 f8             	cmp    %r15,%rax
    4801:	75 ee                	jne    47f1 <tc_aes_encrypt+0x88>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    4803:	48 89 ef             	mov    %rbp,%rdi
    4806:	e8 f0 fc ff ff       	callq  44fb <shift_rows>
	mult_row_column(t, s);
    480b:	48 89 ee             	mov    %rbp,%rsi
    480e:	4c 89 ff             	mov    %r15,%rdi
    4811:	e8 96 fd ff ff       	callq  45ac <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4816:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    481b:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
    4820:	e8 87 fd ff ff       	callq  45ac <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    4825:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    482a:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    482f:	e8 78 fd ff ff       	callq  45ac <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    4834:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
    4839:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
    483e:	e8 69 fd ff ff       	callq  45ac <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4843:	b9 10 00 00 00       	mov    $0x10,%ecx
    4848:	4c 89 fa             	mov    %r15,%rdx
    484b:	48 89 ef             	mov    %rbp,%rdi
    484e:	be 10 00 00 00       	mov    $0x10,%esi
    4853:	e8 95 f5 ff ff       	callq  3ded <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    4858:	4c 89 f6             	mov    %r14,%rsi
    485b:	48 89 ef             	mov    %rbp,%rdi
    485e:	49 83 c6 10          	add    $0x10,%r14
    4862:	e8 2f fc ff ff       	callq  4496 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    4867:	4d 39 e6             	cmp    %r12,%r14
    486a:	4c 8d 05 cf 48 00 00 	lea    0x48cf(%rip),%r8        # 9140 <sbox>
    4871:	0f 85 6f ff ff ff    	jne    47e6 <tc_aes_encrypt+0x7d>
		s[i] = sbox[s[i]];
    4877:	0f b6 03             	movzbl (%rbx),%eax
    487a:	48 ff c3             	inc    %rbx
    487d:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    4881:	88 43 ff             	mov    %al,-0x1(%rbx)
	for (i = 0; i < (Nb * Nk); ++i) {
    4884:	4c 39 fb             	cmp    %r15,%rbx
    4887:	75 ee                	jne    4877 <tc_aes_encrypt+0x10e>
	}

	sub_bytes(state);
	shift_rows(state);
    4889:	48 89 ef             	mov    %rbp,%rdi
    488c:	e8 6a fc ff ff       	callq  44fb <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    4891:	4c 89 e6             	mov    %r12,%rsi
    4894:	48 89 ef             	mov    %rbp,%rdi
    4897:	e8 fa fb ff ff       	callq  4496 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    489c:	b9 10 00 00 00       	mov    $0x10,%ecx
    48a1:	48 89 ea             	mov    %rbp,%rdx
    48a4:	4c 89 ef             	mov    %r13,%rdi
    48a7:	be 10 00 00 00       	mov    $0x10,%esi
    48ac:	e8 3c f5 ff ff       	callq  3ded <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    48b1:	ba 10 00 00 00       	mov    $0x10,%edx
    48b6:	31 f6                	xor    %esi,%esi
    48b8:	48 89 ef             	mov    %rbp,%rdi
    48bb:	e8 46 f5 ff ff       	callq  3e06 <_set>

	return TC_CRYPTO_SUCCESS;
    48c0:	b8 01 00 00 00       	mov    $0x1,%eax
    48c5:	eb 02                	jmp    48c9 <tc_aes_encrypt+0x160>
		return TC_CRYPTO_FAIL;
    48c7:	31 c0                	xor    %eax,%eax
}
    48c9:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    48ce:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    48d5:	00 00 
    48d7:	74 05                	je     48de <tc_aes_encrypt+0x175>
    48d9:	e8 d2 db ff ff       	callq  24b0 <__stack_chk_fail@plt>
    48de:	48 83 c4 38          	add    $0x38,%rsp
    48e2:	5b                   	pop    %rbx
    48e3:	5d                   	pop    %rbp
    48e4:	41 5c                	pop    %r12
    48e6:	41 5d                	pop    %r13
    48e8:	41 5e                	pop    %r14
    48ea:	41 5f                	pop    %r15
    48ec:	c3                   	retq   

00000000000048ed <tc_cbc_mode_encrypt>:
#include <tinycrypt/utils.h>

int tc_cbc_mode_encrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    48ed:	f3 0f 1e fa          	endbr64 
    48f1:	41 57                	push   %r15
    48f3:	41 56                	push   %r14
    48f5:	41 55                	push   %r13
    48f7:	41 54                	push   %r12
    48f9:	55                   	push   %rbp
    48fa:	53                   	push   %rbx
    48fb:	48 83 ec 28          	sub    $0x28,%rsp
    48ff:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4906:	00 00 
    4908:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    490d:	31 c0                	xor    %eax,%eax

	uint8_t buffer[TC_AES_BLOCK_SIZE];
	unsigned int n, m;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    490f:	48 85 ff             	test   %rdi,%rdi
    4912:	0f 84 d8 00 00 00    	je     49f0 <tc_cbc_mode_encrypt+0x103>
    4918:	49 89 d6             	mov    %rdx,%r14
    491b:	48 85 d2             	test   %rdx,%rdx
    491e:	0f 84 cc 00 00 00    	je     49f0 <tc_cbc_mode_encrypt+0x103>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    4924:	4d 85 c9             	test   %r9,%r9
    4927:	89 cb                	mov    %ecx,%ebx
    4929:	4d 89 cc             	mov    %r9,%r12
    492c:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    492f:	85 db                	test   %ebx,%ebx
    4931:	0f 94 c0             	sete   %al
    4934:	08 c2                	or     %al,%dl
    4936:	0f 85 b4 00 00 00    	jne    49f0 <tc_cbc_mode_encrypt+0x103>
    493c:	85 f6                	test   %esi,%esi
    493e:	0f 84 ac 00 00 00    	je     49f0 <tc_cbc_mode_encrypt+0x103>
    4944:	89 da                	mov    %ebx,%edx
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
		return TC_CRYPTO_FAIL;
    4946:	31 c0                	xor    %eax,%eax
    4948:	09 f2                	or     %esi,%edx
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    494a:	83 e2 0f             	and    $0xf,%edx
    494d:	0f 85 9f 00 00 00    	jne    49f2 <tc_cbc_mode_encrypt+0x105>
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
    4953:	8d 4b 10             	lea    0x10(%rbx),%ecx
		return TC_CRYPTO_FAIL;
    4956:	89 d0                	mov    %edx,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    4958:	39 f1                	cmp    %esi,%ecx
    495a:	0f 85 92 00 00 00    	jne    49f2 <tc_cbc_mode_encrypt+0x105>
	}

	/* copy iv to the buffer */
	(void)_copy(buffer, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    4960:	4c 8d 6c 24 08       	lea    0x8(%rsp),%r13
    4965:	48 89 fd             	mov    %rdi,%rbp
    4968:	4d 89 c7             	mov    %r8,%r15
    496b:	4c 89 c2             	mov    %r8,%rdx
    496e:	b9 10 00 00 00       	mov    $0x10,%ecx
    4973:	be 10 00 00 00       	mov    $0x10,%esi
    4978:	4c 89 ef             	mov    %r13,%rdi
    497b:	4c 01 f3             	add    %r14,%rbx
    497e:	e8 6a f4 ff ff       	callq  3ded <_copy>
	/* copy iv to the output buffer */
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    4983:	48 89 ef             	mov    %rbp,%rdi
    4986:	b9 10 00 00 00       	mov    $0x10,%ecx
    498b:	4c 89 fa             	mov    %r15,%rdx
    498e:	be 10 00 00 00       	mov    $0x10,%esi
	out += TC_AES_BLOCK_SIZE;
    4993:	48 83 c5 10          	add    $0x10,%rbp
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    4997:	e8 51 f4 ff ff       	callq  3ded <_copy>

	for (n = m = 0; n < inlen; ++n) {
    499c:	31 c0                	xor    %eax,%eax
    499e:	4c 39 f3             	cmp    %r14,%rbx
    49a1:	74 46                	je     49e9 <tc_cbc_mode_encrypt+0xfc>
		buffer[m++] ^= *in++;
    49a3:	89 c6                	mov    %eax,%esi
    49a5:	49 ff c6             	inc    %r14
    49a8:	8d 48 01             	lea    0x1(%rax),%ecx
    49ab:	8a 54 34 08          	mov    0x8(%rsp,%rsi,1),%dl
    49af:	41 32 56 ff          	xor    -0x1(%r14),%dl
    49b3:	88 54 34 08          	mov    %dl,0x8(%rsp,%rsi,1)
		if (m == TC_AES_BLOCK_SIZE) {
    49b7:	83 f8 0f             	cmp    $0xf,%eax
    49ba:	75 29                	jne    49e5 <tc_cbc_mode_encrypt+0xf8>
			(void)tc_aes_encrypt(buffer, buffer, sched);
    49bc:	4c 89 e2             	mov    %r12,%rdx
    49bf:	4c 89 ee             	mov    %r13,%rsi
    49c2:	4c 89 ef             	mov    %r13,%rdi
    49c5:	e8 9f fd ff ff       	callq  4769 <tc_aes_encrypt>
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    49ca:	b9 10 00 00 00       	mov    $0x10,%ecx
    49cf:	48 89 ef             	mov    %rbp,%rdi
    49d2:	4c 89 ea             	mov    %r13,%rdx
    49d5:	be 10 00 00 00       	mov    $0x10,%esi
				    buffer, TC_AES_BLOCK_SIZE);
			out += TC_AES_BLOCK_SIZE;
    49da:	48 83 c5 10          	add    $0x10,%rbp
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    49de:	e8 0a f4 ff ff       	callq  3ded <_copy>
			m = 0;
    49e3:	31 c9                	xor    %ecx,%ecx
	for (n = m = 0; n < inlen; ++n) {
    49e5:	89 c8                	mov    %ecx,%eax
    49e7:	eb b5                	jmp    499e <tc_cbc_mode_encrypt+0xb1>
		}
	}

	return TC_CRYPTO_SUCCESS;
    49e9:	b8 01 00 00 00       	mov    $0x1,%eax
    49ee:	eb 02                	jmp    49f2 <tc_cbc_mode_encrypt+0x105>
		return TC_CRYPTO_FAIL;
    49f0:	31 c0                	xor    %eax,%eax
}
    49f2:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    49f7:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    49fe:	00 00 
    4a00:	74 05                	je     4a07 <tc_cbc_mode_encrypt+0x11a>
    4a02:	e8 a9 da ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4a07:	48 83 c4 28          	add    $0x28,%rsp
    4a0b:	5b                   	pop    %rbx
    4a0c:	5d                   	pop    %rbp
    4a0d:	41 5c                	pop    %r12
    4a0f:	41 5d                	pop    %r13
    4a11:	41 5e                	pop    %r14
    4a13:	41 5f                	pop    %r15
    4a15:	c3                   	retq   

0000000000004a16 <tc_cbc_mode_decrypt>:

int tc_cbc_mode_decrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    4a16:	f3 0f 1e fa          	endbr64 
    4a1a:	41 57                	push   %r15
    4a1c:	41 56                	push   %r14
    4a1e:	41 55                	push   %r13
    4a20:	41 54                	push   %r12
    4a22:	55                   	push   %rbp
    4a23:	53                   	push   %rbx
    4a24:	48 83 ec 38          	sub    $0x38,%rsp
    4a28:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4a2f:	00 00 
    4a31:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    4a36:	31 c0                	xor    %eax,%eax
	uint8_t buffer[TC_AES_BLOCK_SIZE];
	const uint8_t *p;
	unsigned int n, m;

	/* sanity check the inputs */
	if (out == (uint8_t *) 0 ||
    4a38:	48 85 ff             	test   %rdi,%rdi
    4a3b:	74 7d                	je     4aba <tc_cbc_mode_decrypt+0xa4>
    4a3d:	49 89 d4             	mov    %rdx,%r12
    4a40:	48 85 d2             	test   %rdx,%rdx
    4a43:	74 75                	je     4aba <tc_cbc_mode_decrypt+0xa4>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    4a45:	4d 85 c9             	test   %r9,%r9
    4a48:	4d 89 ce             	mov    %r9,%r14
    4a4b:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    4a4e:	85 c9                	test   %ecx,%ecx
    4a50:	0f 94 c0             	sete   %al
    4a53:	08 c2                	or     %al,%dl
    4a55:	75 63                	jne    4aba <tc_cbc_mode_decrypt+0xa4>
    4a57:	85 f6                	test   %esi,%esi
    4a59:	74 5f                	je     4aba <tc_cbc_mode_decrypt+0xa4>
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    4a5b:	89 c8                	mov    %ecx,%eax
    4a5d:	09 f0                	or     %esi,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    4a5f:	a8 0f                	test   $0xf,%al
    4a61:	75 57                	jne    4aba <tc_cbc_mode_decrypt+0xa4>
    4a63:	39 f1                	cmp    %esi,%ecx
    4a65:	75 53                	jne    4aba <tc_cbc_mode_decrypt+0xa4>
    4a67:	89 f0                	mov    %esi,%eax
    4a69:	49 89 fd             	mov    %rdi,%r13
    4a6c:	4d 89 c7             	mov    %r8,%r15
    4a6f:	31 db                	xor    %ebx,%ebx
    4a71:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	 * that would not otherwise be possible.
	 */
	p = iv;
	for (n = m = 0; n < outlen; ++n) {
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
			(void)tc_aes_decrypt(buffer, in, sched);
    4a76:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
	for (n = m = 0; n < outlen; ++n) {
    4a7b:	31 c0                	xor    %eax,%eax
    4a7d:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    4a82:	74 2f                	je     4ab3 <tc_cbc_mode_decrypt+0x9d>
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
    4a84:	f6 c3 0f             	test   $0xf,%bl
    4a87:	75 14                	jne    4a9d <tc_cbc_mode_decrypt+0x87>
			(void)tc_aes_decrypt(buffer, in, sched);
    4a89:	4c 89 e6             	mov    %r12,%rsi
    4a8c:	4c 89 f2             	mov    %r14,%rdx
    4a8f:	48 89 ef             	mov    %rbp,%rdi
			in += TC_AES_BLOCK_SIZE;
    4a92:	49 83 c4 10          	add    $0x10,%r12
			(void)tc_aes_decrypt(buffer, in, sched);
    4a96:	e8 76 f8 ff ff       	callq  4311 <tc_aes_decrypt>
			m = 0;
    4a9b:	31 c0                	xor    %eax,%eax
		}
		*out++ = buffer[m++] ^ *p++;
    4a9d:	89 c2                	mov    %eax,%edx
    4a9f:	ff c0                	inc    %eax
    4aa1:	8a 54 14 18          	mov    0x18(%rsp,%rdx,1),%dl
    4aa5:	41 32 14 1f          	xor    (%r15,%rbx,1),%dl
    4aa9:	41 88 54 1d 00       	mov    %dl,0x0(%r13,%rbx,1)
	for (n = m = 0; n < outlen; ++n) {
    4aae:	48 ff c3             	inc    %rbx
    4ab1:	eb ca                	jmp    4a7d <tc_cbc_mode_decrypt+0x67>
	}

	return TC_CRYPTO_SUCCESS;
    4ab3:	b8 01 00 00 00       	mov    $0x1,%eax
    4ab8:	eb 02                	jmp    4abc <tc_cbc_mode_decrypt+0xa6>
		return TC_CRYPTO_FAIL;
    4aba:	31 c0                	xor    %eax,%eax
}
    4abc:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    4ac1:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4ac8:	00 00 
    4aca:	74 05                	je     4ad1 <tc_cbc_mode_decrypt+0xbb>
    4acc:	e8 df d9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4ad1:	48 83 c4 38          	add    $0x38,%rsp
    4ad5:	5b                   	pop    %rbx
    4ad6:	5d                   	pop    %rbp
    4ad7:	41 5c                	pop    %r12
    4ad9:	41 5d                	pop    %r13
    4adb:	41 5e                	pop    %r14
    4add:	41 5f                	pop    %r15
    4adf:	c3                   	retq   

0000000000004ae0 <tc_ctr_mode>:
#include <tinycrypt/ctr_mode.h>
#include <tinycrypt/utils.h>

int tc_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
		unsigned int inlen, uint8_t *ctr, const TCAesKeySched_t sched)
{
    4ae0:	f3 0f 1e fa          	endbr64 
    4ae4:	41 57                	push   %r15
    4ae6:	41 56                	push   %r14
    4ae8:	41 55                	push   %r13
    4aea:	41 54                	push   %r12
    4aec:	55                   	push   %rbp
    4aed:	53                   	push   %rbx
    4aee:	48 83 ec 58          	sub    $0x58,%rsp
    4af2:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4af9:	00 00 
    4afb:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    4b00:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	unsigned int block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    4b02:	48 85 ff             	test   %rdi,%rdi
    4b05:	74 08                	je     4b0f <tc_ctr_mode+0x2f>
    4b07:	49 89 d4             	mov    %rdx,%r12
    4b0a:	48 85 d2             	test   %rdx,%rdx
    4b0d:	75 07                	jne    4b16 <tc_ctr_mode+0x36>
	    ctr == (uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
	    outlen == 0 ||
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
    4b0f:	31 c0                	xor    %eax,%eax
    4b11:	e9 cb 00 00 00       	jmpq   4be1 <tc_ctr_mode+0x101>
	    ctr == (uint8_t *) 0 ||
    4b16:	4d 85 c0             	test   %r8,%r8
    4b19:	74 f4                	je     4b0f <tc_ctr_mode+0x2f>
    4b1b:	4d 89 cd             	mov    %r9,%r13
    4b1e:	4d 85 c9             	test   %r9,%r9
    4b21:	74 ec                	je     4b0f <tc_ctr_mode+0x2f>
	    inlen == 0 ||
    4b23:	85 c9                	test   %ecx,%ecx
    4b25:	89 cb                	mov    %ecx,%ebx
    4b27:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    4b2a:	85 f6                	test   %esi,%esi
    4b2c:	0f 94 c0             	sete   %al
    4b2f:	08 c2                	or     %al,%dl
    4b31:	75 dc                	jne    4b0f <tc_ctr_mode+0x2f>
    4b33:	39 f1                	cmp    %esi,%ecx
    4b35:	75 d8                	jne    4b0f <tc_ctr_mode+0x2f>
	}

	/* copy the ctr to the nonce */
	(void)_copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    4b37:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4b3c:	4c 89 c2             	mov    %r8,%rdx
    4b3f:	48 89 fd             	mov    %rdi,%rbp
    4b42:	b9 10 00 00 00       	mov    $0x10,%ecx
    4b47:	4c 89 ff             	mov    %r15,%rdi
    4b4a:	be 10 00 00 00       	mov    $0x10,%esi
    4b4f:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    4b54:	e8 94 f2 ff ff       	callq  3ded <_copy>

	/* select the last 4 bytes of the nonce to be incremented */
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
    4b59:	89 d8                	mov    %ebx,%eax
    4b5b:	44 8b 4c 24 44       	mov    0x44(%rsp),%r9d
		    (nonce[14] << 8) | (nonce[15]);
	for (i = 0; i < inlen; ++i) {
    4b60:	31 db                	xor    %ebx,%ebx
    4b62:	48 89 04 24          	mov    %rax,(%rsp)
    4b66:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			/* encrypt data using the current nonce */
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    4b6b:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    4b70:	41 0f c9             	bswap  %r9d
	for (i = 0; i < inlen; ++i) {
    4b73:	48 3b 1c 24          	cmp    (%rsp),%rbx
    4b77:	74 5b                	je     4bd4 <tc_ctr_mode+0xf4>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    4b79:	41 89 de             	mov    %ebx,%r14d
    4b7c:	41 83 e6 0f          	and    $0xf,%r14d
    4b80:	75 3d                	jne    4bbf <tc_ctr_mode+0xdf>
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    4b82:	4c 89 ea             	mov    %r13,%rdx
    4b85:	4c 89 fe             	mov    %r15,%rsi
    4b88:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    4b8d:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    4b92:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    4b97:	e8 cd fb ff ff       	callq  4769 <tc_aes_encrypt>
    4b9c:	85 c0                	test   %eax,%eax
    4b9e:	0f 84 6b ff ff ff    	je     4b0f <tc_ctr_mode+0x2f>
				block_num++;
    4ba4:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
				nonce[12] = (uint8_t)(block_num >> 24);
    4ba9:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    4bae:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
				block_num++;
    4bb3:	41 ff c1             	inc    %r9d
				nonce[13] = (uint8_t)(block_num >> 16);
				nonce[14] = (uint8_t)(block_num >> 8);
				nonce[15] = (uint8_t)(block_num);
    4bb6:	44 89 c8             	mov    %r9d,%eax
    4bb9:	0f c8                	bswap  %eax
				nonce[12] = (uint8_t)(block_num >> 24);
    4bbb:	89 44 24 44          	mov    %eax,0x44(%rsp)
			} else {
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i%(TC_AES_BLOCK_SIZE)] ^ *in++;
    4bbf:	45 89 f6             	mov    %r14d,%r14d
    4bc2:	42 8a 44 34 28       	mov    0x28(%rsp,%r14,1),%al
    4bc7:	41 32 04 1c          	xor    (%r12,%rbx,1),%al
    4bcb:	88 44 1d 00          	mov    %al,0x0(%rbp,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    4bcf:	48 ff c3             	inc    %rbx
    4bd2:	eb 9f                	jmp    4b73 <tc_ctr_mode+0x93>
	}

	/* update the counter */
	ctr[12] = nonce[12]; ctr[13] = nonce[13];
    4bd4:	8b 44 24 44          	mov    0x44(%rsp),%eax
    4bd8:	41 89 40 0c          	mov    %eax,0xc(%r8)
	ctr[14] = nonce[14]; ctr[15] = nonce[15];

	return TC_CRYPTO_SUCCESS;
    4bdc:	b8 01 00 00 00       	mov    $0x1,%eax
}
    4be1:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    4be6:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4bed:	00 00 
    4bef:	74 05                	je     4bf6 <tc_ctr_mode+0x116>
    4bf1:	e8 ba d8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4bf6:	48 83 c4 58          	add    $0x58,%rsp
    4bfa:	5b                   	pop    %rbx
    4bfb:	5d                   	pop    %rbp
    4bfc:	41 5c                	pop    %r12
    4bfe:	41 5d                	pop    %r13
    4c00:	41 5e                	pop    %r14
    4c02:	41 5f                	pop    %r15
    4c04:	c3                   	retq   

0000000000004c05 <ccm_cbc_mac>:
/**
 * Variation of CBC-MAC mode used in CCM.
 */
static void ccm_cbc_mac(uint8_t *T, const uint8_t *data, unsigned int dlen,
			unsigned int flag, TCAesKeySched_t sched)
{
    4c05:	41 56                	push   %r14
    4c07:	41 55                	push   %r13
    4c09:	4d 89 c5             	mov    %r8,%r13
    4c0c:	41 54                	push   %r12
    4c0e:	49 89 f4             	mov    %rsi,%r12
    4c11:	55                   	push   %rbp
    4c12:	89 d5                	mov    %edx,%ebp
    4c14:	53                   	push   %rbx
    4c15:	48 89 fb             	mov    %rdi,%rbx

	unsigned int i;

	if (flag > 0) {
    4c18:	85 c9                	test   %ecx,%ecx
    4c1a:	74 34                	je     4c50 <ccm_cbc_mac+0x4b>
		T[0] ^= (uint8_t)(dlen >> 8);
    4c1c:	89 d0                	mov    %edx,%eax
		T[1] ^= (uint8_t)(dlen);
    4c1e:	30 57 01             	xor    %dl,0x1(%rdi)
		dlen += 2; i = 2;
    4c21:	83 c5 02             	add    $0x2,%ebp
    4c24:	b9 02 00 00 00       	mov    $0x2,%ecx
		T[0] ^= (uint8_t)(dlen >> 8);
    4c29:	c1 e8 08             	shr    $0x8,%eax
    4c2c:	30 07                	xor    %al,(%rdi)
		dlen += 2; i = 2;
    4c2e:	eb 20                	jmp    4c50 <ccm_cbc_mac+0x4b>
	} else {
		i = 0;
	}

	while (i < dlen) {
		T[i++ % (Nb * Nk)] ^= *data++;
    4c30:	44 8d 71 01          	lea    0x1(%rcx),%r14d
    4c34:	83 e1 0f             	and    $0xf,%ecx
    4c37:	49 ff c4             	inc    %r12
    4c3a:	41 8a 44 24 ff       	mov    -0x1(%r12),%al
    4c3f:	30 04 0b             	xor    %al,(%rbx,%rcx,1)
		if (((i % (Nb * Nk)) == 0) || dlen == i) {
    4c42:	41 f6 c6 0f          	test   $0xf,%r14b
    4c46:	74 0e                	je     4c56 <ccm_cbc_mac+0x51>
    4c48:	41 39 ee             	cmp    %ebp,%r14d
    4c4b:	74 09                	je     4c56 <ccm_cbc_mac+0x51>
		T[i++ % (Nb * Nk)] ^= *data++;
    4c4d:	44 89 f1             	mov    %r14d,%ecx
	while (i < dlen) {
    4c50:	39 e9                	cmp    %ebp,%ecx
    4c52:	72 dc                	jb     4c30 <ccm_cbc_mac+0x2b>
    4c54:	eb 10                	jmp    4c66 <ccm_cbc_mac+0x61>
			(void) tc_aes_encrypt(T, T, sched);
    4c56:	4c 89 ea             	mov    %r13,%rdx
    4c59:	48 89 de             	mov    %rbx,%rsi
    4c5c:	48 89 df             	mov    %rbx,%rdi
    4c5f:	e8 05 fb ff ff       	callq  4769 <tc_aes_encrypt>
    4c64:	eb e7                	jmp    4c4d <ccm_cbc_mac+0x48>
		}
	}
}
    4c66:	5b                   	pop    %rbx
    4c67:	5d                   	pop    %rbp
    4c68:	41 5c                	pop    %r12
    4c6a:	41 5d                	pop    %r13
    4c6c:	41 5e                	pop    %r14
    4c6e:	c3                   	retq   

0000000000004c6f <ccm_ctr_mode.constprop.0>:
 * The CTR mode used by CCM is slightly different than the conventional CTR
 * mode (the counter is increased before encryption, instead of after
 * encryption). Besides, it is assumed that the counter is stored in the last
 * 2 bytes of the nonce.
 */
static int ccm_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
    4c6f:	41 57                	push   %r15
    4c71:	41 56                	push   %r14
    4c73:	41 55                	push   %r13
    4c75:	41 54                	push   %r12
    4c77:	55                   	push   %rbp
    4c78:	53                   	push   %rbx
    4c79:	48 83 ec 58          	sub    $0x58,%rsp
    4c7d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4c84:	00 00 
    4c86:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    4c8b:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	uint16_t block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    4c8d:	48 85 ff             	test   %rdi,%rdi
    4c90:	0f 84 dc 00 00 00    	je     4d72 <ccm_ctr_mode.constprop.0+0x103>
    4c96:	49 89 d5             	mov    %rdx,%r13
    4c99:	48 85 d2             	test   %rdx,%rdx
    4c9c:	0f 84 d0 00 00 00    	je     4d72 <ccm_ctr_mode.constprop.0+0x103>
    4ca2:	4d 89 ce             	mov    %r9,%r14
	    in == (uint8_t *) 0 ||
	    ctr == (uint8_t *) 0 ||
    4ca5:	4d 85 c9             	test   %r9,%r9
    4ca8:	0f 84 c6 00 00 00    	je     4d74 <ccm_ctr_mode.constprop.0+0x105>
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
    4cae:	85 c9                	test   %ecx,%ecx
    4cb0:	89 cb                	mov    %ecx,%ebx
    4cb2:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    4cb5:	85 f6                	test   %esi,%esi
    4cb7:	0f 94 c0             	sete   %al
    4cba:	08 c2                	or     %al,%dl
    4cbc:	0f 85 b0 00 00 00    	jne    4d72 <ccm_ctr_mode.constprop.0+0x103>
    4cc2:	39 f1                	cmp    %esi,%ecx
    4cc4:	0f 85 a8 00 00 00    	jne    4d72 <ccm_ctr_mode.constprop.0+0x103>
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
	}

	/* copy the counter to the nonce */
	(void) _copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    4cca:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4ccf:	4c 89 c2             	mov    %r8,%rdx
    4cd2:	49 89 fc             	mov    %rdi,%r12
    4cd5:	b9 10 00 00 00       	mov    $0x10,%ecx
    4cda:	4c 89 ff             	mov    %r15,%rdi
    4cdd:	be 10 00 00 00       	mov    $0x10,%esi
    4ce2:	4c 89 c5             	mov    %r8,%rbp
    4ce5:	e8 03 f1 ff ff       	callq  3ded <_copy>

	/* select the last 2 bytes of the nonce to be incremented */
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4cea:	44 0f b6 44 24 46    	movzbl 0x46(%rsp),%r8d
    4cf0:	0f b6 44 24 47       	movzbl 0x47(%rsp),%eax
	for (i = 0; i < inlen; ++i) {
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			block_num++;
			nonce[14] = (uint8_t)(block_num >> 8);
			nonce[15] = (uint8_t)(block_num);
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4cf5:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4cfa:	41 c1 e0 08          	shl    $0x8,%r8d
    4cfe:	41 09 c0             	or     %eax,%r8d
	for (i = 0; i < inlen; ++i) {
    4d01:	89 d8                	mov    %ebx,%eax
    4d03:	31 db                	xor    %ebx,%ebx
    4d05:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4d0a:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    4d0f:	74 51                	je     4d62 <ccm_ctr_mode.constprop.0+0xf3>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    4d11:	89 d8                	mov    %ebx,%eax
    4d13:	83 e0 0f             	and    $0xf,%eax
    4d16:	89 44 24 18          	mov    %eax,0x18(%rsp)
    4d1a:	75 30                	jne    4d4c <ccm_ctr_mode.constprop.0+0xdd>
			block_num++;
    4d1c:	41 ff c0             	inc    %r8d
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4d1f:	4c 89 f2             	mov    %r14,%rdx
    4d22:	4c 89 fe             	mov    %r15,%rsi
    4d25:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
			nonce[14] = (uint8_t)(block_num >> 8);
    4d2a:	44 89 c0             	mov    %r8d,%eax
    4d2d:	44 89 44 24 1c       	mov    %r8d,0x1c(%rsp)
    4d32:	86 e0                	xchg   %ah,%al
    4d34:	66 89 44 24 46       	mov    %ax,0x46(%rsp)
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4d39:	e8 2b fa ff ff       	callq  4769 <tc_aes_encrypt>
    4d3e:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4d43:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    4d48:	85 c0                	test   %eax,%eax
    4d4a:	74 28                	je     4d74 <ccm_ctr_mode.constprop.0+0x105>
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i % (TC_AES_BLOCK_SIZE)] ^ *in++;
    4d4c:	8b 44 24 18          	mov    0x18(%rsp),%eax
    4d50:	8a 44 04 28          	mov    0x28(%rsp,%rax,1),%al
    4d54:	41 32 44 1d 00       	xor    0x0(%r13,%rbx,1),%al
    4d59:	41 88 04 1c          	mov    %al,(%r12,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    4d5d:	48 ff c3             	inc    %rbx
    4d60:	eb a8                	jmp    4d0a <ccm_ctr_mode.constprop.0+0x9b>
	}

	/* update the counter */
	ctr[14] = nonce[14]; ctr[15] = nonce[15];
    4d62:	66 8b 44 24 46       	mov    0x46(%rsp),%ax
    4d67:	66 89 45 0e          	mov    %ax,0xe(%rbp)

	return TC_CRYPTO_SUCCESS;
    4d6b:	b8 01 00 00 00       	mov    $0x1,%eax
    4d70:	eb 02                	jmp    4d74 <ccm_ctr_mode.constprop.0+0x105>
		return TC_CRYPTO_FAIL;
    4d72:	31 c0                	xor    %eax,%eax
}
    4d74:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    4d79:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4d80:	00 00 
    4d82:	74 05                	je     4d89 <ccm_ctr_mode.constprop.0+0x11a>
    4d84:	e8 27 d7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4d89:	48 83 c4 58          	add    $0x58,%rsp
    4d8d:	5b                   	pop    %rbx
    4d8e:	5d                   	pop    %rbp
    4d8f:	41 5c                	pop    %r12
    4d91:	41 5d                	pop    %r13
    4d93:	41 5e                	pop    %r14
    4d95:	41 5f                	pop    %r15
    4d97:	c3                   	retq   

0000000000004d98 <tc_ccm_config>:
{
    4d98:	f3 0f 1e fa          	endbr64 
	if (c == (TCCcmMode_t) 0 ||
    4d9c:	48 85 ff             	test   %rdi,%rdi
    4d9f:	0f 94 c0             	sete   %al
	    sched == (TCAesKeySched_t) 0 ||
    4da2:	48 85 f6             	test   %rsi,%rsi
    4da5:	41 0f 94 c1          	sete   %r9b
	if (c == (TCCcmMode_t) 0 ||
    4da9:	44 09 c8             	or     %r9d,%eax
	    sched == (TCAesKeySched_t) 0 ||
    4dac:	48 85 d2             	test   %rdx,%rdx
    4daf:	41 0f 94 c1          	sete   %r9b
	} else if (nlen != 13) {
    4db3:	44 08 c8             	or     %r9b,%al
    4db6:	75 27                	jne    4ddf <tc_ccm_config+0x47>
    4db8:	83 f9 0d             	cmp    $0xd,%ecx
    4dbb:	75 22                	jne    4ddf <tc_ccm_config+0x47>
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    4dbd:	41 8d 48 fc          	lea    -0x4(%r8),%ecx
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    4dc1:	31 c0                	xor    %eax,%eax
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    4dc3:	83 f9 0c             	cmp    $0xc,%ecx
    4dc6:	77 19                	ja     4de1 <tc_ccm_config+0x49>
    4dc8:	41 f6 c0 01          	test   $0x1,%r8b
    4dcc:	75 13                	jne    4de1 <tc_ccm_config+0x49>
	c->mlen = mlen;
    4dce:	44 89 47 10          	mov    %r8d,0x10(%rdi)
	return TC_CRYPTO_SUCCESS;
    4dd2:	b8 01 00 00 00       	mov    $0x1,%eax
	c->sched = sched;
    4dd7:	48 89 37             	mov    %rsi,(%rdi)
	c->nonce = nonce;
    4dda:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	return TC_CRYPTO_SUCCESS;
    4dde:	c3                   	retq   
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    4ddf:	31 c0                	xor    %eax,%eax
}
    4de1:	c3                   	retq   

0000000000004de2 <tc_ccm_generation_encryption>:

int tc_ccm_generation_encryption(uint8_t *out, unsigned int olen,
				 const uint8_t *associated_data,
				 unsigned int alen, const uint8_t *payload,
				 unsigned int plen, TCCcmMode_t c)
{
    4de2:	f3 0f 1e fa          	endbr64 
    4de6:	41 57                	push   %r15
    4de8:	41 56                	push   %r14
    4dea:	41 55                	push   %r13
    4dec:	41 54                	push   %r12
    4dee:	55                   	push   %rbp
    4def:	53                   	push   %rbx
    4df0:	48 83 ec 48          	sub    $0x48,%rsp
    4df4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4dfb:	00 00 
    4dfd:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4e02:	31 c0                	xor    %eax,%eax
    4e04:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4e0b:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4e0c:	48 85 ff             	test   %rdi,%rdi
    4e0f:	0f 84 59 01 00 00    	je     4f6e <tc_ccm_generation_encryption+0x18c>
    4e15:	48 85 ed             	test   %rbp,%rbp
    4e18:	0f 84 50 01 00 00    	je     4f6e <tc_ccm_generation_encryption+0x18c>
    4e1e:	44 89 cb             	mov    %r9d,%ebx
    4e21:	49 89 fc             	mov    %rdi,%r12
    4e24:	49 89 d3             	mov    %rdx,%r11
    4e27:	41 89 ca             	mov    %ecx,%r10d
    4e2a:	4d 89 c6             	mov    %r8,%r14
		(c == (TCCcmMode_t) 0) ||
    4e2d:	85 db                	test   %ebx,%ebx
    4e2f:	74 0c                	je     4e3d <tc_ccm_generation_encryption+0x5b>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
		((alen > 0) && (associated_data == (uint8_t *) 0)) ||
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4e31:	45 31 c0             	xor    %r8d,%r8d
		(c == (TCCcmMode_t) 0) ||
    4e34:	4d 85 f6             	test   %r14,%r14
    4e37:	0f 84 34 01 00 00    	je     4f71 <tc_ccm_generation_encryption+0x18f>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4e3d:	45 85 d2             	test   %r10d,%r10d
    4e40:	74 0c                	je     4e4e <tc_ccm_generation_encryption+0x6c>
		return TC_CRYPTO_FAIL;
    4e42:	45 31 c0             	xor    %r8d,%r8d
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4e45:	4d 85 db             	test   %r11,%r11
    4e48:	0f 84 23 01 00 00    	je     4f71 <tc_ccm_generation_encryption+0x18f>
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    4e4e:	41 81 fa ff fe 00 00 	cmp    $0xfeff,%r10d
    4e55:	0f 87 13 01 00 00    	ja     4f6e <tc_ccm_generation_encryption+0x18c>
    4e5b:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    4e61:	0f 87 07 01 00 00    	ja     4f6e <tc_ccm_generation_encryption+0x18c>
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4e67:	8b 45 10             	mov    0x10(%rbp),%eax
		return TC_CRYPTO_FAIL;
    4e6a:	45 31 c0             	xor    %r8d,%r8d
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4e6d:	8d 14 18             	lea    (%rax,%rbx,1),%edx
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    4e70:	39 f2                	cmp    %esi,%edx
    4e72:	0f 87 f9 00 00 00    	ja     4f71 <tc_ccm_generation_encryption+0x18f>
	unsigned int i;

	/* GENERATING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4e78:	45 85 d2             	test   %r10d,%r10d
	for (i = 1; i <= 13; ++i) {
		b[i] = c->nonce[i - 1];
    4e7b:	48 8b 75 08          	mov    0x8(%rbp),%rsi
    4e7f:	4c 8d 6c 24 18       	lea    0x18(%rsp),%r13
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4e84:	0f 95 c2             	setne  %dl
    4e87:	83 e8 02             	sub    $0x2,%eax
    4e8a:	d1 e8                	shr    %eax
    4e8c:	c1 e2 06             	shl    $0x6,%edx
    4e8f:	c1 e0 03             	shl    $0x3,%eax
    4e92:	09 d0                	or     %edx,%eax
		b[i] = c->nonce[i - 1];
    4e94:	48 8d 54 24 19       	lea    0x19(%rsp),%rdx
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4e99:	83 c8 01             	or     $0x1,%eax
    4e9c:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    4ea0:	31 c0                	xor    %eax,%eax
    4ea2:	8a 0c 06             	mov    (%rsi,%rax,1),%cl
    4ea5:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
	for (i = 1; i <= 13; ++i) {
    4ea8:	48 ff c0             	inc    %rax
    4eab:	48 83 f8 0d          	cmp    $0xd,%rax
    4eaf:	75 f1                	jne    4ea2 <tc_ccm_generation_encryption+0xc0>
	}
	b[14] = (uint8_t)(plen >> 8);
    4eb1:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(tag, b, c->sched);
    4eb3:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4eb7:	4c 8d 7c 24 28       	lea    0x28(%rsp),%r15
    4ebc:	4c 89 ee             	mov    %r13,%rsi
	b[14] = (uint8_t)(plen >> 8);
    4ebf:	86 e0                	xchg   %ah,%al
	(void) tc_aes_encrypt(tag, b, c->sched);
    4ec1:	4c 89 ff             	mov    %r15,%rdi
    4ec4:	44 89 54 24 0c       	mov    %r10d,0xc(%rsp)
    4ec9:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = (uint8_t)(plen >> 8);
    4ecd:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
	(void) tc_aes_encrypt(tag, b, c->sched);
    4ed2:	e8 92 f8 ff ff       	callq  4769 <tc_aes_encrypt>
	if (alen > 0) {
    4ed7:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
    4edc:	4c 8b 1c 24          	mov    (%rsp),%r11
    4ee0:	45 85 d2             	test   %r10d,%r10d
    4ee3:	74 17                	je     4efc <tc_ccm_generation_encryption+0x11a>
		ccm_cbc_mac(tag, associated_data, alen, 1, c->sched);
    4ee5:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4ee9:	b9 01 00 00 00       	mov    $0x1,%ecx
    4eee:	44 89 d2             	mov    %r10d,%edx
    4ef1:	4c 89 de             	mov    %r11,%rsi
    4ef4:	4c 89 ff             	mov    %r15,%rdi
    4ef7:	e8 09 fd ff ff       	callq  4c05 <ccm_cbc_mac>
	}
	if (plen > 0) {
    4efc:	85 db                	test   %ebx,%ebx
    4efe:	74 13                	je     4f13 <tc_ccm_generation_encryption+0x131>
		ccm_cbc_mac(tag, payload, plen, 0, c->sched);
    4f00:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4f04:	31 c9                	xor    %ecx,%ecx
    4f06:	89 da                	mov    %ebx,%edx
    4f08:	4c 89 f6             	mov    %r14,%rsi
    4f0b:	4c 89 ff             	mov    %r15,%rdi
    4f0e:	e8 f2 fc ff ff       	callq  4c05 <ccm_cbc_mac>
	/* formatting the sequence b for encryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
	b[14] = b[15] = TC_ZERO_BYTE;

	/* encrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4f13:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    4f17:	89 d9                	mov    %ebx,%ecx
    4f19:	89 de                	mov    %ebx,%esi
    4f1b:	4d 89 e8             	mov    %r13,%r8
    4f1e:	4c 89 f2             	mov    %r14,%rdx
    4f21:	4c 89 e7             	mov    %r12,%rdi
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    4f24:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/

	/* encrypting b and adding the tag to the output: */
	(void) tc_aes_encrypt(b, b, c->sched);
	out += plen;
    4f29:	4c 01 e3             	add    %r12,%rbx
	b[14] = b[15] = TC_ZERO_BYTE;
    4f2c:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4f33:	e8 37 fd ff ff       	callq  4c6f <ccm_ctr_mode.constprop.0>
	(void) tc_aes_encrypt(b, b, c->sched);
    4f38:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4f3c:	4c 89 ee             	mov    %r13,%rsi
    4f3f:	4c 89 ef             	mov    %r13,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/
    4f42:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4f49:	e8 1b f8 ff ff       	callq  4769 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    4f4e:	31 c0                	xor    %eax,%eax
    4f50:	39 45 10             	cmp    %eax,0x10(%rbp)
    4f53:	76 11                	jbe    4f66 <tc_ccm_generation_encryption+0x184>
		*out++ = tag[i] ^ b[i];
    4f55:	41 8a 14 07          	mov    (%r15,%rax,1),%dl
    4f59:	41 32 54 05 00       	xor    0x0(%r13,%rax,1),%dl
    4f5e:	88 14 03             	mov    %dl,(%rbx,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    4f61:	48 ff c0             	inc    %rax
    4f64:	eb ea                	jmp    4f50 <tc_ccm_generation_encryption+0x16e>
	}

	return TC_CRYPTO_SUCCESS;
    4f66:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    4f6c:	eb 03                	jmp    4f71 <tc_ccm_generation_encryption+0x18f>
		return TC_CRYPTO_FAIL;
    4f6e:	45 31 c0             	xor    %r8d,%r8d
}
    4f71:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    4f76:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4f7d:	00 00 
    4f7f:	74 05                	je     4f86 <tc_ccm_generation_encryption+0x1a4>
    4f81:	e8 2a d5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4f86:	48 83 c4 48          	add    $0x48,%rsp
    4f8a:	44 89 c0             	mov    %r8d,%eax
    4f8d:	5b                   	pop    %rbx
    4f8e:	5d                   	pop    %rbp
    4f8f:	41 5c                	pop    %r12
    4f91:	41 5d                	pop    %r13
    4f93:	41 5e                	pop    %r14
    4f95:	41 5f                	pop    %r15
    4f97:	c3                   	retq   

0000000000004f98 <tc_ccm_decryption_verification>:

int tc_ccm_decryption_verification(uint8_t *out, unsigned int olen,
				   const uint8_t *associated_data,
				   unsigned int alen, const uint8_t *payload,
				   unsigned int plen, TCCcmMode_t c)
{
    4f98:	f3 0f 1e fa          	endbr64 
    4f9c:	41 57                	push   %r15
    4f9e:	41 56                	push   %r14
    4fa0:	41 55                	push   %r13
    4fa2:	49 89 fd             	mov    %rdi,%r13
    4fa5:	41 54                	push   %r12
    4fa7:	55                   	push   %rbp
    4fa8:	53                   	push   %rbx
    4fa9:	48 83 ec 48          	sub    $0x48,%rsp
    4fad:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4fb4:	00 00 
    4fb6:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4fbb:	31 c0                	xor    %eax,%eax
    4fbd:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4fc4:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4fc5:	48 85 ff             	test   %rdi,%rdi
    4fc8:	0f 84 a2 01 00 00    	je     5170 <tc_ccm_decryption_verification+0x1d8>
    4fce:	48 85 ed             	test   %rbp,%rbp
    4fd1:	0f 84 99 01 00 00    	je     5170 <tc_ccm_decryption_verification+0x1d8>
    4fd7:	89 f7                	mov    %esi,%edi
    4fd9:	49 89 d6             	mov    %rdx,%r14
    4fdc:	41 89 cf             	mov    %ecx,%r15d
    4fdf:	4d 89 c3             	mov    %r8,%r11
    4fe2:	44 89 cb             	mov    %r9d,%ebx
	    (c == (TCCcmMode_t) 0) ||
    4fe5:	45 85 c9             	test   %r9d,%r9d
    4fe8:	74 09                	je     4ff3 <tc_ccm_decryption_verification+0x5b>
    4fea:	4d 85 c0             	test   %r8,%r8
    4fed:	0f 84 7f 01 00 00    	je     5172 <tc_ccm_decryption_verification+0x1da>
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4ff3:	45 85 ff             	test   %r15d,%r15d
    4ff6:	74 0b                	je     5003 <tc_ccm_decryption_verification+0x6b>
	    ((alen > 0) && (associated_data == (uint8_t *) 0)) ||
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4ff8:	31 c0                	xor    %eax,%eax
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4ffa:	4d 85 f6             	test   %r14,%r14
    4ffd:	0f 84 6f 01 00 00    	je     5172 <tc_ccm_decryption_verification+0x1da>
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    5003:	41 81 ff ff fe 00 00 	cmp    $0xfeff,%r15d
    500a:	0f 87 60 01 00 00    	ja     5170 <tc_ccm_decryption_verification+0x1d8>
    5010:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    5016:	0f 87 54 01 00 00    	ja     5170 <tc_ccm_decryption_verification+0x1d8>
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
    501c:	89 de                	mov    %ebx,%esi
    501e:	2b 75 10             	sub    0x10(%rbp),%esi
		return TC_CRYPTO_FAIL;
    5021:	31 c0                	xor    %eax,%eax
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    5023:	39 fe                	cmp    %edi,%esi
    5025:	0f 87 47 01 00 00    	ja     5172 <tc_ccm_decryption_verification+0x1da>
	unsigned int i;

	/* DECRYPTION: */

	/* formatting the sequence b for decryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    502b:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    5030:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    5034:	31 c0                	xor    %eax,%eax
    5036:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
    503b:	4c 8d 54 24 19       	lea    0x19(%rsp),%r10
    5040:	8a 14 01             	mov    (%rcx,%rax,1),%dl
    5043:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    5047:	48 ff c0             	inc    %rax
    504a:	48 83 f8 0d          	cmp    $0xd,%rax
    504e:	75 f0                	jne    5040 <tc_ccm_decryption_verification+0xa8>
	}
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */

	/* decrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    5050:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    5054:	89 f1                	mov    %esi,%ecx
    5056:	4c 89 da             	mov    %r11,%rdx
    5059:	4d 89 e0             	mov    %r12,%r8
    505c:	4c 89 ef             	mov    %r13,%rdi
    505f:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
    5064:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */
    5068:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    506f:	e8 fb fb ff ff       	callq  4c6f <ccm_ctr_mode.constprop.0>

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */

	/* encrypting b and restoring the tag from input: */
	(void) tc_aes_encrypt(b, b, c->sched);
    5074:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    5078:	4c 89 e6             	mov    %r12,%rsi
    507b:	4c 89 e7             	mov    %r12,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */
    507e:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    5085:	e8 df f6 ff ff       	callq  4769 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    508a:	8b 45 10             	mov    0x10(%rbp),%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    508d:	4c 8b 1c 24          	mov    (%rsp),%r11
    5091:	41 89 d8             	mov    %ebx,%r8d
	for (i = 0; i < c->mlen; ++i) {
    5094:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    5099:	49 29 c0             	sub    %rax,%r8
	for (i = 0; i < c->mlen; ++i) {
    509c:	48 89 c1             	mov    %rax,%rcx
    509f:	31 c0                	xor    %eax,%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    50a1:	4d 01 c3             	add    %r8,%r11
	for (i = 0; i < c->mlen; ++i) {
    50a4:	39 c1                	cmp    %eax,%ecx
    50a6:	76 11                	jbe    50b9 <tc_ccm_decryption_verification+0x121>
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    50a8:	41 8a 14 03          	mov    (%r11,%rax,1),%dl
    50ac:	41 32 14 04          	xor    (%r12,%rax,1),%dl
    50b0:	88 54 04 28          	mov    %dl,0x28(%rsp,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    50b4:	48 ff c0             	inc    %rax
    50b7:	eb eb                	jmp    50a4 <tc_ccm_decryption_verification+0x10c>
	}

	/* VERIFYING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    50b9:	45 85 ff             	test   %r15d,%r15d
    50bc:	0f 95 c0             	setne  %al
    50bf:	c1 e0 06             	shl    $0x6,%eax
    50c2:	89 c6                	mov    %eax,%esi
    50c4:	8d 41 fe             	lea    -0x2(%rcx),%eax
    50c7:	d1 e8                	shr    %eax
    50c9:	8d 04 c5 00 00 00 00 	lea    0x0(,%rax,8),%eax
    50d0:	09 f0                	or     %esi,%eax
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    50d2:	48 8b 75 08          	mov    0x8(%rbp),%rsi
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    50d6:	83 c8 01             	or     $0x1,%eax
    50d9:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    50dd:	31 c0                	xor    %eax,%eax
    50df:	8a 14 06             	mov    (%rsi,%rax,1),%dl
    50e2:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    50e6:	48 ff c0             	inc    %rax
    50e9:	48 83 f8 0d          	cmp    $0xd,%rax
    50ed:	75 f0                	jne    50df <tc_ccm_decryption_verification+0x147>
	}
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    50ef:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen - c->mlen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(b, b, c->sched);
    50f1:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    50f5:	4c 89 e6             	mov    %r12,%rsi
    50f8:	4c 89 e7             	mov    %r12,%rdi
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    50fb:	29 c8                	sub    %ecx,%eax
    50fd:	88 64 24 26          	mov    %ah,0x26(%rsp)
	b[15] = (uint8_t)(plen - c->mlen);
    5101:	89 d8                	mov    %ebx,%eax
    5103:	29 c8                	sub    %ecx,%eax
    5105:	88 44 24 27          	mov    %al,0x27(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    5109:	e8 5b f6 ff ff       	callq  4769 <tc_aes_encrypt>
	if (alen > 0) {
    510e:	45 85 ff             	test   %r15d,%r15d
    5111:	74 17                	je     512a <tc_ccm_decryption_verification+0x192>
		ccm_cbc_mac(b, associated_data, alen, 1, c->sched);
    5113:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    5117:	b9 01 00 00 00       	mov    $0x1,%ecx
    511c:	44 89 fa             	mov    %r15d,%edx
    511f:	4c 89 f6             	mov    %r14,%rsi
    5122:	4c 89 e7             	mov    %r12,%rdi
    5125:	e8 db fa ff ff       	callq  4c05 <ccm_cbc_mac>
	}
	if (plen > 0) {
    512a:	85 db                	test   %ebx,%ebx
    512c:	74 16                	je     5144 <tc_ccm_decryption_verification+0x1ac>
		ccm_cbc_mac(b, out, plen - c->mlen, 0, c->sched);
    512e:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    5132:	89 da                	mov    %ebx,%edx
    5134:	31 c9                	xor    %ecx,%ecx
    5136:	2b 55 10             	sub    0x10(%rbp),%edx
    5139:	4c 89 ee             	mov    %r13,%rsi
    513c:	4c 89 e7             	mov    %r12,%rdi
    513f:	e8 c1 fa ff ff       	callq  4c05 <ccm_cbc_mac>
	}

	/* comparing the received tag and the computed one: */
	if (_compare(b, tag, c->mlen) == 0) {
    5144:	8b 55 10             	mov    0x10(%rbp),%edx
    5147:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
    514c:	4c 89 e7             	mov    %r12,%rdi
    514f:	e8 d0 ec ff ff       	callq  3e24 <_compare>
    5154:	41 89 c0             	mov    %eax,%r8d
		return TC_CRYPTO_SUCCESS;
    5157:	b8 01 00 00 00       	mov    $0x1,%eax
	if (_compare(b, tag, c->mlen) == 0) {
    515c:	45 85 c0             	test   %r8d,%r8d
    515f:	74 11                	je     5172 <tc_ccm_decryption_verification+0x1da>
  	} else {
		/* erase the decrypted buffer in case of mac validation failure: */
		_set(out, 0, plen - c->mlen);
    5161:	2b 5d 10             	sub    0x10(%rbp),%ebx
    5164:	31 f6                	xor    %esi,%esi
    5166:	4c 89 ef             	mov    %r13,%rdi
    5169:	89 da                	mov    %ebx,%edx
    516b:	e8 96 ec ff ff       	callq  3e06 <_set>
		return TC_CRYPTO_FAIL;
    5170:	31 c0                	xor    %eax,%eax
		return TC_CRYPTO_FAIL;
	}
}
    5172:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    5177:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    517e:	00 00 
    5180:	74 05                	je     5187 <tc_ccm_decryption_verification+0x1ef>
    5182:	e8 29 d3 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5187:	48 83 c4 48          	add    $0x48,%rsp
    518b:	5b                   	pop    %rbx
    518c:	5d                   	pop    %rbp
    518d:	41 5c                	pop    %r12
    518f:	41 5d                	pop    %r13
    5191:	41 5e                	pop    %r14
    5193:	41 5f                	pop    %r15
    5195:	c3                   	retq   

0000000000005196 <arch_cpu_idle>:
 * arch_busy_wait()
 */
#endif

void arch_cpu_idle(void)
{
    5196:	f3 0f 1e fa          	endbr64 
    519a:	50                   	push   %rax
	sys_trace_idle();
	posix_irq_full_unlock();
    519b:	e8 74 10 00 00       	callq  6214 <posix_irq_full_unlock>
	posix_halt_cpu();
}
    51a0:	5a                   	pop    %rdx
	posix_halt_cpu();
    51a1:	e9 42 06 00 00       	jmpq   57e8 <posix_halt_cpu>

00000000000051a6 <arch_irq_enable>:
	posix_irq_offload(routine, parameter);
}
#endif

void arch_irq_enable(unsigned int irq)
{
    51a6:	f3 0f 1e fa          	endbr64 
	posix_irq_enable(irq);
    51aa:	e9 70 10 00 00       	jmpq   621f <posix_irq_enable>

00000000000051af <pc_safe_call>:
#endif

static inline void pc_safe_call(int test, const char *test_str)
{
	/* LCOV_EXCL_START */ /* See Note1 */
	if (unlikely(test)) {
    51af:	85 ff                	test   %edi,%edi
    51b1:	74 0e                	je     51c1 <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    51b3:	48 8d 3d 6d 45 00 00 	lea    0x456d(%rip),%rdi        # 9727 <default_cmd+0x4c7>
    51ba:	31 c0                	xor    %eax,%eax
    51bc:	e9 d3 13 00 00       	jmpq   6594 <posix_print_error_and_exit>
					   test_str);
	}
	/* LCOV_EXCL_STOP */
}
    51c1:	c3                   	retq   

00000000000051c2 <posix_preexit_cleanup>:
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
}


static void posix_preexit_cleanup(void)
{
    51c2:	50                   	push   %rax
	/*
	 * Release the mutex so the next allowed thread can run
	 */
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    51c3:	48 8d 3d 56 9b 00 00 	lea    0x9b56(%rip),%rdi        # ed20 <mtx_threads>
    51ca:	e8 d1 d3 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    51cf:	48 8d 35 6b 45 00 00 	lea    0x456b(%rip),%rsi        # 9741 <default_cmd+0x4e1>
    51d6:	89 c7                	mov    %eax,%edi
    51d8:	e8 d2 ff ff ff       	callq  51af <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    51dd:	e8 0e d4 ff ff       	callq  25f0 <pthread_self@plt>
}
    51e2:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    51e3:	48 89 c7             	mov    %rax,%rdi
    51e6:	e9 f5 d1 ff ff       	jmpq   23e0 <pthread_detach@plt>

00000000000051eb <abort_tail>:
{
    51eb:	50                   	push   %rax
    51ec:	58                   	pop    %rax
	threads_table[this_th_nbr].running = false;
    51ed:	48 63 ff             	movslq %edi,%rdi
{
    51f0:	50                   	push   %rax
	threads_table[this_th_nbr].running = false;
    51f1:	48 c1 e7 05          	shl    $0x5,%rdi
    51f5:	48 03 3d a4 a2 00 00 	add    0xa2a4(%rip),%rdi        # f4a0 <threads_table>
    51fc:	c6 47 04 00          	movb   $0x0,0x4(%rdi)
	threads_table[this_th_nbr].state = ABORTED;
    5200:	c7 07 03 00 00 00    	movl   $0x3,(%rdi)
	posix_preexit_cleanup();
    5206:	e8 b7 ff ff ff       	callq  51c2 <posix_preexit_cleanup>
	pthread_exit(NULL);
    520b:	31 ff                	xor    %edi,%edi
    520d:	e8 9e d3 ff ff       	callq  25b0 <pthread_exit@plt>

0000000000005212 <posix_wait_until_allowed>:
{
    5212:	41 54                	push   %r12
	threads_table[this_th_nbr].running = false;
    5214:	48 8b 05 85 a2 00 00 	mov    0xa285(%rip),%rax        # f4a0 <threads_table>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    521b:	4c 8d 25 fe 9a 00 00 	lea    0x9afe(%rip),%r12        # ed20 <mtx_threads>
{
    5222:	55                   	push   %rbp
    5223:	53                   	push   %rbx
    5224:	48 63 df             	movslq %edi,%rbx
    5227:	48 89 dd             	mov    %rbx,%rbp
	threads_table[this_th_nbr].running = false;
    522a:	48 c1 e3 05          	shl    $0x5,%rbx
    522e:	c6 44 18 04 00       	movb   $0x0,0x4(%rax,%rbx,1)
	while (this_th_nbr != currently_allowed_thread) {
    5233:	39 2d 37 a3 00 00    	cmp    %ebp,0xa337(%rip)        # f570 <currently_allowed_thread>
    5239:	74 28                	je     5263 <posix_wait_until_allowed+0x51>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    523b:	4c 89 e6             	mov    %r12,%rsi
    523e:	48 8d 3d 1b 9b 00 00 	lea    0x9b1b(%rip),%rdi        # ed60 <cond_threads>
    5245:	e8 56 d2 ff ff       	callq  24a0 <pthread_cond_wait@plt>
		if (threads_table &&
    524a:	48 8b 05 4f a2 00 00 	mov    0xa24f(%rip),%rax        # f4a0 <threads_table>
    5251:	48 85 c0             	test   %rax,%rax
    5254:	74 dd                	je     5233 <posix_wait_until_allowed+0x21>
    5256:	83 3c 18 02          	cmpl   $0x2,(%rax,%rbx,1)
    525a:	75 d7                	jne    5233 <posix_wait_until_allowed+0x21>
			abort_tail(this_th_nbr);
    525c:	89 ef                	mov    %ebp,%edi
    525e:	e8 88 ff ff ff       	callq  51eb <abort_tail>
	threads_table[this_th_nbr].running = true;
    5263:	48 8b 05 36 a2 00 00 	mov    0xa236(%rip),%rax        # f4a0 <threads_table>
    526a:	c6 44 18 04 01       	movb   $0x1,0x4(%rax,%rbx,1)
}
    526f:	5b                   	pop    %rbx
    5270:	5d                   	pop    %rbp
    5271:	41 5c                	pop    %r12
    5273:	c3                   	retq   

0000000000005274 <posix_cleanup_handler>:

/**
 * Handler called when any thread is cancelled or exits
 */
static void posix_cleanup_handler(void *arg)
{
    5274:	f3 0f 1e fa          	endbr64 
	 * and the mutex was already released
	 * Otherwise, release the mutex so other threads which may be
	 * caught waiting for it could terminate
	 */

	if (!terminate) {
    5278:	80 3d 2e a3 00 00 00 	cmpb   $0x0,0xa32e(%rip)        # f5ad <terminate>
    527f:	74 29                	je     52aa <posix_cleanup_handler+0x36>
{
    5281:	50                   	push   %rax
		ptr->thread_idx,
		__func__);
#endif


	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    5282:	48 8d 3d 97 9a 00 00 	lea    0x9a97(%rip),%rdi        # ed20 <mtx_threads>
    5289:	e8 12 d3 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    528e:	48 8d 35 ac 44 00 00 	lea    0x44ac(%rip),%rsi        # 9741 <default_cmd+0x4e1>
    5295:	89 c7                	mov    %eax,%edi
    5297:	e8 13 ff ff ff       	callq  51af <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    529c:	e8 4f d3 ff ff       	callq  25f0 <pthread_self@plt>
}
    52a1:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    52a2:	48 89 c7             	mov    %rax,%rdi
    52a5:	e9 36 d1 ff ff       	jmpq   23e0 <pthread_detach@plt>
    52aa:	c3                   	retq   

00000000000052ab <posix_thread_starter>:
 *  It will block the thread until a arch_swap() is called for it
 *
 * Spawned from posix_new_thread() below
 */
static void *posix_thread_starter(void *arg)
{
    52ab:	f3 0f 1e fa          	endbr64 
    52af:	50                   	push   %rax
    52b0:	58                   	pop    %rax
    52b1:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    52b8:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

	/*
	 * We block until all other running threads reach the while loop
	 * in posix_wait_until_allowed() and they release the mutex
	 */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    52bd:	48 8d 3d 5c 9a 00 00 	lea    0x9a5c(%rip),%rdi        # ed20 <mtx_threads>
{
    52c4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    52cb:	00 00 
    52cd:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    52d2:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    52d4:	e8 d7 d3 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    52d9:	48 8d 35 84 44 00 00 	lea    0x4484(%rip),%rsi        # 9764 <default_cmd+0x504>
    52e0:	89 c7                	mov    %eax,%edi
    52e2:	e8 c8 fe ff ff       	callq  51af <pc_safe_call>

	/*
	 * The program may have been finished before this thread ever got to run
	 */
	/* LCOV_EXCL_START */ /* See Note1 */
	if (!threads_table) {
    52e7:	48 83 3d b1 a1 00 00 	cmpq   $0x0,0xa1b1(%rip)        # f4a0 <threads_table>
    52ee:	00 
    52ef:	75 11                	jne    5302 <posix_thread_starter+0x57>
		posix_cleanup_handler(arg);
    52f1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    52f6:	e8 79 ff ff ff       	callq  5274 <posix_cleanup_handler>
		pthread_exit(NULL);
    52fb:	31 ff                	xor    %edi,%edi
    52fd:	e8 ae d2 ff ff       	callq  25b0 <pthread_exit@plt>
	}
	/* LCOV_EXCL_STOP */

	pthread_cleanup_push(posix_cleanup_handler, arg);
    5302:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5307:	31 f6                	xor    %esi,%esi
    5309:	e8 72 d3 ff ff       	callq  2680 <__sigsetjmp@plt>
    530e:	f3 0f 1e fa          	endbr64 
    5312:	85 c0                	test   %eax,%eax
    5314:	74 14                	je     532a <posix_thread_starter+0x7f>
    5316:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    531b:	e8 54 ff ff ff       	callq  5274 <posix_cleanup_handler>
    5320:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5325:	e8 26 d3 ff ff       	callq  2650 <__pthread_unwind_next@plt>
    532a:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    532f:	e8 1c d1 ff ff       	callq  2450 <__pthread_register_cancel@plt>

	/*
	 * The thread would try to execute immediately, so we block it
	 * until allowed
	 */
	posix_wait_until_allowed(thread_idx);
    5334:	8b 7c 24 08          	mov    0x8(%rsp),%edi
    5338:	e8 d5 fe ff ff       	callq  5212 <posix_wait_until_allowed>

	posix_new_thread_pre_start();
    533d:	e8 92 03 00 00       	callq  56d4 <posix_new_thread_pre_start>

	posix_thread_status_t *ptr = threads_table[thread_idx].t_status;
    5342:	48 63 44 24 08       	movslq 0x8(%rsp),%rax
    5347:	48 c1 e0 05          	shl    $0x5,%rax
    534b:	48 03 05 4e a1 00 00 	add    0xa14e(%rip),%rax        # f4a0 <threads_table>
    5352:	48 8b 40 18          	mov    0x18(%rax),%rax

	z_thread_entry(ptr->entry_point, ptr->arg1, ptr->arg2, ptr->arg3);
    5356:	48 8b 48 18          	mov    0x18(%rax),%rcx
    535a:	48 8b 50 10          	mov    0x10(%rax),%rdx
    535e:	48 8b 70 08          	mov    0x8(%rax),%rsi
    5362:	48 8b 38             	mov    (%rax),%rdi
    5365:	e8 1d dc ff ff       	callq  2f87 <z_thread_entry>

000000000000536a <posix_swap>:
{
    536a:	f3 0f 1e fa          	endbr64 
    536e:	55                   	push   %rbp
    536f:	89 f5                	mov    %esi,%ebp
	currently_allowed_thread = next_allowed_th;
    5371:	89 3d f9 a1 00 00    	mov    %edi,0xa1f9(%rip)        # f570 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    5377:	48 8d 3d e2 99 00 00 	lea    0x99e2(%rip),%rdi        # ed60 <cond_threads>
    537e:	e8 8d d0 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    5383:	48 8d 35 fb 43 00 00 	lea    0x43fb(%rip),%rsi        # 9785 <default_cmd+0x525>
    538a:	89 c7                	mov    %eax,%edi
    538c:	e8 1e fe ff ff       	callq  51af <pc_safe_call>
	if (threads_table[this_th_nbr].state == ABORTING) {
    5391:	48 63 c5             	movslq %ebp,%rax
		abort_tail(this_th_nbr);
    5394:	89 ef                	mov    %ebp,%edi
	if (threads_table[this_th_nbr].state == ABORTING) {
    5396:	48 c1 e0 05          	shl    $0x5,%rax
    539a:	48 03 05 ff a0 00 00 	add    0xa0ff(%rip),%rax        # f4a0 <threads_table>
    53a1:	83 38 02             	cmpl   $0x2,(%rax)
    53a4:	75 05                	jne    53ab <posix_swap+0x41>
		abort_tail(this_th_nbr);
    53a6:	e8 40 fe ff ff       	callq  51eb <abort_tail>
}
    53ab:	5d                   	pop    %rbp
		posix_wait_until_allowed(this_th_nbr);
    53ac:	e9 61 fe ff ff       	jmpq   5212 <posix_wait_until_allowed>

00000000000053b1 <posix_main_thread_start>:
{
    53b1:	f3 0f 1e fa          	endbr64 
    53b5:	50                   	push   %rax
	currently_allowed_thread = next_allowed_th;
    53b6:	89 3d b4 a1 00 00    	mov    %edi,0xa1b4(%rip)        # f570 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    53bc:	48 8d 3d 9d 99 00 00 	lea    0x999d(%rip),%rdi        # ed60 <cond_threads>
    53c3:	e8 48 d0 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    53c8:	48 8d 35 b6 43 00 00 	lea    0x43b6(%rip),%rsi        # 9785 <default_cmd+0x525>
    53cf:	89 c7                	mov    %eax,%edi
    53d1:	e8 d9 fd ff ff       	callq  51af <pc_safe_call>
	posix_preexit_cleanup();
    53d6:	e8 e7 fd ff ff       	callq  51c2 <posix_preexit_cleanup>
	pthread_exit(NULL);
    53db:	31 ff                	xor    %edi,%edi
    53dd:	e8 ce d1 ff ff       	callq  25b0 <pthread_exit@plt>

00000000000053e2 <posix_new_thread>:
 * Create a new POSIX thread for the new Zephyr thread.
 * arch_new_thread() picks from the kernel structures what it is that we need
 * to call with what parameters
 */
void posix_new_thread(posix_thread_status_t *ptr)
{
    53e2:	f3 0f 1e fa          	endbr64 
    53e6:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    53e7:	8b 35 8b a1 00 00    	mov    0xa18b(%rip),%esi        # f578 <threads_table_size>
{
    53ed:	48 89 fb             	mov    %rdi,%rbx
	for (int i = 0; i < threads_table_size; i++) {
    53f0:	31 c0                	xor    %eax,%eax
		if ((threads_table[i].state == NOTUSED)
    53f2:	48 8b 3d a7 a0 00 00 	mov    0xa0a7(%rip),%rdi        # f4a0 <threads_table>
    53f9:	41 89 c0             	mov    %eax,%r8d
	for (int i = 0; i < threads_table_size; i++) {
    53fc:	39 c6                	cmp    %eax,%esi
    53fe:	7e 13                	jle    5413 <posix_new_thread+0x31>
		if ((threads_table[i].state == NOTUSED)
    5400:	48 ff c0             	inc    %rax
    5403:	48 89 c2             	mov    %rax,%rdx
    5406:	48 c1 e2 05          	shl    $0x5,%rdx
    540a:	83 7c 17 e0 00       	cmpl   $0x0,-0x20(%rdi,%rdx,1)
    540f:	75 e8                	jne    53f9 <posix_new_thread+0x17>
    5411:	eb 52                	jmp    5465 <posix_new_thread+0x83>
				(threads_table_size + PC_ALLOC_CHUNK_SIZE)
    5413:	83 c6 40             	add    $0x40,%esi
    5416:	48 63 f6             	movslq %esi,%rsi
	threads_table = realloc(threads_table,
    5419:	48 c1 e6 05          	shl    $0x5,%rsi
    541d:	e8 ae d1 ff ff       	callq  25d0 <realloc@plt>
    5422:	48 89 05 77 a0 00 00 	mov    %rax,0xa077(%rip)        # f4a0 <threads_table>
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    5429:	48 85 c0             	test   %rax,%rax
    542c:	75 0c                	jne    543a <posix_new_thread+0x58>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    542e:	48 8d 3d 76 43 00 00 	lea    0x4376(%rip),%rdi        # 97ab <default_cmd+0x54b>
    5435:	e8 5a 11 00 00       	callq  6594 <posix_print_error_and_exit>
	(void)memset(&threads_table[threads_table_size], 0,
    543a:	48 63 15 37 a1 00 00 	movslq 0xa137(%rip),%rdx        # f578 <threads_table_size>
    5441:	31 c0                	xor    %eax,%eax
    5443:	b9 00 02 00 00       	mov    $0x200,%ecx
    5448:	49 89 d0             	mov    %rdx,%r8
    544b:	48 c1 e2 05          	shl    $0x5,%rdx
    544f:	48 03 15 4a a0 00 00 	add    0xa04a(%rip),%rdx        # f4a0 <threads_table>
    5456:	48 89 d7             	mov    %rdx,%rdi
    5459:	f3 ab                	rep stos %eax,%es:(%rdi)
	threads_table_size += PC_ALLOC_CHUNK_SIZE;
    545b:	41 8d 40 40          	lea    0x40(%r8),%eax
    545f:	89 05 13 a1 00 00    	mov    %eax,0xa113(%rip)        # f578 <threads_table_size>
	int t_slot;

	t_slot = ttable_get_empty_slot();
	threads_table[t_slot].state = USED;
    5465:	49 63 c8             	movslq %r8d,%rcx
	threads_table[t_slot].running = false;
	threads_table[t_slot].thead_cnt = thread_create_count++;
    5468:	8b 05 06 a1 00 00    	mov    0xa106(%rip),%eax        # f574 <thread_create_count>
	threads_table[t_slot].t_status = ptr;
	ptr->thread_idx = t_slot;

	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    546e:	31 f6                	xor    %esi,%esi
	threads_table[t_slot].state = USED;
    5470:	48 89 cf             	mov    %rcx,%rdi
    5473:	48 c1 e7 05          	shl    $0x5,%rdi
    5477:	48 03 3d 22 a0 00 00 	add    0xa022(%rip),%rdi        # f4a0 <threads_table>
	threads_table[t_slot].thead_cnt = thread_create_count++;
    547e:	8d 50 01             	lea    0x1(%rax),%edx
	threads_table[t_slot].t_status = ptr;
    5481:	48 89 5f 18          	mov    %rbx,0x18(%rdi)
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    5485:	48 83 c7 08          	add    $0x8,%rdi
	threads_table[t_slot].state = USED;
    5489:	c7 47 f8 01 00 00 00 	movl   $0x1,-0x8(%rdi)
	threads_table[t_slot].running = false;
    5490:	c6 47 fc 00          	movb   $0x0,-0x4(%rdi)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    5494:	89 47 08             	mov    %eax,0x8(%rdi)
	ptr->thread_idx = t_slot;
    5497:	44 89 43 20          	mov    %r8d,0x20(%rbx)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    549b:	89 15 d3 a0 00 00    	mov    %edx,0xa0d3(%rip)        # f574 <thread_create_count>
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    54a1:	48 8d 15 03 fe ff ff 	lea    -0x1fd(%rip),%rdx        # 52ab <posix_thread_starter>
    54a8:	e8 13 cf ff ff       	callq  23c0 <pthread_create@plt>
    54ad:	48 8d 35 1f 43 00 00 	lea    0x431f(%rip),%rsi        # 97d3 <default_cmd+0x573>
		__func__,
		threads_table[t_slot].thead_cnt,
		t_slot,
		threads_table[t_slot].thread);

}
    54b4:	5b                   	pop    %rbx
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    54b5:	89 c7                	mov    %eax,%edi
    54b7:	e9 f3 fc ff ff       	jmpq   51af <pc_safe_call>

00000000000054bc <posix_init_multithreading>:
/**
 * Called from zephyr_wrapper()
 * prepare whatever needs to be prepared to be able to start threads
 */
void posix_init_multithreading(void)
{
    54bc:	f3 0f 1e fa          	endbr64 
    54c0:	52                   	push   %rdx
	thread_create_count = 0;

	currently_allowed_thread = -1;

	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    54c1:	be 20 00 00 00       	mov    $0x20,%esi
    54c6:	bf 40 00 00 00       	mov    $0x40,%edi
	thread_create_count = 0;
    54cb:	c7 05 9f a0 00 00 00 	movl   $0x0,0xa09f(%rip)        # f574 <thread_create_count>
    54d2:	00 00 00 
	currently_allowed_thread = -1;
    54d5:	c7 05 91 a0 00 00 ff 	movl   $0xffffffff,0xa091(%rip)        # f570 <currently_allowed_thread>
    54dc:	ff ff ff 
	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    54df:	e8 4c d0 ff ff       	callq  2530 <calloc@plt>
    54e4:	48 89 05 b5 9f 00 00 	mov    %rax,0x9fb5(%rip)        # f4a0 <threads_table>
				sizeof(struct threads_table_el));
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    54eb:	48 85 c0             	test   %rax,%rax
    54ee:	75 0c                	jne    54fc <posix_init_multithreading+0x40>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    54f0:	48 8d 3d b4 42 00 00 	lea    0x42b4(%rip),%rdi        # 97ab <default_cmd+0x54b>
    54f7:	e8 98 10 00 00       	callq  6594 <posix_print_error_and_exit>
	}

	threads_table_size = PC_ALLOC_CHUNK_SIZE;


	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    54fc:	48 8d 3d 1d 98 00 00 	lea    0x981d(%rip),%rdi        # ed20 <mtx_threads>
	threads_table_size = PC_ALLOC_CHUNK_SIZE;
    5503:	c7 05 6b a0 00 00 40 	movl   $0x40,0xa06b(%rip)        # f578 <threads_table_size>
    550a:	00 00 00 
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    550d:	e8 9e d1 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5512:	48 8d 35 4b 42 00 00 	lea    0x424b(%rip),%rsi        # 9764 <default_cmd+0x504>
    5519:	89 c7                	mov    %eax,%edi
}
    551b:	58                   	pop    %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    551c:	e9 8e fc ff ff       	jmpq   51af <pc_safe_call>

0000000000005521 <posix_core_clean_up>:
 * => we prefer the supposed memory leak report from valgrind, and ensure we
 * will not hang
 *
 */
void posix_core_clean_up(void)
{
    5521:	f3 0f 1e fa          	endbr64 

	if (!threads_table) { /* LCOV_EXCL_BR_LINE */
    5525:	48 83 3d 73 9f 00 00 	cmpq   $0x0,0x9f73(%rip)        # f4a0 <threads_table>
    552c:	00 
    552d:	74 62                	je     5591 <posix_core_clean_up+0x70>
{
    552f:	55                   	push   %rbp
			continue;
		}

		/* LCOV_EXCL_START */
		if (pthread_cancel(threads_table[i].thread)) {
			posix_print_warning(
    5530:	48 8d 2d 00 43 00 00 	lea    0x4300(%rip),%rbp        # 9837 <default_cmd+0x5d7>
{
    5537:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    5538:	31 db                	xor    %ebx,%ebx
{
    553a:	52                   	push   %rdx
	terminate = true;
    553b:	c6 05 6b a0 00 00 01 	movb   $0x1,0xa06b(%rip)        # f5ad <terminate>
	for (int i = 0; i < threads_table_size; i++) {
    5542:	39 1d 30 a0 00 00    	cmp    %ebx,0xa030(%rip)        # f578 <threads_table_size>
    5548:	48 8b 3d 51 9f 00 00 	mov    0x9f51(%rip),%rdi        # f4a0 <threads_table>
    554f:	7e 2c                	jle    557d <posix_core_clean_up+0x5c>
		if (threads_table[i].state != USED) {
    5551:	48 63 c3             	movslq %ebx,%rax
    5554:	48 c1 e0 05          	shl    $0x5,%rax
    5558:	48 01 c7             	add    %rax,%rdi
    555b:	83 3f 01             	cmpl   $0x1,(%rdi)
    555e:	75 19                	jne    5579 <posix_core_clean_up+0x58>
		if (pthread_cancel(threads_table[i].thread)) {
    5560:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    5564:	e8 b7 ce ff ff       	callq  2420 <pthread_cancel@plt>
    5569:	85 c0                	test   %eax,%eax
    556b:	74 0c                	je     5579 <posix_core_clean_up+0x58>
			posix_print_warning(
    556d:	89 de                	mov    %ebx,%esi
    556f:	48 89 ef             	mov    %rbp,%rdi
    5572:	31 c0                	xor    %eax,%eax
    5574:	e8 f4 10 00 00       	callq  666d <posix_print_warning>
	for (int i = 0; i < threads_table_size; i++) {
    5579:	ff c3                	inc    %ebx
    557b:	eb c5                	jmp    5542 <posix_core_clean_up+0x21>
				i);
		}
		/* LCOV_EXCL_STOP */
	}

	free(threads_table);
    557d:	e8 2e ce ff ff       	callq  23b0 <free@plt>
	threads_table = NULL;
    5582:	48 c7 05 13 9f 00 00 	movq   $0x0,0x9f13(%rip)        # f4a0 <threads_table>
    5589:	00 00 00 00 
}
    558d:	58                   	pop    %rax
    558e:	5b                   	pop    %rbx
    558f:	5d                   	pop    %rbp
    5590:	c3                   	retq   
    5591:	c3                   	retq   

0000000000005592 <posix_abort_thread>:


void posix_abort_thread(int thread_idx)
{
    5592:	f3 0f 1e fa          	endbr64 
	if (threads_table[thread_idx].state != USED) { /* LCOV_EXCL_BR_LINE */
    5596:	48 63 ff             	movslq %edi,%rdi
    5599:	48 c1 e7 05          	shl    $0x5,%rdi
    559d:	48 03 3d fc 9e 00 00 	add    0x9efc(%rip),%rdi        # f4a0 <threads_table>
    55a4:	83 3f 01             	cmpl   $0x1,(%rdi)
    55a7:	75 06                	jne    55af <posix_abort_thread+0x1d>

	PC_DEBUG("Aborting not scheduled thread [%i] %i\n",
		threads_table[thread_idx].thead_cnt,
		thread_idx);

	threads_table[thread_idx].state = ABORTING;
    55a9:	c7 07 02 00 00 00    	movl   $0x2,(%rdi)
	 * mutex or awakes on the condition.
	 * Note that even if we would pthread_cancel() the thread here, that
	 * would be the case, but with a pthread_cancel() the mutex state would
	 * be uncontrolled
	 */
}
    55af:	c3                   	retq   

00000000000055b0 <z_impl_k_thread_abort>:


#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
    55b0:	f3 0f 1e fa          	endbr64 
    55b4:	41 55                	push   %r13
    55b6:	41 54                	push   %r12
    55b8:	55                   	push   %rbp
    55b9:	48 89 fd             	mov    %rdi,%rbp
    55bc:	53                   	push   %rbx
    55bd:	52                   	push   %rdx
	unsigned int key;
	int thread_idx;

	posix_thread_status_t *tstatus =
    55be:	48 8b 5f 50          	mov    0x50(%rdi),%rbx
					(posix_thread_status_t *)
					thread->callee_saved.thread_status;

	thread_idx = tstatus->thread_idx;
    55c2:	44 8b 6b 20          	mov    0x20(%rbx),%r13d
	return key == false;
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	return posix_irq_lock();
    55c6:	e8 32 0c 00 00       	callq  61fd <posix_irq_lock>
    55cb:	41 89 c4             	mov    %eax,%r12d

	key = irq_lock();

	if (_current == thread) {
    55ce:	48 8d 05 4b 9e 00 00 	lea    0x9e4b(%rip),%rax        # f420 <_kernel>
    55d5:	48 39 68 10          	cmp    %rbp,0x10(%rax)
    55d9:	75 34                	jne    560f <z_impl_k_thread_abort+0x5f>
		if (tstatus->aborted == 0) { /* LCOV_EXCL_BR_LINE */
    55db:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    55df:	75 09                	jne    55ea <z_impl_k_thread_abort+0x3a>
			tstatus->aborted = 1;
    55e1:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
    55e8:	eb 11                	jmp    55fb <z_impl_k_thread_abort+0x4b>
		} else {
			posix_print_warning(/* LCOV_EXCL_LINE */
    55ea:	44 89 ee             	mov    %r13d,%esi
    55ed:	48 8d 3d 77 42 00 00 	lea    0x4277(%rip),%rdi        # 986b <default_cmd+0x60b>
    55f4:	31 c0                	xor    %eax,%eax
    55f6:	e8 72 10 00 00       	callq  666d <posix_print_warning>
				PREFIX"The kernel is trying to abort and swap "
				"out of an already aborted thread %i. This "
				"should NOT have happened\n",
				thread_idx);
		}
		threads_table[thread_idx].state = ABORTING;
    55fb:	49 63 c5             	movslq %r13d,%rax
    55fe:	48 c1 e0 05          	shl    $0x5,%rax
    5602:	48 03 05 97 9e 00 00 	add    0x9e97(%rip),%rax        # f4a0 <threads_table>
    5609:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
			threads_table[thread_idx].thead_cnt,
			thread_idx,
			__func__);
	}

	z_thread_abort(thread);
    560f:	48 89 ef             	mov    %rbp,%rdi
    5612:	e8 99 2f 00 00       	callq  85b0 <z_thread_abort>

	if (tstatus->aborted == 0) {
    5617:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    561b:	75 0f                	jne    562c <z_impl_k_thread_abort+0x7c>
		PC_DEBUG("%s aborting now [%i] %i\n",
			__func__,
			threads_table[thread_idx].thead_cnt,
			thread_idx);

		tstatus->aborted = 1;
    561d:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
		posix_abort_thread(thread_idx);
    5624:	44 89 ef             	mov    %r13d,%edi
    5627:	e8 66 ff ff ff       	callq  5592 <posix_abort_thread>
			thread_idx);
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
}
    562c:	58                   	pop    %rax
	z_reschedule_irqlock(key);
    562d:	44 89 e7             	mov    %r12d,%edi
}
    5630:	5b                   	pop    %rbx
    5631:	5d                   	pop    %rbp
    5632:	41 5c                	pop    %r12
    5634:	41 5d                	pop    %r13
	z_reschedule_irqlock(key);
    5636:	e9 2f 28 00 00       	jmpq   7e6a <z_reschedule_irqlock>

000000000000563b <arch_swap>:
#include "irq.h"
#include "kswap.h"
#include <power/power.h>

int arch_swap(unsigned int key)
{
    563b:	f3 0f 1e fa          	endbr64 
    563f:	53                   	push   %rbx
	 * threads => those are all nicely kept by the native OS kernel
	 */
#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif
	_current->callee_saved.key = key;
    5640:	48 8d 1d d9 9d 00 00 	lea    0x9dd9(%rip),%rbx        # f420 <_kernel>
    5647:	48 8b 43 10          	mov    0x10(%rbx),%rax
	 * arch_thread_return_value_set()
	 */

	posix_thread_status_t *ready_thread_ptr =
		(posix_thread_status_t *)
		_kernel.ready_q.cache->callee_saved.thread_status;
    564b:	48 8b 53 38          	mov    0x38(%rbx),%rdx
	_current->callee_saved.key = key;
    564f:	89 78 48             	mov    %edi,0x48(%rax)
	posix_thread_status_t *ready_thread_ptr =
    5652:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
	_current->callee_saved.retval = -EAGAIN;
    5656:	c7 40 4c f5 ff ff ff 	movl   $0xfffffff5,0x4c(%rax)

	posix_thread_status_t *this_thread_ptr  =
    565d:	48 8b 40 50          	mov    0x50(%rax),%rax
		(posix_thread_status_t *)
		_current->callee_saved.thread_status;


	_current = _kernel.ready_q.cache;
    5661:	48 89 53 10          	mov    %rdx,0x10(%rbx)
	 * Here a "real" arch would load all processor registers for the thread
	 * to run. In this arch case, we just block this thread until allowed
	 * to run later, and signal to whomever is allowed to run to
	 * continue.
	 */
	posix_swap(ready_thread_ptr->thread_idx,
    5665:	8b 79 20             	mov    0x20(%rcx),%edi
    5668:	8b 70 20             	mov    0x20(%rax),%esi
    566b:	e8 fa fc ff ff       	callq  536a <posix_swap>
		this_thread_ptr->thread_idx);

	/* When we continue, _kernel->current points back to this thread */

	irq_unlock(_current->callee_saved.key);
    5670:	48 8b 43 10          	mov    0x10(%rbx),%rax
}


static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	posix_irq_unlock(key);
    5674:	8b 78 48             	mov    0x48(%rax),%edi
    5677:	e8 8f 0b 00 00       	callq  620b <posix_irq_unlock>

	return _current->callee_saved.retval;
    567c:	48 8b 43 10          	mov    0x10(%rbx),%rax
}
    5680:	5b                   	pop    %rbx
	return _current->callee_saved.retval;
    5681:	8b 40 4c             	mov    0x4c(%rax),%eax
}
    5684:	c3                   	retq   

0000000000005685 <arch_switch_to_main_thread>:
 * Note that we will never come back to this thread: posix_main_thread_start()
 * does never return.
 */
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5685:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(stack_ptr);
	ARG_UNUSED(_main);

	posix_thread_status_t *ready_thread_ptr =
			(posix_thread_status_t *)
			_kernel.ready_q.cache->callee_saved.thread_status;
    5689:	48 8d 05 90 9d 00 00 	lea    0x9d90(%rip),%rax        # f420 <_kernel>
    5690:	48 8b 50 38          	mov    0x38(%rax),%rdx
	posix_thread_status_t *ready_thread_ptr =
    5694:	48 8b 4a 50          	mov    0x50(%rdx),%rcx

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif

	_current = _kernel.ready_q.cache;
    5698:	48 89 50 10          	mov    %rdx,0x10(%rax)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
#endif

	posix_main_thread_start(ready_thread_ptr->thread_idx);
    569c:	8b 79 20             	mov    0x20(%rcx),%edi
    569f:	e9 0d fd ff ff       	jmpq   53b1 <posix_main_thread_start>

00000000000056a4 <arch_new_thread>:
 * pthreads stack and therefore we ignore the stack size
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    56a4:	f3 0f 1e fa          	endbr64 

	/* z_thread_entry() arguments */
	thread_status->entry_point = entry;
	thread_status->arg1 = p1;
	thread_status->arg2 = p2;
	thread_status->arg3 = p3;
    56a8:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
{
    56ad:	49 89 fa             	mov    %rdi,%r10
	thread_status = Z_STACK_PTR_TO_FRAME(posix_thread_status_t, stack_ptr);
    56b0:	48 8d 7a d8          	lea    -0x28(%rdx),%rdi
	thread_status->entry_point = entry;
    56b4:	48 89 4a d8          	mov    %rcx,-0x28(%rdx)
	thread_status->arg1 = p1;
    56b8:	4c 89 42 e0          	mov    %r8,-0x20(%rdx)
	thread_status->arg2 = p2;
    56bc:	4c 89 4a e8          	mov    %r9,-0x18(%rdx)
	thread_status->arg3 = p3;
    56c0:	48 89 42 f0          	mov    %rax,-0x10(%rdx)
#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
	thread_status->aborted = 0;
    56c4:	c7 42 fc 00 00 00 00 	movl   $0x0,-0x4(%rdx)
#endif

	thread->callee_saved.thread_status = thread_status;
    56cb:	49 89 7a 50          	mov    %rdi,0x50(%r10)

	posix_new_thread(thread_status);
    56cf:	e9 0e fd ff ff       	jmpq   53e2 <posix_new_thread>

00000000000056d4 <posix_new_thread_pre_start>:
}

void posix_new_thread_pre_start(void)
{
    56d4:	f3 0f 1e fa          	endbr64 
	posix_irq_full_unlock();
    56d8:	e9 37 0b 00 00       	jmpq   6214 <posix_irq_full_unlock>

00000000000056dd <pc_safe_call>:
	if (unlikely(test)) {
    56dd:	85 ff                	test   %edi,%edi
    56df:	74 0e                	je     56ef <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    56e1:	48 8d 3d 3f 40 00 00 	lea    0x403f(%rip),%rdi        # 9727 <default_cmd+0x4c7>
    56e8:	31 c0                	xor    %eax,%eax
    56ea:	e9 a5 0e 00 00       	jmpq   6594 <posix_print_error_and_exit>
}
    56ef:	c3                   	retq   

00000000000056f0 <zephyr_wrapper>:
/**
 * Just a wrapper function to call Zephyr's z_cstart()
 * called from posix_boot_cpu()
 */
static void *zephyr_wrapper(void *a)
{
    56f0:	f3 0f 1e fa          	endbr64 
    56f4:	50                   	push   %rax
    56f5:	58                   	pop    %rax
	/* Ensure posix_boot_cpu has reached the cond loop */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    56f6:	48 8d 3d a3 96 00 00 	lea    0x96a3(%rip),%rdi        # eda0 <mtx_cpu>
{
    56fd:	50                   	push   %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    56fe:	e8 ad cf ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5703:	48 8d 35 dd 41 00 00 	lea    0x41dd(%rip),%rsi        # 98e7 <default_cmd+0x687>
    570a:	89 c7                	mov    %eax,%edi
    570c:	e8 cc ff ff ff       	callq  56dd <pc_safe_call>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5711:	48 8d 3d 88 96 00 00 	lea    0x9688(%rip),%rdi        # eda0 <mtx_cpu>
    5718:	e8 83 ce ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    571d:	48 8d 35 e0 41 00 00 	lea    0x41e0(%rip),%rsi        # 9904 <default_cmd+0x6a4>
    5724:	89 c7                	mov    %eax,%edi
    5726:	e8 b2 ff ff ff       	callq  56dd <pc_safe_call>

		PS_DEBUG("Zephyr init started (%lu)\n",
			zephyr_thread);
#endif

	posix_init_multithreading();
    572b:	e8 8c fd ff ff       	callq  54bc <posix_init_multithreading>

	/* Start Zephyr: */
	z_cstart();
    5730:	e8 13 23 00 00       	callq  7a48 <z_cstart>

0000000000005735 <posix_is_cpu_running>:
{
    5735:	f3 0f 1e fa          	endbr64 
	return !cpu_halted;
    5739:	8a 05 3d 6d 00 00    	mov    0x6d3d(%rip),%al        # c47c <cpu_halted>
    573f:	83 f0 01             	xor    $0x1,%eax
    5742:	0f b6 c0             	movzbl %al,%eax
}
    5745:	c3                   	retq   

0000000000005746 <posix_change_cpu_state_and_wait>:
{
    5746:	f3 0f 1e fa          	endbr64 
    574a:	55                   	push   %rbp
    574b:	89 fd                	mov    %edi,%ebp
    574d:	53                   	push   %rbx
    574e:	89 fb                	mov    %edi,%ebx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5750:	48 8d 3d 49 96 00 00 	lea    0x9649(%rip),%rdi        # eda0 <mtx_cpu>
{
    5757:	52                   	push   %rdx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5758:	e8 53 cf ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    575d:	48 8d 35 83 41 00 00 	lea    0x4183(%rip),%rsi        # 98e7 <default_cmd+0x687>
    5764:	89 c7                	mov    %eax,%edi
    5766:	e8 72 ff ff ff       	callq  56dd <pc_safe_call>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    576b:	48 8d 3d 6e 96 00 00 	lea    0x966e(%rip),%rdi        # ede0 <cond_cpu>
	cpu_halted = halted;
    5772:	88 1d 04 6d 00 00    	mov    %bl,0x6d04(%rip)        # c47c <cpu_halted>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5778:	48 8d 1d 21 96 00 00 	lea    0x9621(%rip),%rbx        # eda0 <mtx_cpu>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    577f:	e8 8c cc ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    5784:	48 8d 35 98 41 00 00 	lea    0x4198(%rip),%rsi        # 9923 <default_cmd+0x6c3>
    578b:	89 c7                	mov    %eax,%edi
    578d:	e8 4b ff ff ff       	callq  56dd <pc_safe_call>
	while (cpu_halted == halted) {
    5792:	40 38 2d e3 6c 00 00 	cmp    %bpl,0x6ce3(%rip)        # c47c <cpu_halted>
    5799:	75 11                	jne    57ac <posix_change_cpu_state_and_wait+0x66>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    579b:	48 89 de             	mov    %rbx,%rsi
    579e:	48 8d 3d 3b 96 00 00 	lea    0x963b(%rip),%rdi        # ede0 <cond_cpu>
    57a5:	e8 f6 cc ff ff       	callq  24a0 <pthread_cond_wait@plt>
    57aa:	eb e6                	jmp    5792 <posix_change_cpu_state_and_wait+0x4c>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    57ac:	48 8d 3d ed 95 00 00 	lea    0x95ed(%rip),%rdi        # eda0 <mtx_cpu>
    57b3:	e8 e8 cd ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    57b8:	48 8d 35 45 41 00 00 	lea    0x4145(%rip),%rsi        # 9904 <default_cmd+0x6a4>
    57bf:	89 c7                	mov    %eax,%edi
}
    57c1:	58                   	pop    %rax
    57c2:	5b                   	pop    %rbx
    57c3:	5d                   	pop    %rbp
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    57c4:	e9 14 ff ff ff       	jmpq   56dd <pc_safe_call>

00000000000057c9 <posix_interrupt_raised>:
{
    57c9:	f3 0f 1e fa          	endbr64 
    57cd:	51                   	push   %rcx
	posix_change_cpu_state_and_wait(false);
    57ce:	31 ff                	xor    %edi,%edi
    57d0:	e8 71 ff ff ff       	callq  5746 <posix_change_cpu_state_and_wait>
	if (soc_terminate) {
    57d5:	80 3d d2 9d 00 00 00 	cmpb   $0x0,0x9dd2(%rip)        # f5ae <soc_terminate>
    57dc:	74 08                	je     57e6 <posix_interrupt_raised+0x1d>
		posix_exit(0);
    57de:	31 ff                	xor    %edi,%edi
}
    57e0:	5a                   	pop    %rdx
		posix_exit(0);
    57e1:	e9 b2 0c 00 00       	jmpq   6498 <posix_exit>
}
    57e6:	58                   	pop    %rax
    57e7:	c3                   	retq   

00000000000057e8 <posix_halt_cpu>:
{
    57e8:	f3 0f 1e fa          	endbr64 
    57ec:	50                   	push   %rax
	posix_change_cpu_state_and_wait(true);
    57ed:	bf 01 00 00 00       	mov    $0x1,%edi
    57f2:	e8 4f ff ff ff       	callq  5746 <posix_change_cpu_state_and_wait>
}
    57f7:	5a                   	pop    %rdx
	posix_irq_handler();
    57f8:	e9 c6 08 00 00       	jmpq   60c3 <posix_irq_handler>

00000000000057fd <posix_boot_cpu>:
 * The HW models will call this function to "boot" the CPU
 * == spawn the Zephyr init thread, which will then spawn
 * anything it wants, and run until the CPU is set back to idle again
 */
void posix_boot_cpu(void)
{
    57fd:	f3 0f 1e fa          	endbr64 
    5801:	53                   	push   %rbx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5802:	48 8d 3d 97 95 00 00 	lea    0x9597(%rip),%rdi        # eda0 <mtx_cpu>
	/* Create a thread for Zephyr init: */
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));

	/* And we wait until Zephyr has run til completion (has gone to idle) */
	while (cpu_halted == false) {
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5809:	48 8d 1d 90 95 00 00 	lea    0x9590(%rip),%rbx        # eda0 <mtx_cpu>
{
    5810:	48 83 ec 10          	sub    $0x10,%rsp
    5814:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    581b:	00 00 
    581d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5822:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5824:	e8 87 ce ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5829:	48 8d 35 b7 40 00 00 	lea    0x40b7(%rip),%rsi        # 98e7 <default_cmd+0x687>
    5830:	89 c7                	mov    %eax,%edi
    5832:	e8 a6 fe ff ff       	callq  56dd <pc_safe_call>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    5837:	48 89 e7             	mov    %rsp,%rdi
    583a:	31 c9                	xor    %ecx,%ecx
    583c:	31 f6                	xor    %esi,%esi
    583e:	48 8d 15 ab fe ff ff 	lea    -0x155(%rip),%rdx        # 56f0 <zephyr_wrapper>
	cpu_halted = false;
    5845:	c6 05 30 6c 00 00 00 	movb   $0x0,0x6c30(%rip)        # c47c <cpu_halted>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    584c:	e8 6f cb ff ff       	callq  23c0 <pthread_create@plt>
    5851:	48 8d 35 ed 40 00 00 	lea    0x40ed(%rip),%rsi        # 9945 <default_cmd+0x6e5>
    5858:	89 c7                	mov    %eax,%edi
    585a:	e8 7e fe ff ff       	callq  56dd <pc_safe_call>
	while (cpu_halted == false) {
    585f:	80 3d 16 6c 00 00 00 	cmpb   $0x0,0x6c16(%rip)        # c47c <cpu_halted>
    5866:	75 11                	jne    5879 <posix_boot_cpu+0x7c>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5868:	48 89 de             	mov    %rbx,%rsi
    586b:	48 8d 3d 6e 95 00 00 	lea    0x956e(%rip),%rdi        # ede0 <cond_cpu>
    5872:	e8 29 cc ff ff       	callq  24a0 <pthread_cond_wait@plt>
    5877:	eb e6                	jmp    585f <posix_boot_cpu+0x62>
	}
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5879:	48 8d 3d 20 95 00 00 	lea    0x9520(%rip),%rdi        # eda0 <mtx_cpu>
    5880:	e8 1b cd ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    5885:	48 8d 35 78 40 00 00 	lea    0x4078(%rip),%rsi        # 9904 <default_cmd+0x6a4>
    588c:	89 c7                	mov    %eax,%edi
    588e:	e8 4a fe ff ff       	callq  56dd <pc_safe_call>

	if (soc_terminate) {
    5893:	80 3d 14 9d 00 00 00 	cmpb   $0x0,0x9d14(%rip)        # f5ae <soc_terminate>
    589a:	74 07                	je     58a3 <posix_boot_cpu+0xa6>
		posix_exit(0);
    589c:	31 ff                	xor    %edi,%edi
    589e:	e8 f5 0b 00 00       	callq  6498 <posix_exit>
	}
}
    58a3:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    58a8:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    58af:	00 00 
    58b1:	74 05                	je     58b8 <posix_boot_cpu+0xbb>
    58b3:	e8 f8 cb ff ff       	callq  24b0 <__stack_chk_fail@plt>
    58b8:	48 83 c4 10          	add    $0x10,%rsp
    58bc:	5b                   	pop    %rbx
    58bd:	c3                   	retq   

00000000000058be <run_native_tasks>:
 * @brief Run the set of special native tasks corresponding to the given level
 *
 * @param level One of _NATIVE_*_LEVEL as defined in soc.h
 */
void run_native_tasks(int level)
{
    58be:	f3 0f 1e fa          	endbr64 
		__native_tasks_end
	};

	void (**fptr)(void);

	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    58c2:	48 8d 05 97 62 00 00 	lea    0x6297(%rip),%rax        # bb60 <native_pre_tasks.6323>
    58c9:	48 63 d7             	movslq %edi,%rdx
{
    58cc:	41 54                	push   %r12
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    58ce:	ff c7                	inc    %edi
{
    58d0:	55                   	push   %rbp
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    58d1:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    58d5:	49 89 c4             	mov    %rax,%r12
{
    58d8:	53                   	push   %rbx
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    58d9:	48 63 df             	movslq %edi,%rbx
    58dc:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    58e0:	76 11                	jbe    58f3 <run_native_tasks+0x35>
		fptr++) {
		if (*fptr) { /* LCOV_EXCL_BR_LINE */
    58e2:	48 8b 45 00          	mov    0x0(%rbp),%rax
    58e6:	48 85 c0             	test   %rax,%rax
    58e9:	74 02                	je     58ed <run_native_tasks+0x2f>
			(*fptr)();
    58eb:	ff d0                	callq  *%rax
		fptr++) {
    58ed:	48 83 c5 08          	add    $0x8,%rbp
    58f1:	eb e9                	jmp    58dc <run_native_tasks+0x1e>
		}
	}
}
    58f3:	5b                   	pop    %rbx
    58f4:	5d                   	pop    %rbp
    58f5:	41 5c                	pop    %r12
    58f7:	c3                   	retq   

00000000000058f8 <posix_soc_clean_up>:
 * Clean up all memory allocated by the SOC and POSIX core
 *
 * This function can be called from both HW and SW threads
 */
void posix_soc_clean_up(void)
{
    58f8:	f3 0f 1e fa          	endbr64 
    58fc:	51                   	push   %rcx
	 * If we are being called from a HW thread we can cleanup
	 *
	 * Otherwise (!cpu_halted) we give back control to the HW thread and
	 * tell it to terminate ASAP
	 */
	if (cpu_halted) {
    58fd:	80 3d 78 6b 00 00 00 	cmpb   $0x0,0x6b78(%rip)        # c47c <cpu_halted>
    5904:	74 10                	je     5916 <posix_soc_clean_up+0x1e>

		posix_core_clean_up();
    5906:	e8 16 fc ff ff       	callq  5521 <posix_core_clean_up>
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    590b:	bf 04 00 00 00       	mov    $0x4,%edi
			 * won't really wait 1 second
			 */
		}
	}
	/* LCOV_EXCL_STOP */
}
    5910:	5a                   	pop    %rdx
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    5911:	e9 a8 ff ff ff       	jmpq   58be <run_native_tasks>
	} else if (soc_terminate == false) {
    5916:	80 3d 91 9c 00 00 00 	cmpb   $0x0,0x9c91(%rip)        # f5ae <soc_terminate>
    591d:	75 68                	jne    5987 <posix_soc_clean_up+0x8f>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    591f:	48 8d 3d 7a 94 00 00 	lea    0x947a(%rip),%rdi        # eda0 <mtx_cpu>
		soc_terminate = true;
    5926:	c6 05 81 9c 00 00 01 	movb   $0x1,0x9c81(%rip)        # f5ae <soc_terminate>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    592d:	e8 7e cd ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5932:	48 8d 35 ae 3f 00 00 	lea    0x3fae(%rip),%rsi        # 98e7 <default_cmd+0x687>
    5939:	89 c7                	mov    %eax,%edi
    593b:	e8 9d fd ff ff       	callq  56dd <pc_safe_call>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    5940:	48 8d 3d 99 94 00 00 	lea    0x9499(%rip),%rdi        # ede0 <cond_cpu>
		cpu_halted = true;
    5947:	c6 05 2e 6b 00 00 01 	movb   $0x1,0x6b2e(%rip)        # c47c <cpu_halted>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    594e:	e8 bd ca ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    5953:	48 8d 35 c9 3f 00 00 	lea    0x3fc9(%rip),%rsi        # 9923 <default_cmd+0x6c3>
    595a:	89 c7                	mov    %eax,%edi
    595c:	e8 7c fd ff ff       	callq  56dd <pc_safe_call>
		PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5961:	48 8d 3d 38 94 00 00 	lea    0x9438(%rip),%rdi        # eda0 <mtx_cpu>
    5968:	e8 33 cc ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    596d:	48 8d 35 90 3f 00 00 	lea    0x3f90(%rip),%rsi        # 9904 <default_cmd+0x6a4>
    5974:	89 c7                	mov    %eax,%edi
    5976:	e8 62 fd ff ff       	callq  56dd <pc_safe_call>
			sleep(1);
    597b:	bf 01 00 00 00       	mov    $0x1,%edi
    5980:	e8 1b cd ff ff       	callq  26a0 <sleep@plt>
		while (1) {
    5985:	eb f4                	jmp    597b <posix_soc_clean_up+0x83>
}
    5987:	58                   	pop    %rax
    5988:	c3                   	retq   

0000000000005989 <hwm_signal_end_handler>:

/**
 * Handler for SIGTERM and SIGINT
 */
void hwm_signal_end_handler(int sig)
{
    5989:	f3 0f 1e fa          	endbr64 
	signaled_end = 1;
    598d:	c7 05 e5 9b 00 00 01 	movl   $0x1,0x9be5(%rip)        # f57c <signaled_end>
    5994:	00 00 00 
}
    5997:	c3                   	retq   

0000000000005998 <hwm_set_sig_handler>:
 *
 * Note that SA_RESETHAND requires either _POSIX_C_SOURCE>=200809 or
 * _XOPEN_SOURCE>=500
 */
void hwm_set_sig_handler(void)
{
    5998:	f3 0f 1e fa          	endbr64 
    599c:	55                   	push   %rbp
    599d:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    59a4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    59ab:	00 00 
    59ad:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
    59b4:	00 
    59b5:	31 c0                	xor    %eax,%eax
	struct sigaction act;

	act.sa_handler = hwm_signal_end_handler;
    59b7:	48 8d 05 cb ff ff ff 	lea    -0x35(%rip),%rax        # 5989 <hwm_signal_end_handler>
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    59be:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
	act.sa_handler = hwm_signal_end_handler;
    59c3:	48 89 04 24          	mov    %rax,(%rsp)
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    59c7:	e8 b4 cb ff ff       	callq  2580 <sigemptyset@plt>
	if (unlikely(test)) {
    59cc:	85 c0                	test   %eax,%eax
    59ce:	74 15                	je     59e5 <hwm_set_sig_handler+0x4d>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    59d0:	48 8d 35 a9 3f 00 00 	lea    0x3fa9(%rip),%rsi        # 9980 <default_cmd+0x720>
    59d7:	48 8d 3d 49 3d 00 00 	lea    0x3d49(%rip),%rdi        # 9727 <default_cmd+0x4c7>
    59de:	31 c0                	xor    %eax,%eax
    59e0:	e8 af 0b 00 00       	callq  6594 <posix_print_error_and_exit>

	act.sa_flags = SA_RESETHAND;

	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    59e5:	48 89 e5             	mov    %rsp,%rbp
    59e8:	31 d2                	xor    %edx,%edx
    59ea:	bf 0f 00 00 00       	mov    $0xf,%edi
	act.sa_flags = SA_RESETHAND;
    59ef:	c7 84 24 88 00 00 00 	movl   $0x80000000,0x88(%rsp)
    59f6:	00 00 00 80 
	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    59fa:	48 89 ee             	mov    %rbp,%rsi
    59fd:	e8 3e ca ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    5a02:	85 c0                	test   %eax,%eax
    5a04:	74 15                	je     5a1b <hwm_set_sig_handler+0x83>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5a06:	48 8d 35 8d 3f 00 00 	lea    0x3f8d(%rip),%rsi        # 999a <default_cmd+0x73a>
    5a0d:	48 8d 3d 13 3d 00 00 	lea    0x3d13(%rip),%rdi        # 9727 <default_cmd+0x4c7>
    5a14:	31 c0                	xor    %eax,%eax
    5a16:	e8 79 0b 00 00       	callq  6594 <posix_print_error_and_exit>
	PC_SAFE_CALL(sigaction(SIGINT, &act, NULL));
    5a1b:	31 d2                	xor    %edx,%edx
    5a1d:	48 89 ee             	mov    %rbp,%rsi
    5a20:	bf 02 00 00 00       	mov    $0x2,%edi
    5a25:	e8 16 ca ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    5a2a:	85 c0                	test   %eax,%eax
    5a2c:	74 15                	je     5a43 <hwm_set_sig_handler+0xab>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5a2e:	48 8d 35 84 3f 00 00 	lea    0x3f84(%rip),%rsi        # 99b9 <default_cmd+0x759>
    5a35:	48 8d 3d eb 3c 00 00 	lea    0x3ceb(%rip),%rdi        # 9727 <default_cmd+0x4c7>
    5a3c:	31 c0                	xor    %eax,%eax
    5a3e:	e8 51 0b 00 00       	callq  6594 <posix_print_error_and_exit>
}
    5a43:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    5a4a:	00 
    5a4b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5a52:	00 00 
    5a54:	74 05                	je     5a5b <hwm_set_sig_handler+0xc3>
    5a56:	e8 55 ca ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5a5b:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    5a62:	5d                   	pop    %rbp
    5a63:	c3                   	retq   

0000000000005a64 <hwm_find_next_timer>:
/**
 * Find in between all timers which is the next one
 * and update  next_timer_* accordingly
 */
void hwm_find_next_timer(void)
{
    5a64:	f3 0f 1e fa          	endbr64 
	next_timer_index = 0;
	next_timer_time  = *Timer_list[0];
    5a68:	48 8d 05 81 9a 00 00 	lea    0x9a81(%rip),%rax        # f4f0 <hw_timer_timer>
	next_timer_index = 0;
    5a6f:	c7 05 f7 69 00 00 00 	movl   $0x0,0x69f7(%rip)        # c470 <next_timer_index>
    5a76:	00 00 00 
	next_timer_time  = *Timer_list[0];
    5a79:	48 8b 10             	mov    (%rax),%rdx

	for (unsigned int i = 1; i < NUMBER_OF_TIMERS ; i++) {
		if (next_timer_time > *Timer_list[i]) {
    5a7c:	48 8d 05 dd 69 00 00 	lea    0x69dd(%rip),%rax        # c460 <irq_ctrl_timer>
    5a83:	48 8b 00             	mov    (%rax),%rax
	next_timer_time  = *Timer_list[0];
    5a86:	48 89 15 1b 9a 00 00 	mov    %rdx,0x9a1b(%rip)        # f4a8 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    5a8d:	48 39 c2             	cmp    %rax,%rdx
    5a90:	76 11                	jbe    5aa3 <hwm_find_next_timer+0x3f>
			next_timer_index = i;
    5a92:	c7 05 d4 69 00 00 01 	movl   $0x1,0x69d4(%rip)        # c470 <next_timer_index>
    5a99:	00 00 00 
			next_timer_time = *Timer_list[i];
    5a9c:	48 89 05 05 9a 00 00 	mov    %rax,0x9a05(%rip)        # f4a8 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    5aa3:	48 8d 05 96 9a 00 00 	lea    0x9a96(%rip),%rax        # f540 <hw_counter_timer>
    5aaa:	48 8b 00             	mov    (%rax),%rax
    5aad:	48 3b 05 f4 99 00 00 	cmp    0x99f4(%rip),%rax        # f4a8 <next_timer_time>
    5ab4:	73 11                	jae    5ac7 <hwm_find_next_timer+0x63>
			next_timer_index = i;
    5ab6:	c7 05 b0 69 00 00 02 	movl   $0x2,0x69b0(%rip)        # c470 <next_timer_index>
    5abd:	00 00 00 
			next_timer_time = *Timer_list[i];
    5ac0:	48 89 05 e1 99 00 00 	mov    %rax,0x99e1(%rip)        # f4a8 <next_timer_time>
		}
	}
}
    5ac7:	c3                   	retq   

0000000000005ac8 <hwm_main_loop>:
/**
 * Entry point for the HW models
 * The HW models execute in an infinite loop until terminated
 */
void hwm_main_loop(void)
{
    5ac8:	f3 0f 1e fa          	endbr64 
    5acc:	48 83 ec 18          	sub    $0x18,%rsp
	if (next_timer_time >= simu_time) { /* LCOV_EXCL_BR_LINE */
    5ad0:	48 8b 35 d1 99 00 00 	mov    0x99d1(%rip),%rsi        # f4a8 <next_timer_time>
    5ad7:	48 8b 15 d2 99 00 00 	mov    0x99d2(%rip),%rdx        # f4b0 <simu_time>
    5ade:	48 39 d6             	cmp    %rdx,%rsi
    5ae1:	72 09                	jb     5aec <hwm_main_loop+0x24>
		simu_time = next_timer_time;
    5ae3:	48 89 35 c6 99 00 00 	mov    %rsi,0x99c6(%rip)        # f4b0 <simu_time>
    5aea:	eb 14                	jmp    5b00 <hwm_main_loop+0x38>
		posix_print_warning("next_timer_time corrupted (%"PRIu64"<= %"
    5aec:	8b 0d 7e 69 00 00    	mov    0x697e(%rip),%ecx        # c470 <next_timer_index>
    5af2:	48 8d 3d de 3e 00 00 	lea    0x3ede(%rip),%rdi        # 99d7 <default_cmd+0x777>
    5af9:	31 c0                	xor    %eax,%eax
    5afb:	e8 6d 0b 00 00       	callq  666d <posix_print_warning>
	if (signaled_end || (simu_time > end_of_time)) {
    5b00:	8b 15 76 9a 00 00    	mov    0x9a76(%rip),%edx        # f57c <signaled_end>
    5b06:	48 8b 05 a3 99 00 00 	mov    0x99a3(%rip),%rax        # f4b0 <simu_time>
    5b0d:	85 d2                	test   %edx,%edx
    5b0f:	75 09                	jne    5b1a <hwm_main_loop+0x52>
    5b11:	48 39 05 38 69 00 00 	cmp    %rax,0x6938(%rip)        # c450 <end_of_time>
    5b18:	73 36                	jae    5b50 <hwm_main_loop+0x88>
				((long double)simu_time)/1.0e6);
    5b1a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5b1f:	df 6c 24 08          	fildll 0x8(%rsp)
    5b23:	48 85 c0             	test   %rax,%rax
    5b26:	79 06                	jns    5b2e <hwm_main_loop+0x66>
    5b28:	d8 05 76 38 00 00    	fadds  0x3876(%rip)        # 93a4 <default_cmd+0x144>
		posix_print_trace("\nStopped at %.3Lfs\n",
    5b2e:	d8 35 74 38 00 00    	fdivs  0x3874(%rip)        # 93a8 <default_cmd+0x148>
    5b34:	50                   	push   %rax
    5b35:	48 8d 3d d0 3e 00 00 	lea    0x3ed0(%rip),%rdi        # 9a0c <default_cmd+0x7ac>
    5b3c:	50                   	push   %rax
    5b3d:	31 c0                	xor    %eax,%eax
    5b3f:	db 3c 24             	fstpt  (%rsp)
    5b42:	e8 f5 0b 00 00       	callq  673c <posix_print_trace>
    5b47:	5a                   	pop    %rdx
		posix_exit(0);
    5b48:	31 ff                	xor    %edi,%edi
		posix_print_trace("\nStopped at %.3Lfs\n",
    5b4a:	59                   	pop    %rcx
		posix_exit(0);
    5b4b:	e8 48 09 00 00       	callq  6498 <posix_exit>
	while (1) {
		hwm_sleep_until_next_timer();

		switch (next_timer_index) { /* LCOV_EXCL_BR_LINE */
    5b50:	8b 05 1a 69 00 00    	mov    0x691a(%rip),%eax        # c470 <next_timer_index>
    5b56:	83 f8 01             	cmp    $0x1,%eax
    5b59:	74 10                	je     5b6b <hwm_main_loop+0xa3>
    5b5b:	83 f8 02             	cmp    $0x2,%eax
    5b5e:	74 12                	je     5b72 <hwm_main_loop+0xaa>
    5b60:	85 c0                	test   %eax,%eax
    5b62:	75 15                	jne    5b79 <hwm_main_loop+0xb1>
		case HWTIMER:
			hwtimer_timer_reached();
    5b64:	e8 02 03 00 00       	callq  5e6b <hwtimer_timer_reached>
			break;
    5b69:	eb 1c                	jmp    5b87 <hwm_main_loop+0xbf>
		case IRQCNT:
			hw_irq_ctrl_timer_triggered();
    5b6b:	e8 11 09 00 00       	callq  6481 <hw_irq_ctrl_timer_triggered>
			break;
    5b70:	eb 15                	jmp    5b87 <hwm_main_loop+0xbf>
		case HW_COUNTER:
			hw_counter_triggered();
    5b72:	e8 29 16 00 00       	callq  71a0 <hw_counter_triggered>
			break;
    5b77:	eb 0e                	jmp    5b87 <hwm_main_loop+0xbf>
			sdl_handle_events();
			break;
#endif
		default:
			/* LCOV_EXCL_START */
			posix_print_error_and_exit(
    5b79:	48 8d 3d a0 3e 00 00 	lea    0x3ea0(%rip),%rdi        # 9a20 <default_cmd+0x7c0>
    5b80:	31 c0                	xor    %eax,%eax
    5b82:	e8 0d 0a 00 00       	callq  6594 <posix_print_error_and_exit>
					"next_timer_index corrupted\n");
			break;
			/* LCOV_EXCL_STOP */
		}

		hwm_find_next_timer();
    5b87:	e8 d8 fe ff ff       	callq  5a64 <hwm_find_next_timer>
		hwm_sleep_until_next_timer();
    5b8c:	e9 3f ff ff ff       	jmpq   5ad0 <hwm_main_loop+0x8>

0000000000005b91 <hwm_set_end_of_time>:

/**
 * Set the simulated time when the process will stop
 */
void hwm_set_end_of_time(uint64_t new_end_of_time)
{
    5b91:	f3 0f 1e fa          	endbr64 
	end_of_time = new_end_of_time;
    5b95:	48 89 3d b4 68 00 00 	mov    %rdi,0x68b4(%rip)        # c450 <end_of_time>
}
    5b9c:	c3                   	retq   

0000000000005b9d <hwm_get_time>:

/**
 * Return the current time as known by the device
 */
uint64_t hwm_get_time(void)
{
    5b9d:	f3 0f 1e fa          	endbr64 
	return simu_time;
}
    5ba1:	48 8b 05 08 99 00 00 	mov    0x9908(%rip),%rax        # f4b0 <simu_time>
    5ba8:	c3                   	retq   

0000000000005ba9 <hwm_init>:

/**
 * Function to initialize the HW models
 */
void hwm_init(void)
{
    5ba9:	f3 0f 1e fa          	endbr64 
    5bad:	50                   	push   %rax
	hwm_set_sig_handler();
    5bae:	e8 e5 fd ff ff       	callq  5998 <hwm_set_sig_handler>
	hwtimer_init();
    5bb3:	e8 7e 01 00 00       	callq  5d36 <hwtimer_init>
	hw_counter_init();
    5bb8:	e8 a8 15 00 00       	callq  7165 <hw_counter_init>
	hw_irq_ctrl_init();
    5bbd:	e8 f3 06 00 00       	callq  62b5 <hw_irq_ctrl_init>

	hwm_find_next_timer();
}
    5bc2:	5a                   	pop    %rdx
	hwm_find_next_timer();
    5bc3:	e9 9c fe ff ff       	jmpq   5a64 <hwm_find_next_timer>

0000000000005bc8 <hwm_cleanup>:
 * Function to free any resources allocated by the HW models
 * Note that this function needs to be designed so it is possible
 * to call it more than once during cleanup
 */
void hwm_cleanup(void)
{
    5bc8:	f3 0f 1e fa          	endbr64 
    5bcc:	50                   	push   %rax
	hwtimer_cleanup();
    5bcd:	e8 67 02 00 00       	callq  5e39 <hwtimer_cleanup>
	hw_irq_ctrl_cleanup();
}
    5bd2:	5a                   	pop    %rdx
	hw_irq_ctrl_cleanup();
    5bd3:	e9 1c 07 00 00       	jmpq   62f4 <hw_irq_ctrl_cleanup>

0000000000005bd8 <hwtimer_update_timer>:
	real_time_mode = new_rt;
}

static void hwtimer_update_timer(void)
{
	hw_timer_timer = MIN(hw_timer_tick_timer, hw_timer_awake_timer);
    5bd8:	48 8d 15 01 99 00 00 	lea    0x9901(%rip),%rdx        # f4e0 <hw_timer_awake_timer>
    5bdf:	48 8d 05 02 99 00 00 	lea    0x9902(%rip),%rax        # f4e8 <hw_timer_tick_timer>
    5be6:	48 8b 00             	mov    (%rax),%rax
    5be9:	48 39 02             	cmp    %rax,(%rdx)
    5bec:	48 0f 46 02          	cmovbe (%rdx),%rax
    5bf0:	48 8d 15 f9 98 00 00 	lea    0x98f9(%rip),%rdx        # f4f0 <hw_timer_timer>
    5bf7:	48 89 02             	mov    %rax,(%rdx)
}
    5bfa:	c3                   	retq   

0000000000005bfb <native_add_time_options>:
	ARG_UNUSED(offset);
	hwtimer_reset_rtc();
}

static void native_add_time_options(void)
{
    5bfb:	f3 0f 1e fa          	endbr64 
		(void *)&args.stop_at, cmd_stop_at_found,
		"In simulated seconds, when to stop automatically"},

		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(timer_options);
    5bff:	48 8d 3d fa 63 00 00 	lea    0x63fa(%rip),%rdi        # c000 <timer_options.3187>
    5c06:	e9 e8 13 00 00       	jmpq   6ff3 <native_add_command_line_opts>

0000000000005c0b <cmd_stop_at_found>:
{
    5c0b:	f3 0f 1e fa          	endbr64 
	if (args.stop_at < 0) {
    5c0f:	0f 57 c0             	xorps  %xmm0,%xmm0
{
    5c12:	52                   	push   %rdx
	if (args.stop_at < 0) {
    5c13:	66 0f 2f 05 05 92 00 	comisd 0x9205(%rip),%xmm0        # ee20 <args>
    5c1a:	00 
    5c1b:	76 11                	jbe    5c2e <cmd_stop_at_found+0x23>
    5c1d:	48 89 fe             	mov    %rdi,%rsi
		posix_print_error_and_exit("Error: stop-at must be positive "
    5c20:	31 c0                	xor    %eax,%eax
    5c22:	48 8d 3d 13 3e 00 00 	lea    0x3e13(%rip),%rdi        # 9a3c <default_cmd+0x7dc>
    5c29:	e8 66 09 00 00       	callq  6594 <posix_print_error_and_exit>
	hwm_set_end_of_time(args.stop_at*1e6);
    5c2e:	f2 0f 10 05 42 36 00 	movsd  0x3642(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5c35:	00 
    5c36:	f2 0f 59 05 e2 91 00 	mulsd  0x91e2(%rip),%xmm0        # ee20 <args>
    5c3d:	00 
    5c3e:	f2 0f 10 0d 3a 36 00 	movsd  0x363a(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5c45:	00 
    5c46:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5c4a:	73 07                	jae    5c53 <cmd_stop_at_found+0x48>
    5c4c:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5c51:	eb 0e                	jmp    5c61 <cmd_stop_at_found+0x56>
    5c53:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5c57:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5c5c:	48 0f ba ff 3f       	btc    $0x3f,%rdi
}
    5c61:	58                   	pop    %rax
	hwm_set_end_of_time(args.stop_at*1e6);
    5c62:	e9 2a ff ff ff       	jmpq   5b91 <hwm_set_end_of_time>

0000000000005c67 <hwtimer_set_real_time_mode>:
{
    5c67:	f3 0f 1e fa          	endbr64 
	real_time_mode = new_rt;
    5c6b:	40 88 3d 0b 68 00 00 	mov    %dil,0x680b(%rip)        # c47d <real_time_mode>
}
    5c72:	c3                   	retq   

0000000000005c73 <cmd_no_realtime_found>:
{
    5c73:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(false);
    5c77:	31 ff                	xor    %edi,%edi
    5c79:	e9 e9 ff ff ff       	jmpq   5c67 <hwtimer_set_real_time_mode>

0000000000005c7e <cmd_realtime_found>:
{
    5c7e:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(true);
    5c82:	bf 01 00 00 00       	mov    $0x1,%edi
    5c87:	e9 db ff ff ff       	jmpq   5c67 <hwtimer_set_real_time_mode>

0000000000005c8c <get_host_us_time>:
{
    5c8c:	f3 0f 1e fa          	endbr64 
    5c90:	48 83 ec 28          	sub    $0x28,%rsp
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    5c94:	bf 04 00 00 00       	mov    $0x4,%edi
{
    5c99:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5ca0:	00 00 
    5ca2:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5ca7:	31 c0                	xor    %eax,%eax
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    5ca9:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    5cae:	e8 cd c7 ff ff       	callq  2480 <clock_gettime@plt>
	return (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    5cb3:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5cb8:	48 85 d2             	test   %rdx,%rdx
    5cbb:	78 07                	js     5cc4 <get_host_us_time+0x38>
    5cbd:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    5cc2:	eb 15                	jmp    5cd9 <get_host_us_time+0x4d>
    5cc4:	48 89 d0             	mov    %rdx,%rax
    5cc7:	83 e2 01             	and    $0x1,%edx
    5cca:	48 d1 e8             	shr    %rax
    5ccd:	48 09 d0             	or     %rdx,%rax
    5cd0:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5cd5:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5cd9:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5cde:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    5ce3:	f2 0f 59 05 8d 35 00 	mulsd  0x358d(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5cea:	00 
    5ceb:	48 99                	cqto   
    5ced:	48 f7 f9             	idiv   %rcx
    5cf0:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5cf5:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5cf9:	f2 0f 10 0d 7f 35 00 	movsd  0x357f(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5d00:	00 
    5d01:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5d05:	73 07                	jae    5d0e <get_host_us_time+0x82>
    5d07:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5d0c:	eb 0e                	jmp    5d1c <get_host_us_time+0x90>
    5d0e:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5d12:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5d17:	48 0f ba f8 3f       	btc    $0x3f,%rax
}
    5d1c:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    5d21:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    5d28:	00 00 
    5d2a:	74 05                	je     5d31 <get_host_us_time+0xa5>
    5d2c:	e8 7f c7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5d31:	48 83 c4 28          	add    $0x28,%rsp
    5d35:	c3                   	retq   

0000000000005d36 <hwtimer_init>:
{
    5d36:	f3 0f 1e fa          	endbr64 
    5d3a:	48 83 ec 28          	sub    $0x28,%rsp
    5d3e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5d45:	00 00 
    5d47:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5d4c:	31 c0                	xor    %eax,%eax
	hw_timer_tick_timer = NEVER;
    5d4e:	48 8d 05 93 97 00 00 	lea    0x9793(%rip),%rax        # f4e8 <hw_timer_tick_timer>
	silent_ticks = 0;
    5d55:	48 c7 05 70 97 00 00 	movq   $0x0,0x9770(%rip)        # f4d0 <silent_ticks>
    5d5c:	00 00 00 00 
	hw_timer_tick_timer = NEVER;
    5d60:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hw_timer_awake_timer = NEVER;
    5d67:	48 8d 05 72 97 00 00 	lea    0x9772(%rip),%rax        # f4e0 <hw_timer_awake_timer>
    5d6e:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    5d75:	e8 5e fe ff ff       	callq  5bd8 <hwtimer_update_timer>
	if (real_time_mode) {
    5d7a:	80 3d fc 66 00 00 00 	cmpb   $0x0,0x66fc(%rip)        # c47d <real_time_mode>
    5d81:	74 17                	je     5d9a <hwtimer_init+0x64>
		boot_time = get_host_us_time();
    5d83:	e8 04 ff ff ff       	callq  5c8c <get_host_us_time>
		last_radj_stime = 0U;
    5d88:	48 c7 05 25 97 00 00 	movq   $0x0,0x9725(%rip)        # f4b8 <last_radj_stime>
    5d8f:	00 00 00 00 
		last_radj_rtime = boot_time;
    5d93:	48 89 05 26 97 00 00 	mov    %rax,0x9726(%rip)        # f4c0 <last_radj_rtime>
	if (!reset_rtc) {
    5d9a:	80 3d 0e 98 00 00 00 	cmpb   $0x0,0x980e(%rip)        # f5af <reset_rtc>
    5da1:	75 7c                	jne    5e1f <hwtimer_init+0xe9>
		clock_gettime(CLOCK_REALTIME, &tv);
    5da3:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    5da8:	31 ff                	xor    %edi,%edi
    5daa:	e8 d1 c6 ff ff       	callq  2480 <clock_gettime@plt>
		realhosttime = (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    5daf:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5db4:	48 85 d2             	test   %rdx,%rdx
    5db7:	78 07                	js     5dc0 <hwtimer_init+0x8a>
    5db9:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    5dbe:	eb 15                	jmp    5dd5 <hwtimer_init+0x9f>
    5dc0:	48 89 d0             	mov    %rdx,%rax
    5dc3:	83 e2 01             	and    $0x1,%edx
    5dc6:	48 d1 e8             	shr    %rax
    5dc9:	48 09 d0             	or     %rdx,%rax
    5dcc:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5dd1:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5dd5:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5dda:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    5ddf:	f2 0f 59 05 91 34 00 	mulsd  0x3491(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5de6:	00 
    5de7:	48 99                	cqto   
    5de9:	48 f7 f9             	idiv   %rcx
    5dec:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5df1:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5df5:	f2 0f 10 0d 83 34 00 	movsd  0x3483(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5dfc:	00 
    5dfd:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5e01:	73 07                	jae    5e0a <hwtimer_init+0xd4>
    5e03:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5e08:	eb 0e                	jmp    5e18 <hwtimer_init+0xe2>
    5e0a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5e0e:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5e13:	48 0f ba f8 3f       	btc    $0x3f,%rax
		rtc_offset += realhosttime;
    5e18:	48 01 05 a9 96 00 00 	add    %rax,0x96a9(%rip)        # f4c8 <rtc_offset>
}
    5e1f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    5e24:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5e2b:	00 00 
    5e2d:	74 05                	je     5e34 <hwtimer_init+0xfe>
    5e2f:	e8 7c c6 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5e34:	48 83 c4 28          	add    $0x28,%rsp
    5e38:	c3                   	retq   

0000000000005e39 <hwtimer_cleanup>:
{
    5e39:	f3 0f 1e fa          	endbr64 
}
    5e3d:	c3                   	retq   

0000000000005e3e <hwtimer_enable>:
{
    5e3e:	f3 0f 1e fa          	endbr64 
    5e42:	50                   	push   %rax
	tick_p = period;
    5e43:	48 89 3d 8e 96 00 00 	mov    %rdi,0x968e(%rip)        # f4d8 <tick_p>
	hw_timer_tick_timer = hwm_get_time() + tick_p;
    5e4a:	e8 4e fd ff ff       	callq  5b9d <hwm_get_time>
    5e4f:	48 8d 15 92 96 00 00 	lea    0x9692(%rip),%rdx        # f4e8 <hw_timer_tick_timer>
    5e56:	48 03 05 7b 96 00 00 	add    0x967b(%rip),%rax        # f4d8 <tick_p>
    5e5d:	48 89 02             	mov    %rax,(%rdx)
	hwtimer_update_timer();
    5e60:	e8 73 fd ff ff       	callq  5bd8 <hwtimer_update_timer>
}
    5e65:	5a                   	pop    %rdx
	hwm_find_next_timer();
    5e66:	e9 f9 fb ff ff       	jmpq   5a64 <hwm_find_next_timer>

0000000000005e6b <hwtimer_timer_reached>:
{
    5e6b:	f3 0f 1e fa          	endbr64 
    5e6f:	55                   	push   %rbp
    5e70:	53                   	push   %rbx
    5e71:	48 83 ec 38          	sub    $0x38,%rsp
    5e75:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5e7c:	00 00 
    5e7e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5e83:	31 c0                	xor    %eax,%eax
	uint64_t Now = hw_timer_timer;
    5e85:	48 8d 05 64 96 00 00 	lea    0x9664(%rip),%rax        # f4f0 <hw_timer_timer>
    5e8c:	48 8b 18             	mov    (%rax),%rbx
	if (hw_timer_awake_timer == Now) {
    5e8f:	48 8d 05 4a 96 00 00 	lea    0x964a(%rip),%rax        # f4e0 <hw_timer_awake_timer>
    5e96:	48 39 18             	cmp    %rbx,(%rax)
    5e99:	75 16                	jne    5eb1 <hwtimer_timer_reached+0x46>
	hw_timer_awake_timer = NEVER;
    5e9b:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    5ea2:	e8 31 fd ff ff       	callq  5bd8 <hwtimer_update_timer>
	hw_irq_ctrl_set_irq(PHONY_HARD_IRQ);
    5ea7:	bf ff ff 00 00       	mov    $0xffff,%edi
    5eac:	e8 5a 05 00 00       	callq  640b <hw_irq_ctrl_set_irq>
	if (hw_timer_tick_timer == Now) {
    5eb1:	48 8d 2d 30 96 00 00 	lea    0x9630(%rip),%rbp        # f4e8 <hw_timer_tick_timer>
    5eb8:	48 39 5d 00          	cmp    %rbx,0x0(%rbp)
    5ebc:	0f 85 12 01 00 00    	jne    5fd4 <hwtimer_timer_reached+0x169>
	if (real_time_mode) {
    5ec2:	80 3d b4 65 00 00 00 	cmpb   $0x0,0x65b4(%rip)        # c47d <real_time_mode>
    5ec9:	0f 84 d6 00 00 00    	je     5fa5 <hwtimer_timer_reached+0x13a>
				    / clock_ratio
    5ecf:	48 2b 1d e2 95 00 00 	sub    0x95e2(%rip),%rbx        # f4b8 <last_radj_stime>
    5ed6:	78 07                	js     5edf <hwtimer_timer_reached+0x74>
    5ed8:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5edd:	eb 15                	jmp    5ef4 <hwtimer_timer_reached+0x89>
    5edf:	48 89 d8             	mov    %rbx,%rax
    5ee2:	83 e3 01             	and    $0x1,%ebx
    5ee5:	48 d1 e8             	shr    %rax
    5ee8:	48 09 d8             	or     %rbx,%rax
    5eeb:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5ef0:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
				    + last_radj_rtime;
    5ef4:	48 8b 15 c5 95 00 00 	mov    0x95c5(%rip),%rdx        # f4c0 <last_radj_rtime>
				    / clock_ratio
    5efb:	f2 0f 5e 05 55 65 00 	divsd  0x6555(%rip),%xmm0        # c458 <clock_ratio>
    5f02:	00 
				    + last_radj_rtime;
    5f03:	48 85 d2             	test   %rdx,%rdx
    5f06:	78 07                	js     5f0f <hwtimer_timer_reached+0xa4>
    5f08:	f2 48 0f 2a ca       	cvtsi2sd %rdx,%xmm1
    5f0d:	eb 15                	jmp    5f24 <hwtimer_timer_reached+0xb9>
    5f0f:	48 89 d0             	mov    %rdx,%rax
    5f12:	83 e2 01             	and    $0x1,%edx
    5f15:	48 d1 e8             	shr    %rax
    5f18:	48 09 d0             	or     %rdx,%rax
    5f1b:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5f20:	f2 0f 58 c9          	addsd  %xmm1,%xmm1
    5f24:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
		uint64_t expected_rt = (hw_timer_tick_timer - last_radj_stime)
    5f28:	f2 0f 10 0d 50 33 00 	movsd  0x3350(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5f2f:	00 
    5f30:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5f34:	73 07                	jae    5f3d <hwtimer_timer_reached+0xd2>
    5f36:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5f3b:	eb 0e                	jmp    5f4b <hwtimer_timer_reached+0xe0>
    5f3d:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5f41:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5f46:	48 0f ba fb 3f       	btc    $0x3f,%rbx
		uint64_t real_time = get_host_us_time();
    5f4b:	e8 3c fd ff ff       	callq  5c8c <get_host_us_time>
		int64_t diff = expected_rt - real_time;
    5f50:	48 29 c3             	sub    %rax,%rbx
		if (diff > 0) { /* we need to slow down */
    5f53:	48 85 db             	test   %rbx,%rbx
    5f56:	7e 4d                	jle    5fa5 <hwtimer_timer_reached+0x13a>
			requested_time.tv_sec  = diff / 1e6;
    5f58:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5f5d:	f2 0f 10 1d 13 33 00 	movsd  0x3313(%rip),%xmm3        # 9278 <default_cmd+0x18>
    5f64:	00 
			(void) nanosleep(&requested_time, &remaining);
    5f65:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
    5f6a:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
			requested_time.tv_sec  = diff / 1e6;
    5f6f:	66 0f 28 d0          	movapd %xmm0,%xmm2
    5f73:	f2 0f 5e d3          	divsd  %xmm3,%xmm2
    5f77:	f2 48 0f 2c c2       	cvttsd2si %xmm2,%rax
						 requested_time.tv_sec*1e6)*1e3;
    5f7c:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
			requested_time.tv_sec  = diff / 1e6;
    5f81:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
						 requested_time.tv_sec*1e6)*1e3;
    5f86:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
			requested_time.tv_nsec = (diff -
    5f8a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
						 requested_time.tv_sec*1e6)*1e3;
    5f8e:	f2 0f 59 05 f2 32 00 	mulsd  0x32f2(%rip),%xmm0        # 9288 <default_cmd+0x28>
    5f95:	00 
			requested_time.tv_nsec = (diff -
    5f96:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5f9b:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			(void) nanosleep(&requested_time, &remaining);
    5fa0:	e8 3b c5 ff ff       	callq  24e0 <nanosleep@plt>
	hw_timer_tick_timer += tick_p;
    5fa5:	48 8b 05 2c 95 00 00 	mov    0x952c(%rip),%rax        # f4d8 <tick_p>
    5fac:	48 01 45 00          	add    %rax,0x0(%rbp)
	hwtimer_update_timer();
    5fb0:	e8 23 fc ff ff       	callq  5bd8 <hwtimer_update_timer>
	if (silent_ticks > 0) {
    5fb5:	48 8b 05 14 95 00 00 	mov    0x9514(%rip),%rax        # f4d0 <silent_ticks>
    5fbc:	48 85 c0             	test   %rax,%rax
    5fbf:	7e 0c                	jle    5fcd <hwtimer_timer_reached+0x162>
		silent_ticks -= 1;
    5fc1:	48 ff c8             	dec    %rax
    5fc4:	48 89 05 05 95 00 00 	mov    %rax,0x9505(%rip)        # f4d0 <silent_ticks>
    5fcb:	eb 07                	jmp    5fd4 <hwtimer_timer_reached+0x169>
		hw_irq_ctrl_set_irq(TIMER_TICK_IRQ);
    5fcd:	31 ff                	xor    %edi,%edi
    5fcf:	e8 37 04 00 00       	callq  640b <hw_irq_ctrl_set_irq>
}
    5fd4:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5fd9:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5fe0:	00 00 
    5fe2:	74 05                	je     5fe9 <hwtimer_timer_reached+0x17e>
    5fe4:	e8 c7 c4 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5fe9:	48 83 c4 38          	add    $0x38,%rsp
    5fed:	5b                   	pop    %rbx
    5fee:	5d                   	pop    %rbp
    5fef:	c3                   	retq   

0000000000005ff0 <hwtimer_set_silent_ticks>:
{
    5ff0:	f3 0f 1e fa          	endbr64 
	silent_ticks = sys_ticks;
    5ff4:	48 89 3d d5 94 00 00 	mov    %rdi,0x94d5(%rip)        # f4d0 <silent_ticks>
}
    5ffb:	c3                   	retq   

0000000000005ffc <hwtimer_reset_rtc>:
{
    5ffc:	f3 0f 1e fa          	endbr64 
	reset_rtc = true;
    6000:	c6 05 a8 95 00 00 01 	movb   $0x1,0x95a8(%rip)        # f5af <reset_rtc>
}
    6007:	c3                   	retq   

0000000000006008 <cmd_rtcreset_found>:
{
    6008:	f3 0f 1e fa          	endbr64 
	hwtimer_reset_rtc();
    600c:	e9 eb ff ff ff       	jmpq   5ffc <hwtimer_reset_rtc>

0000000000006011 <hwtimer_set_rtc_offset>:
{
    6011:	f3 0f 1e fa          	endbr64 
	rtc_offset = offset;
    6015:	48 89 3d ac 94 00 00 	mov    %rdi,0x94ac(%rip)        # f4c8 <rtc_offset>
}
    601c:	c3                   	retq   

000000000000601d <cmd_rtcoffset_found>:
{
    601d:	f3 0f 1e fa          	endbr64 
	hwtimer_set_rtc_offset(args.rtc_offset*1e6);
    6021:	f2 0f 10 05 4f 32 00 	movsd  0x324f(%rip),%xmm0        # 9278 <default_cmd+0x18>
    6028:	00 
    6029:	f2 0f 59 05 f7 8d 00 	mulsd  0x8df7(%rip),%xmm0        # ee28 <args+0x8>
    6030:	00 
    6031:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    6036:	e9 d6 ff ff ff       	jmpq   6011 <hwtimer_set_rtc_offset>

000000000000603b <hwtimer_set_rt_ratio>:
{
    603b:	f3 0f 1e fa          	endbr64 
	clock_ratio = ratio;
    603f:	f2 0f 11 05 11 64 00 	movsd  %xmm0,0x6411(%rip)        # c458 <clock_ratio>
    6046:	00 
}
    6047:	c3                   	retq   

0000000000006048 <cmd_rt_ratio_found>:
{
    6048:	f3 0f 1e fa          	endbr64 
	if ((args.rt_ratio <= 0)) {
    604c:	0f 57 c0             	xorps  %xmm0,%xmm0
    604f:	66 0f 2f 05 e1 8d 00 	comisd 0x8de1(%rip),%xmm0        # ee38 <args+0x18>
    6056:	00 
    6057:	72 1a                	jb     6073 <cmd_rt_ratio_found+0x2b>
{
    6059:	50                   	push   %rax
		posix_print_error_and_exit("The ratio needs to be > 0. "
    605a:	48 8d 3d 01 3a 00 00 	lea    0x3a01(%rip),%rdi        # 9a62 <default_cmd+0x802>
    6061:	31 c0                	xor    %eax,%eax
    6063:	e8 2c 05 00 00       	callq  6594 <posix_print_error_and_exit>
	hwtimer_set_rt_ratio(args.rt_ratio);
    6068:	f2 0f 10 05 c8 8d 00 	movsd  0x8dc8(%rip),%xmm0        # ee38 <args+0x18>
    606f:	00 
}
    6070:	5a                   	pop    %rdx
    6071:	eb 08                	jmp    607b <cmd_rt_ratio_found+0x33>
	hwtimer_set_rt_ratio(args.rt_ratio);
    6073:	f2 0f 10 05 bd 8d 00 	movsd  0x8dbd(%rip),%xmm0        # ee38 <args+0x18>
    607a:	00 
    607b:	e9 bb ff ff ff       	jmpq   603b <hwtimer_set_rt_ratio>

0000000000006080 <cmd_rt_drift_found>:
{
    6080:	f3 0f 1e fa          	endbr64 
    6084:	52                   	push   %rdx
	if (!(args.rt_drift > -1)) {
    6085:	f2 0f 10 05 a3 8d 00 	movsd  0x8da3(%rip),%xmm0        # ee30 <args+0x10>
    608c:	00 
    608d:	66 0f 2f 05 fb 31 00 	comisd 0x31fb(%rip),%xmm0        # 9290 <default_cmd+0x30>
    6094:	00 
    6095:	77 0e                	ja     60a5 <cmd_rt_drift_found+0x25>
		posix_print_error_and_exit("The drift needs to be > -1. "
    6097:	48 8d 3d 00 3a 00 00 	lea    0x3a00(%rip),%rdi        # 9a9e <default_cmd+0x83e>
    609e:	31 c0                	xor    %eax,%eax
    60a0:	e8 ef 04 00 00       	callq  6594 <posix_print_error_and_exit>
	args.rt_ratio = args.rt_drift + 1;
    60a5:	f2 0f 10 05 eb 31 00 	movsd  0x31eb(%rip),%xmm0        # 9298 <default_cmd+0x38>
    60ac:	00 
    60ad:	f2 0f 58 05 7b 8d 00 	addsd  0x8d7b(%rip),%xmm0        # ee30 <args+0x10>
    60b4:	00 
    60b5:	f2 0f 11 05 7b 8d 00 	movsd  %xmm0,0x8d7b(%rip)        # ee38 <args+0x18>
    60bc:	00 
}
    60bd:	58                   	pop    %rax
	hwtimer_set_rt_ratio(args.rt_ratio);
    60be:	e9 78 ff ff ff       	jmpq   603b <hwtimer_set_rt_ratio>

00000000000060c3 <posix_irq_handler>:
 * Note that even that this function is executing in a Zephyr thread,  it is
 * effectively the model of the interrupt controller passing context to the IRQ
 * handler and therefore its priority handling
 */
void posix_irq_handler(void)
{
    60c3:	f3 0f 1e fa          	endbr64 
    60c7:	41 56                	push   %r14
    60c9:	41 55                	push   %r13
    60cb:	41 54                	push   %r12
    60cd:	55                   	push   %rbp
    60ce:	53                   	push   %rbx
	uint64_t irq_lock;
	int irq_nbr;
	static int may_swap;

	irq_lock = hw_irq_ctrl_get_current_lock();
    60cf:	e8 5e 02 00 00       	callq  6332 <hw_irq_ctrl_get_current_lock>

	if (irq_lock) {
    60d4:	85 c0                	test   %eax,%eax
    60d6:	0f 85 e6 00 00 00    	jne    61c2 <posix_irq_handler+0xff>
		/* "spurious" wakes can happen with interrupts locked */
		return;
	}

	if (_kernel.cpus[0].nested == 0) {
    60dc:	48 8d 1d 3d 93 00 00 	lea    0x933d(%rip),%rbx        # f420 <_kernel>
    60e3:	8b 03                	mov    (%rbx),%eax
    60e5:	85 c0                	test   %eax,%eax
    60e7:	75 0a                	jne    60f3 <posix_irq_handler+0x30>
		may_swap = 0;
    60e9:	c7 05 8d 94 00 00 00 	movl   $0x0,0x948d(%rip)        # f580 <may_swap.5208>
    60f0:	00 00 00 
	}

	_kernel.cpus[0].nested++;
    60f3:	ff c0                	inc    %eax
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    60f5:	4c 8d 2d 44 8d 00 00 	lea    0x8d44(%rip),%r13        # ee40 <irq_vector_table>
	_kernel.cpus[0].nested++;
    60fc:	89 03                	mov    %eax,(%rbx)

	while ((irq_nbr = hw_irq_ctrl_get_highest_prio_irq()) != -1) {
    60fe:	e8 7a 02 00 00       	callq  637d <hw_irq_ctrl_get_highest_prio_irq>
    6103:	89 c5                	mov    %eax,%ebp
    6105:	83 f8 ff             	cmp    $0xffffffff,%eax
    6108:	0f 84 84 00 00 00    	je     6192 <posix_irq_handler+0xcf>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    610e:	e8 f1 01 00 00       	callq  6304 <hw_irq_ctrl_get_cur_prio>
		int last_running_irq = currently_running_irq;

		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    6113:	89 ef                	mov    %ebp,%edi
		int last_running_irq = currently_running_irq;
    6115:	44 8b 35 58 63 00 00 	mov    0x6358(%rip),%r14d        # c474 <currently_running_irq>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    611c:	41 89 c4             	mov    %eax,%r12d
		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    611f:	e8 fd 01 00 00       	callq  6321 <hw_irq_ctrl_get_prio>
    6124:	0f b6 f8             	movzbl %al,%edi
    6127:	e8 cd 01 00 00       	callq  62f9 <hw_irq_ctrl_set_cur_prio>
		hw_irq_ctrl_clear_irq(irq_nbr);
    612c:	89 ef                	mov    %ebp,%edi
    612e:	e8 b9 02 00 00       	callq  63ec <hw_irq_ctrl_clear_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    6133:	48 63 c5             	movslq %ebp,%rax

		currently_running_irq = irq_nbr;
    6136:	89 2d 38 63 00 00    	mov    %ebp,0x6338(%rip)        # c474 <currently_running_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    613c:	48 6b c0 18          	imul   $0x18,%rax,%rax
    6140:	4c 01 e8             	add    %r13,%rax
    6143:	48 8b 50 08          	mov    0x8(%rax),%rdx
    6147:	48 85 d2             	test   %rdx,%rdx
    614a:	75 12                	jne    615e <posix_irq_handler+0x9b>
		posix_print_error_and_exit("Received irq %i without a "
    614c:	89 ee                	mov    %ebp,%esi
    614e:	48 8d 3d 5f 3d 00 00 	lea    0x3d5f(%rip),%rdi        # 9eb4 <default_cmd+0xc54>
    6155:	31 c0                	xor    %eax,%eax
    6157:	e8 38 04 00 00       	callq  6594 <posix_print_error_and_exit>
    615c:	eb 20                	jmp    617e <posix_irq_handler+0xbb>
		if (irq_vector_table[irq_nbr].flags & ISR_FLAG_DIRECT) {
    615e:	f6 40 04 01          	testb  $0x1,0x4(%rax)
    6162:	74 0a                	je     616e <posix_irq_handler+0xab>
			*may_swap |= ((direct_irq_f_ptr)
    6164:	ff d2                	callq  *%rdx
    6166:	09 05 14 94 00 00    	or     %eax,0x9414(%rip)        # f580 <may_swap.5208>
    616c:	eb 10                	jmp    617e <posix_irq_handler+0xbb>
			((normal_irq_f_ptr)irq_vector_table[irq_nbr].func)
    616e:	48 8b 78 10          	mov    0x10(%rax),%rdi
    6172:	ff d2                	callq  *%rdx
			*may_swap = 1;
    6174:	c7 05 02 94 00 00 01 	movl   $0x1,0x9402(%rip)        # f580 <may_swap.5208>
    617b:	00 00 00 
		vector_to_irq(irq_nbr, &may_swap);
		currently_running_irq = last_running_irq;

		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    617e:	44 89 e7             	mov    %r12d,%edi
		currently_running_irq = last_running_irq;
    6181:	44 89 35 ec 62 00 00 	mov    %r14d,0x62ec(%rip)        # c474 <currently_running_irq>
		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    6188:	e8 6c 01 00 00       	callq  62f9 <hw_irq_ctrl_set_cur_prio>
    618d:	e9 6c ff ff ff       	jmpq   60fe <posix_irq_handler+0x3b>
	}

	_kernel.cpus[0].nested--;
    6192:	ff 0b                	decl   (%rbx)
	/* Call swap if all the following is true:
	 * 1) may_swap was enabled
	 * 2) We are not nesting irq_handler calls (interrupts)
	 * 3) Next thread to run in the ready queue is not this thread
	 */
	if (may_swap
    6194:	83 3d e5 93 00 00 00 	cmpl   $0x0,0x93e5(%rip)        # f580 <may_swap.5208>
    619b:	74 25                	je     61c2 <posix_irq_handler+0xff>
		&& (hw_irq_ctrl_get_cur_prio() == 256)
    619d:	e8 62 01 00 00       	callq  6304 <hw_irq_ctrl_get_cur_prio>
    61a2:	3d 00 01 00 00       	cmp    $0x100,%eax
    61a7:	75 19                	jne    61c2 <posix_irq_handler+0xff>
		&& (_kernel.ready_q.cache != _current)) {
    61a9:	48 8b 43 10          	mov    0x10(%rbx),%rax
    61ad:	48 39 43 38          	cmp    %rax,0x38(%rbx)
    61b1:	74 0f                	je     61c2 <posix_irq_handler+0xff>

		(void)z_swap_irqlock(irq_lock);
	}
}
    61b3:	5b                   	pop    %rbx

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    61b4:	31 ff                	xor    %edi,%edi
    61b6:	5d                   	pop    %rbp
    61b7:	41 5c                	pop    %r12
    61b9:	41 5d                	pop    %r13
    61bb:	41 5e                	pop    %r14
    61bd:	e9 79 f4 ff ff       	jmpq   563b <arch_swap>
    61c2:	5b                   	pop    %rbx
    61c3:	5d                   	pop    %rbp
    61c4:	41 5c                	pop    %r12
    61c6:	41 5d                	pop    %r13
    61c8:	41 5e                	pop    %r14
    61ca:	c3                   	retq   

00000000000061cb <posix_irq_handler_im_from_sw>:
 * Thru this function the IRQ controller can raise an immediate  interrupt which
 * will interrupt the SW itself
 * (this function should only be called from the HW model code, from SW threads)
 */
void posix_irq_handler_im_from_sw(void)
{
    61cb:	f3 0f 1e fa          	endbr64 
    61cf:	51                   	push   %rcx
	/*
	 * if a higher priority interrupt than the possibly currently running is
	 * pending we go immediately into irq_handler() to vector into its
	 * handler
	 */
	if (hw_irq_ctrl_get_highest_prio_irq() != -1) {
    61d0:	e8 a8 01 00 00       	callq  637d <hw_irq_ctrl_get_highest_prio_irq>
    61d5:	ff c0                	inc    %eax
    61d7:	74 22                	je     61fb <posix_irq_handler_im_from_sw+0x30>
		if (!posix_is_cpu_running()) { /* LCOV_EXCL_BR_LINE */
    61d9:	e8 57 f5 ff ff       	callq  5735 <posix_is_cpu_running>
    61de:	85 c0                	test   %eax,%eax
    61e0:	75 13                	jne    61f5 <posix_irq_handler_im_from_sw+0x2a>
			/* LCOV_EXCL_START */
			posix_print_error_and_exit("programming error: %s "
    61e2:	48 8d 35 57 30 00 00 	lea    0x3057(%rip),%rsi        # 9240 <__func__.5217>
    61e9:	48 8d 3d f2 3c 00 00 	lea    0x3cf2(%rip),%rdi        # 9ee2 <default_cmd+0xc82>
    61f0:	e8 9f 03 00 00       	callq  6594 <posix_print_error_and_exit>
					__func__);
			/* LCOV_EXCL_STOP */
		}
		posix_irq_handler();
	}
}
    61f5:	5a                   	pop    %rdx
		posix_irq_handler();
    61f6:	e9 c8 fe ff ff       	jmpq   60c3 <posix_irq_handler>
}
    61fb:	58                   	pop    %rax
    61fc:	c3                   	retq   

00000000000061fd <posix_irq_lock>:
 * @return An architecture-dependent lock-out key representing the
 * "interrupt disable state" prior to the call.
 *
 */
unsigned int posix_irq_lock(void)
{
    61fd:	f3 0f 1e fa          	endbr64 
	return hw_irq_ctrl_change_lock(true);
    6201:	bf 01 00 00 00       	mov    $0x1,%edi
    6206:	e9 33 01 00 00       	jmpq   633e <hw_irq_ctrl_change_lock>

000000000000620b <posix_irq_unlock>:
 *
 * @return N/A
 *
 */
void posix_irq_unlock(unsigned int key)
{
    620b:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(key);
    620f:	e9 2a 01 00 00       	jmpq   633e <hw_irq_ctrl_change_lock>

0000000000006214 <posix_irq_full_unlock>:
}

void posix_irq_full_unlock(void)
{
    6214:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(false);
    6218:	31 ff                	xor    %edi,%edi
    621a:	e9 1f 01 00 00       	jmpq   633e <hw_irq_ctrl_change_lock>

000000000000621f <posix_irq_enable>:
}

void posix_irq_enable(unsigned int irq)
{
    621f:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_enable_irq(irq);
    6223:	e9 31 02 00 00       	jmpq   6459 <hw_irq_ctrl_enable_irq>

0000000000006228 <posix_isr_declare>:
 * @param isr_param_p ISR parameter
 * @param flags_p IRQ options
 */
void posix_isr_declare(unsigned int irq_p, int flags, void isr_p(const void *),
		       const void *isr_param_p)
{
    6228:	f3 0f 1e fa          	endbr64 
	irq_vector_table[irq_p].irq   = irq_p;
    622c:	89 f8                	mov    %edi,%eax
{
    622e:	49 89 d0             	mov    %rdx,%r8
	irq_vector_table[irq_p].irq   = irq_p;
    6231:	48 6b d0 18          	imul   $0x18,%rax,%rdx
    6235:	48 8d 05 04 8c 00 00 	lea    0x8c04(%rip),%rax        # ee40 <irq_vector_table>
    623c:	48 01 d0             	add    %rdx,%rax
    623f:	89 38                	mov    %edi,(%rax)
	irq_vector_table[irq_p].func  = isr_p;
    6241:	4c 89 40 08          	mov    %r8,0x8(%rax)
	irq_vector_table[irq_p].param = isr_param_p;
    6245:	48 89 48 10          	mov    %rcx,0x10(%rax)
	irq_vector_table[irq_p].flags = flags;
    6249:	89 70 04             	mov    %esi,0x4(%rax)
}
    624c:	c3                   	retq   

000000000000624d <posix_irq_priority_set>:
 * Lower values take priority over higher values.
 *
 * @return N/A
 */
void posix_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    624d:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_prio_set(irq, prio);
    6251:	e9 b9 00 00 00       	jmpq   630f <hw_irq_ctrl_prio_set>

0000000000006256 <irq_raising_from_hw_now>:
	/*
	 * We always awake the CPU even if the IRQ was masked,
	 * but not if irqs are locked unless this is due to a
	 * PHONY_HARD_IRQ
	 */
	if ((irqs_locked == false) || (lock_ignore)) {
    6256:	80 3d 54 93 00 00 00 	cmpb   $0x0,0x9354(%rip)        # f5b1 <irqs_locked>
    625d:	74 09                	je     6268 <irq_raising_from_hw_now+0x12>
    625f:	80 3d 4a 93 00 00 00 	cmpb   $0x0,0x934a(%rip)        # f5b0 <lock_ignore>
    6266:	74 0c                	je     6274 <irq_raising_from_hw_now+0x1e>
		lock_ignore = false;
    6268:	c6 05 41 93 00 00 00 	movb   $0x0,0x9341(%rip)        # f5b0 <lock_ignore>
		posix_interrupt_raised();
    626f:	e9 55 f5 ff ff       	jmpq   57c9 <posix_interrupt_raised>
	}
}
    6274:	c3                   	retq   

0000000000006275 <hw_irq_ctrl_irq_raise_prefix>:
{
    6275:	89 f9                	mov    %edi,%ecx
	if (irq < N_IRQS) {
    6277:	83 ff 1f             	cmp    $0x1f,%edi
    627a:	77 29                	ja     62a5 <hw_irq_ctrl_irq_raise_prefix+0x30>
		if (irq_mask & (1 << irq)) {
    627c:	b8 01 00 00 00       	mov    $0x1,%eax
		irq_premask |= ((uint64_t)1<<irq);
    6281:	ba 01 00 00 00       	mov    $0x1,%edx
		if (irq_mask & (1 << irq)) {
    6286:	d3 e0                	shl    %cl,%eax
		irq_premask |= ((uint64_t)1<<irq);
    6288:	48 d3 e2             	shl    %cl,%rdx
    628b:	48 09 15 6e 92 00 00 	or     %rdx,0x926e(%rip)        # f500 <irq_premask>
		if (irq_mask & (1 << irq)) {
    6292:	48 98                	cltq   
    6294:	48 85 05 5d 92 00 00 	test   %rax,0x925d(%rip)        # f4f8 <irq_mask>
    629b:	74 17                	je     62b4 <hw_irq_ctrl_irq_raise_prefix+0x3f>
			irq_status |= ((uint64_t)1<<irq);
    629d:	48 09 15 64 92 00 00 	or     %rdx,0x9264(%rip)        # f508 <irq_status>
    62a4:	c3                   	retq   
	} else if (irq == PHONY_HARD_IRQ) {
    62a5:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
    62ab:	75 07                	jne    62b4 <hw_irq_ctrl_irq_raise_prefix+0x3f>
		lock_ignore = true;
    62ad:	c6 05 fc 92 00 00 01 	movb   $0x1,0x92fc(%rip)        # f5b0 <lock_ignore>
}
    62b4:	c3                   	retq   

00000000000062b5 <hw_irq_ctrl_init>:
{
    62b5:	f3 0f 1e fa          	endbr64 
	irqs_locked = false;
    62b9:	c6 05 f1 92 00 00 00 	movb   $0x0,0x92f1(%rip)        # f5b1 <irqs_locked>
    62c0:	48 8d 05 79 8e 00 00 	lea    0x8e79(%rip),%rax        # f140 <irq_prio>
	irq_mask = 0U; /* Let's assume all interrupts are disable at boot */
    62c7:	48 c7 05 26 92 00 00 	movq   $0x0,0x9226(%rip)        # f4f8 <irq_mask>
    62ce:	00 00 00 00 
	irq_premask = 0U;
    62d2:	48 8d 50 20          	lea    0x20(%rax),%rdx
    62d6:	48 c7 05 1f 92 00 00 	movq   $0x0,0x921f(%rip)        # f500 <irq_premask>
    62dd:	00 00 00 00 
	lock_ignore = false;
    62e1:	c6 05 c8 92 00 00 00 	movb   $0x0,0x92c8(%rip)        # f5b0 <lock_ignore>
		irq_prio[i] = 255U;
    62e8:	c6 00 ff             	movb   $0xff,(%rax)
	for (int i = 0 ; i < N_IRQS; i++) {
    62eb:	48 ff c0             	inc    %rax
    62ee:	48 39 d0             	cmp    %rdx,%rax
    62f1:	75 f5                	jne    62e8 <hw_irq_ctrl_init+0x33>
}
    62f3:	c3                   	retq   

00000000000062f4 <hw_irq_ctrl_cleanup>:
{
    62f4:	f3 0f 1e fa          	endbr64 
}
    62f8:	c3                   	retq   

00000000000062f9 <hw_irq_ctrl_set_cur_prio>:
{
    62f9:	f3 0f 1e fa          	endbr64 
	currently_running_prio = new;
    62fd:	89 3d 75 61 00 00    	mov    %edi,0x6175(%rip)        # c478 <currently_running_prio>
}
    6303:	c3                   	retq   

0000000000006304 <hw_irq_ctrl_get_cur_prio>:
{
    6304:	f3 0f 1e fa          	endbr64 
}
    6308:	8b 05 6a 61 00 00    	mov    0x616a(%rip),%eax        # c478 <currently_running_prio>
    630e:	c3                   	retq   

000000000000630f <hw_irq_ctrl_prio_set>:
{
    630f:	f3 0f 1e fa          	endbr64 
	irq_prio[irq] = prio;
    6313:	89 ff                	mov    %edi,%edi
    6315:	48 8d 05 24 8e 00 00 	lea    0x8e24(%rip),%rax        # f140 <irq_prio>
    631c:	40 88 34 38          	mov    %sil,(%rax,%rdi,1)
}
    6320:	c3                   	retq   

0000000000006321 <hw_irq_ctrl_get_prio>:
{
    6321:	f3 0f 1e fa          	endbr64 
	return irq_prio[irq];
    6325:	89 ff                	mov    %edi,%edi
    6327:	48 8d 05 12 8e 00 00 	lea    0x8e12(%rip),%rax        # f140 <irq_prio>
    632e:	8a 04 38             	mov    (%rax,%rdi,1),%al
}
    6331:	c3                   	retq   

0000000000006332 <hw_irq_ctrl_get_current_lock>:
{
    6332:	f3 0f 1e fa          	endbr64 
	return irqs_locked;
    6336:	0f b6 05 74 92 00 00 	movzbl 0x9274(%rip),%eax        # f5b1 <irqs_locked>
}
    633d:	c3                   	retq   

000000000000633e <hw_irq_ctrl_change_lock>:
{
    633e:	f3 0f 1e fa          	endbr64 
	irqs_locked = new_lock;
    6342:	85 ff                	test   %edi,%edi
{
    6344:	41 54                	push   %r12
	uint32_t previous_lock = irqs_locked;
    6346:	44 0f b6 25 63 92 00 	movzbl 0x9263(%rip),%r12d        # f5b1 <irqs_locked>
    634d:	00 
	irqs_locked = new_lock;
    634e:	0f 95 05 5c 92 00 00 	setne  0x925c(%rip)        # f5b1 <irqs_locked>
	if ((previous_lock == true) && (new_lock == false)) {
    6355:	75 14                	jne    636b <hw_irq_ctrl_change_lock+0x2d>
    6357:	45 84 e4             	test   %r12b,%r12b
    635a:	74 0f                	je     636b <hw_irq_ctrl_change_lock+0x2d>
		if (irq_status != 0U) {
    635c:	48 83 3d a4 91 00 00 	cmpq   $0x0,0x91a4(%rip)        # f508 <irq_status>
    6363:	00 
    6364:	74 05                	je     636b <hw_irq_ctrl_change_lock+0x2d>
			posix_irq_handler_im_from_sw();
    6366:	e8 60 fe ff ff       	callq  61cb <posix_irq_handler_im_from_sw>
}
    636b:	44 89 e0             	mov    %r12d,%eax
    636e:	41 5c                	pop    %r12
    6370:	c3                   	retq   

0000000000006371 <hw_irq_ctrl_get_irq_status>:
{
    6371:	f3 0f 1e fa          	endbr64 
}
    6375:	48 8b 05 8c 91 00 00 	mov    0x918c(%rip),%rax        # f508 <irq_status>
    637c:	c3                   	retq   

000000000000637d <hw_irq_ctrl_get_highest_prio_irq>:
{
    637d:	f3 0f 1e fa          	endbr64 
	if (irqs_locked) {
    6381:	80 3d 29 92 00 00 00 	cmpb   $0x0,0x9229(%rip)        # f5b1 <irqs_locked>
    6388:	75 55                	jne    63df <hw_irq_ctrl_get_highest_prio_irq+0x62>
{
    638a:	51                   	push   %rcx
	uint64_t irq_status = hw_irq_ctrl_get_irq_status();
    638b:	e8 e1 ff ff ff       	callq  6371 <hw_irq_ctrl_get_irq_status>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    6390:	8b 3d e2 60 00 00    	mov    0x60e2(%rip),%edi        # c478 <currently_running_prio>
	int winner_prio = 256;
    6396:	be 00 01 00 00       	mov    $0x100,%esi
	int winner = -1;
    639b:	41 83 c8 ff          	or     $0xffffffff,%r8d
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    639f:	41 83 c9 ff          	or     $0xffffffff,%r9d
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    63a3:	41 ba 01 00 00 00    	mov    $0x1,%r10d
		if ((winner_prio > (int)irq_prio[irq_nbr])
    63a9:	4c 8d 1d 90 8d 00 00 	lea    0x8d90(%rip),%r11        # f140 <irq_prio>
	while (irq_status != 0U) {
    63b0:	48 85 c0             	test   %rax,%rax
    63b3:	74 32                	je     63e7 <hw_irq_ctrl_get_highest_prio_irq+0x6a>
    63b5:	0f bc c8             	bsf    %eax,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    63b8:	4c 89 d2             	mov    %r10,%rdx
		int irq_nbr = find_lsb_set(irq_status) - 1;
    63bb:	41 0f 44 c9          	cmove  %r9d,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    63bf:	48 d3 e2             	shl    %cl,%rdx
    63c2:	48 f7 d2             	not    %rdx
    63c5:	48 21 d0             	and    %rdx,%rax
		if ((winner_prio > (int)irq_prio[irq_nbr])
    63c8:	48 63 d1             	movslq %ecx,%rdx
    63cb:	41 0f b6 14 13       	movzbl (%r11,%rdx,1),%edx
    63d0:	39 f2                	cmp    %esi,%edx
    63d2:	7d dc                	jge    63b0 <hw_irq_ctrl_get_highest_prio_irq+0x33>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    63d4:	39 fa                	cmp    %edi,%edx
    63d6:	0f 4c f2             	cmovl  %edx,%esi
    63d9:	44 0f 4c c1          	cmovl  %ecx,%r8d
    63dd:	eb d1                	jmp    63b0 <hw_irq_ctrl_get_highest_prio_irq+0x33>
    63df:	41 83 c8 ff          	or     $0xffffffff,%r8d
}
    63e3:	44 89 c0             	mov    %r8d,%eax
    63e6:	c3                   	retq   
    63e7:	44 89 c0             	mov    %r8d,%eax
    63ea:	5a                   	pop    %rdx
    63eb:	c3                   	retq   

00000000000063ec <hw_irq_ctrl_clear_irq>:
{
    63ec:	f3 0f 1e fa          	endbr64 
	irq_status  &= ~((uint64_t)1<<irq);
    63f0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    63f7:	89 f9                	mov    %edi,%ecx
    63f9:	48 d3 c0             	rol    %cl,%rax
    63fc:	48 21 05 05 91 00 00 	and    %rax,0x9105(%rip)        # f508 <irq_status>
	irq_premask &= ~((uint64_t)1<<irq);
    6403:	48 21 05 f6 90 00 00 	and    %rax,0x90f6(%rip)        # f500 <irq_premask>
}
    640a:	c3                   	retq   

000000000000640b <hw_irq_ctrl_set_irq>:
{
    640b:	f3 0f 1e fa          	endbr64 
    640f:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    6410:	e8 60 fe ff ff       	callq  6275 <hw_irq_ctrl_irq_raise_prefix>
	if ((irqs_locked == false) || (lock_ignore)) {
    6415:	80 3d 95 91 00 00 00 	cmpb   $0x0,0x9195(%rip)        # f5b1 <irqs_locked>
    641c:	74 09                	je     6427 <hw_irq_ctrl_set_irq+0x1c>
    641e:	80 3d 8b 91 00 00 00 	cmpb   $0x0,0x918b(%rip)        # f5b0 <lock_ignore>
    6425:	74 15                	je     643c <hw_irq_ctrl_set_irq+0x31>
		irq_ctrl_timer = hwm_get_time();
    6427:	e8 71 f7 ff ff       	callq  5b9d <hwm_get_time>
    642c:	48 8d 15 2d 60 00 00 	lea    0x602d(%rip),%rdx        # c460 <irq_ctrl_timer>
    6433:	48 89 02             	mov    %rax,(%rdx)
}
    6436:	5a                   	pop    %rdx
		hwm_find_next_timer();
    6437:	e9 28 f6 ff ff       	jmpq   5a64 <hwm_find_next_timer>
}
    643c:	58                   	pop    %rax
    643d:	c3                   	retq   

000000000000643e <hw_irq_ctrl_raise_im_from_sw>:
 * Like hw_irq_ctrl_raise_im() but for SW threads
 *
 * Call only from SW threads
 */
void hw_irq_ctrl_raise_im_from_sw(unsigned int irq)
{
    643e:	f3 0f 1e fa          	endbr64 
    6442:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    6443:	e8 2d fe ff ff       	callq  6275 <hw_irq_ctrl_irq_raise_prefix>

	if (irqs_locked == false) {
    6448:	80 3d 62 91 00 00 00 	cmpb   $0x0,0x9162(%rip)        # f5b1 <irqs_locked>
    644f:	75 06                	jne    6457 <hw_irq_ctrl_raise_im_from_sw+0x19>
		posix_irq_handler_im_from_sw();
	}
}
    6451:	5a                   	pop    %rdx
		posix_irq_handler_im_from_sw();
    6452:	e9 74 fd ff ff       	jmpq   61cb <posix_irq_handler_im_from_sw>
}
    6457:	58                   	pop    %rax
    6458:	c3                   	retq   

0000000000006459 <hw_irq_ctrl_enable_irq>:
{
    6459:	f3 0f 1e fa          	endbr64 
	irq_mask |= ((uint64_t)1<<irq);
    645d:	b8 01 00 00 00       	mov    $0x1,%eax
    6462:	89 f9                	mov    %edi,%ecx
    6464:	48 d3 e0             	shl    %cl,%rax
    6467:	48 09 05 8a 90 00 00 	or     %rax,0x908a(%rip)        # f4f8 <irq_mask>
	if (irq_premask & ((uint64_t)1<<irq)) { /* if IRQ is pending */
    646e:	48 8b 05 8b 90 00 00 	mov    0x908b(%rip),%rax        # f500 <irq_premask>
    6475:	48 0f a3 f8          	bt     %rdi,%rax
    6479:	73 05                	jae    6480 <hw_irq_ctrl_enable_irq+0x27>
		hw_irq_ctrl_raise_im_from_sw(irq);
    647b:	e9 be ff ff ff       	jmpq   643e <hw_irq_ctrl_raise_im_from_sw>
}
    6480:	c3                   	retq   

0000000000006481 <hw_irq_ctrl_timer_triggered>:

void hw_irq_ctrl_timer_triggered(void)
{
    6481:	f3 0f 1e fa          	endbr64 
	irq_ctrl_timer = NEVER;
    6485:	48 8d 05 d4 5f 00 00 	lea    0x5fd4(%rip),%rax        # c460 <irq_ctrl_timer>
    648c:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	irq_raising_from_hw_now();
    6493:	e9 be fd ff ff       	jmpq   6256 <irq_raising_from_hw_now>

0000000000006498 <posix_exit>:
#include <stdlib.h>
#include <sys/util.h>
#include "cmdline.h"

void posix_exit(int exit_code)
{
    6498:	f3 0f 1e fa          	endbr64 
    649c:	50                   	push   %rax
	static int max_exit_code;

	max_exit_code = MAX(exit_code, max_exit_code);
    649d:	39 3d e1 90 00 00    	cmp    %edi,0x90e1(%rip)        # f584 <max_exit_code.2396>
    64a3:	0f 4d 3d da 90 00 00 	cmovge 0x90da(%rip),%edi        # f584 <max_exit_code.2396>
    64aa:	89 3d d4 90 00 00    	mov    %edi,0x90d4(%rip)        # f584 <max_exit_code.2396>
	/*
	 * posix_soc_clean_up may not return if this is called from a SW thread,
	 * but instead it would get posix_exit() recalled again
	 * ASAP from the HW thread
	 */
	posix_soc_clean_up();
    64b0:	e8 43 f4 ff ff       	callq  58f8 <posix_soc_clean_up>
	hwm_cleanup();
    64b5:	e8 0e f7 ff ff       	callq  5bc8 <hwm_cleanup>
	native_cleanup_cmd_line();
    64ba:	e8 10 0b 00 00       	callq  6fcf <native_cleanup_cmd_line>
	exit(max_exit_code);
    64bf:	8b 3d bf 90 00 00    	mov    0x90bf(%rip),%edi        # f584 <max_exit_code.2396>
    64c5:	e8 96 c1 ff ff       	callq  2660 <exit@plt>

00000000000064ca <main>:
/**
 * This is the actual main for the Linux process,
 * the Zephyr application main is renamed something else thru a define.
 */
int main(int argc, char *argv[])
{
    64ca:	f3 0f 1e fa          	endbr64 
    64ce:	55                   	push   %rbp
    64cf:	89 fd                	mov    %edi,%ebp
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    64d1:	31 ff                	xor    %edi,%edi
{
    64d3:	48 83 ec 10          	sub    $0x10,%rsp
    64d7:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    64dc:	e8 dd f3 ff ff       	callq  58be <run_native_tasks>

	native_handle_cmd_line(argc, argv);
    64e1:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    64e6:	89 ef                	mov    %ebp,%edi
    64e8:	e8 bd 0b 00 00       	callq  70aa <native_handle_cmd_line>

	run_native_tasks(_NATIVE_PRE_BOOT_2_LEVEL);
    64ed:	bf 01 00 00 00       	mov    $0x1,%edi
    64f2:	e8 c7 f3 ff ff       	callq  58be <run_native_tasks>

	hwm_init();
    64f7:	e8 ad f6 ff ff       	callq  5ba9 <hwm_init>

	run_native_tasks(_NATIVE_PRE_BOOT_3_LEVEL);
    64fc:	bf 02 00 00 00       	mov    $0x2,%edi
    6501:	e8 b8 f3 ff ff       	callq  58be <run_native_tasks>

	posix_boot_cpu();
    6506:	e8 f2 f2 ff ff       	callq  57fd <posix_boot_cpu>

	run_native_tasks(_NATIVE_FIRST_SLEEP_LEVEL);
    650b:	bf 03 00 00 00       	mov    $0x3,%edi
    6510:	e8 a9 f3 ff ff       	callq  58be <run_native_tasks>

	hwm_main_loop();
    6515:	e8 ae f5 ff ff       	callq  5ac8 <hwm_main_loop>

	/* This line should be unreachable */
	return 1; /* LCOV_EXCL_LINE */
}
    651a:	48 83 c4 10          	add    $0x10,%rsp
    651e:	b8 01 00 00 00       	mov    $0x1,%eax
    6523:	5d                   	pop    %rbp
    6524:	c3                   	retq   

0000000000006525 <trace_disable_color>:
 * Indexed 0:stdout, 1:stderr
 */
static int is_a_tty[2] = {-1, -1};

void trace_disable_color(char *argv, int offset)
{
    6525:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 0;
    6529:	48 c7 05 34 5f 00 00 	movq   $0x0,0x5f34(%rip)        # c468 <is_a_tty>
    6530:	00 00 00 00 
	is_a_tty[1] = 0;
}
    6534:	c3                   	retq   

0000000000006535 <trace_enable_color>:

void trace_enable_color(char *argv, int offset)
{
    6535:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = -1;
    6539:	48 c7 05 24 5f 00 00 	movq   $0xffffffffffffffff,0x5f24(%rip)        # c468 <is_a_tty>
    6540:	ff ff ff ff 
	is_a_tty[1] = -1;

}
    6544:	c3                   	retq   

0000000000006545 <trace_force_color>:

void trace_force_color(char *argv, int offset)
{
    6545:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 1;
    6549:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
    6550:	00 00 00 
    6553:	48 89 05 0e 5f 00 00 	mov    %rax,0x5f0e(%rip)        # c468 <is_a_tty>
	is_a_tty[1] = 1;
}
    655a:	c3                   	retq   

000000000000655b <decide_about_color>:
{
	return is_a_tty[file_number];
}

static void decide_about_color(void)
{
    655b:	f3 0f 1e fa          	endbr64 
    655f:	52                   	push   %rdx
	if (is_a_tty[0] == -1) {
    6560:	83 3d 01 5f 00 00 ff 	cmpl   $0xffffffff,0x5f01(%rip)        # c468 <is_a_tty>
    6567:	75 10                	jne    6579 <decide_about_color+0x1e>
		is_a_tty[0] = isatty(STDOUT_FILENO);
    6569:	bf 01 00 00 00       	mov    $0x1,%edi
    656e:	e8 bd be ff ff       	callq  2430 <isatty@plt>
    6573:	89 05 ef 5e 00 00    	mov    %eax,0x5eef(%rip)        # c468 <is_a_tty>
	}
	if (is_a_tty[1] == -1) {
    6579:	83 3d ec 5e 00 00 ff 	cmpl   $0xffffffff,0x5eec(%rip)        # c46c <is_a_tty+0x4>
    6580:	75 10                	jne    6592 <decide_about_color+0x37>
		is_a_tty[1] = isatty(STDERR_FILENO);
    6582:	bf 02 00 00 00       	mov    $0x2,%edi
    6587:	e8 a4 be ff ff       	callq  2430 <isatty@plt>
    658c:	89 05 da 5e 00 00    	mov    %eax,0x5eda(%rip)        # c46c <is_a_tty+0x4>
	}
}
    6592:	58                   	pop    %rax
    6593:	c3                   	retq   

0000000000006594 <posix_print_error_and_exit>:
{
    6594:	f3 0f 1e fa          	endbr64 
    6598:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    659f:	49 89 fa             	mov    %rdi,%r10
    65a2:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    65a7:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    65ac:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    65b1:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    65b6:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    65bb:	84 c0                	test   %al,%al
    65bd:	74 37                	je     65f6 <posix_print_error_and_exit+0x62>
    65bf:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    65c4:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    65c9:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    65ce:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    65d5:	00 
    65d6:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    65dd:	00 
    65de:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    65e5:	00 
    65e6:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    65ed:	00 
    65ee:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    65f5:	00 
    65f6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    65fd:	00 00 
    65ff:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6604:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    6606:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    660d:	00 

__fortify_function int
vfprintf (FILE *__restrict __stream,
	  const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
    660e:	48 89 e1             	mov    %rsp,%rcx
    6611:	4c 89 d2             	mov    %r10,%rdx
    6614:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6619:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    661e:	be 01 00 00 00       	mov    $0x1,%esi
    6623:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6628:	48 8b 05 c1 59 00 00 	mov    0x59c1(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    662f:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    6636:	48 8b 38             	mov    (%rax),%rdi
    6639:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6640:	00 
    6641:	e8 aa bd ff ff       	callq  23f0 <__vfprintf_chk@plt>
	posix_exit(1);
    6646:	bf 01 00 00 00       	mov    $0x1,%edi
    664b:	e8 48 fe ff ff       	callq  6498 <posix_exit>
}
    6650:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    6655:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    665c:	00 00 
    665e:	74 05                	je     6665 <posix_print_error_and_exit+0xd1>
    6660:	e8 4b be ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6665:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    666c:	c3                   	retq   

000000000000666d <posix_print_warning>:
{
    666d:	f3 0f 1e fa          	endbr64 
    6671:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    6678:	49 89 fa             	mov    %rdi,%r10
    667b:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    6680:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    6685:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    668a:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    668f:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    6694:	84 c0                	test   %al,%al
    6696:	74 37                	je     66cf <posix_print_warning+0x62>
    6698:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    669d:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    66a2:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    66a7:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    66ae:	00 
    66af:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    66b6:	00 
    66b7:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    66be:	00 
    66bf:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    66c6:	00 
    66c7:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    66ce:	00 
    66cf:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    66d6:	00 00 
    66d8:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    66dd:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    66df:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    66e6:	00 
    66e7:	48 89 e1             	mov    %rsp,%rcx
    66ea:	4c 89 d2             	mov    %r10,%rdx
    66ed:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    66f2:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    66f7:	be 01 00 00 00       	mov    $0x1,%esi
    66fc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6701:	48 8b 05 e8 58 00 00 	mov    0x58e8(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    6708:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    670f:	48 8b 38             	mov    (%rax),%rdi
    6712:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6719:	00 
    671a:	e8 d1 bc ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    671f:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    6724:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    672b:	00 00 
    672d:	74 05                	je     6734 <posix_print_warning+0xc7>
    672f:	e8 7c bd ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6734:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    673b:	c3                   	retq   

000000000000673c <posix_print_trace>:
{
    673c:	f3 0f 1e fa          	endbr64 
    6740:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    6747:	49 89 fa             	mov    %rdi,%r10
    674a:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    674f:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    6754:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    6759:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    675e:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    6763:	84 c0                	test   %al,%al
    6765:	74 37                	je     679e <posix_print_trace+0x62>
    6767:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    676c:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    6771:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    6776:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    677d:	00 
    677e:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    6785:	00 
    6786:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    678d:	00 
    678e:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    6795:	00 
    6796:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    679d:	00 
    679e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    67a5:	00 00 
    67a7:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    67ac:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    67ae:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    67b5:	00 
    67b6:	48 89 e1             	mov    %rsp,%rcx
    67b9:	4c 89 d2             	mov    %r10,%rdx
    67bc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    67c1:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    67c6:	be 01 00 00 00       	mov    $0x1,%esi
    67cb:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    67d0:	48 8b 05 d1 57 00 00 	mov    0x57d1(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    67d7:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    67de:	48 8b 38             	mov    (%rax),%rdi
    67e1:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    67e8:	00 
    67e9:	e8 02 bc ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    67ee:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    67f3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    67fa:	00 00 
    67fc:	74 05                	je     6803 <posix_print_trace+0xc7>
    67fe:	e8 ad bc ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6803:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    680a:	c3                   	retq   

000000000000680b <native_add_tracing_options>:

NATIVE_TASK(decide_about_color, PRE_BOOT_2, 0);

void native_add_tracing_options(void)
{
    680b:	f3 0f 1e fa          	endbr64 
		"force-color", "force-color", 'b',
		NULL, trace_force_color,
		"Enable color in traces even if printing to files/pipes"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(trace_options);
    680f:	48 8d 3d aa 59 00 00 	lea    0x59aa(%rip),%rdi        # c1c0 <trace_options.3560>
    6816:	e9 d8 07 00 00       	jmpq   6ff3 <native_add_command_line_opts>

000000000000681b <cmd_gen_switch_syntax.constprop.0>:
 * should be used
 *
 * The string is saved in <buf> which has been allocated <size> bytes by the
 * caller
 */
static void cmd_gen_switch_syntax(char *buf, int size,
    681b:	41 55                	push   %r13
    681d:	41 bd 46 00 00 00    	mov    $0x46,%r13d
    6823:	41 54                	push   %r12
    6825:	49 89 f4             	mov    %rsi,%r12
    6828:	55                   	push   %rbp
    6829:	48 89 fd             	mov    %rdi,%rbp
    682c:	53                   	push   %rbx
    682d:	41 53                	push   %r11

	if (size <= 0) {
		return;
	}

	if (args_s_el->is_mandatory == false) {
    682f:	80 7e 01 00          	cmpb   $0x0,0x1(%rsi)
    6833:	75 0c                	jne    6841 <cmd_gen_switch_syntax.constprop.0+0x26>
		*buf++ = '[';
    6835:	c6 07 5b             	movb   $0x5b,(%rdi)
    6838:	48 ff c5             	inc    %rbp
		size--;
    683b:	41 bd 45 00 00 00    	mov    $0x45,%r13d
	}

	if (args_s_el->is_switch == true) {
    6841:	41 80 7c 24 02 00    	cmpb   $0x0,0x2(%r12)
    6847:	4d 8b 4c 24 08       	mov    0x8(%r12),%r9
    684c:	49 63 f5             	movslq %r13d,%rsi
    684f:	74 1c                	je     686d <cmd_gen_switch_syntax.constprop.0+0x52>
  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
    6851:	4c 8d 05 77 37 00 00 	lea    0x3777(%rip),%r8        # 9fcf <default_cmd+0xd6f>
    6858:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    685c:	48 89 ef             	mov    %rbp,%rdi
    685f:	31 c0                	xor    %eax,%eax
    6861:	ba 01 00 00 00       	mov    $0x1,%edx
    6866:	e8 35 bb ff ff       	callq  23a0 <__snprintf_chk@plt>
    686b:	eb 38                	jmp    68a5 <cmd_gen_switch_syntax.constprop.0+0x8a>
		ret = snprintf(buf, size, "-%s", args_s_el->option);
	} else {
		if (args_s_el->type != 'l') {
    686d:	41 80 7c 24 18 6c    	cmpb   $0x6c,0x18(%r12)
    6873:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    6878:	74 0c                	je     6886 <cmd_gen_switch_syntax.constprop.0+0x6b>
    687a:	4c 8d 05 52 37 00 00 	lea    0x3752(%rip),%r8        # 9fd3 <default_cmd+0xd73>
    6881:	41 52                	push   %r10
    6883:	50                   	push   %rax
    6884:	eb 0a                	jmp    6890 <cmd_gen_switch_syntax.constprop.0+0x75>
    6886:	41 50                	push   %r8
    6888:	4c 8d 05 4d 37 00 00 	lea    0x374d(%rip),%r8        # 9fdc <default_cmd+0xd7c>
    688f:	50                   	push   %rax
    6890:	48 89 ef             	mov    %rbp,%rdi
    6893:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6897:	ba 01 00 00 00       	mov    $0x1,%edx
    689c:	31 c0                	xor    %eax,%eax
    689e:	e8 fd ba ff ff       	callq  23a0 <__snprintf_chk@plt>
    68a3:	5e                   	pop    %rsi
    68a4:	5f                   	pop    %rdi
    68a5:	48 63 d8             	movslq %eax,%rbx
			ret = snprintf(buf, size, "-%s <%s>...",
					args_s_el->option, args_s_el->name);
		}
	}

	if (ret < 0) {
    68a8:	85 db                	test   %ebx,%ebx
    68aa:	79 1a                	jns    68c6 <cmd_gen_switch_syntax.constprop.0+0xab>
		posix_print_error_and_exit("Unexpected error in %s %i\n",
    68ac:	ba 07 01 00 00       	mov    $0x107,%edx
    68b1:	48 8d 35 30 37 00 00 	lea    0x3730(%rip),%rsi        # 9fe8 <default_cmd+0xd88>
    68b8:	48 8d 3d 67 37 00 00 	lea    0x3767(%rip),%rdi        # a026 <default_cmd+0xdc6>
    68bf:	31 c0                	xor    %eax,%eax
    68c1:	e8 ce fc ff ff       	callq  6594 <posix_print_error_and_exit>
					   __FILE__, __LINE__);
	}
	if (size - ret < 0) {
    68c6:	41 29 dd             	sub    %ebx,%r13d
    68c9:	78 2c                	js     68f7 <cmd_gen_switch_syntax.constprop.0+0xdc>
		return;
	}
	buf += ret;
	size -= ret;

	if (args_s_el->is_mandatory == false) {
    68cb:	41 80 7c 24 01 00    	cmpb   $0x0,0x1(%r12)
	buf += ret;
    68d1:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
	if (args_s_el->is_mandatory == false) {
    68d6:	49 63 f5             	movslq %r13d,%rsi
    68d9:	48 8d 15 61 37 00 00 	lea    0x3761(%rip),%rdx        # a041 <default_cmd+0xde1>
    68e0:	74 07                	je     68e9 <cmd_gen_switch_syntax.constprop.0+0xce>
    68e2:	48 8d 15 59 37 00 00 	lea    0x3759(%rip),%rdx        # a042 <default_cmd+0xde2>
		snprintf(buf, size, "] ");
	} else {
		snprintf(buf, size, " ");
	}
}
    68e9:	59                   	pop    %rcx
    68ea:	31 c0                	xor    %eax,%eax
    68ec:	5b                   	pop    %rbx
    68ed:	5d                   	pop    %rbp
    68ee:	41 5c                	pop    %r12
    68f0:	41 5d                	pop    %r13
    68f2:	e9 d9 bb ff ff       	jmpq   24d0 <snprintf@plt>
    68f7:	58                   	pop    %rax
    68f8:	5b                   	pop    %rbx
    68f9:	5d                   	pop    %rbp
    68fa:	41 5c                	pop    %r12
    68fc:	41 5d                	pop    %r13
    68fe:	c3                   	retq   

00000000000068ff <cmd_is_option>:
{
    68ff:	f3 0f 1e fa          	endbr64 
    6903:	41 54                	push   %r12
    6905:	49 89 f8             	mov    %rdi,%r8
    6908:	41 89 d4             	mov    %edx,%r12d
    690b:	55                   	push   %rbp
    690c:	48 89 f5             	mov    %rsi,%rbp
    690f:	53                   	push   %rbx
	int of = 0;
    6910:	31 db                	xor    %ebx,%ebx
    6912:	80 3f 2d             	cmpb   $0x2d,(%rdi)
	if (arg[of] == '-') {
    6915:	0f 94 c0             	sete   %al
	int of = 0;
    6918:	0f 94 c3             	sete   %bl
	if (arg[of] == '-') {
    691b:	0f b6 c0             	movzbl %al,%eax
    691e:	80 3c 07 2d          	cmpb   $0x2d,(%rdi,%rax,1)
    6922:	75 02                	jne    6926 <cmd_is_option+0x27>
		of++;
    6924:	ff c3                	inc    %ebx
	if (!with_value) {
    6926:	45 85 e4             	test   %r12d,%r12d
    6929:	75 28                	jne    6953 <cmd_is_option+0x54>
		if (strcmp(&arg[of], option) != 0) {
    692b:	48 63 fb             	movslq %ebx,%rdi
    692e:	48 89 ee             	mov    %rbp,%rsi
    6931:	4c 01 c7             	add    %r8,%rdi
    6934:	e8 07 bc ff ff       	callq  2540 <strcmp@plt>
    6939:	85 c0                	test   %eax,%eax
    693b:	75 68                	jne    69a5 <cmd_is_option+0xa6>
	size_t to_match_len = strlen(option);
    693d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6941:	48 89 ef             	mov    %rbp,%rdi
    6944:	f2 ae                	repnz scas %es:(%rdi),%al
    6946:	48 89 c8             	mov    %rcx,%rax
    6949:	48 f7 d0             	not    %rax
			return of + to_match_len;
    694c:	44 8d 64 03 ff       	lea    -0x1(%rbx,%rax,1),%r12d
    6951:	eb 52                	jmp    69a5 <cmd_is_option+0xa6>
    6953:	31 d2                	xor    %edx,%edx
    6955:	44 8d 24 13          	lea    (%rbx,%rdx,1),%r12d
	while (!(arg[of] == 0 && *option == 0)) {
    6959:	8a 4c 15 00          	mov    0x0(%rbp,%rdx,1),%cl
    695d:	49 63 c4             	movslq %r12d,%rax
    6960:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    6964:	89 c6                	mov    %eax,%esi
    6966:	40 08 ce             	or     %cl,%sil
    6969:	74 24                	je     698f <cmd_is_option+0x90>
		if (*option == 0) {
    696b:	84 c9                	test   %cl,%cl
    696d:	75 17                	jne    6986 <cmd_is_option+0x87>
			if ((arg[of] == ':') || (arg[of] == '=')) {
    696f:	3c 3a                	cmp    $0x3a,%al
    6971:	74 04                	je     6977 <cmd_is_option+0x78>
    6973:	3c 3d                	cmp    $0x3d,%al
    6975:	75 2b                	jne    69a2 <cmd_is_option+0xa3>
				of++;
    6977:	41 ff c4             	inc    %r12d
	if (arg[of] == 0) { /* we need a value to follow */
    697a:	49 63 c4             	movslq %r12d,%rax
    697d:	41 80 3c 00 00       	cmpb   $0x0,(%r8,%rax,1)
    6982:	75 21                	jne    69a5 <cmd_is_option+0xa6>
    6984:	eb 09                	jmp    698f <cmd_is_option+0x90>
		if (arg[of] != *option) {
    6986:	48 ff c2             	inc    %rdx
    6989:	38 c8                	cmp    %cl,%al
    698b:	74 c8                	je     6955 <cmd_is_option+0x56>
    698d:	eb 13                	jmp    69a2 <cmd_is_option+0xa3>
		posix_print_error_and_exit("Incorrect option syntax '%s'. The "
    698f:	4c 89 c6             	mov    %r8,%rsi
    6992:	48 8d 3d ab 36 00 00 	lea    0x36ab(%rip),%rdi        # a044 <default_cmd+0xde4>
    6999:	31 c0                	xor    %eax,%eax
    699b:	e8 f4 fb ff ff       	callq  6594 <posix_print_error_and_exit>
    69a0:	eb 03                	jmp    69a5 <cmd_is_option+0xa6>
			return 0;
    69a2:	45 31 e4             	xor    %r12d,%r12d
}
    69a5:	44 89 e0             	mov    %r12d,%eax
    69a8:	5b                   	pop    %rbx
    69a9:	5d                   	pop    %rbp
    69aa:	41 5c                	pop    %r12
    69ac:	c3                   	retq   

00000000000069ad <cmd_is_help_option>:
{
    69ad:	f3 0f 1e fa          	endbr64 
    69b1:	55                   	push   %rbp
	if (arg[0] == '-') {
    69b2:	80 3f 2d             	cmpb   $0x2d,(%rdi)
{
    69b5:	48 89 fd             	mov    %rdi,%rbp
	if (arg[0] == '-') {
    69b8:	75 0f                	jne    69c9 <cmd_is_help_option+0x1c>
	if (arg[0] == '-') {
    69ba:	80 7f 01 2d          	cmpb   $0x2d,0x1(%rdi)
    69be:	74 05                	je     69c5 <cmd_is_help_option+0x18>
		arg++;
    69c0:	48 ff c5             	inc    %rbp
    69c3:	eb 04                	jmp    69c9 <cmd_is_help_option+0x1c>
		arg++;
    69c5:	48 83 c5 02          	add    $0x2,%rbp
	if ((strcasecmp(arg, "?") == 0) ||
    69c9:	48 8d 35 ce 36 00 00 	lea    0x36ce(%rip),%rsi        # a09e <default_cmd+0xe3e>
    69d0:	48 89 ef             	mov    %rbp,%rdi
    69d3:	e8 f8 b9 ff ff       	callq  23d0 <strcasecmp@plt>
    69d8:	41 89 c0             	mov    %eax,%r8d
		return 1;
    69db:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    69e0:	45 85 c0             	test   %r8d,%r8d
    69e3:	74 33                	je     6a18 <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "h") == 0) ||
    69e5:	48 8d 35 b4 36 00 00 	lea    0x36b4(%rip),%rsi        # a0a0 <default_cmd+0xe40>
    69ec:	48 89 ef             	mov    %rbp,%rdi
    69ef:	e8 dc b9 ff ff       	callq  23d0 <strcasecmp@plt>
    69f4:	41 89 c0             	mov    %eax,%r8d
		return 1;
    69f7:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    69fc:	45 85 c0             	test   %r8d,%r8d
    69ff:	74 17                	je     6a18 <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "help") == 0)) {
    6a01:	48 8d 35 38 37 00 00 	lea    0x3738(%rip),%rsi        # a140 <default_cmd+0xee0>
    6a08:	48 89 ef             	mov    %rbp,%rdi
    6a0b:	e8 c0 b9 ff ff       	callq  23d0 <strcasecmp@plt>
	    (strcasecmp(arg, "h") == 0) ||
    6a10:	85 c0                	test   %eax,%eax
    6a12:	0f 94 c0             	sete   %al
    6a15:	0f b6 c0             	movzbl %al,%eax
}
    6a18:	5d                   	pop    %rbp
    6a19:	c3                   	retq   

0000000000006a1a <cmd_read_option_value>:
{
    6a1a:	f3 0f 1e fa          	endbr64 
    6a1e:	41 54                	push   %r12
    6a20:	49 89 fc             	mov    %rdi,%r12
    6a23:	55                   	push   %rbp
    6a24:	48 89 cd             	mov    %rcx,%rbp
    6a27:	53                   	push   %rbx
    6a28:	48 89 f3             	mov    %rsi,%rbx
    6a2b:	48 83 ec 10          	sub    $0x10,%rsp
    6a2f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6a36:	00 00 
    6a38:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6a3d:	31 c0                	xor    %eax,%eax
	char *endptr = NULL;
    6a3f:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    6a46:	00 
	switch (type) {
    6a47:	80 fa 64             	cmp    $0x64,%dl
    6a4a:	0f 84 11 01 00 00    	je     6b61 <cmd_read_option_value+0x147>
    6a50:	7f 26                	jg     6a78 <cmd_read_option_value+0x5e>
    6a52:	80 fa 55             	cmp    $0x55,%dl
    6a55:	0f 84 f1 00 00 00    	je     6b4c <cmd_read_option_value+0x132>
    6a5b:	80 fa 62             	cmp    $0x62,%dl
    6a5e:	74 42                	je     6aa2 <cmd_read_option_value+0x88>
    6a60:	80 fa 49             	cmp    $0x49,%dl
    6a63:	0f 85 06 01 00 00    	jne    6b6f <cmd_read_option_value+0x155>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    6a69:	48 89 e6             	mov    %rsp,%rsi
    6a6c:	31 d2                	xor    %edx,%edx
    6a6e:	e8 dd ba ff ff       	callq  2550 <strtoll@plt>
    6a73:	e9 e4 00 00 00       	jmpq   6b5c <cmd_read_option_value+0x142>
	switch (type) {
    6a78:	80 fa 73             	cmp    $0x73,%dl
    6a7b:	0f 84 aa 00 00 00    	je     6b2b <cmd_read_option_value+0x111>
    6a81:	80 fa 75             	cmp    $0x75,%dl
    6a84:	0f 84 b6 00 00 00    	je     6b40 <cmd_read_option_value+0x126>
    6a8a:	80 fa 69             	cmp    $0x69,%dl
    6a8d:	0f 85 dc 00 00 00    	jne    6b6f <cmd_read_option_value+0x155>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    6a93:	48 89 e6             	mov    %rsp,%rsi
    6a96:	31 d2                	xor    %edx,%edx
    6a98:	e8 f3 ba ff ff       	callq  2590 <strtol@plt>
    6a9d:	e9 b6 00 00 00       	jmpq   6b58 <cmd_read_option_value+0x13e>
		if (strcasecmp(str, "false") == 0) {
    6aa2:	48 8d 35 f9 35 00 00 	lea    0x35f9(%rip),%rsi        # a0a2 <default_cmd+0xe42>
    6aa9:	e8 22 b9 ff ff       	callq  23d0 <strcasecmp@plt>
    6aae:	85 c0                	test   %eax,%eax
    6ab0:	75 0a                	jne    6abc <cmd_read_option_value+0xa2>
			*(bool *)dest = false;
    6ab2:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 5;
    6ab5:	49 8d 44 24 05       	lea    0x5(%r12),%rax
    6aba:	eb 1b                	jmp    6ad7 <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "0") == 0) {
    6abc:	48 8d 35 cd 3a 00 00 	lea    0x3acd(%rip),%rsi        # a590 <default_cmd+0x1330>
    6ac3:	4c 89 e7             	mov    %r12,%rdi
    6ac6:	e8 75 ba ff ff       	callq  2540 <strcmp@plt>
    6acb:	85 c0                	test   %eax,%eax
    6acd:	75 11                	jne    6ae0 <cmd_read_option_value+0xc6>
			*(bool *)dest = false;
    6acf:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 1;
    6ad2:	49 8d 44 24 01       	lea    0x1(%r12),%rax
    6ad7:	48 89 04 24          	mov    %rax,(%rsp)
	if (!error && endptr && *endptr != 0) {
    6adb:	e9 a0 00 00 00       	jmpq   6b80 <cmd_read_option_value+0x166>
		} else if (strcasecmp(str, "true") == 0) {
    6ae0:	48 8d 35 c1 35 00 00 	lea    0x35c1(%rip),%rsi        # a0a8 <default_cmd+0xe48>
    6ae7:	4c 89 e7             	mov    %r12,%rdi
    6aea:	e8 e1 b8 ff ff       	callq  23d0 <strcasecmp@plt>
    6aef:	85 c0                	test   %eax,%eax
    6af1:	75 0a                	jne    6afd <cmd_read_option_value+0xe3>
			*(bool *)dest = true;
    6af3:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 4;
    6af6:	49 8d 44 24 04       	lea    0x4(%r12),%rax
    6afb:	eb da                	jmp    6ad7 <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "1") == 0) {
    6afd:	48 8d 35 a9 35 00 00 	lea    0x35a9(%rip),%rsi        # a0ad <default_cmd+0xe4d>
    6b04:	4c 89 e7             	mov    %r12,%rdi
    6b07:	e8 34 ba ff ff       	callq  2540 <strcmp@plt>
    6b0c:	85 c0                	test   %eax,%eax
    6b0e:	74 16                	je     6b26 <cmd_read_option_value+0x10c>
		posix_print_error_and_exit("Error reading value of %s '%s'. Use"
    6b10:	4c 89 e2             	mov    %r12,%rdx
    6b13:	48 89 ee             	mov    %rbp,%rsi
    6b16:	48 8d 3d 92 35 00 00 	lea    0x3592(%rip),%rdi        # a0af <default_cmd+0xe4f>
    6b1d:	31 c0                	xor    %eax,%eax
    6b1f:	e8 70 fa ff ff       	callq  6594 <posix_print_error_and_exit>
    6b24:	eb 68                	jmp    6b8e <cmd_read_option_value+0x174>
			*(bool *)dest = true;
    6b26:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 1;
    6b29:	eb a7                	jmp    6ad2 <cmd_read_option_value+0xb8>
		*(char **)dest = (char *)str;
    6b2b:	48 89 3b             	mov    %rdi,(%rbx)
		endptr = (char *)str + strlen(str);
    6b2e:	31 c0                	xor    %eax,%eax
    6b30:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6b34:	f2 ae                	repnz scas %es:(%rdi),%al
    6b36:	48 f7 d1             	not    %rcx
    6b39:	49 8d 44 0c ff       	lea    -0x1(%r12,%rcx,1),%rax
    6b3e:	eb 97                	jmp    6ad7 <cmd_read_option_value+0xbd>
		*(uint32_t *)dest = strtoul(str, &endptr, 0);
    6b40:	48 89 e6             	mov    %rsp,%rsi
    6b43:	31 d2                	xor    %edx,%edx
    6b45:	e8 d6 ba ff ff       	callq  2620 <strtoul@plt>
    6b4a:	eb 0c                	jmp    6b58 <cmd_read_option_value+0x13e>
		*(uint64_t *)dest = strtoull(str, &endptr, 0);
    6b4c:	48 89 e6             	mov    %rsp,%rsi
    6b4f:	31 d2                	xor    %edx,%edx
    6b51:	e8 ca b9 ff ff       	callq  2520 <strtoull@plt>
    6b56:	eb 04                	jmp    6b5c <cmd_read_option_value+0x142>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    6b58:	89 03                	mov    %eax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6b5a:	eb 24                	jmp    6b80 <cmd_read_option_value+0x166>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    6b5c:	48 89 03             	mov    %rax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6b5f:	eb 1f                	jmp    6b80 <cmd_read_option_value+0x166>
		*(double *)dest = strtod(str, &endptr);
    6b61:	48 89 e6             	mov    %rsp,%rsi
    6b64:	e8 f7 b8 ff ff       	callq  2460 <strtod@plt>
    6b69:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6b6d:	eb 11                	jmp    6b80 <cmd_read_option_value+0x166>
	switch (type) {
    6b6f:	0f be f2             	movsbl %dl,%esi
		posix_print_error_and_exit(CMD_TYPE_ERROR, type);
    6b72:	48 8d 3d 78 35 00 00 	lea    0x3578(%rip),%rdi        # a0f1 <default_cmd+0xe91>
    6b79:	31 c0                	xor    %eax,%eax
    6b7b:	e8 14 fa ff ff       	callq  6594 <posix_print_error_and_exit>
	if (!error && endptr && *endptr != 0) {
    6b80:	48 8b 04 24          	mov    (%rsp),%rax
    6b84:	48 85 c0             	test   %rax,%rax
    6b87:	74 05                	je     6b8e <cmd_read_option_value+0x174>
    6b89:	80 38 00             	cmpb   $0x0,(%rax)
    6b8c:	75 82                	jne    6b10 <cmd_read_option_value+0xf6>
}
    6b8e:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    6b93:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6b9a:	00 00 
    6b9c:	74 05                	je     6ba3 <cmd_read_option_value+0x189>
    6b9e:	e8 0d b9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6ba3:	48 83 c4 10          	add    $0x10,%rsp
    6ba7:	5b                   	pop    %rbx
    6ba8:	5d                   	pop    %rbp
    6ba9:	41 5c                	pop    %r12
    6bab:	c3                   	retq   

0000000000006bac <cmd_args_set_defaults>:
{
    6bac:	f3 0f 1e fa          	endbr64 
    6bb0:	55                   	push   %rbp
	int count = 0;
    6bb1:	31 ed                	xor    %ebp,%ebp
{
    6bb3:	53                   	push   %rbx
    6bb4:	48 89 fb             	mov    %rdi,%rbx
    6bb7:	52                   	push   %rdx
	while (args_struct[count].option != NULL) {
    6bb8:	48 63 d5             	movslq %ebp,%rdx
    6bbb:	48 6b d2 38          	imul   $0x38,%rdx,%rdx
    6bbf:	48 01 da             	add    %rbx,%rdx
    6bc2:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
    6bc7:	0f 84 a0 00 00 00    	je     6c6d <cmd_args_set_defaults+0xc1>
		if (args_struct[count].dest == NULL) {
    6bcd:	48 8b 42 20          	mov    0x20(%rdx),%rax
    6bd1:	ff c5                	inc    %ebp
    6bd3:	48 85 c0             	test   %rax,%rax
    6bd6:	74 e0                	je     6bb8 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6bd8:	0f be 72 18          	movsbl 0x18(%rdx),%esi
    6bdc:	40 80 fe 64          	cmp    $0x64,%sil
    6be0:	74 69                	je     6c4b <cmd_args_set_defaults+0x9f>
    6be2:	7f 2d                	jg     6c11 <cmd_args_set_defaults+0x65>
    6be4:	40 80 fe 55          	cmp    $0x55,%sil
    6be8:	74 55                	je     6c3f <cmd_args_set_defaults+0x93>
    6bea:	7f 1a                	jg     6c06 <cmd_args_set_defaults+0x5a>
    6bec:	40 84 f6             	test   %sil,%sil
    6bef:	74 c7                	je     6bb8 <cmd_args_set_defaults+0xc>
    6bf1:	40 80 fe 49          	cmp    $0x49,%sil
    6bf5:	75 63                	jne    6c5a <cmd_args_set_defaults+0xae>
			*(int64_t *)args_struct[count].dest = INT64_MAX;
    6bf7:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
    6bfe:	ff ff 7f 
    6c01:	48 89 08             	mov    %rcx,(%rax)
			break;
    6c04:	eb b2                	jmp    6bb8 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6c06:	40 80 fe 62          	cmp    $0x62,%sil
    6c0a:	75 4e                	jne    6c5a <cmd_args_set_defaults+0xae>
			*(bool *)args_struct[count].dest = false;
    6c0c:	c6 00 00             	movb   $0x0,(%rax)
			break;
    6c0f:	eb a7                	jmp    6bb8 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6c11:	40 80 fe 73          	cmp    $0x73,%sil
    6c15:	74 14                	je     6c2b <cmd_args_set_defaults+0x7f>
    6c17:	40 80 fe 75          	cmp    $0x75,%sil
    6c1b:	74 17                	je     6c34 <cmd_args_set_defaults+0x88>
    6c1d:	40 80 fe 69          	cmp    $0x69,%sil
    6c21:	75 37                	jne    6c5a <cmd_args_set_defaults+0xae>
			*(int32_t *)args_struct[count].dest = INT32_MAX;
    6c23:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
			break;
    6c29:	eb 8d                	jmp    6bb8 <cmd_args_set_defaults+0xc>
			*(char **)args_struct[count].dest = NULL;
    6c2b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			break;
    6c32:	eb 84                	jmp    6bb8 <cmd_args_set_defaults+0xc>
			*(uint32_t *)args_struct[count].dest = UINT32_MAX;
    6c34:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
			break;
    6c3a:	e9 79 ff ff ff       	jmpq   6bb8 <cmd_args_set_defaults+0xc>
			*(uint64_t *)args_struct[count].dest = UINT64_MAX;
    6c3f:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
			break;
    6c46:	e9 6d ff ff ff       	jmpq   6bb8 <cmd_args_set_defaults+0xc>
			*(double *)args_struct[count].dest = NAN;
    6c4b:	48 8b 0d 4e 26 00 00 	mov    0x264e(%rip),%rcx        # 92a0 <default_cmd+0x40>
    6c52:	48 89 08             	mov    %rcx,(%rax)
			break;
    6c55:	e9 5e ff ff ff       	jmpq   6bb8 <cmd_args_set_defaults+0xc>
			posix_print_error_and_exit(CMD_TYPE_ERROR,
    6c5a:	48 8d 3d 90 34 00 00 	lea    0x3490(%rip),%rdi        # a0f1 <default_cmd+0xe91>
    6c61:	31 c0                	xor    %eax,%eax
    6c63:	e8 2c f9 ff ff       	callq  6594 <posix_print_error_and_exit>
			break;
    6c68:	e9 4b ff ff ff       	jmpq   6bb8 <cmd_args_set_defaults+0xc>
}
    6c6d:	58                   	pop    %rax
    6c6e:	5b                   	pop    %rbx
    6c6f:	5d                   	pop    %rbp
    6c70:	c3                   	retq   

0000000000006c71 <cmd_print_switches_help>:

/**
 * Print short list of available switches
 */
void cmd_print_switches_help(struct args_struct_t args_struct[])
{
    6c71:	f3 0f 1e fa          	endbr64 
    6c75:	41 56                	push   %r14
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    6c77:	be 01 00 00 00       	mov    $0x1,%esi
    6c7c:	48 8d 0d 93 34 00 00 	lea    0x3493(%rip),%rcx        # a116 <default_cmd+0xeb6>
    6c83:	48 8d 15 a5 34 00 00 	lea    0x34a5(%rip),%rdx        # a12f <default_cmd+0xecf>
    6c8a:	41 55                	push   %r13
	int count = 0;
	int printed_in_line = strlen(_HELP_SWITCH) + 1;
    6c8c:	41 be 19 00 00 00    	mov    $0x19,%r14d
	int count = 0;
    6c92:	45 31 ed             	xor    %r13d,%r13d
{
    6c95:	41 54                	push   %r12
    6c97:	49 89 fc             	mov    %rdi,%r12
    6c9a:	55                   	push   %rbp
    6c9b:	53                   	push   %rbx
    6c9c:	48 83 ec 50          	sub    $0x50,%rsp

	fprintf(stdout, "%s ", _HELP_SWITCH);
    6ca0:	48 8b 1d 01 53 00 00 	mov    0x5301(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
{
    6ca7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6cae:	00 00 
    6cb0:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    6cb5:	31 c0                	xor    %eax,%eax

	while (args_struct[count].option != NULL) {
		char stringy[_MAX_STRINGY_LEN];

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6cb7:	48 8d 6c 24 02       	lea    0x2(%rsp),%rbp
    6cbc:	48 8b 3b             	mov    (%rbx),%rdi
    6cbf:	e8 ac b9 ff ff       	callq  2670 <__fprintf_chk@plt>
	while (args_struct[count].option != NULL) {
    6cc4:	49 63 f5             	movslq %r13d,%rsi
    6cc7:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    6ccb:	4c 01 e6             	add    %r12,%rsi
    6cce:	48 83 7e 08 00       	cmpq   $0x0,0x8(%rsi)
    6cd3:	74 6e                	je     6d43 <cmd_print_switches_help+0xd2>
		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6cd5:	48 89 ef             	mov    %rbp,%rdi
    6cd8:	e8 3e fb ff ff       	callq  681b <cmd_gen_switch_syntax.constprop.0>
				      &args_struct[count]);

		if (printed_in_line + strlen(stringy) > _MAX_LINE_WIDTH) {
    6cdd:	31 c0                	xor    %eax,%eax
    6cdf:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6ce3:	48 89 ef             	mov    %rbp,%rdi
    6ce6:	f2 ae                	repnz scas %es:(%rdi),%al
    6ce8:	49 63 c6             	movslq %r14d,%rax
    6ceb:	48 f7 d1             	not    %rcx
    6cee:	48 8d 44 01 ff       	lea    -0x1(%rcx,%rax,1),%rax
    6cf3:	48 83 f8 64          	cmp    $0x64,%rax
    6cf7:	76 19                	jbe    6d12 <cmd_print_switches_help+0xa1>
    6cf9:	48 8b 3b             	mov    (%rbx),%rdi
    6cfc:	48 8d 15 a1 27 00 00 	lea    0x27a1(%rip),%rdx        # 94a4 <default_cmd+0x244>
    6d03:	31 c0                	xor    %eax,%eax
			fprintf(stdout, "\n");
			printed_in_line = 0;
    6d05:	45 31 f6             	xor    %r14d,%r14d
    6d08:	be 01 00 00 00       	mov    $0x1,%esi
    6d0d:	e8 5e b9 ff ff       	callq  2670 <__fprintf_chk@plt>
    6d12:	48 8b 3b             	mov    (%rbx),%rdi
    6d15:	48 89 e9             	mov    %rbp,%rcx
    6d18:	48 8d 15 b1 32 00 00 	lea    0x32b1(%rip),%rdx        # 9fd0 <default_cmd+0xd70>
    6d1f:	31 c0                	xor    %eax,%eax
    6d21:	be 01 00 00 00       	mov    $0x1,%esi
		}

		fprintf(stdout, "%s", stringy);
		printed_in_line += strlen(stringy);
		count++;
    6d26:	41 ff c5             	inc    %r13d
    6d29:	e8 42 b9 ff ff       	callq  2670 <__fprintf_chk@plt>
		printed_in_line += strlen(stringy);
    6d2e:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6d32:	31 c0                	xor    %eax,%eax
    6d34:	48 89 ef             	mov    %rbp,%rdi
    6d37:	f2 ae                	repnz scas %es:(%rdi),%al
    6d39:	48 f7 d1             	not    %rcx
    6d3c:	45 8d 74 0e ff       	lea    -0x1(%r14,%rcx,1),%r14d
		count++;
    6d41:	eb 81                	jmp    6cc4 <cmd_print_switches_help+0x53>
    6d43:	48 8b 3b             	mov    (%rbx),%rdi
    6d46:	31 c0                	xor    %eax,%eax
    6d48:	be 01 00 00 00       	mov    $0x1,%esi
    6d4d:	48 8d 15 50 27 00 00 	lea    0x2750(%rip),%rdx        # 94a4 <default_cmd+0x244>
    6d54:	e8 17 b9 ff ff       	callq  2670 <__fprintf_chk@plt>
	}

	fprintf(stdout, "\n");
}
    6d59:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    6d5e:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6d65:	00 00 
    6d67:	74 05                	je     6d6e <cmd_print_switches_help+0xfd>
    6d69:	e8 42 b7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6d6e:	48 83 c4 50          	add    $0x50,%rsp
    6d72:	5b                   	pop    %rbx
    6d73:	5d                   	pop    %rbp
    6d74:	41 5c                	pop    %r12
    6d76:	41 5d                	pop    %r13
    6d78:	41 5e                	pop    %r14
    6d7a:	c3                   	retq   

0000000000006d7b <cmd_print_long_help>:

/**
 * Print the long help message of the program
 */
void cmd_print_long_help(struct args_struct_t args_struct[])
{
    6d7b:	f3 0f 1e fa          	endbr64 
    6d7f:	41 57                	push   %r15
    6d81:	4c 8d 3d 1d 27 00 00 	lea    0x271d(%rip),%r15        # 94a5 <default_cmd+0x245>
    6d88:	41 56                	push   %r14
    6d8a:	41 55                	push   %r13
	int ret;
	int count = 0;
    6d8c:	45 31 ed             	xor    %r13d,%r13d
{
    6d8f:	41 54                	push   %r12
    6d91:	49 89 fc             	mov    %rdi,%r12
    6d94:	55                   	push   %rbp
    6d95:	53                   	push   %rbx
    6d96:	48 83 ec 68          	sub    $0x68,%rsp
    6d9a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6da1:	00 00 
    6da3:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    6da8:	31 c0                	xor    %eax,%eax
	int printed_in_line = 0;
	char stringy[_MAX_STRINGY_LEN];

	cmd_print_switches_help(args_struct);
    6daa:	e8 c2 fe ff ff       	callq  6c71 <cmd_print_switches_help>

	fprintf(stdout, "\n %-*s:%s\n", _LONG_HELP_ALIGN-1,
    6daf:	48 8b 1d f2 51 00 00 	mov    0x51f2(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
    6db6:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    6dbb:	31 c0                	xor    %eax,%eax
    6dbd:	4c 8d 0d 6f 33 00 00 	lea    0x336f(%rip),%r9        # a133 <default_cmd+0xed3>
    6dc4:	4c 8d 05 4b 33 00 00 	lea    0x334b(%rip),%r8        # a116 <default_cmd+0xeb6>
    6dcb:	be 01 00 00 00       	mov    $0x1,%esi
    6dd0:	48 8b 3b             	mov    (%rbx),%rdi
    6dd3:	48 8d 15 6b 33 00 00 	lea    0x336b(%rip),%rdx        # a145 <default_cmd+0xee5>
    6dda:	e8 91 b8 ff ff       	callq  2670 <__fprintf_chk@plt>
		_HELP_SWITCH, _HELP_DESCR);

	while (args_struct[count].option != NULL) {
    6ddf:	49 63 ed             	movslq %r13d,%rbp
    6de2:	48 6b ed 38          	imul   $0x38,%rbp,%rbp
    6de6:	4c 01 e5             	add    %r12,%rbp
    6de9:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
    6dee:	0f 84 c8 00 00 00    	je     6ebc <cmd_print_long_help+0x141>
		int printed_right;
		char *toprint;
		int total_to_print;

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6df4:	4c 8d 44 24 12       	lea    0x12(%rsp),%r8
    6df9:	48 89 ee             	mov    %rbp,%rsi
    6dfc:	4c 89 c7             	mov    %r8,%rdi
    6dff:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    6e04:	e8 12 fa ff ff       	callq  681b <cmd_gen_switch_syntax.constprop.0>
    6e09:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    6e0e:	48 8b 3b             	mov    (%rbx),%rdi
    6e11:	31 c0                	xor    %eax,%eax
    6e13:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    6e18:	48 8d 15 31 33 00 00 	lea    0x3331(%rip),%rdx        # a150 <default_cmd+0xef0>
    6e1f:	be 01 00 00 00       	mov    $0x1,%esi
    6e24:	e8 47 b8 ff ff       	callq  2670 <__fprintf_chk@plt>
				      &args_struct[count]);

		ret = fprintf(stdout, " %-*s:", _LONG_HELP_ALIGN-1, stringy);
		printed_in_line = ret;
		printed_right = 0;
		toprint = args_struct[count].descript;
    6e29:	4c 8b 75 30          	mov    0x30(%rbp),%r14
		total_to_print = strlen(toprint);
    6e2d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6e31:	48 8d 15 1f 33 00 00 	lea    0x331f(%rip),%rdx        # a157 <default_cmd+0xef7>
    6e38:	41 89 c0             	mov    %eax,%r8d
    6e3b:	31 c0                	xor    %eax,%eax
    6e3d:	be 01 00 00 00       	mov    $0x1,%esi
    6e42:	4c 89 f7             	mov    %r14,%rdi
    6e45:	f2 ae                	repnz scas %es:(%rdi),%al
    6e47:	48 8b 3b             	mov    (%rbx),%rdi
    6e4a:	48 f7 d1             	not    %rcx
    6e4d:	8d 41 ff             	lea    -0x1(%rcx),%eax
		ret = fprintf(stdout, "%.*s\n",
    6e50:	b9 64 00 00 00       	mov    $0x64,%ecx
		total_to_print = strlen(toprint);
    6e55:	89 44 24 08          	mov    %eax,0x8(%rsp)
		ret = fprintf(stdout, "%.*s\n",
    6e59:	44 29 c1             	sub    %r8d,%ecx
    6e5c:	31 c0                	xor    %eax,%eax
    6e5e:	4d 89 f0             	mov    %r14,%r8
    6e61:	e8 0a b8 ff ff       	callq  2670 <__fprintf_chk@plt>
				_MAX_LINE_WIDTH - printed_in_line,
				&toprint[printed_right]);
		printed_right += ret - 1;
    6e66:	8d 68 ff             	lea    -0x1(%rax),%ebp

		while (printed_right < total_to_print) {
    6e69:	3b 6c 24 08          	cmp    0x8(%rsp),%ebp
    6e6d:	7d 45                	jge    6eb4 <cmd_print_long_help+0x139>
    6e6f:	48 8b 3b             	mov    (%rbx),%rdi
    6e72:	4d 89 f8             	mov    %r15,%r8
    6e75:	b9 1e 00 00 00       	mov    $0x1e,%ecx
    6e7a:	be 01 00 00 00       	mov    $0x1,%esi
    6e7f:	48 8d 15 d7 32 00 00 	lea    0x32d7(%rip),%rdx        # a15d <default_cmd+0xefd>
    6e86:	31 c0                	xor    %eax,%eax
    6e88:	e8 e3 b7 ff ff       	callq  2670 <__fprintf_chk@plt>
			fprintf(stdout, "%*s", _LONG_HELP_ALIGN, "");
			ret = fprintf(stdout, "%.*s\n",
    6e8d:	4c 63 c5             	movslq %ebp,%r8
    6e90:	48 8b 3b             	mov    (%rbx),%rdi
    6e93:	b9 46 00 00 00       	mov    $0x46,%ecx
    6e98:	4d 01 f0             	add    %r14,%r8
    6e9b:	48 8d 15 b5 32 00 00 	lea    0x32b5(%rip),%rdx        # a157 <default_cmd+0xef7>
    6ea2:	be 01 00 00 00       	mov    $0x1,%esi
    6ea7:	31 c0                	xor    %eax,%eax
    6ea9:	e8 c2 b7 ff ff       	callq  2670 <__fprintf_chk@plt>
				      _MAX_LINE_WIDTH - _LONG_HELP_ALIGN,
				      &toprint[printed_right]);
			printed_right += ret - 1;
    6eae:	8d 6c 05 ff          	lea    -0x1(%rbp,%rax,1),%ebp
    6eb2:	eb b5                	jmp    6e69 <cmd_print_long_help+0xee>
		}
		count++;
    6eb4:	41 ff c5             	inc    %r13d
    6eb7:	e9 23 ff ff ff       	jmpq   6ddf <cmd_print_long_help+0x64>
    6ebc:	48 8b 3b             	mov    (%rbx),%rdi
    6ebf:	48 8d 15 de 25 00 00 	lea    0x25de(%rip),%rdx        # 94a4 <default_cmd+0x244>
    6ec6:	be 01 00 00 00       	mov    $0x1,%esi
    6ecb:	31 c0                	xor    %eax,%eax
    6ecd:	e8 9e b7 ff ff       	callq  2670 <__fprintf_chk@plt>
    6ed2:	48 8b 3b             	mov    (%rbx),%rdi
    6ed5:	31 c0                	xor    %eax,%eax
    6ed7:	be 01 00 00 00       	mov    $0x1,%esi
    6edc:	48 8d 15 7e 32 00 00 	lea    0x327e(%rip),%rdx        # a161 <default_cmd+0xf01>
    6ee3:	e8 88 b7 ff ff       	callq  2670 <__fprintf_chk@plt>
	}
	fprintf(stdout, "\n");
	fprintf(stdout, "Note that which options are available depends on the "
		"enabled features/drivers\n\n");
}
    6ee8:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    6eed:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6ef4:	00 00 
    6ef6:	74 05                	je     6efd <cmd_print_long_help+0x182>
    6ef8:	e8 b3 b5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6efd:	48 83 c4 68          	add    $0x68,%rsp
    6f01:	5b                   	pop    %rbx
    6f02:	5d                   	pop    %rbp
    6f03:	41 5c                	pop    %r12
    6f05:	41 5d                	pop    %r13
    6f07:	41 5e                	pop    %r14
    6f09:	41 5f                	pop    %r15
    6f0b:	c3                   	retq   

0000000000006f0c <cmd_parse_one_arg>:
 * Try to find if this argument is in the list (and it is not manual)
 * if it does, try to parse it, set its dest accordingly, and return true
 * if it is not found, return false
 */
bool cmd_parse_one_arg(char *argv, struct args_struct_t args_struct[])
{
    6f0c:	f3 0f 1e fa          	endbr64 
    6f10:	41 56                	push   %r14
    6f12:	41 55                	push   %r13
    6f14:	49 89 f5             	mov    %rsi,%r13
    6f17:	41 54                	push   %r12
    6f19:	55                   	push   %rbp
    6f1a:	48 89 fd             	mov    %rdi,%rbp
    6f1d:	53                   	push   %rbx
	int count = 0;
	int ret;

	if (cmd_is_help_option(argv)) {
    6f1e:	e8 8a fa ff ff       	callq  69ad <cmd_is_help_option>
    6f23:	85 c0                	test   %eax,%eax
    6f25:	74 0f                	je     6f36 <cmd_parse_one_arg+0x2a>
		cmd_print_long_help(args_struct);
    6f27:	4c 89 ef             	mov    %r13,%rdi
    6f2a:	e8 4c fe ff ff       	callq  6d7b <cmd_print_long_help>
		posix_exit(0);
    6f2f:	31 ff                	xor    %edi,%edi
    6f31:	e8 62 f5 ff ff       	callq  6498 <posix_exit>
{
    6f36:	45 31 f6             	xor    %r14d,%r14d
	}

	while (args_struct[count].option != NULL) {
    6f39:	49 63 de             	movslq %r14d,%rbx
    6f3c:	48 6b db 38          	imul   $0x38,%rbx,%rbx
    6f40:	4c 01 eb             	add    %r13,%rbx
    6f43:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    6f47:	48 85 f6             	test   %rsi,%rsi
    6f4a:	74 78                	je     6fc4 <cmd_parse_one_arg+0xb8>
		if (args_struct[count].manual) {
    6f4c:	80 3b 00             	cmpb   $0x0,(%rbx)
    6f4f:	75 6b                	jne    6fbc <cmd_parse_one_arg+0xb0>
			count++;
			continue;
		}
		ret = cmd_is_option(argv, args_struct[count].option,
				    !args_struct[count].is_switch);
    6f51:	8a 53 02             	mov    0x2(%rbx),%dl
		ret = cmd_is_option(argv, args_struct[count].option,
    6f54:	48 89 ef             	mov    %rbp,%rdi
				    !args_struct[count].is_switch);
    6f57:	83 f2 01             	xor    $0x1,%edx
		ret = cmd_is_option(argv, args_struct[count].option,
    6f5a:	0f b6 d2             	movzbl %dl,%edx
    6f5d:	e8 9d f9 ff ff       	callq  68ff <cmd_is_option>
    6f62:	41 89 c4             	mov    %eax,%r12d
		if (ret) {
    6f65:	85 c0                	test   %eax,%eax
    6f67:	74 53                	je     6fbc <cmd_parse_one_arg+0xb0>
	if (arg_element->dest != NULL) {
    6f69:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    6f6d:	48 85 f6             	test   %rsi,%rsi
    6f70:	74 33                	je     6fa5 <cmd_parse_one_arg+0x99>
		if (arg_element->is_switch) {
    6f72:	80 7b 02 00          	cmpb   $0x0,0x2(%rbx)
    6f76:	0f be 53 18          	movsbl 0x18(%rbx),%edx
    6f7a:	74 1a                	je     6f96 <cmd_parse_one_arg+0x8a>
			if (arg_element->type == 'b') {
    6f7c:	80 fa 62             	cmp    $0x62,%dl
    6f7f:	75 05                	jne    6f86 <cmd_parse_one_arg+0x7a>
				*(bool *)arg_element->dest = true;
    6f81:	c6 06 01             	movb   $0x1,(%rsi)
    6f84:	eb 1f                	jmp    6fa5 <cmd_parse_one_arg+0x99>
				posix_print_error_and_exit(CMD_ERR_BOOL_SWI);
    6f86:	48 8d 3d 24 32 00 00 	lea    0x3224(%rip),%rdi        # a1b1 <default_cmd+0xf51>
    6f8d:	31 c0                	xor    %eax,%eax
    6f8f:	e8 00 f6 ff ff       	callq  6594 <posix_print_error_and_exit>
    6f94:	eb 0f                	jmp    6fa5 <cmd_parse_one_arg+0x99>
			cmd_read_option_value(&argv[offset],
    6f96:	48 63 f8             	movslq %eax,%rdi
    6f99:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
    6f9d:	48 01 ef             	add    %rbp,%rdi
    6fa0:	e8 75 fa ff ff       	callq  6a1a <cmd_read_option_value>
	if (arg_element->call_when_found) {
    6fa5:	48 8b 53 28          	mov    0x28(%rbx),%rdx
			cmd_handle_this_matched_arg(argv,
						    ret,
						    &args_struct[count]);
			return true;
    6fa9:	b0 01                	mov    $0x1,%al
	if (arg_element->call_when_found) {
    6fab:	48 85 d2             	test   %rdx,%rdx
    6fae:	74 16                	je     6fc6 <cmd_parse_one_arg+0xba>
		arg_element->call_when_found(argv, offset);
    6fb0:	44 89 e6             	mov    %r12d,%esi
    6fb3:	48 89 ef             	mov    %rbp,%rdi
    6fb6:	ff d2                	callq  *%rdx
			return true;
    6fb8:	b0 01                	mov    $0x1,%al
    6fba:	eb 0a                	jmp    6fc6 <cmd_parse_one_arg+0xba>
    6fbc:	41 ff c6             	inc    %r14d
    6fbf:	e9 75 ff ff ff       	jmpq   6f39 <cmd_parse_one_arg+0x2d>
		}
		count++;
	}
	return false;
    6fc4:	31 c0                	xor    %eax,%eax
}
    6fc6:	5b                   	pop    %rbx
    6fc7:	5d                   	pop    %rbp
    6fc8:	41 5c                	pop    %r12
    6fca:	41 5d                	pop    %r13
    6fcc:	41 5e                	pop    %r14
    6fce:	c3                   	retq   

0000000000006fcf <native_cleanup_cmd_line>:
static int used_args;
static int args_aval;
#define ARGS_ALLOC_CHUNK_SIZE 20

void native_cleanup_cmd_line(void)
{
    6fcf:	f3 0f 1e fa          	endbr64 
	if (args_struct != NULL) { /* LCOV_EXCL_BR_LINE */
    6fd3:	48 8b 3d 36 85 00 00 	mov    0x8536(%rip),%rdi        # f510 <args_struct>
    6fda:	48 85 ff             	test   %rdi,%rdi
    6fdd:	74 13                	je     6ff2 <native_cleanup_cmd_line+0x23>
{
    6fdf:	50                   	push   %rax
		free(args_struct);
    6fe0:	e8 cb b3 ff ff       	callq  23b0 <free@plt>
		args_struct = NULL;
    6fe5:	48 c7 05 20 85 00 00 	movq   $0x0,0x8520(%rip)        # f510 <args_struct>
    6fec:	00 00 00 00 
	}
}
    6ff0:	5a                   	pop    %rdx
    6ff1:	c3                   	retq   
    6ff2:	c3                   	retq   

0000000000006ff3 <native_add_command_line_opts>:
 *
 * Each option to be added is described in one entry of the input <args>
 * This input must be terminated with an entry containing ARG_TABLE_ENDMARKER.
 */
void native_add_command_line_opts(struct args_struct_t *args)
{
    6ff3:	f3 0f 1e fa          	endbr64 
    6ff7:	41 54                	push   %r12
    6ff9:	55                   	push   %rbp
    6ffa:	48 89 fd             	mov    %rdi,%rbp
    6ffd:	53                   	push   %rbx
	int count = 0;
    6ffe:	31 db                	xor    %ebx,%ebx

	while (args[count].option != NULL) {
    7000:	48 63 c3             	movslq %ebx,%rax
    7003:	ff c3                	inc    %ebx
    7005:	48 6b c0 38          	imul   $0x38,%rax,%rax
    7009:	48 83 7c 05 08 00    	cmpq   $0x0,0x8(%rbp,%rax,1)
    700f:	75 ef                	jne    7000 <native_add_command_line_opts+0xd>
		count++;
	}
	count++; /*for the end marker*/

	if (used_args + count >= args_aval) {
    7011:	8b 15 75 85 00 00    	mov    0x8575(%rip),%edx        # f58c <used_args>
    7017:	8b 05 6b 85 00 00    	mov    0x856b(%rip),%eax        # f588 <args_aval>
    701d:	01 da                	add    %ebx,%edx
    701f:	39 c2                	cmp    %eax,%edx
    7021:	7c 44                	jl     7067 <native_add_command_line_opts+0x74>
		if (growby < ARGS_ALLOC_CHUNK_SIZE) {
			growby = ARGS_ALLOC_CHUNK_SIZE;
		}

		struct args_struct_t *new_args_struct = realloc(args_struct,
				      (args_aval + growby)*
    7023:	83 fb 14             	cmp    $0x14,%ebx
    7026:	41 bc 14 00 00 00    	mov    $0x14,%r12d
		struct args_struct_t *new_args_struct = realloc(args_struct,
    702c:	48 8b 3d dd 84 00 00 	mov    0x84dd(%rip),%rdi        # f510 <args_struct>
				      (args_aval + growby)*
    7033:	44 0f 4d e3          	cmovge %ebx,%r12d
    7037:	41 01 c4             	add    %eax,%r12d
    703a:	49 63 f4             	movslq %r12d,%rsi
		struct args_struct_t *new_args_struct = realloc(args_struct,
    703d:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    7041:	e8 8a b5 ff ff       	callq  25d0 <realloc@plt>
				      sizeof(struct args_struct_t));
		args_aval += growby;
    7046:	44 89 25 3b 85 00 00 	mov    %r12d,0x853b(%rip)        # f588 <args_aval>
		/* LCOV_EXCL_START */
		if (new_args_struct == NULL) {
    704d:	48 85 c0             	test   %rax,%rax
    7050:	75 0e                	jne    7060 <native_add_command_line_opts+0x6d>
			posix_print_error_and_exit("Could not allocate memory");
    7052:	48 8d 3d a3 31 00 00 	lea    0x31a3(%rip),%rdi        # a1fc <default_cmd+0xf9c>
    7059:	e8 36 f5 ff ff       	callq  6594 <posix_print_error_and_exit>
    705e:	eb 07                	jmp    7067 <native_add_command_line_opts+0x74>
		} else {
			args_struct = new_args_struct;
    7060:	48 89 05 a9 84 00 00 	mov    %rax,0x84a9(%rip)        # f510 <args_struct>
		}
		/* LCOV_EXCL_STOP */
	}

	memcpy(&args_struct[used_args], args,
    7067:	48 63 05 1e 85 00 00 	movslq 0x851e(%rip),%rax        # f58c <used_args>
    706e:	48 63 cb             	movslq %ebx,%rcx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    7071:	48 89 ee             	mov    %rbp,%rsi
    7074:	48 6b c9 38          	imul   $0x38,%rcx,%rcx
    7078:	48 89 c2             	mov    %rax,%rdx
    707b:	48 6b c0 38          	imul   $0x38,%rax,%rax
    707f:	48 03 05 8a 84 00 00 	add    0x848a(%rip),%rax        # f510 <args_struct>
    7086:	48 89 c7             	mov    %rax,%rdi
		count*sizeof(struct args_struct_t));

	used_args += count - 1;
    7089:	8d 44 1a ff          	lea    -0x1(%rdx,%rbx,1),%eax
    708d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
    708f:	89 05 f7 84 00 00    	mov    %eax,0x84f7(%rip)        # f58c <used_args>
	/*
	 * -1 as the end marker should be overwritten next time something
	 * is added
	 */
}
    7095:	5b                   	pop    %rbx
    7096:	5d                   	pop    %rbp
    7097:	41 5c                	pop    %r12
    7099:	c3                   	retq   

000000000000709a <native_add_testargs_option>:

void native_add_testargs_option(void)
{
    709a:	f3 0f 1e fa          	endbr64 
		(void *)NULL, NULL,
		"Any argument that follows will be ignored by the top level, "
		"and made available for possible tests"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(testargs_options);
    709e:	48 8d 3d fb 51 00 00 	lea    0x51fb(%rip),%rdi        # c2a0 <testargs_options.2552>
    70a5:	e9 49 ff ff ff       	jmpq   6ff3 <native_add_command_line_opts>

00000000000070aa <native_handle_cmd_line>:
 * Handle possible command line arguments.
 *
 * We also store them for later use by possible test applications
 */
void native_handle_cmd_line(int argc, char *argv[])
{
    70aa:	f3 0f 1e fa          	endbr64 
    70ae:	41 57                	push   %r15

	cmd_args_set_defaults(args_struct);

	for (i = 1; i < argc; i++) {

		if ((cmd_is_option(argv[i], "testargs", 0))) {
    70b0:	4c 8d 3d 5f 31 00 00 	lea    0x315f(%rip),%r15        # a216 <default_cmd+0xfb6>
{
    70b7:	41 56                	push   %r14
    70b9:	41 55                	push   %r13
    70bb:	41 54                	push   %r12
    70bd:	49 89 f4             	mov    %rsi,%r12
    70c0:	55                   	push   %rbp
	for (i = 1; i < argc; i++) {
    70c1:	bd 01 00 00 00       	mov    $0x1,%ebp
{
    70c6:	53                   	push   %rbx
    70c7:	89 fb                	mov    %edi,%ebx
    70c9:	52                   	push   %rdx
	native_add_tracing_options();
    70ca:	e8 3c f7 ff ff       	callq  680b <native_add_tracing_options>
	native_add_testargs_option();
    70cf:	e8 c6 ff ff ff       	callq  709a <native_add_testargs_option>
	cmd_args_set_defaults(args_struct);
    70d4:	48 8b 3d 35 84 00 00 	mov    0x8435(%rip),%rdi        # f510 <args_struct>
	s_argv = argv;
    70db:	4c 89 25 3e 84 00 00 	mov    %r12,0x843e(%rip)        # f520 <s_argv>
	s_argc = argc;
    70e2:	89 1d ac 84 00 00    	mov    %ebx,0x84ac(%rip)        # f594 <s_argc>
	cmd_args_set_defaults(args_struct);
    70e8:	e8 bf fa ff ff       	callq  6bac <cmd_args_set_defaults>
	for (i = 1; i < argc; i++) {
    70ed:	41 89 ee             	mov    %ebp,%r14d
    70f0:	39 eb                	cmp    %ebp,%ebx
    70f2:	7e 65                	jle    7159 <native_handle_cmd_line+0xaf>
		if ((cmd_is_option(argv[i], "testargs", 0))) {
    70f4:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    70f8:	31 d2                	xor    %edx,%edx
    70fa:	4c 89 fe             	mov    %r15,%rsi
    70fd:	4c 8d 6d 01          	lea    0x1(%rbp),%r13
    7101:	e8 f9 f7 ff ff       	callq  68ff <cmd_is_option>
    7106:	85 c0                	test   %eax,%eax
    7108:	74 18                	je     7122 <native_handle_cmd_line+0x78>
			test_argc = argc - i - 1;
    710a:	ff cb                	dec    %ebx
			test_argv = &argv[i+1];
    710c:	4b 8d 04 ec          	lea    (%r12,%r13,8),%rax
			test_argc = argc - i - 1;
    7110:	44 29 f3             	sub    %r14d,%ebx
			test_argv = &argv[i+1];
    7113:	48 89 05 fe 83 00 00 	mov    %rax,0x83fe(%rip)        # f518 <test_argv>
			test_argc = argc - i - 1;
    711a:	89 1d 70 84 00 00    	mov    %ebx,0x8470(%rip)        # f590 <test_argc>
			break;
    7120:	eb 37                	jmp    7159 <native_handle_cmd_line+0xaf>
		}

		if (!cmd_parse_one_arg(argv[i], args_struct)) {
    7122:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    7126:	48 8b 35 e3 83 00 00 	mov    0x83e3(%rip),%rsi        # f510 <args_struct>
    712d:	e8 da fd ff ff       	callq  6f0c <cmd_parse_one_arg>
    7132:	84 c0                	test   %al,%al
    7134:	75 1e                	jne    7154 <native_handle_cmd_line+0xaa>
			cmd_print_switches_help(args_struct);
    7136:	48 8b 3d d3 83 00 00 	mov    0x83d3(%rip),%rdi        # f510 <args_struct>
    713d:	e8 2f fb ff ff       	callq  6c71 <cmd_print_switches_help>
	posix_print_error_and_exit("Incorrect option '%s'. Did you misspell it?"
    7142:	49 8b 34 ec          	mov    (%r12,%rbp,8),%rsi
    7146:	48 8d 3d d2 30 00 00 	lea    0x30d2(%rip),%rdi        # a21f <default_cmd+0xfbf>
    714d:	31 c0                	xor    %eax,%eax
    714f:	e8 40 f4 ff ff       	callq  6594 <posix_print_error_and_exit>
	for (i = 1; i < argc; i++) {
    7154:	4c 89 ed             	mov    %r13,%rbp
    7157:	eb 94                	jmp    70ed <native_handle_cmd_line+0x43>
			print_invalid_opt_error(argv[i]);
		}
	}
}
    7159:	58                   	pop    %rax
    715a:	5b                   	pop    %rbx
    715b:	5d                   	pop    %rbp
    715c:	41 5c                	pop    %r12
    715e:	41 5d                	pop    %r13
    7160:	41 5e                	pop    %r14
    7162:	41 5f                	pop    %r15
    7164:	c3                   	retq   

0000000000007165 <hw_counter_init>:

/**
 * Initialize the counter with prescaler of HW
 */
void hw_counter_init(void)
{
    7165:	f3 0f 1e fa          	endbr64 
	hw_counter_timer = NEVER;
    7169:	48 8d 05 d0 83 00 00 	lea    0x83d0(%rip),%rax        # f540 <hw_counter_timer>
	counter_target = NEVER;
	counter_value = 0;
	counter_running = false;
    7170:	c6 05 3b 84 00 00 00 	movb   $0x0,0x843b(%rip)        # f5b2 <counter_running>
	counter_target = NEVER;
    7177:	48 c7 05 ae 83 00 00 	movq   $0xffffffffffffffff,0x83ae(%rip)        # f530 <counter_target>
    717e:	ff ff ff ff 
	hw_counter_timer = NEVER;
    7182:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	counter_value = 0;
    7189:	48 c7 05 a4 83 00 00 	movq   $0x0,0x83a4(%rip)        # f538 <counter_value>
    7190:	00 00 00 00 
	counter_period = NEVER;
    7194:	48 c7 05 89 83 00 00 	movq   $0xffffffffffffffff,0x8389(%rip)        # f528 <counter_period>
    719b:	ff ff ff ff 
}
    719f:	c3                   	retq   

00000000000071a0 <hw_counter_triggered>:

void hw_counter_triggered(void)
{
    71a0:	f3 0f 1e fa          	endbr64 
	if (!counter_running) {
    71a4:	80 3d 07 84 00 00 00 	cmpb   $0x0,0x8407(%rip)        # f5b2 <counter_running>
{
    71ab:	53                   	push   %rbx
    71ac:	48 8d 1d 8d 83 00 00 	lea    0x838d(%rip),%rbx        # f540 <hw_counter_timer>
	if (!counter_running) {
    71b3:	75 09                	jne    71be <hw_counter_triggered+0x1e>
		hw_counter_timer = NEVER;
    71b5:	48 c7 03 ff ff ff ff 	movq   $0xffffffffffffffff,(%rbx)
		return;
    71bc:	eb 34                	jmp    71f2 <hw_counter_triggered+0x52>
	}

	hw_counter_timer = hwm_get_time() + counter_period;
    71be:	e8 da e9 ff ff       	callq  5b9d <hwm_get_time>
    71c3:	48 03 05 5e 83 00 00 	add    0x835e(%rip),%rax        # f528 <counter_period>
    71ca:	48 89 03             	mov    %rax,(%rbx)
	counter_value = counter_value + 1;
    71cd:	48 8b 05 64 83 00 00 	mov    0x8364(%rip),%rax        # f538 <counter_value>
    71d4:	48 ff c0             	inc    %rax

	if (counter_value == counter_target) {
    71d7:	48 3b 05 52 83 00 00 	cmp    0x8352(%rip),%rax        # f530 <counter_target>
	counter_value = counter_value + 1;
    71de:	48 89 05 53 83 00 00 	mov    %rax,0x8353(%rip)        # f538 <counter_value>
	if (counter_value == counter_target) {
    71e5:	75 0b                	jne    71f2 <hw_counter_triggered+0x52>
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    71e7:	bf 02 00 00 00       	mov    $0x2,%edi
	}
}
    71ec:	5b                   	pop    %rbx
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    71ed:	e9 19 f2 ff ff       	jmpq   640b <hw_irq_ctrl_set_irq>
}
    71f2:	5b                   	pop    %rbx
    71f3:	c3                   	retq   

00000000000071f4 <tc_query_caps>:

	return 0;
}

static int tc_query_caps(const struct device *dev)
{
    71f4:	f3 0f 1e fa          	endbr64 
	return (CAP_RAW_KEY | CAP_SEPARATE_IO_BUFS | CAP_SYNC_OPS);
}
    71f8:	b8 32 00 00 00       	mov    $0x32,%eax
    71fd:	c3                   	retq   

00000000000071fe <tc_shim_init>:

	return 0;
}

static int tc_shim_init(const struct device *dev)
{
    71fe:	f3 0f 1e fa          	endbr64 
	int i;

	ARG_UNUSED(dev);
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
		tc_driver_state[i].in_use = 0;
    7202:	c7 05 54 7f 00 00 00 	movl   $0x0,0x7f54(%rip)        # f160 <tc_driver_state>
    7209:	00 00 00 
	}

	return 0;
}
    720c:	31 c0                	xor    %eax,%eax
		tc_driver_state[i].in_use = 0;
    720e:	c7 05 fc 7f 00 00 00 	movl   $0x0,0x7ffc(%rip)        # f214 <tc_driver_state+0xb4>
    7215:	00 00 00 
}
    7218:	c3                   	retq   

0000000000007219 <tc_session_free>:
{
    7219:	f3 0f 1e fa          	endbr64 
	struct tc_shim_drv_state *data =  sessn->drv_sessn_state;
    721d:	48 8b 56 20          	mov    0x20(%rsi),%rdx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    7221:	31 c0                	xor    %eax,%eax
    7223:	b9 2d 00 00 00       	mov    $0x2d,%ecx
    7228:	48 89 d7             	mov    %rdx,%rdi
    722b:	f3 ab                	rep stos %eax,%es:(%rdi)
}
    722d:	c3                   	retq   

000000000000722e <tc_session_setup>:
{
    722e:	f3 0f 1e fa          	endbr64 
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    7232:	ff ca                	dec    %edx
		return -EINVAL;
    7234:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    7239:	0f 85 fb 00 00 00    	jne    733a <tc_session_setup+0x10c>
{
    723f:	55                   	push   %rbp
    7240:	53                   	push   %rbx
    7241:	48 89 f3             	mov    %rsi,%rbx
    7244:	57                   	push   %rdi
	if (!(ctx->flags & CAP_SYNC_OPS)) {
    7245:	f6 46 36 20          	testb  $0x20,0x36(%rsi)
    7249:	0f 84 e7 00 00 00    	je     7336 <tc_session_setup+0x108>
	if (ctx->keylen != TC_AES_KEY_SIZE) {
    724f:	66 83 7e 34 10       	cmpw   $0x10,0x34(%rsi)
    7254:	0f 85 dc 00 00 00    	jne    7336 <tc_session_setup+0x108>
	if (op_type == CRYPTO_CIPHER_OP_ENCRYPT) {
    725a:	41 ff c8             	dec    %r8d
    725d:	75 1c                	jne    727b <tc_session_setup+0x4d>
		switch (mode) {
    725f:	83 f9 03             	cmp    $0x3,%ecx
    7262:	74 1c                	je     7280 <tc_session_setup+0x52>
    7264:	83 f9 04             	cmp    $0x4,%ecx
    7267:	74 2f                	je     7298 <tc_session_setup+0x6a>
    7269:	83 f9 02             	cmp    $0x2,%ecx
    726c:	0f 85 c4 00 00 00    	jne    7336 <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_encrypt;
    7272:	48 8d 05 0e 03 00 00 	lea    0x30e(%rip),%rax        # 7587 <do_cbc_encrypt>
    7279:	eb 49                	jmp    72c4 <tc_session_setup+0x96>
		switch (mode) {
    727b:	83 f9 03             	cmp    $0x3,%ecx
    727e:	75 21                	jne    72a1 <tc_session_setup+0x73>
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    7280:	83 7b 30 20          	cmpl   $0x20,0x30(%rbx)
		return -EINVAL;
    7284:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    7289:	0f 85 a7 00 00 00    	jne    7336 <tc_session_setup+0x108>
			ctx->ops.ctr_crypt_hndlr = do_ctr_op;
    728f:	48 8d 05 5a 02 00 00 	lea    0x25a(%rip),%rax        # 74f0 <do_ctr_op>
    7296:	eb 2c                	jmp    72c4 <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_encrypt_mac;
    7298:	48 8d 05 a1 01 00 00 	lea    0x1a1(%rip),%rax        # 7440 <do_ccm_encrypt_mac>
    729f:	eb 23                	jmp    72c4 <tc_session_setup+0x96>
		switch (mode) {
    72a1:	83 f9 04             	cmp    $0x4,%ecx
    72a4:	74 17                	je     72bd <tc_session_setup+0x8f>
    72a6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    72ab:	83 f9 02             	cmp    $0x2,%ecx
    72ae:	0f 85 82 00 00 00    	jne    7336 <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_decrypt;
    72b4:	48 8d 05 3c 01 00 00 	lea    0x13c(%rip),%rax        # 73f7 <do_cbc_decrypt>
    72bb:	eb 07                	jmp    72c4 <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_decrypt_auth;
    72bd:	48 8d 05 77 00 00 00 	lea    0x77(%rip),%rax        # 733b <do_ccm_decrypt_auth>
    72c4:	48 89 43 08          	mov    %rax,0x8(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    72c8:	48 63 05 91 7e 00 00 	movslq 0x7e91(%rip),%rax        # f160 <tc_driver_state>
	ctx->ops.cipher_mode = mode;
    72cf:	89 0b                	mov    %ecx,(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    72d1:	85 c0                	test   %eax,%eax
    72d3:	74 1f                	je     72f4 <tc_session_setup+0xc6>
    72d5:	83 3d 38 7f 00 00 00 	cmpl   $0x0,0x7f38(%rip)        # f214 <tc_driver_state+0xb4>
		return -ENOSPC;
    72dc:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
		if (tc_driver_state[i].in_use == 0) {
    72e1:	75 53                	jne    7336 <tc_session_setup+0x108>
			tc_driver_state[i].in_use = 1;
    72e3:	c7 05 27 7f 00 00 01 	movl   $0x1,0x7f27(%rip)        # f214 <tc_driver_state+0xb4>
    72ea:	00 00 00 
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
    72ed:	b8 01 00 00 00       	mov    $0x1,%eax
    72f2:	eb 0a                	jmp    72fe <tc_session_setup+0xd0>
			tc_driver_state[i].in_use = 1;
    72f4:	c7 05 62 7e 00 00 01 	movl   $0x1,0x7e62(%rip)        # f160 <tc_driver_state>
    72fb:	00 00 00 
	data = &tc_driver_state[idx];
    72fe:	48 69 c0 b4 00 00 00 	imul   $0xb4,%rax,%rax
    7305:	48 8d 15 54 7e 00 00 	lea    0x7e54(%rip),%rdx        # f160 <tc_driver_state>
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    730c:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    7310:	48 8d 7c 02 04       	lea    0x4(%rdx,%rax,1),%rdi
	data = &tc_driver_state[idx];
    7315:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    7319:	e8 48 d3 ff ff       	callq  4666 <tc_aes128_set_encrypt_key>
    731e:	85 c0                	test   %eax,%eax
    7320:	75 0e                	jne    7330 <tc_session_setup+0x102>
		tc_driver_state[idx].in_use = 0;
    7322:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
		return -EIO;
    7329:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    732e:	eb 06                	jmp    7336 <tc_session_setup+0x108>
	ctx->drv_sessn_state = data;
    7330:	48 89 6b 20          	mov    %rbp,0x20(%rbx)
	return 0;
    7334:	31 c0                	xor    %eax,%eax
}
    7336:	5a                   	pop    %rdx
    7337:	5b                   	pop    %rbx
    7338:	5d                   	pop    %rbp
    7339:	c3                   	retq   
    733a:	c3                   	retq   

000000000000733b <do_ccm_decrypt_auth>:
{
    733b:	f3 0f 1e fa          	endbr64 
    733f:	41 55                	push   %r13
    7341:	41 54                	push   %r12
    7343:	49 89 f4             	mov    %rsi,%r12
    7346:	55                   	push   %rbp
    7347:	53                   	push   %rbx
    7348:	48 89 fb             	mov    %rdi,%rbx
    734b:	48 83 ec 28          	sub    $0x28,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    734f:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    7353:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    7358:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    735f:	00 00 
    7361:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    7366:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7368:	48 8b 47 20          	mov    0x20(%rdi),%rax
    736c:	49 89 e5             	mov    %rsp,%r13
	struct cipher_pkt *op = aead_op->pkt;
    736f:	48 8b 2e             	mov    (%rsi),%rbp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7372:	4c 89 ef             	mov    %r13,%rdi
    7375:	48 8d 70 04          	lea    0x4(%rax),%rsi
    7379:	e8 1a da ff ff       	callq  4d98 <tc_ccm_config>
    737e:	85 c0                	test   %eax,%eax
    7380:	75 07                	jne    7389 <do_ccm_decrypt_auth+0x4e>
		return -EIO;
    7382:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    7387:	eb 4e                	jmp    73d7 <do_ccm_decrypt_auth+0x9c>
	if (aead_op->tag != op->in_buf + op->in_len) {
    7389:	48 63 45 08          	movslq 0x8(%rbp),%rax
    738d:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    7391:	48 89 c2             	mov    %rax,%rdx
    7394:	4c 01 c0             	add    %r8,%rax
    7397:	49 39 44 24 18       	cmp    %rax,0x18(%r12)
    739c:	75 e4                	jne    7382 <do_ccm_decrypt_auth+0x47>
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    739e:	4d 8b 54 24 08       	mov    0x8(%r12),%r10
    73a3:	8b 75 18             	mov    0x18(%rbp),%esi
    73a6:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
					   op->in_len + ccm_param->tag_len,
    73aa:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    73ae:	41 51                	push   %r9
    73b0:	41 55                	push   %r13
    73b2:	41 8b 4c 24 10       	mov    0x10(%r12),%ecx
    73b7:	44 8d 0c 10          	lea    (%rax,%rdx,1),%r9d
    73bb:	4c 89 d2             	mov    %r10,%rdx
    73be:	e8 d5 db ff ff       	callq  4f98 <tc_ccm_decryption_verification>
    73c3:	41 5a                	pop    %r10
    73c5:	41 5b                	pop    %r11
    73c7:	85 c0                	test   %eax,%eax
    73c9:	74 b7                	je     7382 <do_ccm_decrypt_auth+0x47>
	op->out_len = op->in_len + ccm_param->tag_len;
    73cb:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
    73cf:	03 45 08             	add    0x8(%rbp),%eax
    73d2:	89 45 1c             	mov    %eax,0x1c(%rbp)
	return 0;
    73d5:	31 c0                	xor    %eax,%eax
}
    73d7:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    73dc:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    73e3:	00 00 
    73e5:	74 05                	je     73ec <do_ccm_decrypt_auth+0xb1>
    73e7:	e8 c4 b0 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    73ec:	48 83 c4 28          	add    $0x28,%rsp
    73f0:	5b                   	pop    %rbx
    73f1:	5d                   	pop    %rbp
    73f2:	41 5c                	pop    %r12
    73f4:	41 5d                	pop    %r13
    73f6:	c3                   	retq   

00000000000073f7 <do_cbc_decrypt>:
{
    73f7:	f3 0f 1e fa          	endbr64 
	if (iv != op->in_buf) {
    73fb:	4c 8b 06             	mov    (%rsi),%r8
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    73fe:	48 8b 47 20          	mov    0x20(%rdi),%rax
	if (iv != op->in_buf) {
    7402:	49 39 d0             	cmp    %rdx,%r8
    7405:	75 33                	jne    743a <do_cbc_decrypt+0x43>
{
    7407:	53                   	push   %rbx
    7408:	48 89 f3             	mov    %rsi,%rbx
			op->in_len - TC_AES_BLOCK_SIZE,
    740b:	8b 4e 08             	mov    0x8(%rsi),%ecx
			op->in_buf + TC_AES_BLOCK_SIZE,
    740e:	49 8d 50 10          	lea    0x10(%r8),%rdx
	if (tc_cbc_mode_decrypt(op->out_buf,
    7412:	8b 76 18             	mov    0x18(%rsi),%esi
    7415:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7419:	4c 8d 48 04          	lea    0x4(%rax),%r9
			op->in_len - TC_AES_BLOCK_SIZE,
    741d:	83 e9 10             	sub    $0x10,%ecx
	if (tc_cbc_mode_decrypt(op->out_buf,
    7420:	e8 f1 d5 ff ff       	callq  4a16 <tc_cbc_mode_decrypt>
    7425:	85 c0                	test   %eax,%eax
    7427:	75 07                	jne    7430 <do_cbc_decrypt+0x39>
		return -EIO;
    7429:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    742e:	eb 08                	jmp    7438 <do_cbc_decrypt+0x41>
	op->out_len = op->in_len;
    7430:	8b 43 08             	mov    0x8(%rbx),%eax
    7433:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    7436:	31 c0                	xor    %eax,%eax
}
    7438:	5b                   	pop    %rbx
    7439:	c3                   	retq   
		return -EIO;
    743a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
    743f:	c3                   	retq   

0000000000007440 <do_ccm_encrypt_mac>:
{
    7440:	f3 0f 1e fa          	endbr64 
    7444:	41 54                	push   %r12
    7446:	55                   	push   %rbp
    7447:	48 89 f5             	mov    %rsi,%rbp
    744a:	53                   	push   %rbx
    744b:	48 83 ec 20          	sub    $0x20,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    744f:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    7453:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    7458:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    745f:	00 00 
    7461:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    7466:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7468:	48 8b 47 20          	mov    0x20(%rdi),%rax
    746c:	49 89 e4             	mov    %rsp,%r12
	struct cipher_pkt *op = aead_op->pkt;
    746f:	48 8b 1e             	mov    (%rsi),%rbx
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7472:	4c 89 e7             	mov    %r12,%rdi
    7475:	48 8d 70 04          	lea    0x4(%rax),%rsi
    7479:	e8 1a d9 ff ff       	callq  4d98 <tc_ccm_config>
    747e:	85 c0                	test   %eax,%eax
    7480:	75 07                	jne    7489 <do_ccm_encrypt_mac+0x49>
		return -EIO;
    7482:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    7487:	eb 49                	jmp    74d2 <do_ccm_encrypt_mac+0x92>
	if (tc_ccm_generation_encryption(op->out_buf, op->out_buf_max,
    7489:	44 8b 4b 08          	mov    0x8(%rbx),%r9d
    748d:	8b 73 18             	mov    0x18(%rbx),%esi
    7490:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7494:	8b 4d 10             	mov    0x10(%rbp),%ecx
    7497:	50                   	push   %rax
    7498:	48 8b 55 08          	mov    0x8(%rbp),%rdx
    749c:	4c 8b 03             	mov    (%rbx),%r8
    749f:	41 54                	push   %r12
    74a1:	e8 3c d9 ff ff       	callq  4de2 <tc_ccm_generation_encryption>
    74a6:	5a                   	pop    %rdx
    74a7:	59                   	pop    %rcx
    74a8:	85 c0                	test   %eax,%eax
    74aa:	74 d6                	je     7482 <do_ccm_encrypt_mac+0x42>
	if (aead_op->tag) {
    74ac:	48 8b 45 18          	mov    0x18(%rbp),%rax
    74b0:	48 85 c0             	test   %rax,%rax
    74b3:	74 11                	je     74c6 <do_ccm_encrypt_mac+0x86>
		memcpy(aead_op->tag, op->out_buf + op->in_len, ccm.mlen);
    74b5:	48 63 73 08          	movslq 0x8(%rbx),%rsi
    74b9:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    74bd:	48 89 c7             	mov    %rax,%rdi
    74c0:	48 03 73 10          	add    0x10(%rbx),%rsi
    74c4:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
	op->out_len = op->in_len + ccm.mlen;
    74c6:	8b 44 24 10          	mov    0x10(%rsp),%eax
    74ca:	03 43 08             	add    0x8(%rbx),%eax
    74cd:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    74d0:	31 c0                	xor    %eax,%eax
}
    74d2:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    74d7:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    74de:	00 00 
    74e0:	74 05                	je     74e7 <do_ccm_encrypt_mac+0xa7>
    74e2:	e8 c9 af ff ff       	callq  24b0 <__stack_chk_fail@plt>
    74e7:	48 83 c4 20          	add    $0x20,%rsp
    74eb:	5b                   	pop    %rbx
    74ec:	5d                   	pop    %rbp
    74ed:	41 5c                	pop    %r12
    74ef:	c3                   	retq   

00000000000074f0 <do_ctr_op>:
{
    74f0:	f3 0f 1e fa          	endbr64 
    74f4:	55                   	push   %rbp
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    74f5:	0f 57 c0             	xorps  %xmm0,%xmm0
    74f8:	b9 10 00 00 00       	mov    $0x10,%ecx
{
    74fd:	53                   	push   %rbx
    74fe:	48 89 f3             	mov    %rsi,%rbx
    7501:	48 89 d6             	mov    %rdx,%rsi
    7504:	48 83 ec 28          	sub    $0x28,%rsp
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7508:	0f b7 57 34          	movzwl 0x34(%rdi),%edx
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    750c:	48 8b 6f 20          	mov    0x20(%rdi),%rbp
{
    7510:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7517:	00 00 
    7519:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    751e:	31 c0                	xor    %eax,%eax
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7520:	8b 47 30             	mov    0x30(%rdi),%eax
    7523:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    7528:	0f 11 44 24 08       	movups %xmm0,0x8(%rsp)
    752d:	4c 89 c7             	mov    %r8,%rdi
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7530:	c1 e8 03             	shr    $0x3,%eax
    7533:	29 c2                	sub    %eax,%edx
	memcpy(ctr, iv, ivlen);
    7535:	48 63 d2             	movslq %edx,%rdx
    7538:	e8 33 b0 ff ff       	callq  2570 <__memcpy_chk@plt>
	if (tc_ctr_mode(op->out_buf, op->out_buf_max, op->in_buf,
    753d:	8b 4b 08             	mov    0x8(%rbx),%ecx
    7540:	8b 73 18             	mov    0x18(%rbx),%esi
    7543:	4c 8d 4d 04          	lea    0x4(%rbp),%r9
    7547:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    754b:	48 8b 13             	mov    (%rbx),%rdx
    754e:	49 89 c0             	mov    %rax,%r8
    7551:	e8 8a d5 ff ff       	callq  4ae0 <tc_ctr_mode>
    7556:	41 89 c0             	mov    %eax,%r8d
    7559:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    755e:	45 85 c0             	test   %r8d,%r8d
    7561:	74 08                	je     756b <do_ctr_op+0x7b>
	op->out_len = op->in_len;
    7563:	8b 43 08             	mov    0x8(%rbx),%eax
    7566:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    7569:	31 c0                	xor    %eax,%eax
}
    756b:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    7570:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7577:	00 00 
    7579:	74 05                	je     7580 <do_ctr_op+0x90>
    757b:	e8 30 af ff ff       	callq  24b0 <__stack_chk_fail@plt>
    7580:	48 83 c4 28          	add    $0x28,%rsp
    7584:	5b                   	pop    %rbx
    7585:	5d                   	pop    %rbp
    7586:	c3                   	retq   

0000000000007587 <do_cbc_encrypt>:
{
    7587:	f3 0f 1e fa          	endbr64 
    758b:	53                   	push   %rbx
    758c:	48 89 f3             	mov    %rsi,%rbx
	if (tc_cbc_mode_encrypt(op->out_buf,
    758f:	48 8b 47 20          	mov    0x20(%rdi),%rax
{
    7593:	49 89 d0             	mov    %rdx,%r8
	if (tc_cbc_mode_encrypt(op->out_buf,
    7596:	8b 4e 08             	mov    0x8(%rsi),%ecx
    7599:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    759d:	8b 76 18             	mov    0x18(%rsi),%esi
    75a0:	48 8b 13             	mov    (%rbx),%rdx
    75a3:	4c 8d 48 04          	lea    0x4(%rax),%r9
    75a7:	e8 41 d3 ff ff       	callq  48ed <tc_cbc_mode_encrypt>
    75ac:	41 89 c0             	mov    %eax,%r8d
    75af:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    75b4:	45 85 c0             	test   %r8d,%r8d
    75b7:	74 08                	je     75c1 <do_cbc_encrypt+0x3a>
	op->out_len = op->in_len;
    75b9:	8b 43 08             	mov    0x8(%rbx),%eax
    75bc:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    75bf:	31 c0                	xor    %eax,%eax
}
    75c1:	5b                   	pop    %rbx
    75c2:	c3                   	retq   

00000000000075c3 <np_uart_tty_poll_in>:
 * @retval 0 If a character arrived and was stored in p_char
 * @retval -1 If no character was available to read
 */
static int np_uart_tty_poll_in(const struct device *dev,
			       unsigned char *p_char)
{
    75c3:	f3 0f 1e fa          	endbr64 
    75c7:	50                   	push   %rax
	int n = -1;
	int in_f = ((struct native_uart_status *)dev->data)->in_fd;
    75c8:	48 8b 47 20          	mov    0x20(%rdi),%rax
	return __read_chk (__fd, __buf, __nbytes, __bos0 (__buf));

      if (__nbytes > __bos0 (__buf))
	return __read_chk_warn (__fd, __buf, __nbytes, __bos0 (__buf));
    }
  return __read_alias (__fd, __buf, __nbytes);
    75cc:	ba 01 00 00 00       	mov    $0x1,%edx
    75d1:	8b 78 04             	mov    0x4(%rax),%edi
    75d4:	e8 37 af ff ff       	callq  2510 <read@plt>
	n = read(in_f, p_char, 1);
	if (n == -1) {
		return -1;
	}
	return 0;
}
    75d9:	5a                   	pop    %rdx
	if (n == -1) {
    75da:	ff c0                	inc    %eax
    75dc:	0f 94 c0             	sete   %al
    75df:	0f b6 c0             	movzbl %al,%eax
    75e2:	f7 d8                	neg    %eax
}
    75e4:	c3                   	retq   

00000000000075e5 <np_cleanup_uart>:

	native_add_command_line_opts(uart_options);
}

static void np_cleanup_uart(void)
{
    75e5:	f3 0f 1e fa          	endbr64 
	if (IS_ENABLED(CONFIG_NATIVE_UART_0_ON_OWN_PTY)) {
		if (native_uart_status_0.in_fd != 0) {
    75e9:	8b 3d 5d 7f 00 00    	mov    0x7f5d(%rip),%edi        # f54c <native_uart_status_0+0x4>
    75ef:	85 ff                	test   %edi,%edi
    75f1:	74 05                	je     75f8 <np_cleanup_uart+0x13>
			close(native_uart_status_0.in_fd);
    75f3:	e9 08 af ff ff       	jmpq   2500 <close@plt>
#if defined(CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE)
	if (native_uart_status_1.in_fd != 0) {
		close(native_uart_status_1.in_fd);
	}
#endif
}
    75f8:	c3                   	retq   

00000000000075f9 <np_add_uart_options>:
{
    75f9:	f3 0f 1e fa          	endbr64 
	native_add_command_line_opts(uart_options);
    75fd:	48 8d 3d 3c 4d 00 00 	lea    0x4d3c(%rip),%rdi        # c340 <uart_options.7281>
    7604:	e9 ea f9 ff ff       	jmpq   6ff3 <native_add_command_line_opts>

0000000000007609 <np_uart_0_init>:
{
    7609:	f3 0f 1e fa          	endbr64 
    760d:	55                   	push   %rbp
    760e:	48 89 e5             	mov    %rsp,%rbp
    7611:	41 57                	push   %r15
    7613:	41 56                	push   %r14
    7615:	41 55                	push   %r13
    7617:	41 54                	push   %r12
    7619:	53                   	push   %rbx
    761a:	48 83 ec 68          	sub    $0x68,%rsp
	d = (struct native_uart_status *)dev->data;
    761e:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    7622:	bf 02 01 00 00       	mov    $0x102,%edi
		int tty_fn = open_tty(d, DT_INST_LABEL(0),
    7627:	44 8a 3d 85 7f 00 00 	mov    0x7f85(%rip),%r15b        # f5b3 <auto_attach>
{
    762e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7635:	00 00 
    7637:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    763b:	31 c0                	xor    %eax,%eax
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    763d:	e8 4e b0 ff ff       	callq  2690 <posix_openpt@plt>
    7642:	89 c3                	mov    %eax,%ebx
	if (master_pty == -1) {
    7644:	ff c0                	inc    %eax
    7646:	75 0e                	jne    7656 <np_uart_0_init+0x4d>
		ERROR("Could not open a new TTY for the UART\n");
    7648:	48 8d 3d 8c 2c 00 00 	lea    0x2c8c(%rip),%rdi        # a2db <default_cmd+0x107b>
    764f:	31 c0                	xor    %eax,%eax
    7651:	e8 3e ef ff ff       	callq  6594 <posix_print_error_and_exit>
	ret = grantpt(master_pty);
    7656:	89 df                	mov    %ebx,%edi
    7658:	e8 d3 af ff ff       	callq  2630 <grantpt@plt>
	if (ret == -1) {
    765d:	ff c0                	inc    %eax
    765f:	75 21                	jne    7682 <np_uart_0_init+0x79>
		err_nbr = errno;
    7661:	e8 9a ad ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7666:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7668:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    766b:	e8 90 ae ff ff       	callq  2500 <close@plt>
		ERROR("Could not grant access to the slave PTY side (%i)\n",
    7670:	41 8b 34 24          	mov    (%r12),%esi
    7674:	48 8d 3d 87 2c 00 00 	lea    0x2c87(%rip),%rdi        # a302 <default_cmd+0x10a2>
    767b:	31 c0                	xor    %eax,%eax
    767d:	e8 12 ef ff ff       	callq  6594 <posix_print_error_and_exit>
	ret = unlockpt(master_pty);
    7682:	89 df                	mov    %ebx,%edi
    7684:	e8 d7 ae ff ff       	callq  2560 <unlockpt@plt>
	if (ret == -1) {
    7689:	ff c0                	inc    %eax
    768b:	75 21                	jne    76ae <np_uart_0_init+0xa5>
		err_nbr = errno;
    768d:	e8 6e ad ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7692:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7694:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    7697:	e8 64 ae ff ff       	callq  2500 <close@plt>
		ERROR("Could not unlock the slave PTY side (%i)\n", errno);
    769c:	41 8b 34 24          	mov    (%r12),%esi
    76a0:	48 8d 3d 8e 2c 00 00 	lea    0x2c8e(%rip),%rdi        # a335 <default_cmd+0x10d5>
    76a7:	31 c0                	xor    %eax,%eax
    76a9:	e8 e6 ee ff ff       	callq  6594 <posix_print_error_and_exit>
	slave_pty_name = ptsname(master_pty);
    76ae:	89 df                	mov    %ebx,%edi
    76b0:	e8 db ac ff ff       	callq  2390 <ptsname@plt>
    76b5:	49 89 c4             	mov    %rax,%r12
	if (slave_pty_name == NULL) {
    76b8:	48 85 c0             	test   %rax,%rax
    76bb:	75 20                	jne    76dd <np_uart_0_init+0xd4>
		err_nbr = errno;
    76bd:	e8 3e ad ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    76c2:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    76c4:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    76c7:	e8 34 ae ff ff       	callq  2500 <close@plt>
		ERROR("Error getting slave PTY device name (%i)\n", errno);
    76cc:	41 8b 36             	mov    (%r14),%esi
    76cf:	48 8d 3d 89 2c 00 00 	lea    0x2c89(%rip),%rdi        # a35f <default_cmd+0x10ff>
    76d6:	31 c0                	xor    %eax,%eax
    76d8:	e8 b7 ee ff ff       	callq  6594 <posix_print_error_and_exit>
	flags = fcntl(master_pty, F_GETFL);
    76dd:	be 03 00 00 00       	mov    $0x3,%esi
    76e2:	89 df                	mov    %ebx,%edi
    76e4:	31 c0                	xor    %eax,%eax
    76e6:	e8 85 ad ff ff       	callq  2470 <fcntl@plt>
    76eb:	41 89 c6             	mov    %eax,%r14d
	if (flags == -1) {
    76ee:	83 f8 ff             	cmp    $0xffffffff,%eax
    76f1:	75 2a                	jne    771d <np_uart_0_init+0x114>
		err_nbr = errno;
    76f3:	e8 08 ad ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    76f8:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    76fa:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
		close(master_pty);
    7701:	e8 fa ad ff ff       	callq  2500 <close@plt>
		ERROR("Could not read the master PTY file status flags (%i)\n",
    7706:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    770d:	48 8d 3d 75 2c 00 00 	lea    0x2c75(%rip),%rdi        # a389 <default_cmd+0x1129>
    7714:	31 c0                	xor    %eax,%eax
    7716:	8b 32                	mov    (%rdx),%esi
    7718:	e8 77 ee ff ff       	callq  6594 <posix_print_error_and_exit>
	ret = fcntl(master_pty, F_SETFL, flags | O_NONBLOCK);
    771d:	44 89 f2             	mov    %r14d,%edx
    7720:	31 c0                	xor    %eax,%eax
    7722:	be 04 00 00 00       	mov    $0x4,%esi
    7727:	89 df                	mov    %ebx,%edi
    7729:	80 ce 08             	or     $0x8,%dh
    772c:	e8 3f ad ff ff       	callq  2470 <fcntl@plt>
	if (ret == -1) {
    7731:	ff c0                	inc    %eax
    7733:	75 20                	jne    7755 <np_uart_0_init+0x14c>
		err_nbr = errno;
    7735:	e8 c6 ac ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    773a:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    773c:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    773f:	e8 bc ad ff ff       	callq  2500 <close@plt>
		ERROR("Could not set the master PTY as non-blocking (%i)\n",
    7744:	41 8b 36             	mov    (%r14),%esi
    7747:	48 8d 3d 71 2c 00 00 	lea    0x2c71(%rip),%rdi        # a3bf <default_cmd+0x115f>
    774e:	31 c0                	xor    %eax,%eax
    7750:	e8 3f ee ff ff       	callq  6594 <posix_print_error_and_exit>
	ret = tcgetattr(master_pty, &ter);
    7755:	4c 8d 75 8c          	lea    -0x74(%rbp),%r14
    7759:	89 df                	mov    %ebx,%edi
    775b:	4c 89 f6             	mov    %r14,%rsi
    775e:	e8 9d ae ff ff       	callq  2600 <tcgetattr@plt>
	if (ret == -1) {
    7763:	ff c0                	inc    %eax
    7765:	75 0e                	jne    7775 <np_uart_0_init+0x16c>
		ERROR("Could not read terminal driver settings\n");
    7767:	48 8d 3d 84 2c 00 00 	lea    0x2c84(%rip),%rdi        # a3f2 <default_cmd+0x1192>
    776e:	31 c0                	xor    %eax,%eax
    7770:	e8 1f ee ff ff       	callq  6594 <posix_print_error_and_exit>
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    7775:	31 f6                	xor    %esi,%esi
    7777:	4c 89 f2             	mov    %r14,%rdx
    777a:	89 df                	mov    %ebx,%edi
	ter.c_lflag &= ~(ICANON | ISIG | IEXTEN | ECHO);
    777c:	81 65 98 f4 7f ff ff 	andl   $0xffff7ff4,-0x68(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    7783:	48 b8 04 fa ff ff fe 	movabs $0xfffffffefffffa04,%rax
    778a:	ff ff ff 
	ter.c_cc[VTIME] = 0;
    778d:	66 c7 45 a2 00 00    	movw   $0x0,-0x5e(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    7793:	48 21 45 8c          	and    %rax,-0x74(%rbp)
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    7797:	e8 74 ae ff ff       	callq  2610 <tcsetattr@plt>
	if (ret == -1) {
    779c:	ff c0                	inc    %eax
    779e:	75 0e                	jne    77ae <np_uart_0_init+0x1a5>
		ERROR("Could not change terminal driver settings\n");
    77a0:	48 8d 3d 74 2c 00 00 	lea    0x2c74(%rip),%rdi        # a41b <default_cmd+0x11bb>
    77a7:	31 c0                	xor    %eax,%eax
    77a9:	e8 e6 ed ff ff       	callq  6594 <posix_print_error_and_exit>
	posix_print_trace("%s connected to pseudotty: %s\n",
    77ae:	31 c0                	xor    %eax,%eax
    77b0:	4c 89 e2             	mov    %r12,%rdx
    77b3:	48 8d 35 8b 1d 00 00 	lea    0x1d8b(%rip),%rsi        # 9545 <default_cmd+0x2e5>
    77ba:	48 8d 3d 85 2c 00 00 	lea    0x2c85(%rip),%rdi        # a446 <default_cmd+0x11e6>
    77c1:	e8 76 ef ff ff       	callq  673c <posix_print_trace>
	if (do_auto_attach) {
    77c6:	45 84 ff             	test   %r15b,%r15b
    77c9:	0f 84 da 00 00 00    	je     78a9 <np_uart_0_init+0x2a0>
	if (auto_attach_cmd == NULL) {
    77cf:	48 83 3d 79 7d 00 00 	cmpq   $0x0,0x7d79(%rip)        # f550 <auto_attach_cmd>
    77d6:	00 
{
    77d7:	49 89 e6             	mov    %rsp,%r14
	if (auto_attach_cmd == NULL) {
    77da:	75 0e                	jne    77ea <np_uart_0_init+0x1e1>
		auto_attach_cmd = (char *)default_cmd;
    77dc:	48 8d 05 7d 1a 00 00 	lea    0x1a7d(%rip),%rax        # 9260 <default_cmd>
    77e3:	48 89 05 66 7d 00 00 	mov    %rax,0x7d66(%rip)        # f550 <auto_attach_cmd>
	char command[strlen(auto_attach_cmd) + strlen(slave_tty) + 1];
    77ea:	4c 8b 0d 5f 7d 00 00 	mov    0x7d5f(%rip),%r9        # f550 <auto_attach_cmd>
    77f1:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
    77f5:	31 c0                	xor    %eax,%eax
    77f7:	48 89 f1             	mov    %rsi,%rcx
    77fa:	4c 89 cf             	mov    %r9,%rdi
    77fd:	f2 ae                	repnz scas %es:(%rdi),%al
    77ff:	4c 89 e7             	mov    %r12,%rdi
    7802:	48 f7 d1             	not    %rcx
    7805:	48 89 ca             	mov    %rcx,%rdx
    7808:	48 89 f1             	mov    %rsi,%rcx
    780b:	f2 ae                	repnz scas %es:(%rdi),%al
    780d:	48 89 c8             	mov    %rcx,%rax
    7810:	48 89 e1             	mov    %rsp,%rcx
    7813:	48 f7 d0             	not    %rax
    7816:	48 8d 54 02 0e       	lea    0xe(%rdx,%rax,1),%rdx
    781b:	48 89 d0             	mov    %rdx,%rax
    781e:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    7825:	48 29 d1             	sub    %rdx,%rcx
    7828:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    782c:	48 89 ca             	mov    %rcx,%rdx
    782f:	48 39 d4             	cmp    %rdx,%rsp
    7832:	74 12                	je     7846 <np_uart_0_init+0x23d>
    7834:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    783b:	48 83 8c 24 f8 0f 00 	orq    $0x0,0xff8(%rsp)
    7842:	00 00 
    7844:	eb e9                	jmp    782f <np_uart_0_init+0x226>
    7846:	25 ff 0f 00 00       	and    $0xfff,%eax
    784b:	48 29 c4             	sub    %rax,%rsp
    784e:	48 85 c0             	test   %rax,%rax
    7851:	74 06                	je     7859 <np_uart_0_init+0x250>
    7853:	48 83 4c 04 f8 00    	orq    $0x0,-0x8(%rsp,%rax,1)
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
    7859:	4d 89 e0             	mov    %r12,%r8
    785c:	4c 89 c9             	mov    %r9,%rcx
    785f:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    7863:	be 01 00 00 00       	mov    $0x1,%esi
    7868:	48 89 e7             	mov    %rsp,%rdi
    786b:	31 c0                	xor    %eax,%eax
    786d:	e8 5e ae ff ff       	callq  26d0 <__sprintf_chk@plt>
	int ret = system(command);
    7872:	48 89 e7             	mov    %rsp,%rdi
    7875:	e8 46 ac ff ff       	callq  24c0 <system@plt>
    787a:	41 89 c4             	mov    %eax,%r12d
	if (ret != 0) {
    787d:	85 c0                	test   %eax,%eax
    787f:	74 25                	je     78a6 <np_uart_0_init+0x29d>
		WARN("Could not attach to the UART with \"%s\"\n", command);
    7881:	48 89 e6             	mov    %rsp,%rsi
    7884:	48 8d 3d da 2b 00 00 	lea    0x2bda(%rip),%rdi        # a465 <default_cmd+0x1205>
    788b:	31 c0                	xor    %eax,%eax
    788d:	e8 db ed ff ff       	callq  666d <posix_print_warning>
		WARN("The command returned %i\n", WEXITSTATUS(ret));
    7892:	44 89 e0             	mov    %r12d,%eax
    7895:	48 8d 3d f1 2b 00 00 	lea    0x2bf1(%rip),%rdi        # a48d <default_cmd+0x122d>
    789c:	0f b6 f4             	movzbl %ah,%esi
    789f:	31 c0                	xor    %eax,%eax
    78a1:	e8 c7 ed ff ff       	callq  666d <posix_print_warning>
    78a6:	4c 89 f4             	mov    %r14,%rsp
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    78a9:	48 8d 05 13 fd ff ff 	lea    -0x2ed(%rip),%rax        # 75c3 <np_uart_tty_poll_in>
		d->in_fd = tty_fn;
    78b0:	41 89 5d 04          	mov    %ebx,0x4(%r13)
		d->out_fd = tty_fn;
    78b4:	41 89 5d 00          	mov    %ebx,0x0(%r13)
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    78b8:	48 89 05 41 4b 00 00 	mov    %rax,0x4b41(%rip)        # c400 <np_uart_driver_api_0>
}
    78bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    78c3:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    78ca:	00 00 
    78cc:	74 05                	je     78d3 <np_uart_0_init+0x2ca>
    78ce:	e8 dd ab ff ff       	callq  24b0 <__stack_chk_fail@plt>
    78d3:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    78d7:	31 c0                	xor    %eax,%eax
    78d9:	5b                   	pop    %rbx
    78da:	41 5c                	pop    %r12
    78dc:	41 5d                	pop    %r13
    78de:	41 5e                	pop    %r14
    78e0:	41 5f                	pop    %r15
    78e2:	5d                   	pop    %rbp
    78e3:	c3                   	retq   

00000000000078e4 <np_uart_poll_out>:
{
    78e4:	f3 0f 1e fa          	endbr64 
    78e8:	48 83 ec 18          	sub    $0x18,%rsp
	ret = write(d->out_fd, &out_char, 1);
    78ec:	48 8b 47 20          	mov    0x20(%rdi),%rax
    78f0:	ba 01 00 00 00       	mov    $0x1,%edx
{
    78f5:	40 88 74 24 0c       	mov    %sil,0xc(%rsp)
	ret = write(d->out_fd, &out_char, 1);
    78fa:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    78ff:	8b 38                	mov    (%rax),%edi
    7901:	e8 8a ab ff ff       	callq  2490 <write@plt>
}
    7906:	48 83 c4 18          	add    $0x18,%rsp
    790a:	c3                   	retq   

000000000000790b <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    790b:	f3 0f 1e fa          	endbr64 
	while (dev < __device_end) {
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
	}
}
    790f:	c3                   	retq   

0000000000007910 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7910:	f3 0f 1e fa          	endbr64 
    7914:	41 55                	push   %r13
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7916:	48 8d 05 83 42 00 00 	lea    0x4283(%rip),%rax        # bba0 <levels.4940>
{
    791d:	41 54                	push   %r12
    791f:	49 89 c4             	mov    %rax,%r12
    7922:	55                   	push   %rbp
    7923:	53                   	push   %rbx
    7924:	52                   	push   %rdx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7925:	48 63 d7             	movslq %edi,%rdx
    7928:	ff c7                	inc    %edi
    792a:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    792e:	48 63 df             	movslq %edi,%rbx
    7931:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    7935:	76 39                	jbe    7970 <z_sys_init_run_level+0x60>
		const struct device *dev = entry->dev;
    7937:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
		int rc = entry->init(dev);
    793b:	4c 89 ef             	mov    %r13,%rdi
    793e:	ff 55 00             	callq  *0x0(%rbp)

		if (dev != NULL) {
    7941:	4d 85 ed             	test   %r13,%r13
    7944:	74 24                	je     796a <z_sys_init_run_level+0x5a>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
    7946:	49 8b 55 18          	mov    0x18(%r13),%rdx
    794a:	85 c0                	test   %eax,%eax
    794c:	74 18                	je     7966 <z_sys_init_run_level+0x56>
				if (rc < 0) {
    794e:	89 c1                	mov    %eax,%ecx
    7950:	c1 f9 1f             	sar    $0x1f,%ecx
    7953:	31 c8                	xor    %ecx,%eax
    7955:	29 c8                	sub    %ecx,%eax
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7957:	b9 ff 00 00 00       	mov    $0xff,%ecx
    795c:	3d ff 00 00 00       	cmp    $0xff,%eax
    7961:	0f 4f c1             	cmovg  %ecx,%eax
    7964:	88 02                	mov    %al,(%rdx)
			}
			dev->state->initialized = true;
    7966:	80 4a 01 01          	orb    $0x1,0x1(%rdx)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    796a:	48 83 c5 10          	add    $0x10,%rbp
    796e:	eb c1                	jmp    7931 <z_sys_init_run_level+0x21>
		}
	}
}
    7970:	58                   	pop    %rax
    7971:	5b                   	pop    %rbx
    7972:	5d                   	pop    %rbp
    7973:	41 5c                	pop    %r12
    7975:	41 5d                	pop    %r13
    7977:	c3                   	retq   

0000000000007978 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
    7978:	f3 0f 1e fa          	endbr64 
	return dev->state->initialized && (dev->state->init_res == 0U);
    797c:	48 8b 47 18          	mov    0x18(%rdi),%rax
    7980:	8b 00                	mov    (%rax),%eax
    7982:	66 25 ff 01          	and    $0x1ff,%ax
    7986:	66 3d 00 01          	cmp    $0x100,%ax
    798a:	0f 94 c0             	sete   %al
}
    798d:	c3                   	retq   

000000000000798e <z_impl_device_get_binding>:
{
    798e:	f3 0f 1e fa          	endbr64 
    7992:	41 54                	push   %r12
    7994:	55                   	push   %rbp
    7995:	53                   	push   %rbx
	if ((name == NULL) || (name[0] == '\0')) {
    7996:	48 85 ff             	test   %rdi,%rdi
    7999:	75 05                	jne    79a0 <z_impl_device_get_binding+0x12>
		return NULL;
    799b:	45 31 e4             	xor    %r12d,%r12d
    799e:	eb 61                	jmp    7a01 <z_impl_device_get_binding+0x73>
	if ((name == NULL) || (name[0] == '\0')) {
    79a0:	80 3f 00             	cmpb   $0x0,(%rdi)
    79a3:	48 89 fb             	mov    %rdi,%rbx
    79a6:	74 f3                	je     799b <z_impl_device_get_binding+0xd>
	for (dev = __device_start; dev != __device_end; dev++) {
    79a8:	4c 8d 25 41 6f 00 00 	lea    0x6f41(%rip),%r12        # e8f0 <__device_dts_ord_10>
    79af:	4c 89 e5             	mov    %r12,%rbp
    79b2:	4c 3b 25 1f 46 00 00 	cmp    0x461f(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    79b9:	74 18                	je     79d3 <z_impl_device_get_binding+0x45>
		if (z_device_ready(dev) && (dev->name == name)) {
    79bb:	4c 89 e7             	mov    %r12,%rdi
    79be:	e8 b5 ff ff ff       	callq  7978 <z_device_ready>
    79c3:	84 c0                	test   %al,%al
    79c5:	74 06                	je     79cd <z_impl_device_get_binding+0x3f>
    79c7:	49 39 1c 24          	cmp    %rbx,(%r12)
    79cb:	74 34                	je     7a01 <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    79cd:	49 83 c4 30          	add    $0x30,%r12
    79d1:	eb df                	jmp    79b2 <z_impl_device_get_binding+0x24>
	for (dev = __device_start; dev != __device_end; dev++) {
    79d3:	49 89 ec             	mov    %rbp,%r12
    79d6:	4c 3b 25 fb 45 00 00 	cmp    0x45fb(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    79dd:	74 bc                	je     799b <z_impl_device_get_binding+0xd>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    79df:	4c 89 e7             	mov    %r12,%rdi
    79e2:	e8 91 ff ff ff       	callq  7978 <z_device_ready>
    79e7:	84 c0                	test   %al,%al
    79e9:	74 10                	je     79fb <z_impl_device_get_binding+0x6d>
    79eb:	49 8b 34 24          	mov    (%r12),%rsi
    79ef:	48 89 df             	mov    %rbx,%rdi
    79f2:	e8 49 ab ff ff       	callq  2540 <strcmp@plt>
    79f7:	85 c0                	test   %eax,%eax
    79f9:	74 06                	je     7a01 <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    79fb:	49 83 c4 30          	add    $0x30,%r12
    79ff:	eb d5                	jmp    79d6 <z_impl_device_get_binding+0x48>
}
    7a01:	4c 89 e0             	mov    %r12,%rax
    7a04:	5b                   	pop    %rbx
    7a05:	5d                   	pop    %rbp
    7a06:	41 5c                	pop    %r12
    7a08:	c3                   	retq   

0000000000007a09 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7a09:	f3 0f 1e fa          	endbr64 
    7a0d:	50                   	push   %rax
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7a0e:	48 8d 05 9f 7b 00 00 	lea    0x7b9f(%rip),%rax        # f5b4 <z_sys_post_kernel>

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7a15:	bf 02 00 00 00       	mov    $0x2,%edi
	z_sys_post_kernel = true;
    7a1a:	c6 00 01             	movb   $0x1,(%rax)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7a1d:	e8 ee fe ff ff       	callq  7910 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7a22:	e8 d9 0d 00 00       	callq  8800 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7a27:	bf 03 00 00 00       	mov    $0x3,%edi
    7a2c:	e8 df fe ff ff       	callq  7910 <z_sys_init_run_level>

	z_init_static_threads();
    7a31:	e8 15 0d 00 00       	callq  874b <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    7a36:	e8 4a b1 ff ff       	callq  2b85 <zephyr_app_main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7a3b:	48 8d 05 3e 79 00 00 	lea    0x793e(%rip),%rax        # f380 <z_main_thread>
    7a42:	80 60 18 fe          	andb   $0xfe,0x18(%rax)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7a46:	5a                   	pop    %rdx
    7a47:	c3                   	retq   

0000000000007a48 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    7a48:	f3 0f 1e fa          	endbr64 
    7a4c:	41 55                	push   %r13
    7a4e:	41 54                	push   %r12
    7a50:	55                   	push   %rbp
    7a51:	53                   	push   %rbx
    7a52:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7a59:	48 8d 1d c0 79 00 00 	lea    0x79c0(%rip),%rbx        # f420 <_kernel>
    7a60:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7a67:	00 00 
    7a69:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    7a70:	00 
    7a71:	31 c0                	xor    %eax,%eax
    7a73:	48 89 e0             	mov    %rsp,%rax
	dummy_thread->base.user_options = K_ESSENTIAL;
    7a76:	66 c7 44 24 18 01 01 	movw   $0x101,0x18(%rsp)
	_current_cpu->current = dummy_thread;
    7a7d:	48 89 43 10          	mov    %rax,0x10(%rbx)
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7a81:	e8 85 fe ff ff       	callq  790b <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    7a86:	31 ff                	xor    %edi,%edi
    7a88:	e8 83 fe ff ff       	callq  7910 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    7a8d:	bf 01 00 00 00       	mov    $0x1,%edi
    7a92:	e8 79 fe ff ff       	callq  7910 <z_sys_init_run_level>
	z_sched_init();
    7a97:	e8 af 09 00 00       	callq  844b <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7a9c:	45 31 c9             	xor    %r9d,%r9d
    7a9f:	45 31 c0             	xor    %r8d,%r8d
    7aa2:	ba 00 04 00 00       	mov    $0x400,%edx
	_kernel.ready_q.cache = &z_main_thread;
    7aa7:	48 8d 2d d2 78 00 00 	lea    0x78d2(%rip),%rbp        # f380 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7aae:	48 8d 05 96 2a 00 00 	lea    0x2a96(%rip),%rax        # a54b <default_cmd+0x12eb>
    7ab5:	48 8d 35 bc 61 00 00 	lea    0x61bc(%rip),%rsi        # dc78 <z_main_stack>
    7abc:	48 8d 0d 46 ff ff ff 	lea    -0xba(%rip),%rcx        # 7a09 <bg_thread_main>
	_kernel.ready_q.cache = &z_main_thread;
    7ac3:	48 89 6b 38          	mov    %rbp,0x38(%rbx)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7ac7:	48 89 ef             	mov    %rbp,%rdi
    7aca:	50                   	push   %rax
    7acb:	6a 01                	pushq  $0x1
    7acd:	6a 00                	pushq  $0x0
    7acf:	6a 00                	pushq  $0x0
    7ad1:	e8 d9 0b 00 00       	callq  86af <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7ad6:	80 65 19 fb          	andb   $0xfb,0x19(%rbp)
    7ada:	48 83 c4 20          	add    $0x20,%rsp
	z_ready_thread(&z_main_thread);
    7ade:	48 89 ef             	mov    %rbp,%rdi
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7ae1:	49 89 c5             	mov    %rax,%r13
	z_ready_thread(&z_main_thread);
    7ae4:	e8 57 08 00 00       	callq  8340 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    7ae9:	6a 00                	pushq  $0x0
    7aeb:	45 31 c9             	xor    %r9d,%r9d
    7aee:	49 89 d8             	mov    %rbx,%r8
    7af1:	6a 01                	pushq  $0x1
    7af3:	4c 8d 25 e6 77 00 00 	lea    0x77e6(%rip),%r12        # f2e0 <z_idle_threads>
    7afa:	ba 00 01 00 00       	mov    $0x100,%edx
    7aff:	48 8d 35 72 60 00 00 	lea    0x6072(%rip),%rsi        # db78 <z_idle_stacks>
    7b06:	6a 0f                	pushq  $0xf
    7b08:	48 8d 0d 51 10 00 00 	lea    0x1051(%rip),%rcx        # 8b60 <idle>
    7b0f:	6a 00                	pushq  $0x0
    7b11:	4c 89 e7             	mov    %r12,%rdi
    7b14:	e8 96 0b 00 00       	callq  86af <z_setup_new_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7b19:	4c 89 63 18          	mov    %r12,0x18(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7b1d:	4c 89 ee             	mov    %r13,%rsi
    7b20:	48 89 ef             	mov    %rbp,%rdi
		_kernel.cpus[i].irq_stack =
    7b23:	48 8d 05 4e 65 00 00 	lea    0x654e(%rip),%rax        # e078 <z_interrupt_stacks>
		_kernel.cpus[i].id = i;
    7b2a:	c6 43 24 00          	movb   $0x0,0x24(%rbx)
	z_setup_new_thread(thread, stack,
    7b2e:	48 83 c4 20          	add    $0x20,%rsp
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7b32:	48 8d 15 d0 fe ff ff 	lea    -0x130(%rip),%rdx        # 7a09 <bg_thread_main>
    7b39:	41 80 64 24 19 fb    	andb   $0xfb,0x19(%r12)
		_kernel.cpus[i].irq_stack =
    7b3f:	48 05 00 08 00 00    	add    $0x800,%rax
    7b45:	48 89 43 08          	mov    %rax,0x8(%rbx)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7b49:	48 8d 43 28          	lea    0x28(%rbx),%rax
    7b4d:	48 89 43 28          	mov    %rax,0x28(%rbx)
	list->tail = (sys_dnode_t *)list;
    7b51:	48 89 43 30          	mov    %rax,0x30(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7b55:	e8 2b db ff ff       	callq  5685 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7b5a:	ba 27 01 00 00       	mov    $0x127,%edx
    7b5f:	48 8d 35 ea 29 00 00 	lea    0x29ea(%rip),%rsi        # a550 <default_cmd+0x12f0>
    7b66:	31 c0                	xor    %eax,%eax
    7b68:	48 8d 3d 83 1b 00 00 	lea    0x1b83(%rip),%rdi        # 96f2 <default_cmd+0x492>
    7b6f:	e8 20 ea ff ff       	callq  6594 <posix_print_error_and_exit>

0000000000007b74 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    7b74:	f3 0f 1e fa          	endbr64 
    7b78:	41 57                	push   %r15
    7b7a:	41 56                	push   %r14
    7b7c:	49 89 d6             	mov    %rdx,%r14
    7b7f:	41 55                	push   %r13
    7b81:	41 54                	push   %r12
    7b83:	49 89 fc             	mov    %rdi,%r12
    7b86:	55                   	push   %rbp

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    7b87:	48 8d 6f 10          	lea    0x10(%rdi),%rbp
{
    7b8b:	48 83 ec 10          	sub    $0x10,%rsp
    7b8f:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    7b94:	e8 64 e6 ff ff       	callq  61fd <posix_irq_lock>

	if (msgq->used_msgs < msgq->max_msgs) {
    7b99:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    7b9e:	41 89 c5             	mov    %eax,%r13d
    7ba1:	41 8b 44 24 18       	mov    0x18(%r12),%eax
    7ba6:	41 39 44 24 40       	cmp    %eax,0x40(%r12)
    7bab:	73 6d                	jae    7c1a <z_impl_k_msgq_put+0xa6>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7bad:	4c 89 e7             	mov    %r12,%rdi
    7bb0:	e8 49 08 00 00       	callq  83fe <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7bb5:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    7bba:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    7bbf:	48 85 c0             	test   %rax,%rax
    7bc2:	74 25                	je     7be9 <z_impl_k_msgq_put+0x75>
    7bc4:	48 8b 78 20          	mov    0x20(%rax),%rdi
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
    7bc8:	45 31 ff             	xor    %r15d,%r15d
    7bcb:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->callee_saved.retval = value;
    7bcd:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
			z_ready_thread(pending_thread);
    7bd4:	48 89 c7             	mov    %rax,%rdi
    7bd7:	e8 64 07 00 00       	callq  8340 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    7bdc:	44 89 ee             	mov    %r13d,%esi
    7bdf:	48 89 ef             	mov    %rbp,%rdi
    7be2:	e8 5a 02 00 00       	callq  7e41 <z_reschedule>
			return 0;
    7be7:	eb 71                	jmp    7c5a <z_impl_k_msgq_put+0xe6>
    7be9:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7bee:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		} else {
			/* put message in queue */
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    7bf0:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7bf5:	49 03 44 24 38       	add    0x38(%r12),%rax
    7bfa:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    7bff:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7c04:	75 0a                	jne    7c10 <z_impl_k_msgq_put+0x9c>
				msgq->write_ptr = msgq->buffer_start;
    7c06:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7c0b:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			}
			msgq->used_msgs++;
    7c10:	41 ff 44 24 40       	incl   0x40(%r12)
		}
		result = 0;
    7c15:	45 31 ff             	xor    %r15d,%r15d
    7c18:	eb 38                	jmp    7c52 <z_impl_k_msgq_put+0xde>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for message space to become available */
		result = -ENOMSG;
    7c1a:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7c20:	4d 85 f6             	test   %r14,%r14
    7c23:	74 2d                	je     7c52 <z_impl_k_msgq_put+0xde>
	} else {
		/* wait for put message success, failure, or timeout */
		_current->base.swap_data = (void *) data;
    7c25:	48 8d 05 f4 77 00 00 	lea    0x77f4(%rip),%rax        # f420 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7c2c:	4c 89 f1             	mov    %r14,%rcx
    7c2f:	4c 89 e2             	mov    %r12,%rdx
    7c32:	48 89 ef             	mov    %rbp,%rdi
		_current->base.swap_data = (void *) data;
    7c35:	48 8b 40 10          	mov    0x10(%rax),%rax
    7c39:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7c3d:	48 83 c4 10          	add    $0x10,%rsp
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7c41:	44 89 ee             	mov    %r13d,%esi
}
    7c44:	5d                   	pop    %rbp
    7c45:	41 5c                	pop    %r12
    7c47:	41 5d                	pop    %r13
    7c49:	41 5e                	pop    %r14
    7c4b:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7c4d:	e9 0c 04 00 00       	jmpq   805e <z_pend_curr>
	posix_irq_unlock(key);
    7c52:	44 89 ef             	mov    %r13d,%edi
    7c55:	e8 b1 e5 ff ff       	callq  620b <posix_irq_unlock>
}
    7c5a:	48 83 c4 10          	add    $0x10,%rsp
    7c5e:	44 89 f8             	mov    %r15d,%eax
    7c61:	5d                   	pop    %rbp
    7c62:	41 5c                	pop    %r12
    7c64:	41 5d                	pop    %r13
    7c66:	41 5e                	pop    %r14
    7c68:	41 5f                	pop    %r15
    7c6a:	c3                   	retq   

0000000000007c6b <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    7c6b:	f3 0f 1e fa          	endbr64 
    7c6f:	41 57                	push   %r15
    7c71:	41 56                	push   %r14
    7c73:	49 89 d6             	mov    %rdx,%r14
    7c76:	41 55                	push   %r13

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    7c78:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
{
    7c7c:	41 54                	push   %r12
    7c7e:	49 89 fc             	mov    %rdi,%r12
    7c81:	55                   	push   %rbp
    7c82:	53                   	push   %rbx
    7c83:	48 89 f3             	mov    %rsi,%rbx
    7c86:	41 51                	push   %r9
	return posix_irq_lock();
    7c88:	e8 70 e5 ff ff       	callq  61fd <posix_irq_lock>

	if (msgq->used_msgs > 0U) {
    7c8d:	41 83 7c 24 40 00    	cmpl   $0x0,0x40(%r12)
    7c93:	89 c5                	mov    %eax,%ebp
    7c95:	0f 84 9f 00 00 00    	je     7d3a <z_impl_k_msgq_get+0xcf>
    7c9b:	49 8b 74 24 30       	mov    0x30(%r12),%rsi
    7ca0:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    7ca5:	48 89 df             	mov    %rbx,%rdi
    7ca8:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
    7caa:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7caf:	49 03 44 24 30       	add    0x30(%r12),%rax
    7cb4:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		if (msgq->read_ptr == msgq->buffer_end) {
    7cb9:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7cbe:	75 0a                	jne    7cca <z_impl_k_msgq_get+0x5f>
			msgq->read_ptr = msgq->buffer_start;
    7cc0:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7cc5:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		}
		msgq->used_msgs--;
    7cca:	41 ff 4c 24 40       	decl   0x40(%r12)

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7ccf:	4c 89 e7             	mov    %r12,%rdi
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
		}
		result = 0;
    7cd2:	45 31 ff             	xor    %r15d,%r15d
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7cd5:	e8 24 07 00 00       	callq  83fe <z_unpend_first_thread>
    7cda:	49 89 c0             	mov    %rax,%r8
		if (pending_thread != NULL) {
    7cdd:	48 85 c0             	test   %rax,%rax
    7ce0:	0f 84 8a 00 00 00    	je     7d70 <z_impl_k_msgq_get+0x105>
    7ce6:	48 8b 70 20          	mov    0x20(%rax),%rsi
    7cea:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7cef:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    7cf4:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
			msgq->write_ptr += msgq->msg_size;
    7cf6:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7cfb:	49 03 44 24 38       	add    0x38(%r12),%rax
    7d00:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    7d05:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7d0a:	75 0a                	jne    7d16 <z_impl_k_msgq_get+0xab>
				msgq->write_ptr = msgq->buffer_start;
    7d0c:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7d11:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			msgq->used_msgs++;
    7d16:	41 ff 44 24 40       	incl   0x40(%r12)
			z_ready_thread(pending_thread);
    7d1b:	4c 89 c7             	mov    %r8,%rdi
			return 0;
    7d1e:	45 31 ff             	xor    %r15d,%r15d
    7d21:	41 c7 40 4c 00 00 00 	movl   $0x0,0x4c(%r8)
    7d28:	00 
			z_ready_thread(pending_thread);
    7d29:	e8 12 06 00 00       	callq  8340 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    7d2e:	89 ee                	mov    %ebp,%esi
    7d30:	4c 89 ef             	mov    %r13,%rdi
    7d33:	e8 09 01 00 00       	callq  7e41 <z_reschedule>
			return 0;
    7d38:	eb 3d                	jmp    7d77 <z_impl_k_msgq_get+0x10c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for a message to become available */
		result = -ENOMSG;
    7d3a:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7d40:	4d 85 f6             	test   %r14,%r14
    7d43:	74 2b                	je     7d70 <z_impl_k_msgq_get+0x105>
	} else {
		/* wait for get message success or timeout */
		_current->base.swap_data = data;
    7d45:	48 8d 05 d4 76 00 00 	lea    0x76d4(%rip),%rax        # f420 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7d4c:	4c 89 f1             	mov    %r14,%rcx
    7d4f:	4c 89 e2             	mov    %r12,%rdx
    7d52:	89 ee                	mov    %ebp,%esi
    7d54:	4c 89 ef             	mov    %r13,%rdi
		_current->base.swap_data = data;
    7d57:	48 8b 40 10          	mov    0x10(%rax),%rax
    7d5b:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7d5f:	41 58                	pop    %r8
    7d61:	5b                   	pop    %rbx
    7d62:	5d                   	pop    %rbp
    7d63:	41 5c                	pop    %r12
    7d65:	41 5d                	pop    %r13
    7d67:	41 5e                	pop    %r14
    7d69:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7d6b:	e9 ee 02 00 00       	jmpq   805e <z_pend_curr>
	posix_irq_unlock(key);
    7d70:	89 ef                	mov    %ebp,%edi
    7d72:	e8 94 e4 ff ff       	callq  620b <posix_irq_unlock>
}
    7d77:	5a                   	pop    %rdx
    7d78:	44 89 f8             	mov    %r15d,%eax
    7d7b:	5b                   	pop    %rbx
    7d7c:	5d                   	pop    %rbp
    7d7d:	41 5c                	pop    %r12
    7d7f:	41 5d                	pop    %r13
    7d81:	41 5e                	pop    %r14
    7d83:	41 5f                	pop    %r15
    7d85:	c3                   	retq   

0000000000007d86 <z_sched_prio_cmp>:
 * Do not rely on the actual value returned aside from the above.
 * (Again, like memcmp.)
 */
int32_t z_sched_prio_cmp(struct k_thread *thread_1,
	struct k_thread *thread_2)
{
    7d86:	f3 0f 1e fa          	endbr64 
	/* `prio` is <32b, so the below cannot overflow. */
	int32_t b1 = thread_1->base.prio;
    7d8a:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	int32_t b2 = thread_2->base.prio;
    7d8e:	0f be 4e 1a          	movsbl 0x1a(%rsi),%ecx
		 * from UB on overflow to impdef.
		 */
		return (int32_t) (d2 - d1);
	}
#endif
	return 0;
    7d92:	31 c0                	xor    %eax,%eax
	if (b1 != b2) {
    7d94:	39 ca                	cmp    %ecx,%edx
    7d96:	74 04                	je     7d9c <z_sched_prio_cmp+0x16>
		return b2 - b1;
    7d98:	89 c8                	mov    %ecx,%eax
    7d9a:	29 d0                	sub    %edx,%eax
}
    7d9c:	c3                   	retq   

0000000000007d9d <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    7d9d:	f3 0f 1e fa          	endbr64 
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    7da1:	83 3d fc 77 00 00 00 	cmpl   $0x0,0x77fc(%rip)        # f5a4 <slice_time>
    7da8:	74 20                	je     7dca <z_reset_time_slice+0x2d>
{
    7daa:	50                   	push   %rax
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7dab:	e8 21 c0 ff ff       	callq  3dd1 <sys_clock_elapsed>
    7db0:	8b 3d ee 77 00 00    	mov    0x77ee(%rip),%edi        # f5a4 <slice_time>
    7db6:	48 8d 15 63 76 00 00 	lea    0x7663(%rip),%rdx        # f420 <_kernel>
		z_set_timeout_expiry(slice_time, false);
    7dbd:	31 f6                	xor    %esi,%esi
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7dbf:	01 f8                	add    %edi,%eax
    7dc1:	89 42 20             	mov    %eax,0x20(%rdx)
	}
}
    7dc4:	5a                   	pop    %rdx
		z_set_timeout_expiry(slice_time, false);
    7dc5:	e9 5b 0c 00 00       	jmpq   8a25 <z_set_timeout_expiry>
    7dca:	c3                   	retq   

0000000000007dcb <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7dcb:	f3 0f 1e fa          	endbr64 
    7dcf:	41 54                	push   %r12
    7dd1:	41 89 f4             	mov    %esi,%r12d
    7dd4:	55                   	push   %rbp
    7dd5:	53                   	push   %rbx
    7dd6:	89 fb                	mov    %edi,%ebx
	return posix_irq_lock();
    7dd8:	e8 20 e4 ff ff       	callq  61fd <posix_irq_lock>
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
    7ddd:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    7de2:	89 c5                	mov    %eax,%ebp
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    7de4:	48 8d 05 35 76 00 00 	lea    0x7635(%rip),%rax        # f420 <_kernel>
    7deb:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    7df2:	89 d8                	mov    %ebx,%eax
		t += off;
    7df4:	48 83 c0 09          	add    $0x9,%rax
		if (result32 && (t < BIT64(32))) {
    7df8:	48 39 d0             	cmp    %rdx,%rax
    7dfb:	77 0e                	ja     7e0b <k_sched_time_slice_set+0x40>
			return ((uint32_t)t) / (from_hz / to_hz);
    7dfd:	8d 43 09             	lea    0x9(%rbx),%eax
    7e00:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7e05:	31 d2                	xor    %edx,%edx
    7e07:	f7 f1                	div    %ecx
    7e09:	eb 0a                	jmp    7e15 <k_sched_time_slice_set+0x4a>
			return t / (from_hz / to_hz);
    7e0b:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7e10:	31 d2                	xor    %edx,%edx
    7e12:	48 f7 f1             	div    %rcx
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7e15:	85 db                	test   %ebx,%ebx
    7e17:	7e 0b                	jle    7e24 <k_sched_time_slice_set+0x59>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7e19:	83 f8 02             	cmp    $0x2,%eax
    7e1c:	ba 02 00 00 00       	mov    $0x2,%edx
    7e21:	0f 4c c2             	cmovl  %edx,%eax
		}
		slice_max_prio = prio;
    7e24:	44 89 25 75 77 00 00 	mov    %r12d,0x7775(%rip)        # f5a0 <slice_max_prio>
			slice_time = MAX(2, slice_time);
    7e2b:	89 05 73 77 00 00    	mov    %eax,0x7773(%rip)        # f5a4 <slice_time>
		z_reset_time_slice();
    7e31:	e8 67 ff ff ff       	callq  7d9d <z_reset_time_slice>
	}
}
    7e36:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    7e37:	89 ef                	mov    %ebp,%edi
    7e39:	5d                   	pop    %rbp
    7e3a:	41 5c                	pop    %r12
    7e3c:	e9 ca e3 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000007e41 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7e41:	f3 0f 1e fa          	endbr64 
}
#endif

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    7e45:	48 8d 05 d4 75 00 00 	lea    0x75d4(%rip),%rax        # f420 <_kernel>
	if (resched(key.key) && need_swap()) {
    7e4c:	89 f2                	mov    %esi,%edx
{
    7e4e:	89 f7                	mov    %esi,%edi
	if (resched(key.key) && need_swap()) {
    7e50:	0b 10                	or     (%rax),%edx
    7e52:	75 11                	jne    7e65 <z_reschedule+0x24>
    7e54:	48 8b 48 10          	mov    0x10(%rax),%rcx
    7e58:	48 39 48 38          	cmp    %rcx,0x38(%rax)
    7e5c:	74 07                	je     7e65 <z_reschedule+0x24>
	ret = arch_swap(key);
    7e5e:	31 ff                	xor    %edi,%edi
    7e60:	e9 d6 d7 ff ff       	jmpq   563b <arch_swap>
    7e65:	e9 a1 e3 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000007e6a <z_reschedule_irqlock>:
		k_spin_unlock(lock, key);
	}
}

void z_reschedule_irqlock(uint32_t key)
{
    7e6a:	f3 0f 1e fa          	endbr64 
	if (resched(key)) {
    7e6e:	48 8d 05 ab 75 00 00 	lea    0x75ab(%rip),%rax        # f420 <_kernel>
    7e75:	89 fa                	mov    %edi,%edx
    7e77:	0b 10                	or     (%rax),%edx
    7e79:	75 07                	jne    7e82 <z_reschedule_irqlock+0x18>
    7e7b:	31 ff                	xor    %edi,%edi
    7e7d:	e9 b9 d7 ff ff       	jmpq   563b <arch_swap>
    7e82:	e9 84 e3 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000007e87 <z_reschedule_unlocked>:
{
    7e87:	50                   	push   %rax
	return posix_irq_lock();
    7e88:	e8 70 e3 ff ff       	callq  61fd <posix_irq_lock>
}
    7e8d:	5a                   	pop    %rdx
    7e8e:	89 c7                	mov    %eax,%edi
	(void) z_reschedule_irqlock(arch_irq_lock());
    7e90:	e9 d5 ff ff ff       	jmpq   7e6a <z_reschedule_irqlock>

0000000000007e95 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7e95:	f3 0f 1e fa          	endbr64 
    7e99:	50                   	push   %rax
    7e9a:	e8 5e e3 ff ff       	callq  61fd <posix_irq_lock>
    7e9f:	89 c7                	mov    %eax,%edi
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7ea1:	48 8d 05 78 75 00 00 	lea    0x7578(%rip),%rax        # f420 <_kernel>
    7ea8:	48 8b 40 10          	mov    0x10(%rax),%rax
    7eac:	fe 48 1b             	decb   0x1b(%rax)
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    7eaf:	5a                   	pop    %rdx
	posix_irq_unlock(key);
    7eb0:	e9 56 e3 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000007eb5 <z_priq_dumb_remove>:

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    7eb5:	f3 0f 1e fa          	endbr64 
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7eb9:	48 8b 56 08          	mov    0x8(%rsi),%rdx
	sys_dnode_t *const next = node->next;
    7ebd:	48 8b 06             	mov    (%rsi),%rax

	prev->next = next;
    7ec0:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    7ec3:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    7ec7:	48 c7 06 00 00 00 00 	movq   $0x0,(%rsi)
	node->prev = NULL;
    7ece:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
    7ed5:	00 
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7ed6:	c3                   	retq   

0000000000007ed7 <unpend_thread_no_timeout>:
{
    7ed7:	53                   	push   %rbx
    7ed8:	48 89 fb             	mov    %rdi,%rbx
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7edb:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    7edf:	48 89 de             	mov    %rbx,%rsi
    7ee2:	e8 ce ff ff ff       	callq  7eb5 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7ee7:	80 63 19 fd          	andb   $0xfd,0x19(%rbx)
	thread->base.pended_on = NULL;
    7eeb:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    7ef2:	00 
}
    7ef3:	5b                   	pop    %rbx
    7ef4:	c3                   	retq   

0000000000007ef5 <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    7ef5:	f3 0f 1e fa          	endbr64 
	return list->head == list;
    7ef9:	48 8b 07             	mov    (%rdi),%rax
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
    7efc:	48 85 c0             	test   %rax,%rax
    7eff:	74 05                	je     7f06 <z_priq_dumb_best+0x11>
    7f01:	48 39 c7             	cmp    %rax,%rdi
    7f04:	75 02                	jne    7f08 <z_priq_dumb_best+0x13>
	struct k_thread *thread = NULL;
    7f06:	31 c0                	xor    %eax,%eax
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    7f08:	c3                   	retq   

0000000000007f09 <update_cache>:
{
    7f09:	41 54                	push   %r12
    7f0b:	41 89 fc             	mov    %edi,%r12d
    7f0e:	55                   	push   %rbp
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7f0f:	48 8d 2d 0a 75 00 00 	lea    0x750a(%rip),%rbp        # f420 <_kernel>
{
    7f16:	53                   	push   %rbx
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7f17:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7f1b:	e8 d5 ff ff ff       	callq  7ef5 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f20:	48 89 c3             	mov    %rax,%rbx
    7f23:	48 85 c0             	test   %rax,%rax
    7f26:	75 04                	jne    7f2c <update_cache+0x23>
    7f28:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
	if (preempt_ok != 0) {
    7f2c:	48 8b 45 10          	mov    0x10(%rbp),%rax
    7f30:	45 85 e4             	test   %r12d,%r12d
    7f33:	75 13                	jne    7f48 <update_cache+0x3f>
	if (z_is_thread_prevented_from_running(_current)) {
    7f35:	f6 40 19 1f          	testb  $0x1f,0x19(%rax)
    7f39:	75 0d                	jne    7f48 <update_cache+0x3f>
	if (is_preempt(_current) || is_metairq(thread)) {
    7f3b:	66 83 78 1a 7f       	cmpw   $0x7f,0x1a(%rax)
    7f40:	76 06                	jbe    7f48 <update_cache+0x3f>
		_kernel.ready_q.cache = _current;
    7f42:	48 89 45 38          	mov    %rax,0x38(%rbp)
    7f46:	eb 0e                	jmp    7f56 <update_cache+0x4d>
		if (thread != _current) {
    7f48:	48 39 c3             	cmp    %rax,%rbx
    7f4b:	74 05                	je     7f52 <update_cache+0x49>
			z_reset_time_slice();
    7f4d:	e8 4b fe ff ff       	callq  7d9d <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7f52:	48 89 5d 38          	mov    %rbx,0x38(%rbp)
}
    7f56:	5b                   	pop    %rbx
    7f57:	5d                   	pop    %rbp
    7f58:	41 5c                	pop    %r12
    7f5a:	c3                   	retq   

0000000000007f5b <unready_thread>:
{
    7f5b:	55                   	push   %rbp
    7f5c:	53                   	push   %rbx
    7f5d:	48 89 fb             	mov    %rdi,%rbx
    7f60:	52                   	push   %rdx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7f61:	8a 47 19             	mov    0x19(%rdi),%al
	return (thread->base.thread_state & state) != 0U;
    7f64:	48 8d 2d b5 74 00 00 	lea    0x74b5(%rip),%rbp        # f420 <_kernel>
	if (z_is_thread_queued(thread)) {
    7f6b:	84 c0                	test   %al,%al
    7f6d:	79 12                	jns    7f81 <unready_thread+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f6f:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7f72:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f75:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    7f78:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7f7c:	e8 34 ff ff ff       	callq  7eb5 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7f81:	31 ff                	xor    %edi,%edi
    7f83:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
}
    7f87:	58                   	pop    %rax
	update_cache(thread == _current);
    7f88:	40 0f 94 c7          	sete   %dil
}
    7f8c:	5b                   	pop    %rbx
    7f8d:	5d                   	pop    %rbp
	update_cache(thread == _current);
    7f8e:	e9 76 ff ff ff       	jmpq   7f09 <update_cache>

0000000000007f93 <add_to_waitq_locked>:
{
    7f93:	41 54                	push   %r12
    7f95:	55                   	push   %rbp
    7f96:	48 89 f5             	mov    %rsi,%rbp
    7f99:	53                   	push   %rbx
    7f9a:	48 89 fb             	mov    %rdi,%rbx
	unready_thread(thread);
    7f9d:	e8 b9 ff ff ff       	callq  7f5b <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7fa2:	80 4b 19 02          	orb    $0x2,0x19(%rbx)
	if (wait_q != NULL) {
    7fa6:	48 85 ed             	test   %rbp,%rbp
    7fa9:	74 5a                	je     8005 <add_to_waitq_locked+0x72>
    7fab:	4c 8b 65 00          	mov    0x0(%rbp),%r12
		thread->base.pended_on = wait_q;
    7faf:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fb3:	4d 85 e4             	test   %r12,%r12
    7fb6:	74 05                	je     7fbd <add_to_waitq_locked+0x2a>
    7fb8:	4c 39 e5             	cmp    %r12,%rbp
    7fbb:	75 14                	jne    7fd1 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    7fbd:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = list;
    7fc1:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = tail;
    7fc4:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7fc8:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7fcb:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    7fcf:	eb 34                	jmp    8005 <add_to_waitq_locked+0x72>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7fd1:	4c 89 e6             	mov    %r12,%rsi
    7fd4:	48 89 df             	mov    %rbx,%rdi
    7fd7:	e8 aa fd ff ff       	callq  7d86 <z_sched_prio_cmp>
    7fdc:	85 c0                	test   %eax,%eax
    7fde:	7e 16                	jle    7ff6 <add_to_waitq_locked+0x63>
	sys_dnode_t *const prev = successor->prev;
    7fe0:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    7fe5:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    7fe8:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    7fec:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    7fef:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    7ff4:	eb 0f                	jmp    8005 <add_to_waitq_locked+0x72>
	return (node == list->tail) ? NULL : node->next;
    7ff6:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
    7ffa:	74 c1                	je     7fbd <add_to_waitq_locked+0x2a>
    7ffc:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8000:	4d 85 e4             	test   %r12,%r12
    8003:	eb b6                	jmp    7fbb <add_to_waitq_locked+0x28>
}
    8005:	5b                   	pop    %rbx
    8006:	5d                   	pop    %rbp
    8007:	41 5c                	pop    %r12
    8009:	c3                   	retq   

000000000000800a <pend>:
{
    800a:	55                   	push   %rbp
    800b:	53                   	push   %rbx
    800c:	48 89 fb             	mov    %rdi,%rbx
    800f:	48 83 ec 18          	sub    $0x18,%rsp
    8013:	48 89 14 24          	mov    %rdx,(%rsp)
    8017:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    801c:	e8 dc e1 ff ff       	callq  61fd <posix_irq_lock>
		add_to_waitq_locked(thread, wait_q);
    8021:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    8026:	48 89 df             	mov    %rbx,%rdi
    8029:	89 c5                	mov    %eax,%ebp
    802b:	e8 63 ff ff ff       	callq  7f93 <add_to_waitq_locked>
	posix_irq_unlock(key);
    8030:	89 ef                	mov    %ebp,%edi
    8032:	e8 d4 e1 ff ff       	callq  620b <posix_irq_unlock>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8037:	48 8b 14 24          	mov    (%rsp),%rdx
    803b:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    803f:	74 16                	je     8057 <pend+0x4d>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8041:	48 8d 35 74 03 00 00 	lea    0x374(%rip),%rsi        # 83bc <z_thread_timeout>
}
    8048:	48 83 c4 18          	add    $0x18,%rsp
    804c:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
    8050:	5b                   	pop    %rbx
    8051:	5d                   	pop    %rbp
    8052:	e9 70 08 00 00       	jmpq   88c7 <z_add_timeout>
    8057:	48 83 c4 18          	add    $0x18,%rsp
    805b:	5b                   	pop    %rbx
    805c:	5d                   	pop    %rbp
    805d:	c3                   	retq   

000000000000805e <z_pend_curr>:
{
    805e:	f3 0f 1e fa          	endbr64 
	pend(_current, wait_q, timeout);
    8062:	48 8d 05 b7 73 00 00 	lea    0x73b7(%rip),%rax        # f420 <_kernel>
{
    8069:	55                   	push   %rbp
    806a:	89 f5                	mov    %esi,%ebp
    806c:	48 89 d6             	mov    %rdx,%rsi
    806f:	48 89 ca             	mov    %rcx,%rdx
	pend(_current, wait_q, timeout);
    8072:	48 8b 78 10          	mov    0x10(%rax),%rdi
    8076:	e8 8f ff ff ff       	callq  800a <pend>
    807b:	89 ef                	mov    %ebp,%edi
}
    807d:	5d                   	pop    %rbp
    807e:	e9 b8 d5 ff ff       	jmpq   563b <arch_swap>

0000000000008083 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    8083:	41 55                	push   %r13
    8085:	41 54                	push   %r12
    8087:	55                   	push   %rbp
    8088:	53                   	push   %rbx
    8089:	48 89 fb             	mov    %rdi,%rbx
    808c:	50                   	push   %rax
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    808d:	e8 c2 0a 00 00       	callq  8b54 <sys_clock_tick_get_32>
    8092:	89 c5                	mov    %eax,%ebp
	return posix_irq_lock();
    8094:	e8 64 e1 ff ff       	callq  61fd <posix_irq_lock>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    8099:	4c 8d 2d 80 73 00 00 	lea    0x7380(%rip),%r13        # f420 <_kernel>
    80a0:	41 89 c4             	mov    %eax,%r12d
    80a3:	49 8b 7d 10          	mov    0x10(%r13),%rdi
    80a7:	e8 af fe ff ff       	callq  7f5b <unready_thread>
    80ac:	49 8b 45 10          	mov    0x10(%r13),%rax
    80b0:	48 8d 35 05 03 00 00 	lea    0x305(%rip),%rsi        # 83bc <z_thread_timeout>
    80b7:	48 89 da             	mov    %rbx,%rdx

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    80ba:	01 eb                	add    %ebp,%ebx
    80bc:	48 8d 78 28          	lea    0x28(%rax),%rdi
    80c0:	e8 02 08 00 00       	callq  88c7 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    80c5:	49 8b 45 10          	mov    0x10(%r13),%rax
    80c9:	44 89 e7             	mov    %r12d,%edi
	thread->base.thread_state |= _THREAD_SUSPENDED;
    80cc:	80 48 19 10          	orb    $0x10,0x19(%rax)
    80d0:	e8 66 d5 ff ff       	callq  563b <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    80d5:	e8 7a 0a 00 00       	callq  8b54 <sys_clock_tick_get_32>
	if (ticks > 0) {
    80da:	ba 00 00 00 00       	mov    $0x0,%edx
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    80df:	89 c0                	mov    %eax,%eax
    80e1:	48 29 c3             	sub    %rax,%rbx
    80e4:	48 89 d8             	mov    %rbx,%rax
    80e7:	48 0f 48 c2          	cmovs  %rdx,%rax
		return ticks;
	}
#endif

	return 0;
}
    80eb:	5a                   	pop    %rdx
    80ec:	5b                   	pop    %rbx
    80ed:	5d                   	pop    %rbp
    80ee:	41 5c                	pop    %r12
    80f0:	41 5d                	pop    %r13
    80f2:	c3                   	retq   

00000000000080f3 <z_impl_k_thread_suspend>:
{
    80f3:	f3 0f 1e fa          	endbr64 
    80f7:	41 54                	push   %r12
    80f9:	55                   	push   %rbp
    80fa:	53                   	push   %rbx
    80fb:	48 89 fb             	mov    %rdi,%rbx
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    80fe:	48 83 c7 28          	add    $0x28,%rdi
    8102:	e8 dc 08 00 00       	callq  89e3 <z_abort_timeout>
    8107:	e8 f1 e0 ff ff       	callq  61fd <posix_irq_lock>
    810c:	48 8d 2d 0d 73 00 00 	lea    0x730d(%rip),%rbp        # f420 <_kernel>
    8113:	41 89 c4             	mov    %eax,%r12d
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8116:	8a 43 19             	mov    0x19(%rbx),%al
		if (z_is_thread_queued(thread)) {
    8119:	84 c0                	test   %al,%al
    811b:	79 12                	jns    812f <z_impl_k_thread_suspend+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    811d:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    8120:	48 89 de             	mov    %rbx,%rsi
    8123:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8127:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    812a:	e8 86 fd ff ff       	callq  7eb5 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    812f:	80 4b 19 10          	orb    $0x10,0x19(%rbx)
		update_cache(thread == _current);
    8133:	31 ff                	xor    %edi,%edi
    8135:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    8139:	40 0f 94 c7          	sete   %dil
    813d:	e8 c7 fd ff ff       	callq  7f09 <update_cache>
	posix_irq_unlock(key);
    8142:	44 89 e7             	mov    %r12d,%edi
    8145:	e8 c1 e0 ff ff       	callq  620b <posix_irq_unlock>
	if (thread == _current) {
    814a:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    814e:	75 09                	jne    8159 <z_impl_k_thread_suspend+0x66>
}
    8150:	5b                   	pop    %rbx
    8151:	5d                   	pop    %rbp
    8152:	41 5c                	pop    %r12
		z_reschedule_unlocked();
    8154:	e9 2e fd ff ff       	jmpq   7e87 <z_reschedule_unlocked>
}
    8159:	5b                   	pop    %rbx
    815a:	5d                   	pop    %rbp
    815b:	41 5c                	pop    %r12
    815d:	c3                   	retq   

000000000000815e <k_sched_unlock>:
{
    815e:	f3 0f 1e fa          	endbr64 
    8162:	55                   	push   %rbp
	return posix_irq_lock();
    8163:	e8 95 e0 ff ff       	callq  61fd <posix_irq_lock>
		update_cache(0);
    8168:	31 ff                	xor    %edi,%edi
    816a:	89 c5                	mov    %eax,%ebp
		++_current->base.sched_locked;
    816c:	48 8d 05 ad 72 00 00 	lea    0x72ad(%rip),%rax        # f420 <_kernel>
    8173:	48 8b 40 10          	mov    0x10(%rax),%rax
    8177:	fe 40 1b             	incb   0x1b(%rax)
		update_cache(0);
    817a:	e8 8a fd ff ff       	callq  7f09 <update_cache>
	posix_irq_unlock(key);
    817f:	89 ef                	mov    %ebp,%edi
    8181:	e8 85 e0 ff ff       	callq  620b <posix_irq_unlock>
}
    8186:	5d                   	pop    %rbp
	z_reschedule_unlocked();
    8187:	e9 fb fc ff ff       	jmpq   7e87 <z_reschedule_unlocked>

000000000000818c <move_thread_to_end_of_prio_q>:
{
    818c:	41 54                	push   %r12
    818e:	4c 8d 25 8b 72 00 00 	lea    0x728b(%rip),%r12        # f420 <_kernel>
    8195:	55                   	push   %rbp
    8196:	53                   	push   %rbx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    8197:	8a 47 19             	mov    0x19(%rdi),%al
    819a:	48 89 fb             	mov    %rdi,%rbx
	if (z_is_thread_queued(thread)) {
    819d:	84 c0                	test   %al,%al
    819f:	79 13                	jns    81b4 <move_thread_to_end_of_prio_q+0x28>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81a1:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    81a4:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81a7:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    81aa:	49 8d 7c 24 40       	lea    0x40(%r12),%rdi
    81af:	e8 01 fd ff ff       	callq  7eb5 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    81b4:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    81b8:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    81bd:	48 85 ed             	test   %rbp,%rbp
    81c0:	74 0a                	je     81cc <move_thread_to_end_of_prio_q+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81c2:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    81c7:	48 39 c5             	cmp    %rax,%rbp
    81ca:	75 1b                	jne    81e7 <move_thread_to_end_of_prio_q+0x5b>
	sys_dnode_t *const tail = list->tail;
    81cc:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    81d1:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    81d6:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    81d9:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    81dd:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    81e0:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    81e5:	eb 33                	jmp    821a <move_thread_to_end_of_prio_q+0x8e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    81e7:	48 89 ee             	mov    %rbp,%rsi
    81ea:	48 89 df             	mov    %rbx,%rdi
    81ed:	e8 94 fb ff ff       	callq  7d86 <z_sched_prio_cmp>
    81f2:	85 c0                	test   %eax,%eax
    81f4:	7e 14                	jle    820a <move_thread_to_end_of_prio_q+0x7e>
	sys_dnode_t *const prev = successor->prev;
    81f6:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    81fa:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    81fd:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    8201:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    8204:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    8208:	eb 10                	jmp    821a <move_thread_to_end_of_prio_q+0x8e>
	return (node == list->tail) ? NULL : node->next;
    820a:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    820f:	74 bb                	je     81cc <move_thread_to_end_of_prio_q+0x40>
    8211:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8215:	48 85 ed             	test   %rbp,%rbp
    8218:	eb b0                	jmp    81ca <move_thread_to_end_of_prio_q+0x3e>
	update_cache(thread == _current);
    821a:	31 ff                	xor    %edi,%edi
    821c:	49 39 5c 24 10       	cmp    %rbx,0x10(%r12)
}
    8221:	5b                   	pop    %rbx
	update_cache(thread == _current);
    8222:	40 0f 94 c7          	sete   %dil
}
    8226:	5d                   	pop    %rbp
    8227:	41 5c                	pop    %r12
	update_cache(thread == _current);
    8229:	e9 db fc ff ff       	jmpq   7f09 <update_cache>

000000000000822e <z_time_slice>:
{
    822e:	f3 0f 1e fa          	endbr64 
    8232:	55                   	push   %rbp
    8233:	53                   	push   %rbx
    8234:	89 fb                	mov    %edi,%ebx
    8236:	52                   	push   %rdx
	return posix_irq_lock();
    8237:	e8 c1 df ff ff       	callq  61fd <posix_irq_lock>
	if (slice_time && sliceable(_current)) {
    823c:	83 3d 61 73 00 00 00 	cmpl   $0x0,0x7361(%rip)        # f5a4 <slice_time>
    8243:	89 c5                	mov    %eax,%ebp
    8245:	48 8d 05 d4 71 00 00 	lea    0x71d4(%rip),%rax        # f420 <_kernel>
    824c:	74 40                	je     828e <z_time_slice+0x60>
    824e:	48 8b 78 10          	mov    0x10(%rax),%rdi
		&& !z_is_idle_thread_object(thread);
    8252:	66 83 7f 1a 7f       	cmpw   $0x7f,0x1a(%rdi)
    8257:	77 35                	ja     828e <z_time_slice+0x60>
		&& !z_is_thread_prevented_from_running(thread)
    8259:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
    825d:	75 2f                	jne    828e <z_time_slice+0x60>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    825f:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
		&& !z_is_idle_thread_object(thread);
    8263:	39 15 37 73 00 00    	cmp    %edx,0x7337(%rip)        # f5a0 <slice_max_prio>
    8269:	7f 23                	jg     828e <z_time_slice+0x60>
    826b:	48 3b 3d 3e 3d 00 00 	cmp    0x3d3e(%rip),%rdi        # bfb0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
    8272:	74 1a                	je     828e <z_time_slice+0x60>
		if (ticks >= _current_cpu->slice_ticks) {
    8274:	8b 50 20             	mov    0x20(%rax),%edx
    8277:	39 da                	cmp    %ebx,%edx
    8279:	7f 0c                	jg     8287 <z_time_slice+0x59>
			move_thread_to_end_of_prio_q(_current);
    827b:	e8 0c ff ff ff       	callq  818c <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    8280:	e8 18 fb ff ff       	callq  7d9d <z_reset_time_slice>
    8285:	eb 0e                	jmp    8295 <z_time_slice+0x67>
			_current_cpu->slice_ticks -= ticks;
    8287:	29 da                	sub    %ebx,%edx
    8289:	89 50 20             	mov    %edx,0x20(%rax)
    828c:	eb 07                	jmp    8295 <z_time_slice+0x67>
		_current_cpu->slice_ticks = 0;
    828e:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
}
    8295:	58                   	pop    %rax
	posix_irq_unlock(key);
    8296:	89 ef                	mov    %ebp,%edi
    8298:	5b                   	pop    %rbx
    8299:	5d                   	pop    %rbp
    829a:	e9 6c df ff ff       	jmpq   620b <posix_irq_unlock>

000000000000829f <ready_thread>:
    829f:	8a 47 19             	mov    0x19(%rdi),%al
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    82a2:	84 c0                	test   %al,%al
    82a4:	0f 88 95 00 00 00    	js     833f <ready_thread+0xa0>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    82aa:	a8 1f                	test   $0x1f,%al
    82ac:	0f 85 8d 00 00 00    	jne    833f <ready_thread+0xa0>
{
    82b2:	41 54                	push   %r12
    82b4:	55                   	push   %rbp
    82b5:	53                   	push   %rbx
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    82b6:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
    82bb:	48 89 fb             	mov    %rdi,%rbx
    82be:	75 7a                	jne    833a <ready_thread+0x9b>
	return list->head == list;
    82c0:	4c 8d 25 59 71 00 00 	lea    0x7159(%rip),%r12        # f420 <_kernel>
	thread->base.thread_state |= _THREAD_QUEUED;
    82c7:	83 c8 80             	or     $0xffffff80,%eax
    82ca:	88 47 19             	mov    %al,0x19(%rdi)
    82cd:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    82d2:	48 85 ed             	test   %rbp,%rbp
    82d5:	74 0a                	je     82e1 <ready_thread+0x42>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82d7:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    82dc:	48 39 c5             	cmp    %rax,%rbp
    82df:	75 1b                	jne    82fc <ready_thread+0x5d>
	sys_dnode_t *const tail = list->tail;
    82e1:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    82e6:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    82eb:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    82ee:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    82f2:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    82f5:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    82fa:	eb 33                	jmp    832f <ready_thread+0x90>
		if (z_sched_prio_cmp(thread, t) > 0) {
    82fc:	48 89 ee             	mov    %rbp,%rsi
    82ff:	48 89 df             	mov    %rbx,%rdi
    8302:	e8 7f fa ff ff       	callq  7d86 <z_sched_prio_cmp>
    8307:	85 c0                	test   %eax,%eax
    8309:	7e 14                	jle    831f <ready_thread+0x80>
	sys_dnode_t *const prev = successor->prev;
    830b:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    830f:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    8312:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    8316:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    8319:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    831d:	eb 10                	jmp    832f <ready_thread+0x90>
	return (node == list->tail) ? NULL : node->next;
    831f:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    8324:	74 bb                	je     82e1 <ready_thread+0x42>
    8326:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    832a:	48 85 ed             	test   %rbp,%rbp
    832d:	eb b0                	jmp    82df <ready_thread+0x40>
}
    832f:	5b                   	pop    %rbx
		update_cache(0);
    8330:	31 ff                	xor    %edi,%edi
}
    8332:	5d                   	pop    %rbp
    8333:	41 5c                	pop    %r12
		update_cache(0);
    8335:	e9 cf fb ff ff       	jmpq   7f09 <update_cache>
}
    833a:	5b                   	pop    %rbx
    833b:	5d                   	pop    %rbp
    833c:	41 5c                	pop    %r12
    833e:	c3                   	retq   
    833f:	c3                   	retq   

0000000000008340 <z_ready_thread>:
{
    8340:	f3 0f 1e fa          	endbr64 
    8344:	55                   	push   %rbp
    8345:	48 83 ec 10          	sub    $0x10,%rsp
    8349:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    834e:	e8 aa de ff ff       	callq  61fd <posix_irq_lock>
			ready_thread(thread);
    8353:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8358:	89 c5                	mov    %eax,%ebp
    835a:	e8 40 ff ff ff       	callq  829f <ready_thread>
}
    835f:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    8363:	89 ef                	mov    %ebp,%edi
    8365:	5d                   	pop    %rbp
    8366:	e9 a0 de ff ff       	jmpq   620b <posix_irq_unlock>

000000000000836b <z_sched_start>:
{
    836b:	f3 0f 1e fa          	endbr64 
    836f:	41 54                	push   %r12
    8371:	48 83 ec 10          	sub    $0x10,%rsp
    8375:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    837a:	e8 7e de ff ff       	callq  61fd <posix_irq_lock>
	if (z_has_thread_started(thread)) {
    837f:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8384:	41 89 c4             	mov    %eax,%r12d
    8387:	8a 47 19             	mov    0x19(%rdi),%al
    838a:	a8 04                	test   $0x4,%al
    838c:	75 0e                	jne    839c <z_sched_start+0x31>
}
    838e:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    8392:	44 89 e7             	mov    %r12d,%edi
    8395:	41 5c                	pop    %r12
    8397:	e9 6f de ff ff       	jmpq   620b <posix_irq_unlock>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    839c:	83 e0 fb             	and    $0xfffffffb,%eax
    839f:	88 47 19             	mov    %al,0x19(%rdi)
	ready_thread(thread);
    83a2:	e8 f8 fe ff ff       	callq  829f <ready_thread>
	z_reschedule(&sched_spinlock, key);
    83a7:	48 8d 3d 07 72 00 00 	lea    0x7207(%rip),%rdi        # f5b5 <sched_spinlock>
}
    83ae:	48 83 c4 10          	add    $0x10,%rsp
	z_reschedule(&sched_spinlock, key);
    83b2:	44 89 e6             	mov    %r12d,%esi
}
    83b5:	41 5c                	pop    %r12
	z_reschedule(&sched_spinlock, key);
    83b7:	e9 85 fa ff ff       	jmpq   7e41 <z_reschedule>

00000000000083bc <z_thread_timeout>:
{
    83bc:	f3 0f 1e fa          	endbr64 
    83c0:	41 54                	push   %r12
    83c2:	55                   	push   %rbp
    83c3:	53                   	push   %rbx
    83c4:	48 89 fb             	mov    %rdi,%rbx
	return posix_irq_lock();
    83c7:	e8 31 de ff ff       	callq  61fd <posix_irq_lock>
    83cc:	89 c5                	mov    %eax,%ebp
		if (!killed) {
    83ce:	f6 43 f1 28          	testb  $0x28,-0xf(%rbx)
    83d2:	75 1f                	jne    83f3 <z_thread_timeout+0x37>
			if (thread->base.pended_on != NULL) {
    83d4:	48 83 7b e8 00       	cmpq   $0x0,-0x18(%rbx)
	struct k_thread *thread = CONTAINER_OF(timeout,
    83d9:	4c 8d 63 d8          	lea    -0x28(%rbx),%r12
			if (thread->base.pended_on != NULL) {
    83dd:	74 08                	je     83e7 <z_thread_timeout+0x2b>
				unpend_thread_no_timeout(thread);
    83df:	4c 89 e7             	mov    %r12,%rdi
    83e2:	e8 f0 fa ff ff       	callq  7ed7 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    83e7:	80 63 f1 eb          	andb   $0xeb,-0xf(%rbx)
			ready_thread(thread);
    83eb:	4c 89 e7             	mov    %r12,%rdi
    83ee:	e8 ac fe ff ff       	callq  829f <ready_thread>
}
    83f3:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    83f4:	89 ef                	mov    %ebp,%edi
    83f6:	5d                   	pop    %rbp
    83f7:	41 5c                	pop    %r12
    83f9:	e9 0d de ff ff       	jmpq   620b <posix_irq_unlock>

00000000000083fe <z_unpend_first_thread>:
{
    83fe:	f3 0f 1e fa          	endbr64 
    8402:	41 54                	push   %r12
    8404:	55                   	push   %rbp
    8405:	48 83 ec 18          	sub    $0x18,%rsp
    8409:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    840e:	e8 ea dd ff ff       	callq  61fd <posix_irq_lock>
		thread = _priq_wait_best(&wait_q->waitq);
    8413:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8418:	89 c5                	mov    %eax,%ebp
    841a:	e8 d6 fa ff ff       	callq  7ef5 <z_priq_dumb_best>
    841f:	49 89 c4             	mov    %rax,%r12
		if (thread != NULL) {
    8422:	48 85 c0             	test   %rax,%rax
    8425:	74 12                	je     8439 <z_unpend_first_thread+0x3b>
			unpend_thread_no_timeout(thread);
    8427:	48 89 c7             	mov    %rax,%rdi
    842a:	e8 a8 fa ff ff       	callq  7ed7 <unpend_thread_no_timeout>
    842f:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
    8434:	e8 aa 05 00 00       	callq  89e3 <z_abort_timeout>
	posix_irq_unlock(key);
    8439:	89 ef                	mov    %ebp,%edi
    843b:	e8 cb dd ff ff       	callq  620b <posix_irq_unlock>
}
    8440:	48 83 c4 18          	add    $0x18,%rsp
    8444:	4c 89 e0             	mov    %r12,%rax
    8447:	5d                   	pop    %rbp
    8448:	41 5c                	pop    %r12
    844a:	c3                   	retq   

000000000000844b <z_sched_init>:
{
    844b:	f3 0f 1e fa          	endbr64 
	list->head = (sys_dnode_t *)list;
    844f:	48 8d 05 ca 6f 00 00 	lea    0x6fca(%rip),%rax        # f420 <_kernel>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8456:	31 f6                	xor    %esi,%esi
    8458:	31 ff                	xor    %edi,%edi
    845a:	48 8d 50 40          	lea    0x40(%rax),%rdx
    845e:	48 89 50 40          	mov    %rdx,0x40(%rax)
	list->tail = (sys_dnode_t *)list;
    8462:	48 89 50 48          	mov    %rdx,0x48(%rax)
    8466:	e9 60 f9 ff ff       	jmpq   7dcb <k_sched_time_slice_set>

000000000000846b <z_impl_k_yield>:
{
    846b:	f3 0f 1e fa          	endbr64 
    846f:	41 55                	push   %r13
    8471:	41 54                	push   %r12
    8473:	55                   	push   %rbp
    8474:	53                   	push   %rbx
    8475:	52                   	push   %rdx
	if (!z_is_idle_thread_object(_current)) {
    8476:	48 8d 2d a3 6f 00 00 	lea    0x6fa3(%rip),%rbp        # f420 <_kernel>
    847d:	48 8d 05 5c 6e 00 00 	lea    0x6e5c(%rip),%rax        # f2e0 <z_idle_threads>
    8484:	48 39 45 10          	cmp    %rax,0x10(%rbp)
    8488:	0f 84 8e 00 00 00    	je     851c <z_impl_k_yield+0xb1>
	return posix_irq_lock();
    848e:	e8 6a dd ff ff       	callq  61fd <posix_irq_lock>
			dequeue_thread(&_kernel.ready_q.runq,
    8493:	48 8b 75 10          	mov    0x10(%rbp),%rsi
		_priq_run_remove(pq, thread);
    8497:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    849b:	41 89 c5             	mov    %eax,%r13d
	thread->base.thread_state &= ~_THREAD_QUEUED;
    849e:	80 66 19 7f          	andb   $0x7f,0x19(%rsi)
		_priq_run_remove(pq, thread);
    84a2:	e8 0e fa ff ff       	callq  7eb5 <z_priq_dumb_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    84a7:	48 8b 5d 10          	mov    0x10(%rbp),%rbx
	thread->base.thread_state |= _THREAD_QUEUED;
    84ab:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    84af:	4c 8b 65 40          	mov    0x40(%rbp),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84b3:	4d 85 e4             	test   %r12,%r12
    84b6:	74 09                	je     84c1 <z_impl_k_yield+0x56>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84b8:	48 8d 45 40          	lea    0x40(%rbp),%rax
    84bc:	49 39 c4             	cmp    %rax,%r12
    84bf:	75 18                	jne    84d9 <z_impl_k_yield+0x6e>
	sys_dnode_t *const tail = list->tail;
    84c1:	48 8b 45 48          	mov    0x48(%rbp),%rax
	node->next = list;
    84c5:	48 8d 55 40          	lea    0x40(%rbp),%rdx
    84c9:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    84cc:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    84d0:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    84d3:	48 89 5d 48          	mov    %rbx,0x48(%rbp)
}
    84d7:	eb 34                	jmp    850d <z_impl_k_yield+0xa2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    84d9:	4c 89 e6             	mov    %r12,%rsi
    84dc:	48 89 df             	mov    %rbx,%rdi
    84df:	e8 a2 f8 ff ff       	callq  7d86 <z_sched_prio_cmp>
    84e4:	85 c0                	test   %eax,%eax
    84e6:	7e 16                	jle    84fe <z_impl_k_yield+0x93>
	sys_dnode_t *const prev = successor->prev;
    84e8:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    84ed:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    84f0:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    84f4:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    84f7:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    84fc:	eb 0f                	jmp    850d <z_impl_k_yield+0xa2>
	return (node == list->tail) ? NULL : node->next;
    84fe:	4c 39 65 48          	cmp    %r12,0x48(%rbp)
    8502:	74 bd                	je     84c1 <z_impl_k_yield+0x56>
    8504:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8508:	4d 85 e4             	test   %r12,%r12
    850b:	eb b2                	jmp    84bf <z_impl_k_yield+0x54>
		update_cache(1);
    850d:	bf 01 00 00 00       	mov    $0x1,%edi
    8512:	e8 f2 f9 ff ff       	callq  7f09 <update_cache>
    8517:	44 89 ef             	mov    %r13d,%edi
    851a:	eb 07                	jmp    8523 <z_impl_k_yield+0xb8>
    851c:	e8 dc dc ff ff       	callq  61fd <posix_irq_lock>
    8521:	89 c7                	mov    %eax,%edi
}
    8523:	58                   	pop    %rax
    8524:	5b                   	pop    %rbx
    8525:	5d                   	pop    %rbp
    8526:	41 5c                	pop    %r12
    8528:	41 5d                	pop    %r13
    852a:	e9 0c d1 ff ff       	jmpq   563b <arch_swap>

000000000000852f <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    852f:	f3 0f 1e fa          	endbr64 
    8533:	51                   	push   %rcx

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8534:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    8538:	75 15                	jne    854f <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    853a:	48 8d 05 df 6e 00 00 	lea    0x6edf(%rip),%rax        # f420 <_kernel>
    8541:	48 8b 78 10          	mov    0x10(%rax),%rdi
	z_impl_k_thread_suspend(thread);
    8545:	e8 a9 fb ff ff       	callq  80f3 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    854a:	83 c8 ff             	or     $0xffffffff,%eax
}
    854d:	eb 16                	jmp    8565 <z_impl_k_sleep+0x36>
	if (ticks == 0) {
    854f:	48 85 ff             	test   %rdi,%rdi
    8552:	75 09                	jne    855d <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
    8554:	e8 12 ff ff ff       	callq  846b <z_impl_k_yield>
		return 0;
    8559:	31 c0                	xor    %eax,%eax
}
    855b:	eb 05                	jmp    8562 <z_impl_k_sleep+0x33>
    855d:	e8 21 fb ff ff       	callq  8083 <z_tick_sleep.part.0>

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    8562:	6b c0 0a             	imul   $0xa,%eax,%eax
}
    8565:	5a                   	pop    %rdx
    8566:	c3                   	retq   

0000000000008567 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    8567:	f3 0f 1e fa          	endbr64 
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
    856b:	48 63 c7             	movslq %edi,%rax
    856e:	31 d2                	xor    %edx,%edx
{
    8570:	51                   	push   %rcx
    8571:	b9 10 27 00 00       	mov    $0x2710,%ecx
		t += off;
    8576:	48 05 0f 27 00 00    	add    $0x270f,%rax
			return t / (from_hz / to_hz);
    857c:	48 f7 f1             	div    %rcx
	ticks = z_tick_sleep(ticks);
    857f:	48 63 f8             	movslq %eax,%rdi
	if (ticks == 0) {
    8582:	48 85 ff             	test   %rdi,%rdi
    8585:	75 09                	jne    8590 <z_impl_k_usleep+0x29>
	z_impl_k_yield();
    8587:	e8 df fe ff ff       	callq  846b <z_impl_k_yield>
		return 0;
    858c:	31 c0                	xor    %eax,%eax
}
    858e:	eb 05                	jmp    8595 <z_impl_k_usleep+0x2e>
    8590:	e8 ee fa ff ff       	callq  8083 <z_tick_sleep.part.0>
	return k_ticks_to_us_floor64(ticks);
    8595:	48 98                	cltq   
}
    8597:	5a                   	pop    %rdx
			return t * (to_hz / from_hz);
    8598:	48 69 c0 10 27 00 00 	imul   $0x2710,%rax,%rax
    859f:	c3                   	retq   

00000000000085a0 <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
    85a0:	f3 0f 1e fa          	endbr64 
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    85a4:	48 8d 05 75 6e 00 00 	lea    0x6e75(%rip),%rax        # f420 <_kernel>

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    85ab:	48 8b 40 10          	mov    0x10(%rax),%rax
}
    85af:	c3                   	retq   

00000000000085b0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    85b0:	f3 0f 1e fa          	endbr64 
    85b4:	41 55                	push   %r13
    85b6:	41 54                	push   %r12
    85b8:	55                   	push   %rbp
    85b9:	53                   	push   %rbx
    85ba:	48 89 fb             	mov    %rdi,%rbx
    85bd:	52                   	push   %rdx
    85be:	e8 3a dc ff ff       	callq  61fd <posix_irq_lock>
    85c3:	41 89 c4             	mov    %eax,%r12d
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    85c6:	8a 43 19             	mov    0x19(%rbx),%al
    85c9:	a8 08                	test   $0x8,%al
    85cb:	0f 85 9b 00 00 00    	jne    866c <z_thread_abort+0xbc>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    85d1:	89 c2                	mov    %eax,%edx
    85d3:	83 e2 df             	and    $0xffffffdf,%edx
		if (z_is_thread_queued(thread)) {
    85d6:	80 ca 08             	or     $0x8,%dl
    85d9:	78 05                	js     85e0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    85db:	88 53 19             	mov    %dl,0x19(%rbx)
    85de:	eb 1c                	jmp    85fc <z_thread_abort+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    85e0:	83 e0 5f             	and    $0x5f,%eax
		_priq_run_remove(pq, thread);
    85e3:	48 89 de             	mov    %rbx,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    85e6:	83 c8 08             	or     $0x8,%eax
    85e9:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    85ec:	48 8d 05 2d 6e 00 00 	lea    0x6e2d(%rip),%rax        # f420 <_kernel>
    85f3:	48 8d 78 40          	lea    0x40(%rax),%rdi
    85f7:	e8 b9 f8 ff ff       	callq  7eb5 <z_priq_dumb_remove>
		if (thread->base.pended_on != NULL) {
    85fc:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
    8601:	74 08                	je     860b <z_thread_abort+0x5b>
			unpend_thread_no_timeout(thread);
    8603:	48 89 df             	mov    %rbx,%rdi
    8606:	e8 cc f8 ff ff       	callq  7ed7 <unpend_thread_no_timeout>
    860b:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    860f:	4c 8d 6b 60          	lea    0x60(%rbx),%r13
    8613:	e8 cb 03 00 00       	callq  89e3 <z_abort_timeout>
	return list->head == list;
    8618:	48 8b 6b 60          	mov    0x60(%rbx),%rbp
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    861c:	48 85 ed             	test   %rbp,%rbp
    861f:	74 27                	je     8648 <z_thread_abort+0x98>
    8621:	4c 39 ed             	cmp    %r13,%rbp
    8624:	74 22                	je     8648 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
    8626:	48 89 ef             	mov    %rbp,%rdi
    8629:	e8 a9 f8 ff ff       	callq  7ed7 <unpend_thread_no_timeout>
    862e:	48 8d 7d 28          	lea    0x28(%rbp),%rdi
    8632:	e8 ac 03 00 00       	callq  89e3 <z_abort_timeout>
	thread->callee_saved.retval = value;
    8637:	c7 45 4c 00 00 00 00 	movl   $0x0,0x4c(%rbp)
		ready_thread(thread);
    863e:	48 89 ef             	mov    %rbp,%rdi
    8641:	e8 59 fc ff ff       	callq  829f <ready_thread>
    8646:	eb d0                	jmp    8618 <z_thread_abort+0x68>
		update_cache(1);
    8648:	bf 01 00 00 00       	mov    $0x1,%edi
    864d:	e8 b7 f8 ff ff       	callq  7f09 <update_cache>
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
    8652:	48 8d 05 c7 6d 00 00 	lea    0x6dc7(%rip),%rax        # f420 <_kernel>
    8659:	48 39 58 10          	cmp    %rbx,0x10(%rax)
    865d:	75 0d                	jne    866c <z_thread_abort+0xbc>
    865f:	83 38 00             	cmpl   $0x0,(%rax)
    8662:	75 08                	jne    866c <z_thread_abort+0xbc>
    8664:	44 89 e7             	mov    %r12d,%edi
    8667:	e8 cf cf ff ff       	callq  563b <arch_swap>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    866c:	58                   	pop    %rax
	posix_irq_unlock(key);
    866d:	44 89 e7             	mov    %r12d,%edi
    8670:	5b                   	pop    %rbx
    8671:	5d                   	pop    %rbp
    8672:	41 5c                	pop    %r12
    8674:	41 5d                	pop    %r13
    8676:	e9 90 db ff ff       	jmpq   620b <posix_irq_unlock>

000000000000867b <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    867b:	f3 0f 1e fa          	endbr64 
	z_sched_start(thread);
    867f:	e9 e7 fc ff ff       	jmpq   836b <z_sched_start>

0000000000008684 <z_init_thread_base>:
}
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    8684:	f3 0f 1e fa          	endbr64 
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    8688:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    868f:	00 
	thread_base->user_options = (uint8_t)options;
    8690:	88 4f 18             	mov    %cl,0x18(%rdi)
	thread_base->thread_state = (uint8_t)initial_state;
    8693:	88 57 19             	mov    %dl,0x19(%rdi)

	thread_base->prio = priority;
    8696:	40 88 77 1a          	mov    %sil,0x1a(%rdi)

	thread_base->sched_locked = 0U;
    869a:	c6 47 1b 00          	movb   $0x0,0x1b(%rdi)
	node->next = NULL;
    869e:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    86a5:	00 
	node->prev = NULL;
    86a6:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    86ad:	00 
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    86ae:	c3                   	retq   

00000000000086af <z_setup_new_thread>:
{
    86af:	f3 0f 1e fa          	endbr64 
    86b3:	41 55                	push   %r13
	sys_dlist_init(&w->waitq);
    86b5:	48 8d 47 60          	lea    0x60(%rdi),%rax
    86b9:	49 89 cd             	mov    %rcx,%r13
    86bc:	41 54                	push   %r12
    86be:	49 89 d4             	mov    %rdx,%r12
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    86c1:	ba 04 00 00 00       	mov    $0x4,%edx
{
    86c6:	55                   	push   %rbp
    86c7:	48 89 f5             	mov    %rsi,%rbp
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    86ca:	49 83 c4 07          	add    $0x7,%r12
{
    86ce:	53                   	push   %rbx
    86cf:	48 89 fb             	mov    %rdi,%rbx
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    86d2:	49 83 e4 f8          	and    $0xfffffffffffffff8,%r12
	stack_ptr = (char *)stack + stack_obj_size;
    86d6:	49 01 ec             	add    %rbp,%r12
{
    86d9:	48 83 ec 18          	sub    $0x18,%rsp
	list->head = (sys_dnode_t *)list;
    86dd:	48 89 47 60          	mov    %rax,0x60(%rdi)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    86e1:	8b 4c 24 50          	mov    0x50(%rsp),%ecx
    86e5:	8b 74 24 48          	mov    0x48(%rsp),%esi
	list->tail = (sys_dnode_t *)list;
    86e9:	48 89 47 68          	mov    %rax,0x68(%rdi)
{
    86ed:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    86f2:	4c 89 0c 24          	mov    %r9,(%rsp)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    86f6:	e8 89 ff ff ff       	callq  8684 <z_init_thread_base>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    86fb:	4c 89 e9             	mov    %r13,%rcx
    86fe:	4c 89 e2             	mov    %r12,%rdx
    8701:	48 89 ee             	mov    %rbp,%rsi
    8704:	50                   	push   %rax
    8705:	48 89 df             	mov    %rbx,%rdi
    8708:	ff 74 24 48          	pushq  0x48(%rsp)
    870c:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    8711:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    8716:	e8 89 cf ff ff       	callq  56a4 <arch_new_thread>
	if (!_current) {
    871b:	48 8d 05 fe 6c 00 00 	lea    0x6cfe(%rip),%rax        # f420 <_kernel>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8722:	5a                   	pop    %rdx
	new_thread->init_data = NULL;
    8723:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
    872a:	00 
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    872b:	59                   	pop    %rcx
	if (!_current) {
    872c:	48 8b 40 10          	mov    0x10(%rax),%rax
    8730:	48 85 c0             	test   %rax,%rax
    8733:	74 04                	je     8739 <z_setup_new_thread+0x8a>
	new_thread->resource_pool = _current->resource_pool;
    8735:	48 8b 40 78          	mov    0x78(%rax),%rax
	return stack_ptr;
    8739:	48 89 43 78          	mov    %rax,0x78(%rbx)
}
    873d:	48 83 c4 18          	add    $0x18,%rsp
    8741:	4c 89 e0             	mov    %r12,%rax
    8744:	5b                   	pop    %rbx
    8745:	5d                   	pop    %rbp
    8746:	41 5c                	pop    %r12
    8748:	41 5d                	pop    %r13
    874a:	c3                   	retq   

000000000000874b <z_init_static_threads>:
{
    874b:	f3 0f 1e fa          	endbr64 
    874f:	55                   	push   %rbp
    8750:	53                   	push   %rbx
    8751:	52                   	push   %rdx
	_FOREACH_STATIC_THREAD(thread_data) {
    8752:	48 8d 1d 27 62 00 00 	lea    0x6227(%rip),%rbx        # e980 <_k_thread_data_processing_tid>
    8759:	48 89 dd             	mov    %rbx,%rbp
    875c:	48 3b 1d 55 38 00 00 	cmp    0x3855(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    8763:	73 3a                	jae    879f <z_init_static_threads+0x54>
		z_setup_new_thread(
    8765:	4c 8b 4b 28          	mov    0x28(%rbx),%r9
    8769:	4c 8b 43 20          	mov    0x20(%rbx),%r8
    876d:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    8771:	8b 53 10             	mov    0x10(%rbx),%edx
    8774:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    8778:	ff 73 50             	pushq  0x50(%rbx)
    877b:	8b 43 3c             	mov    0x3c(%rbx),%eax
    877e:	50                   	push   %rax
    877f:	8b 43 38             	mov    0x38(%rbx),%eax
    8782:	50                   	push   %rax
    8783:	ff 73 30             	pushq  0x30(%rbx)
    8786:	48 8b 3b             	mov    (%rbx),%rdi
    8789:	e8 21 ff ff ff       	callq  86af <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    878e:	48 8b 03             	mov    (%rbx),%rax
		z_setup_new_thread(
    8791:	48 83 c4 20          	add    $0x20,%rsp
		thread_data->init_thread->init_data = thread_data;
    8795:	48 89 58 58          	mov    %rbx,0x58(%rax)
	_FOREACH_STATIC_THREAD(thread_data) {
    8799:	48 83 c3 58          	add    $0x58,%rbx
    879d:	eb bd                	jmp    875c <z_init_static_threads+0x11>
	k_sched_lock();
    879f:	e8 f1 f6 ff ff       	callq  7e95 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    87a4:	48 89 eb             	mov    %rbp,%rbx
					    K_MSEC(thread_data->init_delay));
    87a7:	31 ed                	xor    %ebp,%ebp
	_FOREACH_STATIC_THREAD(thread_data) {
    87a9:	48 3b 1d 08 38 00 00 	cmp    0x3808(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    87b0:	73 46                	jae    87f8 <z_init_static_threads+0xad>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    87b2:	8b 43 40             	mov    0x40(%rbx),%eax
    87b5:	83 f8 ff             	cmp    $0xffffffff,%eax
    87b8:	74 38                	je     87f2 <z_init_static_threads+0xa7>
					    K_MSEC(thread_data->init_delay));
    87ba:	85 c0                	test   %eax,%eax
			schedule_new_thread(thread_data->init_thread,
    87bc:	48 8b 3b             	mov    (%rbx),%rdi
					    K_MSEC(thread_data->init_delay));
    87bf:	0f 48 c5             	cmovs  %ebp,%eax
    87c2:	48 63 c8             	movslq %eax,%rcx
		t += off;
    87c5:	48 8d 41 09          	lea    0x9(%rcx),%rax
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    87c9:	48 85 c9             	test   %rcx,%rcx
    87cc:	75 07                	jne    87d5 <z_init_static_threads+0x8a>
	z_impl_k_thread_start(thread);
    87ce:	e8 a8 fe ff ff       	callq  867b <z_impl_k_thread_start>
}
    87d3:	eb 1d                	jmp    87f2 <z_init_static_threads+0xa7>
			return t / (from_hz / to_hz);
    87d5:	b9 0a 00 00 00       	mov    $0xa,%ecx
    87da:	31 d2                	xor    %edx,%edx
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    87dc:	48 8d 35 d9 fb ff ff 	lea    -0x427(%rip),%rsi        # 83bc <z_thread_timeout>
    87e3:	48 83 c7 28          	add    $0x28,%rdi
    87e7:	48 f7 f1             	div    %rcx
    87ea:	48 89 c2             	mov    %rax,%rdx
    87ed:	e8 d5 00 00 00       	callq  88c7 <z_add_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
    87f2:	48 83 c3 58          	add    $0x58,%rbx
    87f6:	eb b1                	jmp    87a9 <z_init_static_threads+0x5e>
}
    87f8:	58                   	pop    %rax
    87f9:	5b                   	pop    %rbx
    87fa:	5d                   	pop    %rbp
	k_sched_unlock();
    87fb:	e9 5e f9 ff ff       	jmpq   815e <k_sched_unlock>

0000000000008800 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    8800:	f3 0f 1e fa          	endbr64 
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8804:	48 8d 15 9a 0c 00 00 	lea    0xc9a(%rip),%rdx        # 94a5 <default_cmd+0x245>
    880b:	48 8d 35 5f 1d 00 00 	lea    0x1d5f(%rip),%rsi        # a571 <default_cmd+0x1311>
    8812:	31 c0                	xor    %eax,%eax
    8814:	48 8d 3d 77 1d 00 00 	lea    0x1d77(%rip),%rdi        # a592 <default_cmd+0x1332>
    881b:	e9 ad a6 ff ff       	jmpq   2ecd <printk>

0000000000008820 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8820:	83 3d 81 6d 00 00 00 	cmpl   $0x0,0x6d81(%rip)        # f5a8 <announce_remaining>
    8827:	75 05                	jne    882e <elapsed+0xe>
    8829:	e9 a3 b5 ff ff       	jmpq   3dd1 <sys_clock_elapsed>
}
    882e:	31 c0                	xor    %eax,%eax
    8830:	c3                   	retq   

0000000000008831 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8831:	48 8b 07             	mov    (%rdi),%rax
    8834:	48 85 ff             	test   %rdi,%rdi
    8837:	74 16                	je     884f <remove_timeout+0x1e>
	return (node == list->tail) ? NULL : node->next;
    8839:	48 3b 3d f8 3b 00 00 	cmp    0x3bf8(%rip),%rdi        # c438 <timeout_list+0x8>
    8840:	74 0d                	je     884f <remove_timeout+0x1e>
	if (next(t) != NULL) {
    8842:	48 85 c0             	test   %rax,%rax
    8845:	74 08                	je     884f <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
    8847:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    884b:	48 01 50 18          	add    %rdx,0x18(%rax)
	sys_dnode_t *const prev = node->prev;
    884f:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	prev->next = next;
    8853:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    8856:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    885a:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
    8861:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    8868:	00 
}
    8869:	c3                   	retq   

000000000000886a <next_timeout>:

static int32_t next_timeout(void)
{
    886a:	53                   	push   %rbx
	return list->head == list;
    886b:	48 8b 1d be 3b 00 00 	mov    0x3bbe(%rip),%rbx        # c430 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8872:	48 8d 05 b7 3b 00 00 	lea    0x3bb7(%rip),%rax        # c430 <timeout_list>
    8879:	48 39 c3             	cmp    %rax,%rbx
    887c:	75 02                	jne    8880 <next_timeout+0x16>
    887e:	31 db                	xor    %ebx,%ebx
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    8880:	e8 9b ff ff ff       	callq  8820 <elapsed>
    8885:	89 c2                	mov    %eax,%edx
	int32_t ret = to == NULL ? MAX_WAIT
    8887:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    888c:	48 85 db             	test   %rbx,%rbx
    888f:	74 21                	je     88b2 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    8891:	48 63 c2             	movslq %edx,%rax
    8894:	48 8b 53 18          	mov    0x18(%rbx),%rdx
    8898:	48 29 c2             	sub    %rax,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    889b:	31 c0                	xor    %eax,%eax
    889d:	48 85 d2             	test   %rdx,%rdx
    88a0:	7e 10                	jle    88b2 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    88a2:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    88a9:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    88ae:	48 0f 4e c2          	cmovle %rdx,%rax

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    88b2:	48 8d 15 67 6b 00 00 	lea    0x6b67(%rip),%rdx        # f420 <_kernel>
    88b9:	8b 52 20             	mov    0x20(%rdx),%edx
    88bc:	85 d2                	test   %edx,%edx
    88be:	74 05                	je     88c5 <next_timeout+0x5b>
    88c0:	39 d0                	cmp    %edx,%eax
    88c2:	0f 4f c2             	cmovg  %edx,%eax
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    88c5:	5b                   	pop    %rbx
    88c6:	c3                   	retq   

00000000000088c7 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    88c7:	f3 0f 1e fa          	endbr64 
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    88cb:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    88cf:	0f 84 0d 01 00 00    	je     89e2 <z_add_timeout+0x11b>
{
    88d5:	41 56                	push   %r14
    88d7:	49 89 f6             	mov    %rsi,%r14
    88da:	41 55                	push   %r13
    88dc:	49 89 d5             	mov    %rdx,%r13
    88df:	41 54                	push   %r12
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    88e1:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
{
    88e8:	55                   	push   %rbp
	k_ticks_t ticks = timeout.ticks + 1;
    88e9:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
{
    88ed:	53                   	push   %rbx
    88ee:	48 89 fb             	mov    %rdi,%rbx
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    88f1:	49 39 ec             	cmp    %rbp,%r12
    88f4:	78 17                	js     890d <z_add_timeout+0x46>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    88f6:	e8 25 ff ff ff       	callq  8820 <elapsed>
    88fb:	4c 89 e5             	mov    %r12,%rbp
    88fe:	48 2b 2d 53 6c 00 00 	sub    0x6c53(%rip),%rbp        # f558 <curr_tick>
    8905:	4c 29 ed             	sub    %r13,%rbp
    8908:	48 98                	cltq   
    890a:	48 29 c5             	sub    %rax,%rbp
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    890d:	4c 89 73 10          	mov    %r14,0x10(%rbx)
	return posix_irq_lock();
    8911:	e8 e7 d8 ff ff       	callq  61fd <posix_irq_lock>
    8916:	41 89 c4             	mov    %eax,%r12d
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    8919:	e8 02 ff ff ff       	callq  8820 <elapsed>
	ticks = MAX(1, ticks);
    891e:	48 85 ed             	test   %rbp,%rbp
    8921:	ba 01 00 00 00       	mov    $0x1,%edx
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8926:	48 8b 3d 0b 3b 00 00 	mov    0x3b0b(%rip),%rdi        # c438 <timeout_list+0x8>
    892d:	48 0f 4e ea          	cmovle %rdx,%rbp
		to->dticks = ticks + elapsed();
    8931:	48 98                	cltq   
	return list->head == list;
    8933:	48 8d 15 f6 3a 00 00 	lea    0x3af6(%rip),%rdx        # c430 <timeout_list>
    893a:	48 01 c5             	add    %rax,%rbp
    893d:	48 8b 05 ec 3a 00 00 	mov    0x3aec(%rip),%rax        # c430 <timeout_list>
    8944:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8948:	48 39 d0             	cmp    %rdx,%rax
    894b:	74 3e                	je     898b <z_add_timeout+0xc4>
		for (t = first(); t != NULL; t = next(t)) {
    894d:	48 85 c0             	test   %rax,%rax
    8950:	74 39                	je     898b <z_add_timeout+0xc4>
			if (t->dticks > to->dticks) {
    8952:	48 8b 70 18          	mov    0x18(%rax),%rsi
    8956:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    895a:	48 39 ce             	cmp    %rcx,%rsi
    895d:	7e 1b                	jle    897a <z_add_timeout+0xb3>
				t->dticks -= to->dticks;
    895f:	48 29 ce             	sub    %rcx,%rsi
	sys_dnode_t *const prev = successor->prev;
    8962:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8966:	48 89 70 18          	mov    %rsi,0x18(%rax)
	node->prev = prev;
    896a:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
	node->next = successor;
    896e:	48 89 03             	mov    %rax,(%rbx)
	prev->next = node;
    8971:	48 89 19             	mov    %rbx,(%rcx)
	successor->prev = node;
    8974:	48 89 58 08          	mov    %rbx,0x8(%rax)
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8978:	eb 29                	jmp    89a3 <z_add_timeout+0xdc>
			to->dticks -= t->dticks;
    897a:	48 29 f1             	sub    %rsi,%rcx
    897d:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
	return (node == list->tail) ? NULL : node->next;
    8981:	48 39 f8             	cmp    %rdi,%rax
    8984:	74 05                	je     898b <z_add_timeout+0xc4>
    8986:	48 8b 00             	mov    (%rax),%rax
    8989:	eb c2                	jmp    894d <z_add_timeout+0x86>
	sys_dnode_t *const tail = list->tail;
    898b:	48 8b 05 a6 3a 00 00 	mov    0x3aa6(%rip),%rax        # c438 <timeout_list+0x8>
	node->next = list;
    8992:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    8995:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    8999:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    899c:	48 89 1d 95 3a 00 00 	mov    %rbx,0x3a95(%rip)        # c438 <timeout_list+0x8>
	return list->head == list;
    89a3:	48 8b 05 86 3a 00 00 	mov    0x3a86(%rip),%rax        # c430 <timeout_list>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    89aa:	48 39 c3             	cmp    %rax,%rbx
    89ad:	75 23                	jne    89d2 <z_add_timeout+0x10b>
    89af:	48 39 d0             	cmp    %rdx,%rax
    89b2:	74 1e                	je     89d2 <z_add_timeout+0x10b>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    89b4:	e8 b1 fe ff ff       	callq  886a <next_timeout>
    89b9:	89 c7                	mov    %eax,%edi

			if (next_time == 0 ||
    89bb:	85 c0                	test   %eax,%eax
    89bd:	74 0c                	je     89cb <z_add_timeout+0x104>
			    _current_cpu->slice_ticks != next_time) {
    89bf:	48 8d 05 5a 6a 00 00 	lea    0x6a5a(%rip),%rax        # f420 <_kernel>
			if (next_time == 0 ||
    89c6:	39 78 20             	cmp    %edi,0x20(%rax)
    89c9:	74 07                	je     89d2 <z_add_timeout+0x10b>
				sys_clock_set_timeout(next_time, false);
    89cb:	31 f6                	xor    %esi,%esi
    89cd:	e8 d8 b3 ff ff       	callq  3daa <sys_clock_set_timeout>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    89d2:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    89d3:	44 89 e7             	mov    %r12d,%edi
    89d6:	5d                   	pop    %rbp
    89d7:	41 5c                	pop    %r12
    89d9:	41 5d                	pop    %r13
    89db:	41 5e                	pop    %r14
    89dd:	e9 29 d8 ff ff       	jmpq   620b <posix_irq_unlock>
    89e2:	c3                   	retq   

00000000000089e3 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    89e3:	f3 0f 1e fa          	endbr64 
    89e7:	41 54                	push   %r12
    89e9:	41 bc ea ff ff ff    	mov    $0xffffffea,%r12d
    89ef:	48 83 ec 10          	sub    $0x10,%rsp
    89f3:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    89f8:	e8 00 d8 ff ff       	callq  61fd <posix_irq_lock>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    89fd:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8a02:	41 89 c0             	mov    %eax,%r8d
    8a05:	48 83 3f 00          	cmpq   $0x0,(%rdi)
    8a09:	74 08                	je     8a13 <z_abort_timeout+0x30>
			remove_timeout(to);
    8a0b:	e8 21 fe ff ff       	callq  8831 <remove_timeout>
			ret = 0;
    8a10:	45 31 e4             	xor    %r12d,%r12d
	posix_irq_unlock(key);
    8a13:	44 89 c7             	mov    %r8d,%edi
    8a16:	e8 f0 d7 ff ff       	callq  620b <posix_irq_unlock>
		}
	}

	return ret;
}
    8a1b:	48 83 c4 10          	add    $0x10,%rsp
    8a1f:	44 89 e0             	mov    %r12d,%eax
    8a22:	41 5c                	pop    %r12
    8a24:	c3                   	retq   

0000000000008a25 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8a25:	f3 0f 1e fa          	endbr64 
    8a29:	41 54                	push   %r12
    8a2b:	55                   	push   %rbp
    8a2c:	89 fd                	mov    %edi,%ebp
    8a2e:	53                   	push   %rbx
    8a2f:	89 f3                	mov    %esi,%ebx
	return posix_irq_lock();
    8a31:	e8 c7 d7 ff ff       	callq  61fd <posix_irq_lock>
    8a36:	41 89 c4             	mov    %eax,%r12d
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8a39:	e8 2c fe ff ff       	callq  886a <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
    8a3e:	83 f8 ff             	cmp    $0xffffffff,%eax
    8a41:	0f 94 c1             	sete   %cl
			      || (ticks <= next_to);
    8a44:	39 e8                	cmp    %ebp,%eax
    8a46:	0f 9d c2             	setge  %dl
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8a49:	08 d1                	or     %dl,%cl
    8a4b:	74 14                	je     8a61 <z_set_timeout_expiry+0x3c>
    8a4d:	83 f8 01             	cmp    $0x1,%eax
    8a50:	7e 0f                	jle    8a61 <z_set_timeout_expiry+0x3c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8a52:	39 e8                	cmp    %ebp,%eax
    8a54:	89 ef                	mov    %ebp,%edi
    8a56:	0f b6 f3             	movzbl %bl,%esi
    8a59:	0f 4e f8             	cmovle %eax,%edi
    8a5c:	e8 49 b3 ff ff       	callq  3daa <sys_clock_set_timeout>
		}
	}
}
    8a61:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    8a62:	44 89 e7             	mov    %r12d,%edi
    8a65:	5d                   	pop    %rbp
    8a66:	41 5c                	pop    %r12
    8a68:	e9 9e d7 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000008a6d <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    8a6d:	f3 0f 1e fa          	endbr64 
    8a71:	41 54                	push   %r12
    8a73:	4c 8d 25 b6 39 00 00 	lea    0x39b6(%rip),%r12        # c430 <timeout_list>
    8a7a:	55                   	push   %rbp
    8a7b:	53                   	push   %rbx
    8a7c:	89 fb                	mov    %edi,%ebx
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    8a7e:	e8 ab f7 ff ff       	callq  822e <z_time_slice>
	return posix_irq_lock();
    8a83:	e8 75 d7 ff ff       	callq  61fd <posix_irq_lock>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8a88:	89 1d 1a 6b 00 00    	mov    %ebx,0x6b1a(%rip)        # f5a8 <announce_remaining>
    8a8e:	89 c5                	mov    %eax,%ebp
    8a90:	48 63 15 11 6b 00 00 	movslq 0x6b11(%rip),%rdx        # f5a8 <announce_remaining>
    8a97:	49 8b 1c 24          	mov    (%r12),%rbx
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8a9b:	48 8b 35 b6 6a 00 00 	mov    0x6ab6(%rip),%rsi        # f558 <curr_tick>
    8aa2:	48 89 d1             	mov    %rdx,%rcx

	while (first() != NULL && first()->dticks <= announce_remaining) {
    8aa5:	48 85 db             	test   %rbx,%rbx
    8aa8:	74 50                	je     8afa <sys_clock_announce+0x8d>
    8aaa:	4c 39 e3             	cmp    %r12,%rbx
    8aad:	74 4b                	je     8afa <sys_clock_announce+0x8d>
    8aaf:	48 8b 43 18          	mov    0x18(%rbx),%rax
    8ab3:	48 39 d0             	cmp    %rdx,%rax
    8ab6:	7f 3b                	jg     8af3 <sys_clock_announce+0x86>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
    8ab8:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    8abf:	00 
		curr_tick += dt;
    8ac0:	48 63 d0             	movslq %eax,%rdx
		announce_remaining -= dt;
    8ac3:	29 c1                	sub    %eax,%ecx
		remove_timeout(t);
    8ac5:	48 89 df             	mov    %rbx,%rdi
		curr_tick += dt;
    8ac8:	48 01 f2             	add    %rsi,%rdx
		announce_remaining -= dt;
    8acb:	89 0d d7 6a 00 00    	mov    %ecx,0x6ad7(%rip)        # f5a8 <announce_remaining>
		curr_tick += dt;
    8ad1:	48 89 15 80 6a 00 00 	mov    %rdx,0x6a80(%rip)        # f558 <curr_tick>
		remove_timeout(t);
    8ad8:	e8 54 fd ff ff       	callq  8831 <remove_timeout>
	posix_irq_unlock(key);
    8add:	89 ef                	mov    %ebp,%edi
    8adf:	e8 27 d7 ff ff       	callq  620b <posix_irq_unlock>

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    8ae4:	48 89 df             	mov    %rbx,%rdi
    8ae7:	ff 53 10             	callq  *0x10(%rbx)
	return posix_irq_lock();
    8aea:	e8 0e d7 ff ff       	callq  61fd <posix_irq_lock>
    8aef:	89 c5                	mov    %eax,%ebp
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    8af1:	eb 9d                	jmp    8a90 <sys_clock_announce+0x23>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8af3:	48 29 d0             	sub    %rdx,%rax
    8af6:	48 89 43 18          	mov    %rax,0x18(%rbx)
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    8afa:	c7 05 a4 6a 00 00 00 	movl   $0x0,0x6aa4(%rip)        # f5a8 <announce_remaining>
    8b01:	00 00 00 
	curr_tick += announce_remaining;
    8b04:	48 01 f2             	add    %rsi,%rdx
    8b07:	48 89 15 4a 6a 00 00 	mov    %rdx,0x6a4a(%rip)        # f558 <curr_tick>

	sys_clock_set_timeout(next_timeout(), false);
    8b0e:	e8 57 fd ff ff       	callq  886a <next_timeout>
    8b13:	31 f6                	xor    %esi,%esi
    8b15:	89 c7                	mov    %eax,%edi
    8b17:	e8 8e b2 ff ff       	callq  3daa <sys_clock_set_timeout>

	k_spin_unlock(&timeout_lock, key);
}
    8b1c:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    8b1d:	89 ef                	mov    %ebp,%edi
    8b1f:	5d                   	pop    %rbp
    8b20:	41 5c                	pop    %r12
    8b22:	e9 e4 d6 ff ff       	jmpq   620b <posix_irq_unlock>

0000000000008b27 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8b27:	f3 0f 1e fa          	endbr64 
    8b2b:	41 54                	push   %r12
    8b2d:	55                   	push   %rbp
    8b2e:	50                   	push   %rax
	return posix_irq_lock();
    8b2f:	e8 c9 d6 ff ff       	callq  61fd <posix_irq_lock>
    8b34:	89 c5                	mov    %eax,%ebp
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8b36:	e8 96 b2 ff ff       	callq  3dd1 <sys_clock_elapsed>
	posix_irq_unlock(key);
    8b3b:	89 ef                	mov    %ebp,%edi
    8b3d:	41 89 c4             	mov    %eax,%r12d
    8b40:	4c 03 25 11 6a 00 00 	add    0x6a11(%rip),%r12        # f558 <curr_tick>
    8b47:	e8 bf d6 ff ff       	callq  620b <posix_irq_unlock>
	}
	return t;
}
    8b4c:	4c 89 e0             	mov    %r12,%rax
    8b4f:	5a                   	pop    %rdx
    8b50:	5d                   	pop    %rbp
    8b51:	41 5c                	pop    %r12
    8b53:	c3                   	retq   

0000000000008b54 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8b54:	f3 0f 1e fa          	endbr64 
    8b58:	50                   	push   %rax
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8b59:	e8 c9 ff ff ff       	callq  8b27 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8b5e:	5a                   	pop    %rdx
    8b5f:	c3                   	retq   

0000000000008b60 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8b60:	f3 0f 1e fa          	endbr64 
    8b64:	50                   	push   %rax
	return posix_irq_lock();
    8b65:	e8 93 d6 ff ff       	callq  61fd <posix_irq_lock>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    8b6a:	e8 27 c6 ff ff       	callq  5196 <arch_cpu_idle>
    8b6f:	eb f4                	jmp    8b65 <idle+0x5>

0000000000008b71 <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
    8b71:	f3 0f 1e fa          	endbr64 
    8b75:	48 8d 47 18          	lea    0x18(%rdi),%rax
	list->head = (sys_dnode_t *)list;
    8b79:	48 89 47 18          	mov    %rax,0x18(%rdi)
	list->tail = (sys_dnode_t *)list;
    8b7d:	48 89 47 20          	mov    %rax,0x20(%rdi)
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    8b81:	e9 ce a4 ff ff       	jmpq   3054 <sys_heap_init>

0000000000008b86 <statics_init>:
}

static int statics_init(const struct device *unused)
{
    8b86:	f3 0f 1e fa          	endbr64 
    8b8a:	53                   	push   %rbx
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    8b8b:	48 8d 1d f6 5e 00 00 	lea    0x5ef6(%rip),%rbx        # ea88 <processing_msgq>
    8b92:	48 3b 1d 27 34 00 00 	cmp    0x3427(%rip),%rbx        # bfc0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
    8b99:	73 16                	jae    8bb1 <statics_init+0x2b>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8b9b:	48 8b 53 10          	mov    0x10(%rbx),%rdx
    8b9f:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    8ba3:	48 89 df             	mov    %rbx,%rdi
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    8ba6:	48 83 c3 28          	add    $0x28,%rbx
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8baa:	e8 c2 ff ff ff       	callq  8b71 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    8baf:	eb e1                	jmp    8b92 <statics_init+0xc>
	}
	return 0;
}
    8bb1:	31 c0                	xor    %eax,%eax
    8bb3:	5b                   	pop    %rbx
    8bb4:	c3                   	retq   

0000000000008bb5 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    8bb5:	f3 0f 1e fa          	endbr64 

#if defined(CONFIG_FPU_SHARING)
GEN_OFFSET_SYM(_thread_arch_t, excNestCount);
#endif

GEN_ABS_SYM_END
    8bb9:	c3                   	retq   

Disassembly of section .fini:

0000000000008bbc <_fini>:
    8bbc:	f3 0f 1e fa          	endbr64 
    8bc0:	48 83 ec 08          	sub    $0x8,%rsp
    8bc4:	48 83 c4 08          	add    $0x8,%rsp
    8bc8:	c3                   	retq   
