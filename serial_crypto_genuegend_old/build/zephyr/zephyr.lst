
zephyr.elf:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 c1 9f 00 00 	mov    0x9fc1(%rip),%rax        # bfd0 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 ba 9d 00 00    	pushq  0x9dba(%rip)        # bde0 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 bb 9d 00 00 	bnd jmpq *0x9dbb(%rip)        # bde8 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	pushq  $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmpq 2020 <.plt>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	pushq  $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmpq 2020 <.plt>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	pushq  $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmpq 2020 <.plt>
    226f:	90                   	nop
    2270:	f3 0f 1e fa          	endbr64 
    2274:	68 24 00 00 00       	pushq  $0x24
    2279:	f2 e9 a1 fd ff ff    	bnd jmpq 2020 <.plt>
    227f:	90                   	nop
    2280:	f3 0f 1e fa          	endbr64 
    2284:	68 25 00 00 00       	pushq  $0x25
    2289:	f2 e9 91 fd ff ff    	bnd jmpq 2020 <.plt>
    228f:	90                   	nop
    2290:	f3 0f 1e fa          	endbr64 
    2294:	68 26 00 00 00       	pushq  $0x26
    2299:	f2 e9 81 fd ff ff    	bnd jmpq 2020 <.plt>
    229f:	90                   	nop
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	68 27 00 00 00       	pushq  $0x27
    22a9:	f2 e9 71 fd ff ff    	bnd jmpq 2020 <.plt>
    22af:	90                   	nop
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	68 28 00 00 00       	pushq  $0x28
    22b9:	f2 e9 61 fd ff ff    	bnd jmpq 2020 <.plt>
    22bf:	90                   	nop
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	68 29 00 00 00       	pushq  $0x29
    22c9:	f2 e9 51 fd ff ff    	bnd jmpq 2020 <.plt>
    22cf:	90                   	nop
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	68 2a 00 00 00       	pushq  $0x2a
    22d9:	f2 e9 41 fd ff ff    	bnd jmpq 2020 <.plt>
    22df:	90                   	nop
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	68 2b 00 00 00       	pushq  $0x2b
    22e9:	f2 e9 31 fd ff ff    	bnd jmpq 2020 <.plt>
    22ef:	90                   	nop
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	68 2c 00 00 00       	pushq  $0x2c
    22f9:	f2 e9 21 fd ff ff    	bnd jmpq 2020 <.plt>
    22ff:	90                   	nop
    2300:	f3 0f 1e fa          	endbr64 
    2304:	68 2d 00 00 00       	pushq  $0x2d
    2309:	f2 e9 11 fd ff ff    	bnd jmpq 2020 <.plt>
    230f:	90                   	nop
    2310:	f3 0f 1e fa          	endbr64 
    2314:	68 2e 00 00 00       	pushq  $0x2e
    2319:	f2 e9 01 fd ff ff    	bnd jmpq 2020 <.plt>
    231f:	90                   	nop
    2320:	f3 0f 1e fa          	endbr64 
    2324:	68 2f 00 00 00       	pushq  $0x2f
    2329:	f2 e9 f1 fc ff ff    	bnd jmpq 2020 <.plt>
    232f:	90                   	nop
    2330:	f3 0f 1e fa          	endbr64 
    2334:	68 30 00 00 00       	pushq  $0x30
    2339:	f2 e9 e1 fc ff ff    	bnd jmpq 2020 <.plt>
    233f:	90                   	nop
    2340:	f3 0f 1e fa          	endbr64 
    2344:	68 31 00 00 00       	pushq  $0x31
    2349:	f2 e9 d1 fc ff ff    	bnd jmpq 2020 <.plt>
    234f:	90                   	nop
    2350:	f3 0f 1e fa          	endbr64 
    2354:	68 32 00 00 00       	pushq  $0x32
    2359:	f2 e9 c1 fc ff ff    	bnd jmpq 2020 <.plt>
    235f:	90                   	nop
    2360:	f3 0f 1e fa          	endbr64 
    2364:	68 33 00 00 00       	pushq  $0x33
    2369:	f2 e9 b1 fc ff ff    	bnd jmpq 2020 <.plt>
    236f:	90                   	nop
    2370:	f3 0f 1e fa          	endbr64 
    2374:	68 34 00 00 00       	pushq  $0x34
    2379:	f2 e9 a1 fc ff ff    	bnd jmpq 2020 <.plt>
    237f:	90                   	nop

Disassembly of section .plt.got:

0000000000002380 <__cxa_finalize@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 5d 9c 00 00 	bnd jmpq *0x9c5d(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000002390 <ptsname@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 55 9a 00 00 	bnd jmpq *0x9a55(%rip)        # bdf0 <ptsname@GLIBC_2.2.5>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <__snprintf_chk@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 4d 9a 00 00 	bnd jmpq *0x9a4d(%rip)        # bdf8 <__snprintf_chk@GLIBC_2.3.4>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <free@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 45 9a 00 00 	bnd jmpq *0x9a45(%rip)        # be00 <free@GLIBC_2.2.5>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <pthread_create@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 3d 9a 00 00 	bnd jmpq *0x9a3d(%rip)        # be08 <pthread_create@GLIBC_2.2.5>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <strcasecmp@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 35 9a 00 00 	bnd jmpq *0x9a35(%rip)        # be10 <strcasecmp@GLIBC_2.2.5>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <pthread_detach@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 2d 9a 00 00 	bnd jmpq *0x9a2d(%rip)        # be18 <pthread_detach@GLIBC_2.2.5>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <__vfprintf_chk@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 25 9a 00 00 	bnd jmpq *0x9a25(%rip)        # be20 <__vfprintf_chk@GLIBC_2.3.4>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__errno_location@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 1d 9a 00 00 	bnd jmpq *0x9a1d(%rip)        # be28 <__errno_location@GLIBC_2.2.5>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <pthread_cond_broadcast@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 15 9a 00 00 	bnd jmpq *0x9a15(%rip)        # be30 <pthread_cond_broadcast@GLIBC_2.3.2>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <pthread_cancel@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 0d 9a 00 00 	bnd jmpq *0x9a0d(%rip)        # be38 <pthread_cancel@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <isatty@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 05 9a 00 00 	bnd jmpq *0x9a05(%rip)        # be40 <isatty@GLIBC_2.2.5>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <sigaction@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 fd 99 00 00 	bnd jmpq *0x99fd(%rip)        # be48 <sigaction@GLIBC_2.2.5>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <__pthread_register_cancel@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 f5 99 00 00 	bnd jmpq *0x99f5(%rip)        # be50 <__pthread_register_cancel@GLIBC_2.3.3>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <strtod@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 ed 99 00 00 	bnd jmpq *0x99ed(%rip)        # be58 <strtod@GLIBC_2.2.5>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <fcntl@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 e5 99 00 00 	bnd jmpq *0x99e5(%rip)        # be60 <fcntl@GLIBC_2.2.5>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <clock_gettime@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 dd 99 00 00 	bnd jmpq *0x99dd(%rip)        # be68 <clock_gettime@GLIBC_2.17>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <write@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 d5 99 00 00 	bnd jmpq *0x99d5(%rip)        # be70 <write@GLIBC_2.2.5>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <pthread_cond_wait@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 cd 99 00 00 	bnd jmpq *0x99cd(%rip)        # be78 <pthread_cond_wait@GLIBC_2.3.2>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <__stack_chk_fail@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 c5 99 00 00 	bnd jmpq *0x99c5(%rip)        # be80 <__stack_chk_fail@GLIBC_2.4>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024c0 <system@plt>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	f2 ff 25 bd 99 00 00 	bnd jmpq *0x99bd(%rip)        # be88 <system@GLIBC_2.2.5>
    24cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024d0 <snprintf@plt>:
    24d0:	f3 0f 1e fa          	endbr64 
    24d4:	f2 ff 25 b5 99 00 00 	bnd jmpq *0x99b5(%rip)        # be90 <snprintf@GLIBC_2.2.5>
    24db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024e0 <nanosleep@plt>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	f2 ff 25 ad 99 00 00 	bnd jmpq *0x99ad(%rip)        # be98 <nanosleep@GLIBC_2.2.5>
    24eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024f0 <strnlen@plt>:
    24f0:	f3 0f 1e fa          	endbr64 
    24f4:	f2 ff 25 a5 99 00 00 	bnd jmpq *0x99a5(%rip)        # bea0 <strnlen@GLIBC_2.2.5>
    24fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002500 <close@plt>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	f2 ff 25 9d 99 00 00 	bnd jmpq *0x999d(%rip)        # bea8 <close@GLIBC_2.2.5>
    250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002510 <read@plt>:
    2510:	f3 0f 1e fa          	endbr64 
    2514:	f2 ff 25 95 99 00 00 	bnd jmpq *0x9995(%rip)        # beb0 <read@GLIBC_2.2.5>
    251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002520 <strtoull@plt>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	f2 ff 25 8d 99 00 00 	bnd jmpq *0x998d(%rip)        # beb8 <strtoull@GLIBC_2.2.5>
    252b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002530 <calloc@plt>:
    2530:	f3 0f 1e fa          	endbr64 
    2534:	f2 ff 25 85 99 00 00 	bnd jmpq *0x9985(%rip)        # bec0 <calloc@GLIBC_2.2.5>
    253b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002540 <strcmp@plt>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	f2 ff 25 7d 99 00 00 	bnd jmpq *0x997d(%rip)        # bec8 <strcmp@GLIBC_2.2.5>
    254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002550 <strtoll@plt>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	f2 ff 25 75 99 00 00 	bnd jmpq *0x9975(%rip)        # bed0 <strtoll@GLIBC_2.2.5>
    255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002560 <unlockpt@plt>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	f2 ff 25 6d 99 00 00 	bnd jmpq *0x996d(%rip)        # bed8 <unlockpt@GLIBC_2.2.5>
    256b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002570 <__memcpy_chk@plt>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	f2 ff 25 65 99 00 00 	bnd jmpq *0x9965(%rip)        # bee0 <__memcpy_chk@GLIBC_2.3.4>
    257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002580 <sigemptyset@plt>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	f2 ff 25 5d 99 00 00 	bnd jmpq *0x995d(%rip)        # bee8 <sigemptyset@GLIBC_2.2.5>
    258b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002590 <strtol@plt>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	f2 ff 25 55 99 00 00 	bnd jmpq *0x9955(%rip)        # bef0 <strtol@GLIBC_2.2.5>
    259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025a0 <pthread_mutex_unlock@plt>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	f2 ff 25 4d 99 00 00 	bnd jmpq *0x994d(%rip)        # bef8 <pthread_mutex_unlock@GLIBC_2.2.5>
    25ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025b0 <pthread_exit@plt>:
    25b0:	f3 0f 1e fa          	endbr64 
    25b4:	f2 ff 25 45 99 00 00 	bnd jmpq *0x9945(%rip)        # bf00 <pthread_exit@GLIBC_2.2.5>
    25bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025c0 <malloc@plt>:
    25c0:	f3 0f 1e fa          	endbr64 
    25c4:	f2 ff 25 3d 99 00 00 	bnd jmpq *0x993d(%rip)        # bf08 <malloc@GLIBC_2.2.5>
    25cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025d0 <realloc@plt>:
    25d0:	f3 0f 1e fa          	endbr64 
    25d4:	f2 ff 25 35 99 00 00 	bnd jmpq *0x9935(%rip)        # bf10 <realloc@GLIBC_2.2.5>
    25db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025e0 <setvbuf@plt>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	f2 ff 25 2d 99 00 00 	bnd jmpq *0x992d(%rip)        # bf18 <setvbuf@GLIBC_2.2.5>
    25eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025f0 <pthread_self@plt>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	f2 ff 25 25 99 00 00 	bnd jmpq *0x9925(%rip)        # bf20 <pthread_self@GLIBC_2.2.5>
    25fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002600 <tcgetattr@plt>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	f2 ff 25 1d 99 00 00 	bnd jmpq *0x991d(%rip)        # bf28 <tcgetattr@GLIBC_2.2.5>
    260b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002610 <tcsetattr@plt>:
    2610:	f3 0f 1e fa          	endbr64 
    2614:	f2 ff 25 15 99 00 00 	bnd jmpq *0x9915(%rip)        # bf30 <tcsetattr@GLIBC_2.2.5>
    261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002620 <strtoul@plt>:
    2620:	f3 0f 1e fa          	endbr64 
    2624:	f2 ff 25 0d 99 00 00 	bnd jmpq *0x990d(%rip)        # bf38 <strtoul@GLIBC_2.2.5>
    262b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002630 <grantpt@plt>:
    2630:	f3 0f 1e fa          	endbr64 
    2634:	f2 ff 25 05 99 00 00 	bnd jmpq *0x9905(%rip)        # bf40 <grantpt@GLIBC_2.2.5>
    263b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002640 <__memset_chk@plt>:
    2640:	f3 0f 1e fa          	endbr64 
    2644:	f2 ff 25 fd 98 00 00 	bnd jmpq *0x98fd(%rip)        # bf48 <__memset_chk@GLIBC_2.3.4>
    264b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002650 <__pthread_unwind_next@plt>:
    2650:	f3 0f 1e fa          	endbr64 
    2654:	f2 ff 25 f5 98 00 00 	bnd jmpq *0x98f5(%rip)        # bf50 <__pthread_unwind_next@GLIBC_2.3.3>
    265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002660 <exit@plt>:
    2660:	f3 0f 1e fa          	endbr64 
    2664:	f2 ff 25 ed 98 00 00 	bnd jmpq *0x98ed(%rip)        # bf58 <exit@GLIBC_2.2.5>
    266b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002670 <__fprintf_chk@plt>:
    2670:	f3 0f 1e fa          	endbr64 
    2674:	f2 ff 25 e5 98 00 00 	bnd jmpq *0x98e5(%rip)        # bf60 <__fprintf_chk@GLIBC_2.3.4>
    267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002680 <__sigsetjmp@plt>:
    2680:	f3 0f 1e fa          	endbr64 
    2684:	f2 ff 25 dd 98 00 00 	bnd jmpq *0x98dd(%rip)        # bf68 <__sigsetjmp@GLIBC_2.2.5>
    268b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002690 <posix_openpt@plt>:
    2690:	f3 0f 1e fa          	endbr64 
    2694:	f2 ff 25 d5 98 00 00 	bnd jmpq *0x98d5(%rip)        # bf70 <posix_openpt@GLIBC_2.2.5>
    269b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026a0 <sleep@plt>:
    26a0:	f3 0f 1e fa          	endbr64 
    26a4:	f2 ff 25 cd 98 00 00 	bnd jmpq *0x98cd(%rip)        # bf78 <sleep@GLIBC_2.2.5>
    26ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026b0 <pthread_mutex_lock@plt>:
    26b0:	f3 0f 1e fa          	endbr64 
    26b4:	f2 ff 25 c5 98 00 00 	bnd jmpq *0x98c5(%rip)        # bf80 <pthread_mutex_lock@GLIBC_2.2.5>
    26bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026c0 <__ctype_b_loc@plt>:
    26c0:	f3 0f 1e fa          	endbr64 
    26c4:	f2 ff 25 bd 98 00 00 	bnd jmpq *0x98bd(%rip)        # bf88 <__ctype_b_loc@GLIBC_2.3>
    26cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026d0 <__sprintf_chk@plt>:
    26d0:	f3 0f 1e fa          	endbr64 
    26d4:	f2 ff 25 b5 98 00 00 	bnd jmpq *0x98b5(%rip)        # bf90 <__sprintf_chk@GLIBC_2.3.4>
    26db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000026e0 <_start>:
    26e0:	f3 0f 1e fa          	endbr64 
    26e4:	31 ed                	xor    %ebp,%ebp
    26e6:	49 89 d1             	mov    %rdx,%r9
    26e9:	5e                   	pop    %rsi
    26ea:	48 89 e2             	mov    %rsp,%rdx
    26ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    26f1:	50                   	push   %rax
    26f2:	54                   	push   %rsp
    26f3:	4c 8d 05 46 01 00 00 	lea    0x146(%rip),%r8        # 2840 <__libc_csu_fini>
    26fa:	48 8d 0d cf 00 00 00 	lea    0xcf(%rip),%rcx        # 27d0 <__libc_csu_init>
    2701:	48 8d 3d f9 39 00 00 	lea    0x39f9(%rip),%rdi        # 6101 <main>
    2708:	ff 15 ba 98 00 00    	callq  *0x98ba(%rip)        # bfc8 <__libc_start_main@GLIBC_2.2.5>
    270e:	f4                   	hlt    
    270f:	90                   	nop

0000000000002710 <deregister_tm_clones>:
    2710:	48 8d 3d 69 9d 00 00 	lea    0x9d69(%rip),%rdi        # c480 <__TMC_END__>
    2717:	48 8d 05 62 9d 00 00 	lea    0x9d62(%rip),%rax        # c480 <__TMC_END__>
    271e:	48 39 f8             	cmp    %rdi,%rax
    2721:	74 15                	je     2738 <deregister_tm_clones+0x28>
    2723:	48 8b 05 76 98 00 00 	mov    0x9876(%rip),%rax        # bfa0 <_ITM_deregisterTMCloneTable>
    272a:	48 85 c0             	test   %rax,%rax
    272d:	74 09                	je     2738 <deregister_tm_clones+0x28>
    272f:	ff e0                	jmpq   *%rax
    2731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2738:	c3                   	retq   
    2739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002740 <register_tm_clones>:
    2740:	48 8d 3d 39 9d 00 00 	lea    0x9d39(%rip),%rdi        # c480 <__TMC_END__>
    2747:	48 8d 35 32 9d 00 00 	lea    0x9d32(%rip),%rsi        # c480 <__TMC_END__>
    274e:	48 29 fe             	sub    %rdi,%rsi
    2751:	48 89 f0             	mov    %rsi,%rax
    2754:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2758:	48 c1 f8 03          	sar    $0x3,%rax
    275c:	48 01 c6             	add    %rax,%rsi
    275f:	48 d1 fe             	sar    %rsi
    2762:	74 14                	je     2778 <register_tm_clones+0x38>
    2764:	48 8b 05 75 98 00 00 	mov    0x9875(%rip),%rax        # bfe0 <_ITM_registerTMCloneTable>
    276b:	48 85 c0             	test   %rax,%rax
    276e:	74 08                	je     2778 <register_tm_clones+0x38>
    2770:	ff e0                	jmpq   *%rax
    2772:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2778:	c3                   	retq   
    2779:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002780 <__do_global_dtors_aux>:
    2780:	f3 0f 1e fa          	endbr64 
    2784:	80 3d b1 c6 00 00 00 	cmpb   $0x0,0xc6b1(%rip)        # ee3c <completed.8060>
    278b:	75 2b                	jne    27b8 <__do_global_dtors_aux+0x38>
    278d:	55                   	push   %rbp
    278e:	48 83 3d 52 98 00 00 	cmpq   $0x0,0x9852(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    2795:	00 
    2796:	48 89 e5             	mov    %rsp,%rbp
    2799:	74 0c                	je     27a7 <__do_global_dtors_aux+0x27>
    279b:	48 8b 3d 9e 9c 00 00 	mov    0x9c9e(%rip),%rdi        # c440 <__dso_handle>
    27a2:	e8 d9 fb ff ff       	callq  2380 <__cxa_finalize@plt>
    27a7:	e8 64 ff ff ff       	callq  2710 <deregister_tm_clones>
    27ac:	c6 05 89 c6 00 00 01 	movb   $0x1,0xc689(%rip)        # ee3c <completed.8060>
    27b3:	5d                   	pop    %rbp
    27b4:	c3                   	retq   
    27b5:	0f 1f 00             	nopl   (%rax)
    27b8:	c3                   	retq   
    27b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027c0 <frame_dummy>:
    27c0:	f3 0f 1e fa          	endbr64 
    27c4:	e9 77 ff ff ff       	jmpq   2740 <register_tm_clones>
    27c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027d0 <__libc_csu_init>:
    27d0:	f3 0f 1e fa          	endbr64 
    27d4:	41 57                	push   %r15
    27d6:	4c 8d 3d 73 93 00 00 	lea    0x9373(%rip),%r15        # bb50 <__frame_dummy_init_array_entry>
    27dd:	41 56                	push   %r14
    27df:	49 89 d6             	mov    %rdx,%r14
    27e2:	41 55                	push   %r13
    27e4:	49 89 f5             	mov    %rsi,%r13
    27e7:	41 54                	push   %r12
    27e9:	41 89 fc             	mov    %edi,%r12d
    27ec:	55                   	push   %rbp
    27ed:	48 8d 2d 64 93 00 00 	lea    0x9364(%rip),%rbp        # bb58 <__do_global_dtors_aux_fini_array_entry>
    27f4:	53                   	push   %rbx
    27f5:	4c 29 fd             	sub    %r15,%rbp
    27f8:	48 83 ec 08          	sub    $0x8,%rsp
    27fc:	e8 ff f7 ff ff       	callq  2000 <_init>
    2801:	48 c1 fd 03          	sar    $0x3,%rbp
    2805:	74 1f                	je     2826 <__libc_csu_init+0x56>
    2807:	31 db                	xor    %ebx,%ebx
    2809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2810:	4c 89 f2             	mov    %r14,%rdx
    2813:	4c 89 ee             	mov    %r13,%rsi
    2816:	44 89 e7             	mov    %r12d,%edi
    2819:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    281d:	48 83 c3 01          	add    $0x1,%rbx
    2821:	48 39 dd             	cmp    %rbx,%rbp
    2824:	75 ea                	jne    2810 <__libc_csu_init+0x40>
    2826:	48 83 c4 08          	add    $0x8,%rsp
    282a:	5b                   	pop    %rbx
    282b:	5d                   	pop    %rbp
    282c:	41 5c                	pop    %r12
    282e:	41 5d                	pop    %r13
    2830:	41 5e                	pop    %r14
    2832:	41 5f                	pop    %r15
    2834:	c3                   	retq   
    2835:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    283c:	00 00 00 00 

0000000000002840 <__libc_csu_fini>:
    2840:	f3 0f 1e fa          	endbr64 
    2844:	c3                   	retq   

0000000000002845 <uart_out>:
	}

	return;
}

void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2845:	f3 0f 1e fa          	endbr64 
    2849:	41 55                	push   %r13
	// ## setup area ##
	ARG_UNUSED(ptr1);
	ARG_UNUSED(ptr2);
	ARG_UNUSED(ptr3);

	unsigned char *output=malloc(100*sizeof(char));
    284b:	bf 64 00 00 00       	mov    $0x64,%edi
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2850:	41 54                	push   %r12

	// ## main loop ##
	for(;;){
		memset(output, 0, strlen(output));
    2852:	49 83 cc ff          	or     $0xffffffffffffffff,%r12
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2856:	55                   	push   %rbp
    2857:	53                   	push   %rbx
    2858:	50                   	push   %rax
	unsigned char *output=malloc(100*sizeof(char));
    2859:	e8 62 fd ff ff       	callq  25c0 <malloc@plt>
    285e:	48 89 c5             	mov    %rax,%rbp
		memset(output, 0, strlen(output));
    2861:	31 c0                	xor    %eax,%eax
    2863:	48 89 ef             	mov    %rbp,%rdi
    2866:	4c 89 e1             	mov    %r12,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    2869:	31 f6                	xor    %esi,%esi
    286b:	f2 ae                	repnz scas %es:(%rdi),%al
    286d:	48 89 ef             	mov    %rbp,%rdi
    2870:	48 89 c8             	mov    %rcx,%rax
    2873:	b9 64 00 00 00       	mov    $0x64,%ecx
    2878:	48 f7 d0             	not    %rax
    287b:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    287f:	e8 bc fd ff ff       	callq  2640 <__memset_chk@plt>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    2884:	48 8d 3d ed ba 00 00 	lea    0xbaed(%rip),%rdi        # e378 <uart_msgq>
    288b:	31 d2                	xor    %edx,%edx
    288d:	48 89 ee             	mov    %rbp,%rsi
    2890:	e8 0d 50 00 00       	callq  78a2 <z_impl_k_msgq_get>
    2895:	89 c3                	mov    %eax,%ebx
		if(k_msgq_get(&uart_msgq, output, K_NO_WAIT)==0){
    2897:	85 c0                	test   %eax,%eax
    2899:	74 07                	je     28a2 <uart_out+0x5d>
	z_impl_k_yield();
    289b:	e8 02 58 00 00       	callq  80a2 <z_impl_k_yield>
}
    28a0:	eb bf                	jmp    2861 <uart_out+0x1c>
			printk("Going to send data: <%s>\n", output);
    28a2:	48 89 ee             	mov    %rbp,%rsi
    28a5:	48 8d 3d 00 6b 00 00 	lea    0x6b00(%rip),%rdi        # 93ac <default_cmd+0x14c>
    28ac:	31 c0                	xor    %eax,%eax
    28ae:	e8 51 02 00 00       	callq  2b04 <printk>
			for(int i=0; i<strlen(output); i++){
    28b3:	31 c0                	xor    %eax,%eax
    28b5:	4c 89 e1             	mov    %r12,%rcx
    28b8:	48 89 ef             	mov    %rbp,%rdi
    28bb:	48 63 d3             	movslq %ebx,%rdx
    28be:	f2 ae                	repnz scas %es:(%rdi),%al
    28c0:	48 89 c8             	mov    %rcx,%rax
    28c3:	48 f7 d0             	not    %rax
    28c6:	48 ff c8             	dec    %rax
    28c9:	48 39 c2             	cmp    %rax,%rdx
    28cc:	73 cd                	jae    289b <uart_out+0x56>
				uart_poll_out(uart_dev, *(output+i));
    28ce:	48 8d 05 43 c4 00 00 	lea    0xc443(%rip),%rax        # ed18 <uart_dev>
    28d5:	4c 8d 6c 15 00       	lea    0x0(%rbp,%rdx,1),%r13
    28da:	41 0f b6 75 00       	movzbl 0x0(%r13),%esi
    28df:	48 8b 38             	mov    (%rax),%rdi
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    28e2:	48 8b 47 10          	mov    0x10(%rdi),%rax
			for(int i=0; i<strlen(output); i++){
    28e6:	ff c3                	inc    %ebx
    28e8:	ff 50 08             	callq  *0x8(%rax)
				printk("Sent data: <%x>\n", *(output+i));
    28eb:	41 0f b6 75 00       	movzbl 0x0(%r13),%esi
    28f0:	48 8d 3d cf 6a 00 00 	lea    0x6acf(%rip),%rdi        # 93c6 <default_cmd+0x166>
    28f7:	31 c0                	xor    %eax,%eax
    28f9:	e8 06 02 00 00       	callq  2b04 <printk>
			for(int i=0; i<strlen(output); i++){
    28fe:	eb b3                	jmp    28b3 <uart_out+0x6e>

0000000000002900 <processing>:
		k_yield();
	}
	return;
}

void processing(void *ptr1, void *ptr2, void *ptr3){
    2900:	f3 0f 1e fa          	endbr64 
    2904:	53                   	push   %rbx
	ARG_UNUSED(ptr2);
	ARG_UNUSED(ptr3);

	// ## main loop ##
	for(;;){
		switch(state){
    2905:	48 8d 1d ec c4 00 00 	lea    0xc4ec(%rip),%rbx        # edf8 <state>
    290c:	83 3b 01             	cmpl   $0x1,(%rbx)
    290f:	75 2b                	jne    293c <processing+0x3c>
	return z_impl_k_msgq_put(msgq, data, timeout);
    2911:	48 8d 3d 60 ba 00 00 	lea    0xba60(%rip),%rdi        # e378 <uart_msgq>
    2918:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    291c:	48 8d 35 b4 6a 00 00 	lea    0x6ab4(%rip),%rsi        # 93d7 <default_cmd+0x177>
    2923:	e8 83 4e 00 00       	callq  77ab <z_impl_k_msgq_put>
			case init:
				break;
			case avail:
				k_msgq_put(&uart_msgq, "PROCESSING AVAILABLE\n", K_FOREVER);
				printk("Changing state to init\n");
    2928:	48 8d 3d be 6a 00 00 	lea    0x6abe(%rip),%rdi        # 93ed <default_cmd+0x18d>
    292f:	31 c0                	xor    %eax,%eax
    2931:	e8 ce 01 00 00       	callq  2b04 <printk>
				state = init;
    2936:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
	z_impl_k_yield();
    293c:	e8 61 57 00 00       	callq  80a2 <z_impl_k_yield>
}
    2941:	eb c9                	jmp    290c <processing+0xc>

0000000000002943 <zephyr_app_main>:
void main(void){
    2943:	f3 0f 1e fa          	endbr64 
    2947:	53                   	push   %rbx
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2948:	48 8d 3d b6 6a 00 00 	lea    0x6ab6(%rip),%rdi        # 9405 <default_cmd+0x1a5>
    294f:	e8 71 4c 00 00       	callq  75c5 <z_impl_device_get_binding>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2954:	48 8d 1d bd c3 00 00 	lea    0xc3bd(%rip),%rbx        # ed18 <uart_dev>
		printk("UART not found\n");
    295b:	48 8d 3d aa 6a 00 00 	lea    0x6aaa(%rip),%rdi        # 940c <default_cmd+0x1ac>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2962:	48 89 03             	mov    %rax,(%rbx)
	if(!uart_dev){
    2965:	48 85 c0             	test   %rax,%rax
    2968:	74 3f                	je     29a9 <zephyr_app_main+0x66>
	printk("UART found\n");
    296a:	31 c0                	xor    %eax,%eax
    296c:	48 8d 3d a9 6a 00 00 	lea    0x6aa9(%rip),%rdi        # 941c <default_cmd+0x1bc>
    2973:	e8 8c 01 00 00       	callq  2b04 <printk>
	uartconf.baudrate = 9600;
    2978:	48 8d 35 91 c3 00 00 	lea    0xc391(%rip),%rsi        # ed10 <uartconf>
	if(!uart_configure(uart_dev, &uartconf)){
    297f:	48 8b 3b             	mov    (%rbx),%rdi
	uartconf.baudrate = 9600;
    2982:	48 b8 80 25 00 00 00 	movabs $0x3010000002580,%rax
    2989:	01 03 00 
    298c:	48 89 06             	mov    %rax,(%rsi)
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    298f:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2993:	48 8b 40 18          	mov    0x18(%rax),%rax
    2997:	48 85 c0             	test   %rax,%rax
    299a:	74 13                	je     29af <zephyr_app_main+0x6c>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    299c:	ff d0                	callq  *%rax
	if(!uart_configure(uart_dev, &uartconf)){
    299e:	85 c0                	test   %eax,%eax
    29a0:	75 0d                	jne    29af <zephyr_app_main+0x6c>
		printk("Configuration of UART failed\n");
    29a2:	48 8d 3d 7f 6a 00 00 	lea    0x6a7f(%rip),%rdi        # 9428 <default_cmd+0x1c8>
}
    29a9:	5b                   	pop    %rbx
		printk("Configuration of UART failed\n");
    29aa:	e9 55 01 00 00       	jmpq   2b04 <printk>
	printk("UART configured\n");
    29af:	48 8d 3d 90 6a 00 00 	lea    0x6a90(%rip),%rdi        # 9446 <default_cmd+0x1e6>
    29b6:	31 c0                	xor    %eax,%eax
		printk("\nmain is waiting for death\n");
    29b8:	48 8d 1d 98 6a 00 00 	lea    0x6a98(%rip),%rbx        # 9457 <default_cmd+0x1f7>
	printk("UART configured\n");
    29bf:	e8 40 01 00 00       	callq  2b04 <printk>
		printk("\nmain is waiting for death\n");
    29c4:	48 89 df             	mov    %rbx,%rdi
    29c7:	31 c0                	xor    %eax,%eax
    29c9:	e8 36 01 00 00       	callq  2b04 <printk>
	return z_impl_k_sleep(timeout);
    29ce:	bf e8 03 00 00       	mov    $0x3e8,%edi
    29d3:	e8 8e 57 00 00       	callq  8166 <z_impl_k_sleep>
    29d8:	eb ea                	jmp    29c4 <zephyr_app_main+0x81>

00000000000029da <state_machine>:
void state_machine(void){
    29da:	f3 0f 1e fa          	endbr64 
    29de:	53                   	push   %rbx
    29df:	48 83 ec 10          	sub    $0x10,%rsp
	switch(state){
    29e3:	48 8d 1d 0e c4 00 00 	lea    0xc40e(%rip),%rbx        # edf8 <state>
void state_machine(void){
    29ea:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    29f1:	00 00 
    29f3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    29f8:	31 c0                	xor    %eax,%eax
	switch(state){
    29fa:	83 3b 00             	cmpl   $0x0,(%rbx)
    29fd:	75 63                	jne    2a62 <state_machine+0x88>
			if(!uart_poll_in(uart_dev, &input)){
    29ff:	48 8d 05 12 c3 00 00 	lea    0xc312(%rip),%rax        # ed18 <uart_dev>
    2a06:	48 8b 38             	mov    (%rax),%rdi
	return api->poll_in(dev, p_char);
    2a09:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2a0d:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    2a12:	ff 10                	callq  *(%rax)
    2a14:	85 c0                	test   %eax,%eax
    2a16:	75 4a                	jne    2a62 <state_machine+0x88>
				printk("received data: %c\n", input);
    2a18:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
    2a1d:	48 8d 3d 4f 6a 00 00 	lea    0x6a4f(%rip),%rdi        # 9473 <default_cmd+0x213>
    2a24:	e8 db 00 00 00       	callq  2b04 <printk>
				switch(input){
    2a29:	8a 44 24 07          	mov    0x7(%rsp),%al
    2a2d:	3c 2e                	cmp    $0x2e,%al
    2a2f:	74 1a                	je     2a4b <state_machine+0x71>
    2a31:	3c 50                	cmp    $0x50,%al
    2a33:	75 2d                	jne    2a62 <state_machine+0x88>
						printk("Changing state to avail\n");
    2a35:	48 8d 3d 4d 6a 00 00 	lea    0x6a4d(%rip),%rdi        # 9489 <default_cmd+0x229>
    2a3c:	31 c0                	xor    %eax,%eax
    2a3e:	e8 c1 00 00 00       	callq  2b04 <printk>
						state = avail;
    2a43:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
	return;
    2a49:	eb 17                	jmp    2a62 <state_machine+0x88>
	return z_impl_k_msgq_put(msgq, data, timeout);
    2a4b:	48 8d 3d 26 b9 00 00 	lea    0xb926(%rip),%rdi        # e378 <uart_msgq>
    2a52:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2a56:	48 8d 35 29 6a 00 00 	lea    0x6a29(%rip),%rsi        # 9486 <default_cmd+0x226>
    2a5d:	e8 49 4d 00 00       	callq  77ab <z_impl_k_msgq_put>
}
    2a62:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2a67:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2a6e:	00 00 
    2a70:	74 05                	je     2a77 <state_machine+0x9d>
    2a72:	e8 39 fa ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2a77:	48 83 c4 10          	add    $0x10,%rsp
    2a7b:	5b                   	pop    %rbx
    2a7c:	c3                   	retq   

0000000000002a7d <uart_in>:
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    2a7d:	f3 0f 1e fa          	endbr64 
    2a81:	50                   	push   %rax
		state_machine();
    2a82:	e8 53 ff ff ff       	callq  29da <state_machine>
	z_impl_k_yield();
    2a87:	e8 16 56 00 00       	callq  80a2 <z_impl_k_yield>
    2a8c:	eb f4                	jmp    2a82 <uart_in+0x5>

0000000000002a8e <arch_printk_char_out>:
 *
 * @return 0
 */
/* LCOV_EXCL_START */
__attribute__((weak)) int arch_printk_char_out(int c)
{
    2a8e:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2a92:	31 c0                	xor    %eax,%eax
    2a94:	c3                   	retq   

0000000000002a95 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2a95:	f3 0f 1e fa          	endbr64 
	struct out_context *ctx = ctx_p;

	ctx->count++;
	return _char_out(c);
    2a99:	48 8d 05 a8 99 00 00 	lea    0x99a8(%rip),%rax        # c448 <_char_out>
	ctx->count++;
    2aa0:	ff 06                	incl   (%rsi)
	return _char_out(c);
    2aa2:	ff 20                	jmpq   *(%rax)

0000000000002aa4 <__printk_hook_install>:
{
    2aa4:	f3 0f 1e fa          	endbr64 
	_char_out = fn;
    2aa8:	48 8d 05 99 99 00 00 	lea    0x9999(%rip),%rax        # c448 <_char_out>
    2aaf:	48 89 38             	mov    %rdi,(%rax)
}
    2ab2:	c3                   	retq   

0000000000002ab3 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2ab3:	f3 0f 1e fa          	endbr64 
    2ab7:	48 83 ec 18          	sub    $0x18,%rsp
    2abb:	48 89 fa             	mov    %rdi,%rdx
    2abe:	48 89 f1             	mov    %rsi,%rcx
    2ac1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2ac8:	00 00 
    2aca:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2acf:	31 c0                	xor    %eax,%eax
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2ad1:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    2ad6:	48 8d 3d b8 ff ff ff 	lea    -0x48(%rip),%rdi        # 2a95 <char_out>
	struct out_context ctx = { 0 };
    2add:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    2ae4:	00 
	cbvprintf(char_out, &ctx, fmt, ap);
    2ae5:	e8 84 03 00 00       	callq  2e6e <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2aea:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2aef:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2af6:	00 00 
    2af8:	74 05                	je     2aff <vprintk+0x4c>
    2afa:	e8 b1 f9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2aff:	48 83 c4 18          	add    $0x18,%rsp
    2b03:	c3                   	retq   

0000000000002b04 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    2b04:	f3 0f 1e fa          	endbr64 
    2b08:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    2b0f:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    2b14:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    2b19:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    2b1e:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    2b23:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    2b28:	84 c0                	test   %al,%al
    2b2a:	74 37                	je     2b63 <printk+0x5f>
    2b2c:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    2b31:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    2b36:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    2b3b:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    2b42:	00 
    2b43:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    2b4a:	00 
    2b4b:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    2b52:	00 
    2b53:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    2b5a:	00 
    2b5b:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    2b62:	00 
    2b63:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2b6a:	00 00 
    2b6c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2b71:	31 c0                	xor    %eax,%eax
	va_list ap;

	va_start(ap, fmt);
    2b73:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    2b7a:	00 

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    2b7b:	48 89 e6             	mov    %rsp,%rsi
	va_start(ap, fmt);
    2b7e:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    2b85:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2b8a:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    2b8f:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2b94:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    2b9b:	00 
		vprintk(fmt, ap);
    2b9c:	e8 12 ff ff ff       	callq  2ab3 <vprintk>
	}
	va_end(ap);
}
    2ba1:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2ba6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2bad:	00 00 
    2baf:	74 05                	je     2bb6 <printk+0xb2>
    2bb1:	e8 fa f8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2bb6:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    2bbd:	c3                   	retq   

0000000000002bbe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2bbe:	f3 0f 1e fa          	endbr64 
    2bc2:	50                   	push   %rax
    2bc3:	58                   	pop    %rax
    2bc4:	49 89 f8             	mov    %rdi,%r8
    2bc7:	50                   	push   %rax
    2bc8:	48 89 f7             	mov    %rsi,%rdi
    2bcb:	48 89 d6             	mov    %rdx,%rsi
    2bce:	48 89 ca             	mov    %rcx,%rdx
	entry(p1, p2, p3);
    2bd1:	41 ff d0             	callq  *%r8
	return z_impl_k_current_get();
    2bd4:	e8 c5 55 00 00       	callq  819e <z_impl_k_current_get>
    2bd9:	48 89 c7             	mov    %rax,%rdi
	z_impl_k_thread_abort(thread);
    2bdc:	e8 06 26 00 00       	callq  51e7 <z_impl_k_thread_abort>
	/*
	 * Compiler can't tell that k_thread_abort() won't return and issues a
	 * warning unless we tell it that control never gets this far.
	 */

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2be1:	ba 26 00 00 00       	mov    $0x26,%edx
    2be6:	48 8d 35 dd 68 00 00 	lea    0x68dd(%rip),%rsi        # 94ca <default_cmd+0x26a>
    2bed:	31 c0                	xor    %eax,%eax
    2bef:	48 8d 3d fd 68 00 00 	lea    0x68fd(%rip),%rdi        # 94f3 <default_cmd+0x293>
    2bf6:	e8 d0 35 00 00       	callq  61cb <posix_print_error_and_exit>

0000000000002bfb <chunk_size>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2bfb:	89 f6                	mov    %esi,%esi
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    2bfd:	8b 44 f7 04          	mov    0x4(%rdi,%rsi,8),%eax
    2c01:	d1 e8                	shr    %eax
}
    2c03:	c3                   	retq   

0000000000002c04 <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2c04:	89 f6                	mov    %esi,%esi
{
    2c06:	41 89 d0             	mov    %edx,%r8d
	void *cmem = &buf[c];
    2c09:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax

	if (big_heap(h)) {
		if (used) {
    2c0d:	8b 48 04             	mov    0x4(%rax),%ecx
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    2c10:	89 ca                	mov    %ecx,%edx
    2c12:	83 e2 fe             	and    $0xfffffffe,%edx
		if (used) {
    2c15:	45 84 c0             	test   %r8b,%r8b
    2c18:	74 05                	je     2c1f <set_chunk_used+0x1b>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    2c1a:	83 c9 01             	or     $0x1,%ecx
    2c1d:	89 ca                	mov    %ecx,%edx
    2c1f:	89 50 04             	mov    %edx,0x4(%rax)
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
    2c22:	c3                   	retq   

0000000000002c23 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2c23:	89 f2                	mov    %esi,%edx
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    2c25:	e8 d1 ff ff ff       	callq  2bfb <chunk_size>
	if (!solo_free_header(h, c)) {
    2c2a:	83 f8 01             	cmp    $0x1,%eax
    2c2d:	74 5b                	je     2c8a <free_list_add+0x67>
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    2c2f:	ff c8                	dec    %eax
	return 31 - __builtin_clz(usable_sz);
    2c31:	b9 1f 00 00 00       	mov    $0x1f,%ecx
    2c36:	0f bd c0             	bsr    %eax,%eax
    2c39:	83 f0 1f             	xor    $0x1f,%eax
    2c3c:	29 c1                	sub    %eax,%ecx
	if (b->next == 0U) {
    2c3e:	48 63 c1             	movslq %ecx,%rax
    2c41:	4c 8d 14 87          	lea    (%rdi,%rax,4),%r10
    2c45:	89 d0                	mov    %edx,%eax
    2c47:	41 8b 72 10          	mov    0x10(%r10),%esi
    2c4b:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
    2c52:	00 
    2c53:	4c 8d 0c 07          	lea    (%rdi,%rax,1),%r9
    2c57:	4c 8d 44 07 04       	lea    0x4(%rdi,%rax,1),%r8
    2c5c:	85 f6                	test   %esi,%esi
    2c5e:	75 15                	jne    2c75 <free_list_add+0x52>
		h->avail_buckets |= (1 << bidx);
    2c60:	b8 01 00 00 00       	mov    $0x1,%eax
    2c65:	d3 e0                	shl    %cl,%eax
    2c67:	09 47 0c             	or     %eax,0xc(%rdi)
		b->next = c;
    2c6a:	41 89 52 10          	mov    %edx,0x10(%r10)
		((uint32_t *)cmem)[f] = val;
    2c6e:	41 89 11             	mov    %edx,(%r9)
    2c71:	41 89 10             	mov    %edx,(%r8)
}
    2c74:	c3                   	retq   
	void *cmem = &buf[c];
    2c75:	89 f0                	mov    %esi,%eax
		return ((uint32_t *)cmem)[f];
    2c77:	48 8d 4c c7 08       	lea    0x8(%rdi,%rax,8),%rcx
    2c7c:	8b 01                	mov    (%rcx),%eax
		((uint32_t *)cmem)[f] = val;
    2c7e:	41 89 01             	mov    %eax,(%r9)
    2c81:	41 89 30             	mov    %esi,(%r8)
    2c84:	89 54 c7 0c          	mov    %edx,0xc(%rdi,%rax,8)
    2c88:	89 11                	mov    %edx,(%rcx)
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
    2c8a:	c3                   	retq   

0000000000002c8b <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2c8b:	f3 0f 1e fa          	endbr64 
    2c8f:	49 89 f8             	mov    %rdi,%r8
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2c92:	4c 8d 4c 16 f8       	lea    -0x8(%rsi,%rdx,1),%r9
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2c97:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2c9b:	ba 20 00 00 00       	mov    $0x20,%edx
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2ca0:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2ca4:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2ca8:	49 29 f9             	sub    %rdi,%r9
	heap->heap = h;
    2cab:	49 89 38             	mov    %rdi,(%r8)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2cae:	49 c1 e9 03          	shr    $0x3,%r9
	h->avail_buckets = 0;
    2cb2:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    2cb9:	41 8d 41 ff          	lea    -0x1(%r9),%eax
	h->end_chunk = heap_sz;
    2cbd:	44 89 4f 08          	mov    %r9d,0x8(%rdi)
	return 31 - __builtin_clz(usable_sz);
    2cc1:	0f bd c0             	bsr    %eax,%eax
    2cc4:	83 f0 1f             	xor    $0x1f,%eax
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2cc7:	29 c2                	sub    %eax,%edx
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2cc9:	48 63 c2             	movslq %edx,%rax
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2ccc:	4c 8d 14 85 17 00 00 	lea    0x17(,%rax,4),%r10
    2cd3:	00 
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    2cd4:	31 c0                	xor    %eax,%eax
    2cd6:	49 c1 ea 03          	shr    $0x3,%r10
    2cda:	39 c2                	cmp    %eax,%edx
    2cdc:	7e 0d                	jle    2ceb <sys_heap_init+0x60>
		h->buckets[i].next = 0;
    2cde:	c7 44 87 10 00 00 00 	movl   $0x0,0x10(%rdi,%rax,4)
    2ce5:	00 
	for (int i = 0; i < nb_buckets; i++) {
    2ce6:	48 ff c0             	inc    %rax
    2ce9:	eb ef                	jmp    2cda <sys_heap_init+0x4f>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2ceb:	43 8d 04 12          	lea    (%r10,%r10,1),%eax
		((uint32_t *)cmem)[f] = val;
    2cef:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
    2cf5:	ba 01 00 00 00       	mov    $0x1,%edx
    2cfa:	31 f6                	xor    %esi,%esi
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2cfc:	89 47 04             	mov    %eax,0x4(%rdi)
    2cff:	e8 00 ff ff ff       	callq  2c04 <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2d04:	44 89 ca             	mov    %r9d,%edx
		((uint32_t *)cmem)[f] = val;
    2d07:	46 89 14 d7          	mov    %r10d,(%rdi,%r10,8)
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    2d0b:	44 89 ce             	mov    %r9d,%esi
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2d0e:	44 29 d2             	sub    %r10d,%edx
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2d11:	8d 04 12             	lea    (%rdx,%rdx,1),%eax
    2d14:	42 89 44 d7 04       	mov    %eax,0x4(%rdi,%r10,8)
	void *cmem = &buf[c];
    2d19:	44 89 c8             	mov    %r9d,%eax
		((uint32_t *)cmem)[f] = val;
    2d1c:	89 14 c7             	mov    %edx,(%rdi,%rax,8)
	set_chunk_used(h, heap_sz, true);
    2d1f:	ba 01 00 00 00       	mov    $0x1,%edx
    2d24:	c7 44 c7 04 00 00 00 	movl   $0x0,0x4(%rdi,%rax,8)
    2d2b:	00 
    2d2c:	e8 d3 fe ff ff       	callq  2c04 <set_chunk_used>

	free_list_add(h, chunk0_size);
    2d31:	44 89 d6             	mov    %r10d,%esi
    2d34:	e9 ea fe ff ff       	jmpq   2c23 <free_list_add>

0000000000002d39 <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    2d39:	41 56                	push   %r14
    2d3b:	49 89 f6             	mov    %rsi,%r14
    2d3e:	41 55                	push   %r13
    2d40:	49 89 fd             	mov    %rdi,%r13
    2d43:	41 54                	push   %r12
    2d45:	49 89 cc             	mov    %rcx,%r12
    2d48:	55                   	push   %rbp
    2d49:	48 89 d5             	mov    %rdx,%rbp
    2d4c:	53                   	push   %rbx
	size_t count = 0;
    2d4d:	31 db                	xor    %ebx,%ebx

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2d4f:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
    2d54:	49 39 c4             	cmp    %rax,%r12
    2d57:	76 16                	jbe    2d6f <outs+0x36>
		int rc = out((int)*sp++, ctx);
    2d59:	31 c0                	xor    %eax,%eax
    2d5b:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
    2d60:	4c 89 f6             	mov    %r14,%rsi
    2d63:	41 ff d5             	callq  *%r13

		if (rc < 0) {
    2d66:	85 c0                	test   %eax,%eax
    2d68:	78 17                	js     2d81 <outs+0x48>
			return rc;
		}
		++count;
    2d6a:	48 ff c3             	inc    %rbx
    2d6d:	eb e0                	jmp    2d4f <outs+0x16>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2d6f:	4d 85 e4             	test   %r12,%r12
    2d72:	74 04                	je     2d78 <outs+0x3f>
	}

	return (int)count;
    2d74:	89 d8                	mov    %ebx,%eax
    2d76:	eb 09                	jmp    2d81 <outs+0x48>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2d78:	80 7c 1d 00 00       	cmpb   $0x0,0x0(%rbp,%rbx,1)
    2d7d:	75 da                	jne    2d59 <outs+0x20>
    2d7f:	eb f3                	jmp    2d74 <outs+0x3b>
}
    2d81:	5b                   	pop    %rbx
    2d82:	5d                   	pop    %rbp
    2d83:	41 5c                	pop    %r12
    2d85:	41 5d                	pop    %r13
    2d87:	41 5e                	pop    %r14
    2d89:	c3                   	retq   

0000000000002d8a <extract_decimal>:
{
    2d8a:	55                   	push   %rbp
    2d8b:	53                   	push   %rbx
    2d8c:	48 89 fb             	mov    %rdi,%rbx
    2d8f:	51                   	push   %rcx
	const char *sp = *str;
    2d90:	48 8b 2f             	mov    (%rdi),%rbp
	while (isdigit((int)(unsigned char)*sp)) {
    2d93:	e8 28 f9 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    2d98:	48 8b 08             	mov    (%rax),%rcx
	size_t val = 0;
    2d9b:	31 c0                	xor    %eax,%eax
	while (isdigit((int)(unsigned char)*sp)) {
    2d9d:	48 0f be 55 00       	movsbq 0x0(%rbp),%rdx
    2da2:	0f b6 f2             	movzbl %dl,%esi
    2da5:	f6 44 71 01 08       	testb  $0x8,0x1(%rcx,%rsi,2)
    2daa:	74 0e                	je     2dba <extract_decimal+0x30>
		val = 10U * val + *sp++ - '0';
    2dac:	48 6b c0 0a          	imul   $0xa,%rax,%rax
    2db0:	48 ff c5             	inc    %rbp
    2db3:	48 8d 44 10 d0       	lea    -0x30(%rax,%rdx,1),%rax
    2db8:	eb e3                	jmp    2d9d <extract_decimal+0x13>
	*str = sp;
    2dba:	48 89 2b             	mov    %rbp,(%rbx)
}
    2dbd:	5a                   	pop    %rdx
    2dbe:	5b                   	pop    %rbx
    2dbf:	5d                   	pop    %rbp
    2dc0:	c3                   	retq   

0000000000002dc1 <encode_uint>:
{
    2dc1:	41 55                	push   %r13
    2dc3:	49 89 fd             	mov    %rdi,%r13
    2dc6:	41 54                	push   %r12
    2dc8:	49 89 cc             	mov    %rcx,%r12
    2dcb:	55                   	push   %rbp
    2dcc:	48 89 d5             	mov    %rdx,%rbp
    2dcf:	53                   	push   %rbx
    2dd0:	48 89 f3             	mov    %rsi,%rbx
    2dd3:	41 50                	push   %r8
	bool upcase = isupper((int)conv->specifier);
    2dd5:	e8 e6 f8 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    2dda:	0f b6 4b 03          	movzbl 0x3(%rbx),%ecx
    2dde:	49 89 c0             	mov    %rax,%r8
    2de1:	49 8b 10             	mov    (%r8),%rdx
    2de4:	48 89 c8             	mov    %rcx,%rax
	switch (specifier) {
    2de7:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    2ded:	66 8b 0c 4a          	mov    (%rdx,%rcx,2),%cx
    2df1:	66 81 e1 00 01       	and    $0x100,%cx
    2df6:	3c 6f                	cmp    $0x6f,%al
    2df8:	74 3b                	je     2e35 <encode_uint+0x74>
    2dfa:	77 04                	ja     2e00 <encode_uint+0x3f>
		return 16;
    2dfc:	3c 58                	cmp    $0x58,%al
    2dfe:	eb 05                	jmp    2e05 <encode_uint+0x44>
	switch (specifier) {
    2e00:	83 e0 f7             	and    $0xfffffff7,%eax
		return 16;
    2e03:	3c 70                	cmp    $0x70,%al
    2e05:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
    2e0b:	b8 10 00 00 00       	mov    $0x10,%eax
    2e10:	4c 0f 44 c0          	cmove  %rax,%r8
	char *bp = bps + (bpe - bps);
    2e14:	eb 1f                	jmp    2e35 <encode_uint+0x74>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2e16:	8d 72 57             	lea    0x57(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2e19:	66 85 c9             	test   %cx,%cx
    2e1c:	74 03                	je     2e21 <encode_uint+0x60>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2e1e:	8d 72 37             	lea    0x37(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2e21:	49 ff cc             	dec    %r12
    2e24:	41 88 34 24          	mov    %sil,(%r12)
	} while ((value != 0) && (bps < bp));
    2e28:	4d 39 c5             	cmp    %r8,%r13
    2e2b:	72 1b                	jb     2e48 <encode_uint+0x87>
    2e2d:	49 39 ec             	cmp    %rbp,%r12
    2e30:	76 16                	jbe    2e48 <encode_uint+0x87>
		value /= radix;
    2e32:	49 89 c5             	mov    %rax,%r13
		unsigned int lsv = (unsigned int)(value % radix);
    2e35:	4c 89 e8             	mov    %r13,%rax
    2e38:	31 d2                	xor    %edx,%edx
    2e3a:	49 f7 f0             	div    %r8
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2e3d:	8d 72 30             	lea    0x30(%rdx),%esi
    2e40:	48 83 fa 09          	cmp    $0x9,%rdx
    2e44:	76 db                	jbe    2e21 <encode_uint+0x60>
    2e46:	eb ce                	jmp    2e16 <encode_uint+0x55>
	if (conv->flag_hash) {
    2e48:	f6 03 20             	testb  $0x20,(%rbx)
    2e4b:	74 16                	je     2e63 <encode_uint+0xa2>
		if (radix == 8) {
    2e4d:	49 83 f8 08          	cmp    $0x8,%r8
    2e51:	75 06                	jne    2e59 <encode_uint+0x98>
			conv->altform_0 = true;
    2e53:	80 4b 02 08          	orb    $0x8,0x2(%rbx)
    2e57:	eb 0a                	jmp    2e63 <encode_uint+0xa2>
		} else if (radix == 16) {
    2e59:	49 83 f8 10          	cmp    $0x10,%r8
    2e5d:	75 04                	jne    2e63 <encode_uint+0xa2>
			conv->altform_0c = true;
    2e5f:	80 4b 02 10          	orb    $0x10,0x2(%rbx)
}
    2e63:	5a                   	pop    %rdx
    2e64:	4c 89 e0             	mov    %r12,%rax
    2e67:	5b                   	pop    %rbx
    2e68:	5d                   	pop    %rbp
    2e69:	41 5c                	pop    %r12
    2e6b:	41 5d                	pop    %r13
    2e6d:	c3                   	retq   

0000000000002e6e <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2e6e:	f3 0f 1e fa          	endbr64 
    2e72:	41 57                	push   %r15
    2e74:	49 89 f7             	mov    %rsi,%r15
    2e77:	41 56                	push   %r14
    2e79:	49 89 fe             	mov    %rdi,%r14
    2e7c:	41 55                	push   %r13
    2e7e:	49 89 d5             	mov    %rdx,%r13
    2e81:	41 54                	push   %r12
    2e83:	49 89 cc             	mov    %rcx,%r12
    2e86:	55                   	push   %rbp
    2e87:	53                   	push   %rbx
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2e88:	31 db                	xor    %ebx,%ebx
{
    2e8a:	48 83 ec 78          	sub    $0x78,%rsp
    2e8e:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2e95:	00 00 
    2e97:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    2e9c:	31 c0                	xor    %eax,%eax
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2e9e:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
    2ea3:	40 84 ff             	test   %dil,%dil
    2ea6:	0f 84 d2 09 00 00    	je     387e <cbvprintf+0xa10>
		if (*fp != '%') {
    2eac:	49 8d 6d 01          	lea    0x1(%r13),%rbp
			OUTC(*fp++);
    2eb0:	4c 89 fe             	mov    %r15,%rsi
		if (*fp != '%') {
    2eb3:	40 80 ff 25          	cmp    $0x25,%dil
    2eb7:	0f 85 89 06 00 00    	jne    3546 <cbvprintf+0x6d8>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2ebd:	31 c0                	xor    %eax,%eax
    2ebf:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    2ec4:	b9 08 00 00 00       	mov    $0x8,%ecx
    2ec9:	f3 ab                	rep stos %eax,%es:(%rdi)
	if (*sp == '%') {
    2ecb:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    2ed0:	41 80 7d 01 25       	cmpb   $0x25,0x1(%r13)
    2ed5:	75 1c                	jne    2ef3 <cbvprintf+0x85>
		conv->specifier = *sp++;
    2ed7:	c6 44 24 43 25       	movb   $0x25,0x43(%rsp)
    2edc:	49 8d 6d 02          	lea    0x2(%r13),%rbp
		return sp;
    2ee0:	e9 df 02 00 00       	jmpq   31c4 <cbvprintf+0x356>
		switch (*sp) {
    2ee5:	7e 15                	jle    2efc <cbvprintf+0x8e>
    2ee7:	3c 2d                	cmp    $0x2d,%al
    2ee9:	75 1b                	jne    2f06 <cbvprintf+0x98>
			conv->flag_dash = true;
    2eeb:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
			++sp;
    2ef0:	48 ff c5             	inc    %rbp
		switch (*sp) {
    2ef3:	8a 45 00             	mov    0x0(%rbp),%al
    2ef6:	3c 2b                	cmp    $0x2b,%al
    2ef8:	75 eb                	jne    2ee5 <cbvprintf+0x77>
    2efa:	eb 25                	jmp    2f21 <cbvprintf+0xb3>
    2efc:	3c 20                	cmp    $0x20,%al
    2efe:	74 28                	je     2f28 <cbvprintf+0xba>
    2f00:	3c 23                	cmp    $0x23,%al
    2f02:	74 2b                	je     2f2f <cbvprintf+0xc1>
    2f04:	eb 04                	jmp    2f0a <cbvprintf+0x9c>
    2f06:	3c 30                	cmp    $0x30,%al
    2f08:	74 2c                	je     2f36 <cbvprintf+0xc8>
	if (conv->flag_zero && conv->flag_dash) {
    2f0a:	8a 44 24 40          	mov    0x40(%rsp),%al
    2f0e:	89 c2                	mov    %eax,%edx
    2f10:	83 e2 44             	and    $0x44,%edx
    2f13:	80 fa 44             	cmp    $0x44,%dl
    2f16:	75 25                	jne    2f3d <cbvprintf+0xcf>
		conv->flag_zero = false;
    2f18:	83 e0 bf             	and    $0xffffffbf,%eax
    2f1b:	88 44 24 40          	mov    %al,0x40(%rsp)
    2f1f:	eb 1c                	jmp    2f3d <cbvprintf+0xcf>
			conv->flag_plus = true;
    2f21:	80 4c 24 40 08       	orb    $0x8,0x40(%rsp)
			break;
    2f26:	eb c8                	jmp    2ef0 <cbvprintf+0x82>
			conv->flag_space = true;
    2f28:	80 4c 24 40 10       	orb    $0x10,0x40(%rsp)
			break;
    2f2d:	eb c1                	jmp    2ef0 <cbvprintf+0x82>
			conv->flag_hash = true;
    2f2f:	80 4c 24 40 20       	orb    $0x20,0x40(%rsp)
			break;
    2f34:	eb ba                	jmp    2ef0 <cbvprintf+0x82>
			conv->flag_zero = true;
    2f36:	80 4c 24 40 40       	orb    $0x40,0x40(%rsp)
			break;
    2f3b:	eb b3                	jmp    2ef0 <cbvprintf+0x82>
	conv->width_present = true;
    2f3d:	80 4c 24 40 80       	orb    $0x80,0x40(%rsp)
    2f42:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	if (*sp == '*') {
    2f47:	80 7d 00 2a          	cmpb   $0x2a,0x0(%rbp)
    2f4b:	75 0a                	jne    2f57 <cbvprintf+0xe9>
		conv->width_star = true;
    2f4d:	80 4c 24 41 01       	orb    $0x1,0x41(%rsp)
		return ++sp;
    2f52:	48 ff c5             	inc    %rbp
    2f55:	eb 5d                	jmp    2fb4 <cbvprintf+0x146>
	size_t width = extract_decimal(&sp);
    2f57:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    2f5c:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    2f61:	e8 24 fe ff ff       	callq  2d8a <extract_decimal>
	if (sp != wp) {
    2f66:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    2f6b:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    2f70:	48 39 e9             	cmp    %rbp,%rcx
    2f73:	74 3f                	je     2fb4 <cbvprintf+0x146>
		conv->width_present = true;
    2f75:	8a 54 24 40          	mov    0x40(%rsp),%dl
		conv->width_value = width;
    2f79:	89 44 24 44          	mov    %eax,0x44(%rsp)
				      || (width != (size_t)conv->width_value));
    2f7d:	bf 01 00 00 00       	mov    $0x1,%edi
		conv->width_present = true;
    2f82:	83 ca 80             	or     $0xffffff80,%edx
    2f85:	88 54 24 40          	mov    %dl,0x40(%rsp)
		conv->unsupported |= ((conv->width_value < 0)
    2f89:	d0 ea                	shr    %dl
    2f8b:	83 e2 01             	and    $0x1,%edx
				      || (width != (size_t)conv->width_value));
    2f8e:	85 c0                	test   %eax,%eax
    2f90:	78 0e                	js     2fa0 <cbvprintf+0x132>
    2f92:	48 63 f8             	movslq %eax,%rdi
    2f95:	48 39 c7             	cmp    %rax,%rdi
    2f98:	40 0f 95 c7          	setne  %dil
    2f9c:	40 0f b6 ff          	movzbl %dil,%edi
		conv->unsupported |= ((conv->width_value < 0)
    2fa0:	8a 44 24 40          	mov    0x40(%rsp),%al
    2fa4:	09 fa                	or     %edi,%edx
    2fa6:	48 89 cd             	mov    %rcx,%rbp
    2fa9:	01 d2                	add    %edx,%edx
    2fab:	83 e0 fd             	and    $0xfffffffd,%eax
    2fae:	09 c2                	or     %eax,%edx
    2fb0:	88 54 24 40          	mov    %dl,0x40(%rsp)
	sp = extract_prec(conv, sp);
    2fb4:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	conv->prec_present = (*sp == '.');
    2fb9:	8a 4d 00             	mov    0x0(%rbp),%cl
    2fbc:	80 f9 2e             	cmp    $0x2e,%cl
    2fbf:	0f 94 c0             	sete   %al
    2fc2:	8d 14 00             	lea    (%rax,%rax,1),%edx
    2fc5:	8a 44 24 41          	mov    0x41(%rsp),%al
    2fc9:	83 e0 fd             	and    $0xfffffffd,%eax
    2fcc:	09 d0                	or     %edx,%eax
    2fce:	88 44 24 41          	mov    %al,0x41(%rsp)
	if (!conv->prec_present) {
    2fd2:	80 f9 2e             	cmp    $0x2e,%cl
    2fd5:	75 6b                	jne    3042 <cbvprintf+0x1d4>
	++sp;
    2fd7:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    2fdb:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
	if (*sp == '*') {
    2fe0:	80 7d 01 2a          	cmpb   $0x2a,0x1(%rbp)
    2fe4:	75 0d                	jne    2ff3 <cbvprintf+0x185>
		conv->prec_star = true;
    2fe6:	83 c8 04             	or     $0x4,%eax
		return ++sp;
    2fe9:	48 83 c5 02          	add    $0x2,%rbp
		conv->prec_star = true;
    2fed:	88 44 24 41          	mov    %al,0x41(%rsp)
		return ++sp;
    2ff1:	eb 4f                	jmp    3042 <cbvprintf+0x1d4>
	size_t prec = extract_decimal(&sp);
    2ff3:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    2ff8:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    2ffd:	e8 88 fd ff ff       	callq  2d8a <extract_decimal>
			      || (prec != (size_t)conv->prec_value));
    3002:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    3007:	b9 01 00 00 00       	mov    $0x1,%ecx
	size_t prec = extract_decimal(&sp);
    300c:	48 89 c2             	mov    %rax,%rdx
	conv->prec_value = prec;
    300f:	89 44 24 48          	mov    %eax,0x48(%rsp)
	conv->unsupported |= ((conv->prec_value < 0)
    3013:	8a 44 24 40          	mov    0x40(%rsp),%al
    3017:	d0 e8                	shr    %al
    3019:	83 e0 01             	and    $0x1,%eax
			      || (prec != (size_t)conv->prec_value));
    301c:	85 d2                	test   %edx,%edx
    301e:	78 0c                	js     302c <cbvprintf+0x1be>
    3020:	48 63 ca             	movslq %edx,%rcx
    3023:	48 39 d1             	cmp    %rdx,%rcx
    3026:	0f 95 c1             	setne  %cl
    3029:	0f b6 c9             	movzbl %cl,%ecx
	conv->unsupported |= ((conv->prec_value < 0)
    302c:	8a 54 24 40          	mov    0x40(%rsp),%dl
    3030:	09 c8                	or     %ecx,%eax
	return sp;
    3032:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
	conv->unsupported |= ((conv->prec_value < 0)
    3037:	01 c0                	add    %eax,%eax
    3039:	83 e2 fd             	and    $0xfffffffd,%edx
    303c:	09 d0                	or     %edx,%eax
    303e:	88 44 24 40          	mov    %al,0x40(%rsp)
	switch (*sp) {
    3042:	8a 4d 00             	mov    0x0(%rbp),%cl
    3045:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    3049:	80 f9 6c             	cmp    $0x6c,%cl
    304c:	74 54                	je     30a2 <cbvprintf+0x234>
    304e:	7f 22                	jg     3072 <cbvprintf+0x204>
    3050:	80 f9 68             	cmp    $0x68,%cl
    3053:	74 33                	je     3088 <cbvprintf+0x21a>
    3055:	80 f9 6a             	cmp    $0x6a,%cl
    3058:	74 6e                	je     30c8 <cbvprintf+0x25a>
    305a:	80 f9 4c             	cmp    $0x4c,%cl
    305d:	75 7d                	jne    30dc <cbvprintf+0x26e>
		conv->unsupported = true;
    305f:	8b 44 24 40          	mov    0x40(%rsp),%eax
    3063:	66 25 fd 87          	and    $0x87fd,%ax
    3067:	66 0d 02 40          	or     $0x4002,%ax
    306b:	66 89 44 24 40       	mov    %ax,0x40(%rsp)
		break;
    3070:	eb 72                	jmp    30e4 <cbvprintf+0x276>
	switch (*sp) {
    3072:	80 f9 74             	cmp    $0x74,%cl
    3075:	8a 44 24 41          	mov    0x41(%rsp),%al
    3079:	74 59                	je     30d4 <cbvprintf+0x266>
    307b:	80 f9 7a             	cmp    $0x7a,%cl
    307e:	75 5c                	jne    30dc <cbvprintf+0x26e>
		conv->length_mod = LENGTH_Z;
    3080:	83 e0 87             	and    $0xffffff87,%eax
    3083:	83 c8 30             	or     $0x30,%eax
    3086:	eb 3a                	jmp    30c2 <cbvprintf+0x254>
		if (*++sp == 'h') {
    3088:	80 7d 01 68          	cmpb   $0x68,0x1(%rbp)
    308c:	8a 44 24 41          	mov    0x41(%rsp),%al
    3090:	75 08                	jne    309a <cbvprintf+0x22c>
			conv->length_mod = LENGTH_HH;
    3092:	83 e0 87             	and    $0xffffff87,%eax
    3095:	83 c8 08             	or     $0x8,%eax
    3098:	eb 18                	jmp    30b2 <cbvprintf+0x244>
			conv->length_mod = LENGTH_H;
    309a:	83 e0 87             	and    $0xffffff87,%eax
    309d:	83 c8 10             	or     $0x10,%eax
    30a0:	eb 20                	jmp    30c2 <cbvprintf+0x254>
		if (*++sp == 'l') {
    30a2:	80 7d 01 6c          	cmpb   $0x6c,0x1(%rbp)
    30a6:	8a 44 24 41          	mov    0x41(%rsp),%al
    30aa:	75 10                	jne    30bc <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    30ac:	83 e0 87             	and    $0xffffff87,%eax
    30af:	83 c8 20             	or     $0x20,%eax
    30b2:	88 44 24 41          	mov    %al,0x41(%rsp)
			++sp;
    30b6:	48 8d 55 02          	lea    0x2(%rbp),%rdx
    30ba:	eb 28                	jmp    30e4 <cbvprintf+0x276>
			conv->length_mod = LENGTH_L;
    30bc:	83 e0 87             	and    $0xffffff87,%eax
    30bf:	83 c8 18             	or     $0x18,%eax
    30c2:	88 44 24 41          	mov    %al,0x41(%rsp)
    30c6:	eb 1c                	jmp    30e4 <cbvprintf+0x276>
		conv->length_mod = LENGTH_J;
    30c8:	8a 44 24 41          	mov    0x41(%rsp),%al
    30cc:	83 e0 87             	and    $0xffffff87,%eax
    30cf:	83 c8 28             	or     $0x28,%eax
    30d2:	eb ee                	jmp    30c2 <cbvprintf+0x254>
		conv->length_mod = LENGTH_T;
    30d4:	83 e0 87             	and    $0xffffff87,%eax
    30d7:	83 c8 38             	or     $0x38,%eax
    30da:	eb e6                	jmp    30c2 <cbvprintf+0x254>
		conv->length_mod = LENGTH_NONE;
    30dc:	80 64 24 41 87       	andb   $0x87,0x41(%rsp)
		break;
    30e1:	48 89 ea             	mov    %rbp,%rdx
	conv->specifier = *sp++;
    30e4:	8a 02                	mov    (%rdx),%al
    30e6:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
    30ea:	8a 54 24 41          	mov    0x41(%rsp),%dl
    30ee:	88 44 24 43          	mov    %al,0x43(%rsp)
	switch (conv->specifier) {
    30f2:	3c 78                	cmp    $0x78,%al
    30f4:	0f 8f ab 00 00 00    	jg     31a5 <cbvprintf+0x337>
    30fa:	3c 57                	cmp    $0x57,%al
    30fc:	7f 11                	jg     310f <cbvprintf+0x2a1>
    30fe:	3c 41                	cmp    $0x41,%al
    3100:	74 62                	je     3164 <cbvprintf+0x2f6>
    3102:	83 e8 45             	sub    $0x45,%eax
    3105:	3c 02                	cmp    $0x2,%al
    3107:	0f 87 98 00 00 00    	ja     31a5 <cbvprintf+0x337>
    310d:	eb 55                	jmp    3164 <cbvprintf+0x2f6>
    310f:	8d 48 a8             	lea    -0x58(%rax),%ecx
    3112:	80 f9 20             	cmp    $0x20,%cl
    3115:	0f 87 8a 00 00 00    	ja     31a5 <cbvprintf+0x337>
    311b:	48 8d 3d 86 61 00 00 	lea    0x6186(%rip),%rdi        # 92a8 <default_cmd+0x48>
    3122:	0f b6 c9             	movzbl %cl,%ecx
    3125:	48 63 0c 8f          	movslq (%rdi,%rcx,4),%rcx
    3129:	48 01 f9             	add    %rdi,%rcx
    312c:	3e ff e1             	notrack jmpq *%rcx
		conv->specifier_cat = SPECIFIER_SINT;
    312f:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    3133:	83 e1 f8             	and    $0xfffffff8,%ecx
    3136:	83 c9 01             	or     $0x1,%ecx
    3139:	eb 0a                	jmp    3145 <cbvprintf+0x2d7>
		conv->specifier_cat = SPECIFIER_UINT;
    313b:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    313f:	83 e1 f8             	and    $0xfffffff8,%ecx
    3142:	83 c9 02             	or     $0x2,%ecx
    3145:	f3 0f 1e fa          	endbr64 
		if (conv->length_mod == LENGTH_UPPER_L) {
    3149:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_UINT;
    314c:	88 4c 24 42          	mov    %cl,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    3150:	80 fa 40             	cmp    $0x40,%dl
    3153:	75 05                	jne    315a <cbvprintf+0x2ec>
			conv->invalid = true;
    3155:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    315a:	31 c9                	xor    %ecx,%ecx
		if (conv->specifier == 'c') {
    315c:	3c 63                	cmp    $0x63,%al
    315e:	75 4c                	jne    31ac <cbvprintf+0x33e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3160:	84 d2                	test   %dl,%dl
    3162:	eb 3c                	jmp    31a0 <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_FP;
    3164:	8a 44 24 42          	mov    0x42(%rsp),%al
			unsupported = true;
    3168:	b1 01                	mov    $0x1,%cl
		conv->specifier_cat = SPECIFIER_FP;
    316a:	83 e0 f8             	and    $0xfffffff8,%eax
    316d:	83 c8 04             	or     $0x4,%eax
    3170:	88 44 24 42          	mov    %al,0x42(%rsp)
			break;
    3174:	eb 36                	jmp    31ac <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    3176:	8a 44 24 42          	mov    0x42(%rsp),%al
		if (conv->length_mod == LENGTH_UPPER_L) {
    317a:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_PTR;
    317d:	83 e0 f8             	and    $0xfffffff8,%eax
    3180:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod == LENGTH_UPPER_L) {
    3183:	80 fa 40             	cmp    $0x40,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    3186:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    318a:	0f 94 c1             	sete   %cl
    318d:	eb 1d                	jmp    31ac <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    318f:	8a 44 24 42          	mov    0x42(%rsp),%al
    3193:	83 e0 f8             	and    $0xfffffff8,%eax
    3196:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod != LENGTH_NONE) {
    3199:	80 e2 78             	and    $0x78,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    319c:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod != LENGTH_NONE) {
    31a0:	0f 95 c1             	setne  %cl
    31a3:	eb 07                	jmp    31ac <cbvprintf+0x33e>
		conv->invalid = true;
    31a5:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    31aa:	31 c9                	xor    %ecx,%ecx
	conv->unsupported |= unsupported;
    31ac:	8a 54 24 40          	mov    0x40(%rsp),%dl
    31b0:	89 d0                	mov    %edx,%eax
    31b2:	83 e2 fd             	and    $0xfffffffd,%edx
    31b5:	d0 e8                	shr    %al
    31b7:	83 e0 01             	and    $0x1,%eax
    31ba:	09 c8                	or     %ecx,%eax
    31bc:	01 c0                	add    %eax,%eax
    31be:	09 d0                	or     %edx,%eax
    31c0:	88 44 24 40          	mov    %al,0x40(%rsp)
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set with if present.
		 */
		if (conv->width_star) {
    31c4:	8a 4c 24 41          	mov    0x41(%rsp),%cl
    31c8:	f6 c1 01             	test   $0x1,%cl
    31cb:	74 3c                	je     3209 <cbvprintf+0x39b>
			width = va_arg(ap, int);
    31cd:	41 8b 14 24          	mov    (%r12),%edx
    31d1:	83 fa 2f             	cmp    $0x2f,%edx
    31d4:	77 10                	ja     31e6 <cbvprintf+0x378>
    31d6:	89 d0                	mov    %edx,%eax
    31d8:	83 c2 08             	add    $0x8,%edx
    31db:	49 03 44 24 10       	add    0x10(%r12),%rax
    31e0:	41 89 14 24          	mov    %edx,(%r12)
    31e4:	eb 0e                	jmp    31f4 <cbvprintf+0x386>
    31e6:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    31eb:	48 8d 50 08          	lea    0x8(%rax),%rdx
    31ef:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    31f4:	8b 00                	mov    (%rax),%eax
    31f6:	89 44 24 08          	mov    %eax,0x8(%rsp)

			if (width < 0) {
    31fa:	85 c0                	test   %eax,%eax
    31fc:	79 22                	jns    3220 <cbvprintf+0x3b2>
				conv->flag_dash = true;
    31fe:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
				width = -width;
    3203:	f7 5c 24 08          	negl   0x8(%rsp)
    3207:	eb 17                	jmp    3220 <cbvprintf+0x3b2>
			}
		} else if (conv->width_present) {
    3209:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
		int width = -1;
    320e:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
    3215:	ff 
		} else if (conv->width_present) {
    3216:	79 08                	jns    3220 <cbvprintf+0x3b2>
			width = conv->width_value;
    3218:	8b 44 24 44          	mov    0x44(%rsp),%eax
    321c:	89 44 24 08          	mov    %eax,0x8(%rsp)

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    3220:	f6 c1 04             	test   $0x4,%cl
    3223:	74 3a                	je     325f <cbvprintf+0x3f1>
			int arg = va_arg(ap, int);
    3225:	41 8b 14 24          	mov    (%r12),%edx
    3229:	83 fa 2f             	cmp    $0x2f,%edx
    322c:	77 10                	ja     323e <cbvprintf+0x3d0>
    322e:	89 d0                	mov    %edx,%eax
    3230:	83 c2 08             	add    $0x8,%edx
    3233:	49 03 44 24 10       	add    0x10(%r12),%rax
    3238:	41 89 14 24          	mov    %edx,(%r12)
    323c:	eb 0e                	jmp    324c <cbvprintf+0x3de>
    323e:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3243:	48 8d 50 08          	lea    0x8(%rax),%rdx
    3247:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    324c:	44 8b 10             	mov    (%rax),%r10d

			if (arg < 0) {
    324f:	45 85 d2             	test   %r10d,%r10d
    3252:	79 19                	jns    326d <cbvprintf+0x3ff>
				conv->prec_present = false;
    3254:	80 64 24 41 fd       	andb   $0xfd,0x41(%rsp)
		int precision = -1;
    3259:	41 83 ca ff          	or     $0xffffffff,%r10d
    325d:	eb 0e                	jmp    326d <cbvprintf+0x3ff>
    325f:	41 83 ca ff          	or     $0xffffffff,%r10d
			} else {
				precision = arg;
			}
		} else if (conv->prec_present) {
    3263:	80 e1 02             	and    $0x2,%cl
    3266:	74 05                	je     326d <cbvprintf+0x3ff>
			precision = conv->prec_value;
    3268:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    326d:	8a 54 24 41          	mov    0x41(%rsp),%dl
			= (enum specifier_cat_enum)conv->specifier_cat;
    3271:	8a 44 24 42          	mov    0x42(%rsp),%al
		conv->pad0_value = 0;
    3275:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
    327c:	00 00 
			= (enum length_mod_enum)conv->length_mod;
    327e:	c0 ea 03             	shr    $0x3,%dl
		enum specifier_cat_enum specifier_cat
    3281:	83 e0 07             	and    $0x7,%eax
			= (enum length_mod_enum)conv->length_mod;
    3284:	83 e2 0f             	and    $0xf,%edx
		enum length_mod_enum length_mod
    3287:	0f b6 ca             	movzbl %dl,%ecx
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    328a:	83 f8 01             	cmp    $0x1,%eax
    328d:	0f 85 d8 00 00 00    	jne    336b <cbvprintf+0x4fd>
			switch (length_mod) {
    3293:	41 8b 04 24          	mov    (%r12),%eax
    3297:	80 fa 05             	cmp    $0x5,%dl
    329a:	0f 84 1e 01 00 00    	je     33be <cbvprintf+0x550>
    32a0:	77 10                	ja     32b2 <cbvprintf+0x444>
    32a2:	80 fa 03             	cmp    $0x3,%dl
    32a5:	74 3f                	je     32e6 <cbvprintf+0x478>
    32a7:	80 fa 04             	cmp    $0x4,%dl
    32aa:	0f 84 0e 01 00 00    	je     33be <cbvprintf+0x550>
    32b0:	eb 0c                	jmp    32be <cbvprintf+0x450>
    32b2:	8d 7a 0a             	lea    0xa(%rdx),%edi
    32b5:	83 e7 0f             	and    $0xf,%edi
    32b8:	40 80 ff 01          	cmp    $0x1,%dil
    32bc:	76 5e                	jbe    331c <cbvprintf+0x4ae>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
    32be:	83 f8 2f             	cmp    $0x2f,%eax
    32c1:	77 10                	ja     32d3 <cbvprintf+0x465>
    32c3:	89 c7                	mov    %eax,%edi
    32c5:	83 c0 08             	add    $0x8,%eax
    32c8:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    32cd:	41 89 04 24          	mov    %eax,(%r12)
    32d1:	eb 0e                	jmp    32e1 <cbvprintf+0x473>
    32d3:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    32d8:	48 8d 47 08          	lea    0x8(%rdi),%rax
    32dc:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    32e1:	48 63 07             	movslq (%rdi),%rax
    32e4:	eb 5c                	jmp    3342 <cbvprintf+0x4d4>
				break;
			case LENGTH_L:
				if (WCHAR_IS_SIGNED
    32e6:	80 7c 24 43 63       	cmpb   $0x63,0x43(%rsp)
    32eb:	0f 85 cd 00 00 00    	jne    33be <cbvprintf+0x550>
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
    32f1:	83 f8 2f             	cmp    $0x2f,%eax
    32f4:	77 10                	ja     3306 <cbvprintf+0x498>
    32f6:	89 c1                	mov    %eax,%ecx
    32f8:	83 c0 08             	add    $0x8,%eax
    32fb:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    3300:	41 89 04 24          	mov    %eax,(%r12)
    3304:	eb 0e                	jmp    3314 <cbvprintf+0x4a6>
    3306:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    330b:	48 8d 41 08          	lea    0x8(%rcx),%rax
    330f:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    3314:	48 63 01             	movslq (%rcx),%rax
    3317:	e9 b1 01 00 00       	jmpq   34cd <cbvprintf+0x65f>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
    331c:	83 f8 2f             	cmp    $0x2f,%eax
    331f:	77 10                	ja     3331 <cbvprintf+0x4c3>
    3321:	89 c7                	mov    %eax,%edi
    3323:	83 c0 08             	add    $0x8,%eax
    3326:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    332b:	41 89 04 24          	mov    %eax,(%r12)
    332f:	eb 0e                	jmp    333f <cbvprintf+0x4d1>
    3331:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    3336:	48 8d 47 08          	lea    0x8(%rdi),%rax
    333a:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    333f:	48 8b 07             	mov    (%rdi),%rax
				value->sint =
    3342:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    3347:	83 f9 01             	cmp    $0x1,%ecx
    334a:	75 0b                	jne    3357 <cbvprintf+0x4e9>
				value->sint = (char)value->sint;
    334c:	48 0f be 44 24 30    	movsbq 0x30(%rsp),%rax
    3352:	e9 76 01 00 00       	jmpq   34cd <cbvprintf+0x65f>
			} else if (length_mod == LENGTH_H) {
    3357:	83 f9 02             	cmp    $0x2,%ecx
    335a:	0f 85 72 01 00 00    	jne    34d2 <cbvprintf+0x664>
				value->sint = (short)value->sint;
    3360:	48 0f bf 44 24 30    	movswq 0x30(%rsp),%rax
    3366:	e9 62 01 00 00       	jmpq   34cd <cbvprintf+0x65f>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    336b:	83 f8 02             	cmp    $0x2,%eax
    336e:	0f 85 ca 00 00 00    	jne    343e <cbvprintf+0x5d0>
			switch (length_mod) {
    3374:	41 8b 04 24          	mov    (%r12),%eax
    3378:	80 fa 05             	cmp    $0x5,%dl
    337b:	74 41                	je     33be <cbvprintf+0x550>
    337d:	77 0c                	ja     338b <cbvprintf+0x51d>
    337f:	80 fa 03             	cmp    $0x3,%dl
    3382:	74 3a                	je     33be <cbvprintf+0x550>
    3384:	80 fa 04             	cmp    $0x4,%dl
    3387:	74 35                	je     33be <cbvprintf+0x550>
    3389:	eb 0c                	jmp    3397 <cbvprintf+0x529>
    338b:	8d 7a 0a             	lea    0xa(%rdx),%edi
    338e:	83 e7 0f             	and    $0xf,%edi
    3391:	40 80 ff 01          	cmp    $0x1,%dil
    3395:	76 52                	jbe    33e9 <cbvprintf+0x57b>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
    3397:	83 f8 2f             	cmp    $0x2f,%eax
    339a:	77 10                	ja     33ac <cbvprintf+0x53e>
    339c:	89 c7                	mov    %eax,%edi
    339e:	83 c0 08             	add    $0x8,%eax
    33a1:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    33a6:	41 89 04 24          	mov    %eax,(%r12)
    33aa:	eb 0e                	jmp    33ba <cbvprintf+0x54c>
    33ac:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    33b1:	48 8d 47 08          	lea    0x8(%rdi),%rax
    33b5:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    33ba:	8b 07                	mov    (%rdi),%eax
    33bc:	eb 51                	jmp    340f <cbvprintf+0x5a1>
					(uint_value_type)va_arg(ap,
						unsigned long long);
				break;
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
    33be:	83 f8 2f             	cmp    $0x2f,%eax
    33c1:	77 10                	ja     33d3 <cbvprintf+0x565>
    33c3:	89 c1                	mov    %eax,%ecx
    33c5:	83 c0 08             	add    $0x8,%eax
    33c8:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    33cd:	41 89 04 24          	mov    %eax,(%r12)
    33d1:	eb 0e                	jmp    33e1 <cbvprintf+0x573>
    33d3:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    33d8:	48 8d 41 08          	lea    0x8(%rcx),%rax
    33dc:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    33e1:	48 8b 01             	mov    (%rcx),%rax
    33e4:	e9 e4 00 00 00       	jmpq   34cd <cbvprintf+0x65f>
								uintmax_t);
				break;
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
    33e9:	83 f8 2f             	cmp    $0x2f,%eax
    33ec:	77 10                	ja     33fe <cbvprintf+0x590>
    33ee:	89 c7                	mov    %eax,%edi
    33f0:	83 c0 08             	add    $0x8,%eax
    33f3:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    33f8:	41 89 04 24          	mov    %eax,(%r12)
    33fc:	eb 0e                	jmp    340c <cbvprintf+0x59e>
    33fe:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    3403:	48 8d 47 08          	lea    0x8(%rdi),%rax
    3407:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    340c:	48 8b 07             	mov    (%rdi),%rax
				value->uint =
    340f:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    3414:	83 f9 01             	cmp    $0x1,%ecx
    3417:	75 0e                	jne    3427 <cbvprintf+0x5b9>
				value->uint = (unsigned char)value->uint;
    3419:	48 81 64 24 30 ff 00 	andq   $0xff,0x30(%rsp)
    3420:	00 00 
    3422:	e9 ab 00 00 00       	jmpq   34d2 <cbvprintf+0x664>
			} else if (length_mod == LENGTH_H) {
    3427:	83 f9 02             	cmp    $0x2,%ecx
    342a:	0f 85 a2 00 00 00    	jne    34d2 <cbvprintf+0x664>
				value->uint = (unsigned short)value->uint;
    3430:	48 81 64 24 30 ff ff 	andq   $0xffff,0x30(%rsp)
    3437:	00 00 
    3439:	e9 94 00 00 00       	jmpq   34d2 <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    343e:	83 f8 04             	cmp    $0x4,%eax
    3441:	75 5b                	jne    349e <cbvprintf+0x630>
			if (length_mod == LENGTH_UPPER_L) {
    3443:	83 f9 08             	cmp    $0x8,%ecx
    3446:	75 1e                	jne    3466 <cbvprintf+0x5f8>
				value->ldbl = va_arg(ap, long double);
    3448:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    344d:	48 83 c0 0f          	add    $0xf,%rax
    3451:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    3455:	48 8d 48 10          	lea    0x10(%rax),%rcx
    3459:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    345e:	db 28                	fldt   (%rax)
    3460:	db 7c 24 30          	fstpt  0x30(%rsp)
    3464:	eb 6c                	jmp    34d2 <cbvprintf+0x664>
			} else {
				value->dbl = va_arg(ap, double);
    3466:	41 8b 4c 24 04       	mov    0x4(%r12),%ecx
    346b:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
    3471:	77 11                	ja     3484 <cbvprintf+0x616>
    3473:	89 c8                	mov    %ecx,%eax
    3475:	83 c1 10             	add    $0x10,%ecx
    3478:	49 03 44 24 10       	add    0x10(%r12),%rax
    347d:	41 89 4c 24 04       	mov    %ecx,0x4(%r12)
    3482:	eb 0e                	jmp    3492 <cbvprintf+0x624>
    3484:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3489:	48 8d 48 08          	lea    0x8(%rax),%rcx
    348d:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    3492:	f2 0f 10 00          	movsd  (%rax),%xmm0
    3496:	f2 0f 11 44 24 30    	movsd  %xmm0,0x30(%rsp)
    349c:	eb 34                	jmp    34d2 <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    349e:	83 f8 03             	cmp    $0x3,%eax
    34a1:	75 2f                	jne    34d2 <cbvprintf+0x664>
			value->ptr = va_arg(ap, void *);
    34a3:	41 8b 0c 24          	mov    (%r12),%ecx
    34a7:	83 f9 2f             	cmp    $0x2f,%ecx
    34aa:	77 10                	ja     34bc <cbvprintf+0x64e>
    34ac:	89 c8                	mov    %ecx,%eax
    34ae:	83 c1 08             	add    $0x8,%ecx
    34b1:	49 03 44 24 10       	add    0x10(%r12),%rax
    34b6:	41 89 0c 24          	mov    %ecx,(%r12)
    34ba:	eb 0e                	jmp    34ca <cbvprintf+0x65c>
    34bc:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    34c1:	48 8d 48 08          	lea    0x8(%rax),%rcx
    34c5:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    34ca:	48 8b 00             	mov    (%rax),%rax
    34cd:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    34d2:	8a 4c 24 40          	mov    0x40(%rsp),%cl
    34d6:	f6 c1 03             	test   $0x3,%cl
    34d9:	74 23                	je     34fe <cbvprintf+0x690>
			OUTS(sp, fp);
    34db:	48 89 e9             	mov    %rbp,%rcx
    34de:	4c 89 ea             	mov    %r13,%rdx
    34e1:	4c 89 fe             	mov    %r15,%rsi
    34e4:	4c 89 f7             	mov    %r14,%rdi
    34e7:	e8 4d f8 ff ff       	callq  2d39 <outs>
    34ec:	85 c0                	test   %eax,%eax
    34ee:	0f 88 8c 03 00 00    	js     3880 <cbvprintf+0xa12>
    34f4:	48 98                	cltq   
    34f6:	48 01 c3             	add    %rax,%rbx
			continue;
    34f9:	e9 78 03 00 00       	jmpq   3876 <cbvprintf+0xa08>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    34fe:	8a 44 24 43          	mov    0x43(%rsp),%al
    3502:	3c 78                	cmp    $0x78,%al
    3504:	0f 87 6c 03 00 00    	ja     3876 <cbvprintf+0xa08>
    350a:	3c 62                	cmp    $0x62,%al
    350c:	77 11                	ja     351f <cbvprintf+0x6b1>
    350e:	3c 25                	cmp    $0x25,%al
    3510:	74 2c                	je     353e <cbvprintf+0x6d0>
    3512:	3c 58                	cmp    $0x58,%al
    3514:	0f 84 c6 00 00 00    	je     35e0 <cbvprintf+0x772>
    351a:	e9 57 03 00 00       	jmpq   3876 <cbvprintf+0xa08>
    351f:	83 e8 63             	sub    $0x63,%eax
    3522:	3c 15                	cmp    $0x15,%al
    3524:	0f 87 4c 03 00 00    	ja     3876 <cbvprintf+0xa08>
    352a:	48 8d 3d fb 5d 00 00 	lea    0x5dfb(%rip),%rdi        # 932c <default_cmd+0xcc>
    3531:	0f b6 c0             	movzbl %al,%eax
    3534:	48 63 04 87          	movslq (%rdi,%rax,4),%rax
    3538:	48 01 f8             	add    %rdi,%rax
    353b:	3e ff e0             	notrack jmpq *%rax
		case '%':
			OUTC('%');
    353e:	4c 89 fe             	mov    %r15,%rsi
    3541:	bf 25 00 00 00       	mov    $0x25,%edi
    3546:	31 c0                	xor    %eax,%eax
    3548:	41 ff d6             	callq  *%r14
    354b:	85 c0                	test   %eax,%eax
    354d:	0f 88 2d 03 00 00    	js     3880 <cbvprintf+0xa12>
    3553:	48 ff c3             	inc    %rbx
			break;
    3556:	e9 1b 03 00 00       	jmpq   3876 <cbvprintf+0xa08>
		case 's': {
			bps = (const char *)value->ptr;
    355b:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13

			size_t len;

			if (precision >= 0) {
    3560:	45 85 d2             	test   %r10d,%r10d
    3563:	78 0d                	js     3572 <cbvprintf+0x704>
				len = strnlen(bps, precision);
    3565:	49 63 f2             	movslq %r10d,%rsi
    3568:	4c 89 ef             	mov    %r13,%rdi
    356b:	e8 80 ef ff ff       	callq  24f0 <strnlen@plt>
    3570:	eb 14                	jmp    3586 <cbvprintf+0x718>
			} else {
				len = strlen(bps);
    3572:	31 c0                	xor    %eax,%eax
    3574:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    3578:	4c 89 ef             	mov    %r13,%rdi
    357b:	f2 ae                	repnz scas %es:(%rdi),%al
    357d:	48 89 c8             	mov    %rcx,%rax
    3580:	48 f7 d0             	not    %rax
    3583:	48 ff c8             	dec    %rax
			}

			bpe = bps + len;
    3586:	4c 01 e8             	add    %r13,%rax
		char sign = 0;
    3589:	45 31 c9             	xor    %r9d,%r9d
			bpe = bps + len;
    358c:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			precision = -1;

			break;
    3591:	e9 55 01 00 00       	jmpq   36eb <cbvprintf+0x87d>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3596:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			bpe = buf + 1;
			break;
    359b:	45 31 c9             	xor    %r9d,%r9d
			bps = buf;
    359e:	4c 8d 6c 24 52       	lea    0x52(%rsp),%r13
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    35a3:	88 44 24 52          	mov    %al,0x52(%rsp)
			bpe = buf + 1;
    35a7:	48 8d 44 24 53       	lea    0x53(%rsp),%rax
    35ac:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			break;
    35b1:	e9 3e 01 00 00       	jmpq   36f4 <cbvprintf+0x886>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
				sign = '+';
    35b6:	41 b1 2b             	mov    $0x2b,%r9b
			if (conv->flag_plus) {
    35b9:	f6 c1 08             	test   $0x8,%cl
    35bc:	75 0b                	jne    35c9 <cbvprintf+0x75b>
			} else if (conv->flag_space) {
				sign = ' ';
    35be:	80 e1 10             	and    $0x10,%cl
    35c1:	41 0f 95 c1          	setne  %r9b
    35c5:	41 c1 e1 05          	shl    $0x5,%r9d

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    35c9:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			if (sint < 0) {
    35ce:	48 85 c0             	test   %rax,%rax
    35d1:	79 10                	jns    35e3 <cbvprintf+0x775>
				sign = '-';
				value->uint = (uint_value_type)-sint;
    35d3:	48 f7 d8             	neg    %rax
				sign = '-';
    35d6:	41 b1 2d             	mov    $0x2d,%r9b
				value->uint = (uint_value_type)-sint;
    35d9:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    35de:	eb 03                	jmp    35e3 <cbvprintf+0x775>
		switch (conv->specifier) {
    35e0:	45 31 c9             	xor    %r9d,%r9d
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    35e3:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    35e8:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    35ed:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    35f2:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    35f7:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    35fc:	e8 c0 f7 ff ff       	callq  2dc1 <encode_uint>
    3601:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
    3606:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    360b:	49 89 c5             	mov    %rax,%r13
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    360e:	45 85 d2             	test   %r10d,%r10d
    3611:	48 8d 44 24 68       	lea    0x68(%rsp),%rax
    3616:	0f 88 ca 00 00 00    	js     36e6 <cbvprintf+0x878>
				size_t len = bpe - bps;
    361c:	48 89 c1             	mov    %rax,%rcx
				 * conversions with precision.
				 */
				conv->flag_zero = false;

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    361f:	49 63 d2             	movslq %r10d,%rdx
				conv->flag_zero = false;
    3622:	80 64 24 40 bf       	andb   $0xbf,0x40(%rsp)
				size_t len = bpe - bps;
    3627:	4c 29 e9             	sub    %r13,%rcx
		const char *bpe = buf + sizeof(buf);
    362a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
				if (len < (size_t)precision) {
    362f:	48 39 ca             	cmp    %rcx,%rdx
    3632:	0f 86 b3 00 00 00    	jbe    36eb <cbvprintf+0x87d>
					conv->pad0_value = precision - (int)len;
    3638:	41 29 ca             	sub    %ecx,%r10d
    363b:	44 89 54 24 44       	mov    %r10d,0x44(%rsp)
    3640:	e9 a6 00 00 00       	jmpq   36eb <cbvprintf+0x87d>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    3645:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    364a:	48 8d 05 cc 5e 00 00 	lea    0x5ecc(%rip),%rax        # 951d <default_cmd+0x2bd>
    3651:	45 31 c9             	xor    %r9d,%r9d
    3654:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			bps = "(nil)";
    3659:	4c 8d 68 fb          	lea    -0x5(%rax),%r13
			if (value->ptr != NULL) {
    365d:	48 85 ff             	test   %rdi,%rdi
    3660:	0f 84 8e 00 00 00    	je     36f4 <cbvprintf+0x886>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3666:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    366b:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    3670:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    3675:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    367a:	e8 42 f7 ff ff       	callq  2dc1 <encode_uint>
				goto prec_int_pad0;
    367f:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    3684:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
				bps = encode_uint((uintptr_t)value->ptr, conv,
    3689:	49 89 c5             	mov    %rax,%r13
				conv->altform_0c = true;
    368c:	66 8b 44 24 42       	mov    0x42(%rsp),%ax
    3691:	66 25 ef 00          	and    $0xef,%ax
    3695:	66 0d 10 78          	or     $0x7810,%ax
    3699:	66 89 44 24 42       	mov    %ax,0x42(%rsp)
				goto prec_int_pad0;
    369e:	e9 6b ff ff ff       	jmpq   360e <cbvprintf+0x7a0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    36a3:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    36a8:	48 63 c3             	movslq %ebx,%rax
    36ab:	80 fa 07             	cmp    $0x7,%dl
    36ae:	0f 87 c2 01 00 00    	ja     3876 <cbvprintf+0xa08>
    36b4:	48 8d 35 c9 5c 00 00 	lea    0x5cc9(%rip),%rsi        # 9384 <default_cmd+0x124>
    36bb:	0f b6 d2             	movzbl %dl,%edx
    36be:	48 63 14 96          	movslq (%rsi,%rdx,4),%rdx
    36c2:	48 01 f2             	add    %rsi,%rdx
    36c5:	3e ff e2             	notrack jmpq *%rdx
		*(int *)dp = count;
    36c8:	89 01                	mov    %eax,(%rcx)
		break;
    36ca:	e9 a7 01 00 00       	jmpq   3876 <cbvprintf+0xa08>
		*(signed char *)dp = (signed char)count;
    36cf:	88 19                	mov    %bl,(%rcx)
		break;
    36d1:	e9 a0 01 00 00       	jmpq   3876 <cbvprintf+0xa08>
		*(short *)dp = (short)count;
    36d6:	66 89 19             	mov    %bx,(%rcx)
		break;
    36d9:	e9 98 01 00 00       	jmpq   3876 <cbvprintf+0xa08>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    36de:	48 89 01             	mov    %rax,(%rcx)
		break;
    36e1:	e9 90 01 00 00       	jmpq   3876 <cbvprintf+0xa08>
		const char *bpe = buf + sizeof(buf);
    36e6:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    36eb:	4d 85 ed             	test   %r13,%r13
    36ee:	0f 84 82 01 00 00    	je     3876 <cbvprintf+0xa08>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    36f4:	48 8b 44 24 10       	mov    0x10(%rsp),%rax

		if (sign != 0) {
			nj_len += 1U;
		}

		if (conv->altform_0c) {
    36f9:	8a 4c 24 42          	mov    0x42(%rsp),%cl
		size_t nj_len = (bpe - bps);
    36fd:	4c 29 e8             	sub    %r13,%rax
			nj_len += 1U;
    3700:	41 80 f9 01          	cmp    $0x1,%r9b
    3704:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		if (conv->altform_0c) {
    3708:	f6 c1 10             	test   $0x10,%cl
    370b:	74 06                	je     3713 <cbvprintf+0x8a5>
			nj_len += 2U;
    370d:	48 83 c0 02          	add    $0x2,%rax
    3711:	eb 0c                	jmp    371f <cbvprintf+0x8b1>
		} else if (conv->altform_0) {
    3713:	89 ca                	mov    %ecx,%edx
    3715:	83 e2 08             	and    $0x8,%edx
			nj_len += 1U;
    3718:	80 fa 01             	cmp    $0x1,%dl
    371b:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		}

		nj_len += conv->pad0_value;
    371f:	48 63 54 24 44       	movslq 0x44(%rsp),%rdx
    3724:	48 01 d0             	add    %rdx,%rax
		if (conv->pad_fp) {
    3727:	80 e1 40             	and    $0x40,%cl
    372a:	74 08                	je     3734 <cbvprintf+0x8c6>
			nj_len += conv->pad0_pre_exp;
    372c:	48 63 54 24 48       	movslq 0x48(%rsp),%rdx
    3731:	48 01 d0             	add    %rdx,%rax
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    3734:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
    3739:	7e 73                	jle    37ae <cbvprintf+0x940>
			width -= (int)nj_len;
    373b:	29 44 24 08          	sub    %eax,0x8(%rsp)

			if (!conv->flag_dash) {
    373f:	8a 44 24 40          	mov    0x40(%rsp),%al
    3743:	a8 04                	test   $0x4,%al
    3745:	75 67                	jne    37ae <cbvprintf+0x940>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    3747:	a8 40                	test   $0x40,%al
    3749:	74 21                	je     376c <cbvprintf+0x8fe>
					if (sign != 0) {
    374b:	45 84 c9             	test   %r9b,%r9b
    374e:	74 20                	je     3770 <cbvprintf+0x902>
						OUTC(sign);
    3750:	31 c0                	xor    %eax,%eax
    3752:	41 0f be f9          	movsbl %r9b,%edi
    3756:	4c 89 fe             	mov    %r15,%rsi
    3759:	41 ff d6             	callq  *%r14
    375c:	85 c0                	test   %eax,%eax
    375e:	0f 88 1c 01 00 00    	js     3880 <cbvprintf+0xa12>
    3764:	48 ff c3             	inc    %rbx
						sign = 0;
    3767:	45 31 c9             	xor    %r9d,%r9d
    376a:	eb 04                	jmp    3770 <cbvprintf+0x902>
				char pad = ' ';
    376c:	b0 20                	mov    $0x20,%al
    376e:	eb 02                	jmp    3772 <cbvprintf+0x904>
					}
					pad = '0';
    3770:	b0 30                	mov    $0x30,%al
    3772:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
				}

				while (width-- > 0) {
					OUTC(pad);
    3776:	0f be d0             	movsbl %al,%edx
				while (width-- > 0) {
    3779:	ff 4c 24 08          	decl   0x8(%rsp)
    377d:	85 c9                	test   %ecx,%ecx
    377f:	7e 2d                	jle    37ae <cbvprintf+0x940>
					OUTC(pad);
    3781:	31 c0                	xor    %eax,%eax
    3783:	44 88 4c 24 1f       	mov    %r9b,0x1f(%rsp)
    3788:	4c 89 fe             	mov    %r15,%rsi
    378b:	89 d7                	mov    %edx,%edi
    378d:	89 54 24 18          	mov    %edx,0x18(%rsp)
    3791:	41 ff d6             	callq  *%r14
    3794:	85 c0                	test   %eax,%eax
    3796:	0f 88 e4 00 00 00    	js     3880 <cbvprintf+0xa12>
				while (width-- > 0) {
    379c:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
    37a0:	8b 54 24 18          	mov    0x18(%rsp),%edx
					OUTC(pad);
    37a4:	48 ff c3             	inc    %rbx
    37a7:	44 8a 4c 24 1f       	mov    0x1f(%rsp),%r9b
    37ac:	eb cb                	jmp    3779 <cbvprintf+0x90b>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    37ae:	45 84 c9             	test   %r9b,%r9b
    37b1:	74 17                	je     37ca <cbvprintf+0x95c>
			OUTC(sign);
    37b3:	31 c0                	xor    %eax,%eax
    37b5:	41 0f be f9          	movsbl %r9b,%edi
    37b9:	4c 89 fe             	mov    %r15,%rsi
    37bc:	41 ff d6             	callq  *%r14
    37bf:	85 c0                	test   %eax,%eax
    37c1:	0f 88 b9 00 00 00    	js     3880 <cbvprintf+0xa12>
    37c7:	48 ff c3             	inc    %rbx
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    37ca:	8a 44 24 42          	mov    0x42(%rsp),%al
    37ce:	a8 10                	test   $0x10,%al
    37d0:	75 04                	jne    37d6 <cbvprintf+0x968>
    37d2:	a8 08                	test   $0x8,%al
    37d4:	74 18                	je     37ee <cbvprintf+0x980>
				OUTC('0');
    37d6:	31 c0                	xor    %eax,%eax
    37d8:	4c 89 fe             	mov    %r15,%rsi
    37db:	bf 30 00 00 00       	mov    $0x30,%edi
    37e0:	41 ff d6             	callq  *%r14
    37e3:	85 c0                	test   %eax,%eax
    37e5:	0f 88 95 00 00 00    	js     3880 <cbvprintf+0xa12>
    37eb:	48 ff c3             	inc    %rbx
			}

			if (conv->altform_0c) {
    37ee:	f6 44 24 42 10       	testb  $0x10,0x42(%rsp)
    37f3:	74 14                	je     3809 <cbvprintf+0x99b>
				OUTC(conv->specifier);
    37f5:	31 c0                	xor    %eax,%eax
    37f7:	0f b6 7c 24 43       	movzbl 0x43(%rsp),%edi
    37fc:	4c 89 fe             	mov    %r15,%rsi
    37ff:	41 ff d6             	callq  *%r14
    3802:	85 c0                	test   %eax,%eax
    3804:	78 7a                	js     3880 <cbvprintf+0xa12>
    3806:	48 ff c3             	inc    %rbx
			}

			pad_len = conv->pad0_value;
			while (pad_len-- > 0) {
    3809:	8b 44 24 44          	mov    0x44(%rsp),%eax
    380d:	01 d8                	add    %ebx,%eax
    380f:	89 44 24 18          	mov    %eax,0x18(%rsp)
    3813:	8b 44 24 18          	mov    0x18(%rsp),%eax
    3817:	29 d8                	sub    %ebx,%eax
    3819:	85 c0                	test   %eax,%eax
    381b:	7e 16                	jle    3833 <cbvprintf+0x9c5>
				OUTC('0');
    381d:	31 c0                	xor    %eax,%eax
    381f:	4c 89 fe             	mov    %r15,%rsi
    3822:	bf 30 00 00 00       	mov    $0x30,%edi
    3827:	41 ff d6             	callq  *%r14
    382a:	85 c0                	test   %eax,%eax
    382c:	78 52                	js     3880 <cbvprintf+0xa12>
    382e:	48 ff c3             	inc    %rbx
    3831:	eb e0                	jmp    3813 <cbvprintf+0x9a5>
			}

			OUTS(bps, bpe);
    3833:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    3838:	4c 89 ea             	mov    %r13,%rdx
    383b:	4c 89 fe             	mov    %r15,%rsi
    383e:	4c 89 f7             	mov    %r14,%rdi
    3841:	e8 f3 f4 ff ff       	callq  2d39 <outs>
    3846:	85 c0                	test   %eax,%eax
    3848:	78 36                	js     3880 <cbvprintf+0xa12>
    384a:	44 8b 6c 24 08       	mov    0x8(%rsp),%r13d
    384f:	48 98                	cltq   
    3851:	48 01 c3             	add    %rax,%rbx
    3854:	41 01 dd             	add    %ebx,%r13d
		}

		/* Finish left justification */
		while (width > 0) {
    3857:	44 89 e8             	mov    %r13d,%eax
    385a:	29 d8                	sub    %ebx,%eax
    385c:	85 c0                	test   %eax,%eax
    385e:	7e 16                	jle    3876 <cbvprintf+0xa08>
			OUTC(' ');
    3860:	31 c0                	xor    %eax,%eax
    3862:	4c 89 fe             	mov    %r15,%rsi
    3865:	bf 20 00 00 00       	mov    $0x20,%edi
    386a:	41 ff d6             	callq  *%r14
    386d:	85 c0                	test   %eax,%eax
    386f:	78 0f                	js     3880 <cbvprintf+0xa12>
    3871:	48 ff c3             	inc    %rbx
			--width;
    3874:	eb e1                	jmp    3857 <cbvprintf+0x9e9>
			OUTS(bps, bpe);
    3876:	49 89 ed             	mov    %rbp,%r13
    3879:	e9 20 f6 ff ff       	jmpq   2e9e <cbvprintf+0x30>
		}
	}

	return count;
    387e:	89 d8                	mov    %ebx,%eax
#undef OUTS
#undef OUTC
}
    3880:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
    3885:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    388c:	00 00 
    388e:	74 05                	je     3895 <cbvprintf+0xa27>
    3890:	e8 1b ec ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3895:	48 83 c4 78          	add    $0x78,%rsp
    3899:	5b                   	pop    %rbx
    389a:	5d                   	pop    %rbp
    389b:	41 5c                	pop    %r12
    389d:	41 5d                	pop    %r13
    389f:	41 5e                	pop    %r14
    38a1:	41 5f                	pop    %r15
    38a3:	c3                   	retq   

00000000000038a4 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    38a4:	f3 0f 1e fa          	endbr64 
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    38a8:	c3                   	retq   

00000000000038a9 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    38a9:	f3 0f 1e fa          	endbr64 
    38ad:	50                   	push   %rax
    38ae:	48 8d 3d 50 5b 00 00 	lea    0x5b50(%rip),%rdi        # 9405 <default_cmd+0x1a5>
    38b5:	e8 0b 3d 00 00       	callq  75c5 <z_impl_device_get_binding>
	__printk_hook_install(console_out);
    38ba:	48 8d 3d 10 00 00 00 	lea    0x10(%rip),%rdi        # 38d1 <console_out>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    38c1:	48 89 05 58 b4 00 00 	mov    %rax,0xb458(%rip)        # ed20 <uart_console_dev>
	__printk_hook_install(console_out);
    38c8:	e8 d7 f1 ff ff       	callq  2aa4 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    38cd:	31 c0                	xor    %eax,%eax
    38cf:	5a                   	pop    %rdx
    38d0:	c3                   	retq   

00000000000038d1 <console_out>:
{
    38d1:	f3 0f 1e fa          	endbr64 
    38d5:	41 54                	push   %r12
    38d7:	41 89 fc             	mov    %edi,%r12d
	if ('\n' == c) {
    38da:	83 ff 0a             	cmp    $0xa,%edi
    38dd:	75 13                	jne    38f2 <console_out+0x21>
    38df:	48 8b 3d 3a b4 00 00 	mov    0xb43a(%rip),%rdi        # ed20 <uart_console_dev>
	api->poll_out(dev, out_char);
    38e6:	48 8b 47 10          	mov    0x10(%rdi),%rax
    38ea:	be 0d 00 00 00       	mov    $0xd,%esi
    38ef:	ff 50 08             	callq  *0x8(%rax)
	uart_poll_out(uart_console_dev, c);
    38f2:	48 8b 3d 27 b4 00 00 	mov    0xb427(%rip),%rdi        # ed20 <uart_console_dev>
    38f9:	48 8b 47 10          	mov    0x10(%rdi),%rax
    38fd:	41 0f b6 f4          	movzbl %r12b,%esi
    3901:	ff 50 08             	callq  *0x8(%rax)
}
    3904:	44 89 e0             	mov    %r12d,%eax
    3907:	41 5c                	pop    %r12
    3909:	c3                   	retq   

000000000000390a <native_posix_console_init>:
	}
}
#endif /* CONFIG_NATIVE_POSIX_STDIN_CONSOLE */

static int native_posix_console_init(const struct device *arg)
{
    390a:	f3 0f 1e fa          	endbr64 
    390e:	50                   	push   %rax
	setvbuf(stdout, NULL, _IOLBF, 512);
    390f:	48 8b 05 92 86 00 00 	mov    0x8692(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    3916:	b9 00 02 00 00       	mov    $0x200,%ecx
    391b:	31 f6                	xor    %esi,%esi
    391d:	ba 01 00 00 00       	mov    $0x1,%edx
    3922:	48 8b 38             	mov    (%rax),%rdi
    3925:	e8 b6 ec ff ff       	callq  25e0 <setvbuf@plt>
	setvbuf(stderr, NULL, _IOLBF, 512);
    392a:	48 8b 05 bf 86 00 00 	mov    0x86bf(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    3931:	ba 01 00 00 00       	mov    $0x1,%edx
    3936:	31 f6                	xor    %esi,%esi
    3938:	b9 00 02 00 00       	mov    $0x200,%ecx
    393d:	48 8b 38             	mov    (%rax),%rdi
    3940:	e8 9b ec ff ff       	callq  25e0 <setvbuf@plt>
	__printk_hook_install(putchar);
    3945:	48 8b 3d 4c 86 00 00 	mov    0x864c(%rip),%rdi        # bf98 <putchar@GLIBC_2.2.5>
    394c:	e8 53 f1 ff ff       	callq  2aa4 <__printk_hook_install>
#if defined(CONFIG_NATIVE_POSIX_STDOUT_CONSOLE)
	native_posix_stdout_init();
#endif

	return 0;
}
    3951:	31 c0                	xor    %eax,%eax
    3953:	5a                   	pop    %rdx
    3954:	c3                   	retq   

0000000000003955 <np_timer_isr>:
/**
 * Interrupt handler for the timer interrupt
 * Announce to the kernel that a number of ticks have passed
 */
static void np_timer_isr(const void *arg)
{
    3955:	f3 0f 1e fa          	endbr64 
    3959:	50                   	push   %rax
	ARG_UNUSED(arg);

	uint64_t now = hwm_get_time();
    395a:	e8 75 1e 00 00       	callq  57d4 <hwm_get_time>
	int32_t elapsed_ticks = (now - last_tick_time)/tick_period;
    395f:	48 8b 35 c2 b3 00 00 	mov    0xb3c2(%rip),%rsi        # ed28 <last_tick_time>
    3966:	48 8b 0d c3 b3 00 00 	mov    0xb3c3(%rip),%rcx        # ed30 <tick_period>
    396d:	31 d2                	xor    %edx,%edx
    396f:	48 29 f0             	sub    %rsi,%rax
    3972:	48 f7 f1             	div    %rcx

	last_tick_time += elapsed_ticks*tick_period;
    3975:	48 63 d0             	movslq %eax,%rdx
	sys_clock_announce(elapsed_ticks);
    3978:	89 c7                	mov    %eax,%edi
	last_tick_time += elapsed_ticks*tick_period;
    397a:	48 0f af d1          	imul   %rcx,%rdx
    397e:	48 01 f2             	add    %rsi,%rdx
    3981:	48 89 15 a0 b3 00 00 	mov    %rdx,0xb3a0(%rip)        # ed28 <last_tick_time>
}
    3988:	5a                   	pop    %rdx
	sys_clock_announce(elapsed_ticks);
    3989:	e9 dd 4c 00 00       	jmpq   866b <sys_clock_announce>

000000000000398e <sys_clock_driver_init>:
 * @brief Initialize system timer driver
 *
 * Enable the hw timer, setting its tick period, and setup its interrupt
 */
int sys_clock_driver_init(const struct device *dev)
{
    398e:	f3 0f 1e fa          	endbr64 
    3992:	50                   	push   %rax
	ARG_UNUSED(dev);

	tick_period = 1000000ul / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    3993:	48 c7 05 92 b3 00 00 	movq   $0x2710,0xb392(%rip)        # ed30 <tick_period>
    399a:	10 27 00 00 

	last_tick_time = hwm_get_time();
    399e:	e8 31 1e 00 00       	callq  57d4 <hwm_get_time>
	hwtimer_enable(tick_period);
    39a3:	48 8b 3d 86 b3 00 00 	mov    0xb386(%rip),%rdi        # ed30 <tick_period>
	last_tick_time = hwm_get_time();
    39aa:	48 89 05 77 b3 00 00 	mov    %rax,0xb377(%rip)        # ed28 <last_tick_time>
	hwtimer_enable(tick_period);
    39b1:	e8 bf 20 00 00       	callq  5a75 <hwtimer_enable>

	IRQ_CONNECT(TIMER_TICK_IRQ, 1, np_timer_isr, 0, 0);
    39b6:	31 c9                	xor    %ecx,%ecx
    39b8:	48 8d 15 96 ff ff ff 	lea    -0x6a(%rip),%rdx        # 3955 <np_timer_isr>
    39bf:	31 f6                	xor    %esi,%esi
    39c1:	31 ff                	xor    %edi,%edi
    39c3:	e8 97 24 00 00       	callq  5e5f <posix_isr_declare>
    39c8:	31 d2                	xor    %edx,%edx
    39ca:	be 01 00 00 00       	mov    $0x1,%esi
    39cf:	31 ff                	xor    %edi,%edi
    39d1:	e8 ae 24 00 00       	callq  5e84 <posix_irq_priority_set>
	irq_enable(TIMER_TICK_IRQ);
    39d6:	31 ff                	xor    %edi,%edi
    39d8:	e8 00 14 00 00       	callq  4ddd <arch_irq_enable>

	return 0;
}
    39dd:	31 c0                	xor    %eax,%eax
    39df:	5a                   	pop    %rdx
    39e0:	c3                   	retq   

00000000000039e1 <sys_clock_set_timeout>:
 * @param ticks Timeout in tick units
 * @param idle Hint to the driver that the system is about to enter
 *        the idle state immediately after setting the timeout
 */
void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    39e1:	f3 0f 1e fa          	endbr64 

	/* Note that we treat INT_MAX literally as anyhow the maximum amount of
	 * ticks we can report with sys_clock_announce() is INT_MAX
	 */
	if (ticks == K_TICKS_FOREVER) {
		silent_ticks = INT64_MAX;
    39e5:	49 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%r8
    39ec:	ff ff 7f 
	if (ticks == K_TICKS_FOREVER) {
    39ef:	83 ff ff             	cmp    $0xffffffff,%edi
    39f2:	74 0c                	je     3a00 <sys_clock_set_timeout+0x1f>
	} else if (ticks > 0) {
		silent_ticks = ticks - 1;
	} else {
		silent_ticks = 0;
    39f4:	45 31 c0             	xor    %r8d,%r8d
	} else if (ticks > 0) {
    39f7:	85 ff                	test   %edi,%edi
    39f9:	7e 05                	jle    3a00 <sys_clock_set_timeout+0x1f>
		silent_ticks = ticks - 1;
    39fb:	ff cf                	dec    %edi
    39fd:	4c 63 c7             	movslq %edi,%r8
	}
	hwtimer_set_silent_ticks(silent_ticks);
    3a00:	4c 89 c7             	mov    %r8,%rdi
    3a03:	e9 1f 22 00 00       	jmpq   5c27 <hwtimer_set_silent_ticks>

0000000000003a08 <sys_clock_elapsed>:
 * last call to sys_clock_announce() was made.  The kernel will call
 * this with appropriate locking, the driver needs only provide an
 * instantaneous answer.
 */
uint32_t sys_clock_elapsed(void)
{
    3a08:	f3 0f 1e fa          	endbr64 
    3a0c:	50                   	push   %rax
	return (hwm_get_time() - last_tick_time)/tick_period;
    3a0d:	e8 c2 1d 00 00       	callq  57d4 <hwm_get_time>
    3a12:	31 d2                	xor    %edx,%edx
    3a14:	48 2b 05 0d b3 00 00 	sub    0xb30d(%rip),%rax        # ed28 <last_tick_time>
    3a1b:	48 f7 35 0e b3 00 00 	divq   0xb30e(%rip)        # ed30 <tick_period>
}
    3a22:	5a                   	pop    %rdx
    3a23:	c3                   	retq   

0000000000003a24 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
    3a24:	f3 0f 1e fa          	endbr64 
    3a28:	41 89 f1             	mov    %esi,%r9d
    3a2b:	89 c8                	mov    %ecx,%eax
    3a2d:	48 89 d6             	mov    %rdx,%rsi
	if (from_len <= to_len) {
    3a30:	44 39 c9             	cmp    %r9d,%ecx
    3a33:	77 05                	ja     3a3a <_copy+0x16>
		(void)memcpy(to, from, from_len);
    3a35:	89 c9                	mov    %ecx,%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    3a37:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		return from_len;
    3a39:	c3                   	retq   
	} else {
		return TC_CRYPTO_FAIL;
    3a3a:	31 c0                	xor    %eax,%eax
	}
}
    3a3c:	c3                   	retq   

0000000000003a3d <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
    3a3d:	f3 0f 1e fa          	endbr64 
	(void)memset(to, val, len);
    3a41:	89 d1                	mov    %edx,%ecx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    3a43:	89 f0                	mov    %esi,%eax
    3a45:	f3 aa                	rep stos %al,%es:(%rdi)
}
    3a47:	c3                   	retq   

0000000000003a48 <_double_byte>:

/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
    3a48:	f3 0f 1e fa          	endbr64 
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    3a4c:	89 f8                	mov    %edi,%eax
    3a4e:	b2 1b                	mov    $0x1b,%dl
    3a50:	01 ff                	add    %edi,%edi
    3a52:	c0 e8 07             	shr    $0x7,%al
    3a55:	0f af c2             	imul   %edx,%eax
    3a58:	31 f8                	xor    %edi,%eax
}
    3a5a:	c3                   	retq   

0000000000003a5b <_compare>:

int _compare(const uint8_t *a, const uint8_t *b, size_t size)
{
    3a5b:	f3 0f 1e fa          	endbr64 
	const uint8_t *tempa = a;
	const uint8_t *tempb = b;
	uint8_t result = 0;

	for (unsigned int i = 0; i < size; i++) {
    3a5f:	45 31 c0             	xor    %r8d,%r8d
	uint8_t result = 0;
    3a62:	31 c0                	xor    %eax,%eax
	for (unsigned int i = 0; i < size; i++) {
    3a64:	44 89 c1             	mov    %r8d,%ecx
    3a67:	48 39 d1             	cmp    %rdx,%rcx
    3a6a:	73 12                	jae    3a7e <_compare+0x23>
		result |= tempa[i] ^ tempb[i];
    3a6c:	44 8a 0c 0f          	mov    (%rdi,%rcx,1),%r9b
    3a70:	44 32 0c 0e          	xor    (%rsi,%rcx,1),%r9b
	for (unsigned int i = 0; i < size; i++) {
    3a74:	41 ff c0             	inc    %r8d
		result |= tempa[i] ^ tempb[i];
    3a77:	44 89 c9             	mov    %r9d,%ecx
    3a7a:	09 c8                	or     %ecx,%eax
	for (unsigned int i = 0; i < size; i++) {
    3a7c:	eb e6                	jmp    3a64 <_compare+0x9>
	}
	return result;
    3a7e:	0f b6 c0             	movzbl %al,%eax
}
    3a81:	c3                   	retq   

0000000000003a82 <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3a82:	8a 46 03             	mov    0x3(%rsi),%al
    3a85:	30 07                	xor    %al,(%rdi)
    3a87:	8a 46 02             	mov    0x2(%rsi),%al
    3a8a:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3a8d:	8a 46 01             	mov    0x1(%rsi),%al
    3a90:	30 47 02             	xor    %al,0x2(%rdi)
    3a93:	8b 06                	mov    (%rsi),%eax
    3a95:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3a98:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    3a9c:	30 47 04             	xor    %al,0x4(%rdi)
    3a9f:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    3aa3:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3aa6:	8a 46 05             	mov    0x5(%rsi),%al
    3aa9:	30 47 06             	xor    %al,0x6(%rdi)
    3aac:	8b 46 04             	mov    0x4(%rsi),%eax
    3aaf:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3ab2:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    3ab6:	30 47 08             	xor    %al,0x8(%rdi)
    3ab9:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    3abd:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3ac0:	8a 46 09             	mov    0x9(%rsi),%al
    3ac3:	30 47 0a             	xor    %al,0xa(%rdi)
    3ac6:	8b 46 08             	mov    0x8(%rsi),%eax
    3ac9:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3acc:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    3ad0:	30 47 0c             	xor    %al,0xc(%rdi)
    3ad3:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    3ad7:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3ada:	8a 46 0d             	mov    0xd(%rsi),%al
    3add:	30 47 0e             	xor    %al,0xe(%rdi)
    3ae0:	8b 46 0c             	mov    0xc(%rsi),%eax
    3ae3:	30 47 0f             	xor    %al,0xf(%rdi)
}
    3ae6:	c3                   	retq   

0000000000003ae7 <inv_shift_rows>:
 * This inv_shift_rows also implements the matrix flip required for
 * inv_mix_columns, but performs it here to reduce the number of memory
 * operations.
 */
static inline void inv_shift_rows(uint8_t *s)
{
    3ae7:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3aeb:	b9 10 00 00 00       	mov    $0x10,%ecx
    3af0:	be 10 00 00 00       	mov    $0x10,%esi
{
    3af5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3afc:	00 00 
    3afe:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3b03:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3b05:	8a 07                	mov    (%rdi),%al
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3b07:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3b0c:	88 44 24 08          	mov    %al,0x8(%rsp)
    3b10:	8a 47 0d             	mov    0xd(%rdi),%al
    3b13:	88 44 24 09          	mov    %al,0x9(%rsp)
    3b17:	8a 47 0a             	mov    0xa(%rdi),%al
    3b1a:	88 44 24 0a          	mov    %al,0xa(%rsp)
    3b1e:	8a 47 07             	mov    0x7(%rdi),%al
    3b21:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
    3b25:	8a 47 04             	mov    0x4(%rdi),%al
    3b28:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3b2c:	8a 47 01             	mov    0x1(%rdi),%al
    3b2f:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3b33:	8a 47 0e             	mov    0xe(%rdi),%al
    3b36:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3b3a:	8a 47 0b             	mov    0xb(%rdi),%al
    3b3d:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
    3b41:	8a 47 08             	mov    0x8(%rdi),%al
    3b44:	88 44 24 10          	mov    %al,0x10(%rsp)
    3b48:	8a 47 05             	mov    0x5(%rdi),%al
    3b4b:	88 44 24 11          	mov    %al,0x11(%rsp)
    3b4f:	8a 47 02             	mov    0x2(%rdi),%al
    3b52:	88 44 24 12          	mov    %al,0x12(%rsp)
    3b56:	8a 47 0f             	mov    0xf(%rdi),%al
    3b59:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
    3b5d:	8a 47 0c             	mov    0xc(%rdi),%al
    3b60:	88 44 24 14          	mov    %al,0x14(%rsp)
    3b64:	8a 47 09             	mov    0x9(%rdi),%al
    3b67:	88 44 24 15          	mov    %al,0x15(%rsp)
    3b6b:	8a 47 06             	mov    0x6(%rdi),%al
    3b6e:	88 44 24 16          	mov    %al,0x16(%rsp)
    3b72:	8a 47 03             	mov    0x3(%rdi),%al
    3b75:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3b79:	e8 a6 fe ff ff       	callq  3a24 <_copy>
}
    3b7e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    3b83:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3b8a:	00 00 
    3b8c:	74 05                	je     3b93 <inv_shift_rows+0xac>
    3b8e:	e8 1d e9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3b93:	48 83 c4 28          	add    $0x28,%rsp
    3b97:	c3                   	retq   

0000000000003b98 <mult_row_column>:
{
    3b98:	41 57                	push   %r15
    3b9a:	41 56                	push   %r14
    3b9c:	41 55                	push   %r13
    3b9e:	41 54                	push   %r12
    3ba0:	55                   	push   %rbp
    3ba1:	48 89 fd             	mov    %rdi,%rbp
    3ba4:	53                   	push   %rbx
    3ba5:	48 89 f3             	mov    %rsi,%rbx
    3ba8:	48 83 ec 18          	sub    $0x18,%rsp
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    3bac:	0f b6 3e             	movzbl (%rsi),%edi
    3baf:	e8 94 fe ff ff       	callq  3a48 <_double_byte>
    3bb4:	0f b6 f8             	movzbl %al,%edi
    3bb7:	e8 8c fe ff ff       	callq  3a48 <_double_byte>
    3bbc:	0f b6 f8             	movzbl %al,%edi
    3bbf:	e8 84 fe ff ff       	callq  3a48 <_double_byte>
    3bc4:	0f b6 3b             	movzbl (%rbx),%edi
    3bc7:	41 89 c7             	mov    %eax,%r15d
    3bca:	e8 79 fe ff ff       	callq  3a48 <_double_byte>
    3bcf:	0f b6 f8             	movzbl %al,%edi
    3bd2:	e8 71 fe ff ff       	callq  3a48 <_double_byte>
    3bd7:	0f b6 3b             	movzbl (%rbx),%edi
    3bda:	41 89 c6             	mov    %eax,%r14d
    3bdd:	e8 66 fe ff ff       	callq  3a48 <_double_byte>
    3be2:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3be6:	41 89 c5             	mov    %eax,%r13d
    3be9:	e8 5a fe ff ff       	callq  3a48 <_double_byte>
    3bee:	0f b6 f8             	movzbl %al,%edi
    3bf1:	e8 52 fe ff ff       	callq  3a48 <_double_byte>
    3bf6:	0f b6 f8             	movzbl %al,%edi
    3bf9:	e8 4a fe ff ff       	callq  3a48 <_double_byte>
    3bfe:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3c02:	41 89 c4             	mov    %eax,%r12d
    3c05:	e8 3e fe ff ff       	callq  3a48 <_double_byte>
    3c0a:	8a 53 01             	mov    0x1(%rbx),%dl
    3c0d:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3c11:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3c15:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3c19:	e8 2a fe ff ff       	callq  3a48 <_double_byte>
    3c1e:	0f b6 f8             	movzbl %al,%edi
    3c21:	e8 22 fe ff ff       	callq  3a48 <_double_byte>
    3c26:	0f b6 f8             	movzbl %al,%edi
    3c29:	e8 1a fe ff ff       	callq  3a48 <_double_byte>
    3c2e:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3c32:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3c36:	e8 0d fe ff ff       	callq  3a48 <_double_byte>
    3c3b:	0f b6 f8             	movzbl %al,%edi
    3c3e:	e8 05 fe ff ff       	callq  3a48 <_double_byte>
    3c43:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3c47:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3c4b:	32 53 02             	xor    0x2(%rbx),%dl
    3c4e:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3c52:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3c56:	e8 ed fd ff ff       	callq  3a48 <_double_byte>
    3c5b:	0f b6 f8             	movzbl %al,%edi
    3c5e:	e8 e5 fd ff ff       	callq  3a48 <_double_byte>
    3c63:	0f b6 f8             	movzbl %al,%edi
    3c66:	e8 dd fd ff ff       	callq  3a48 <_double_byte>
    3c6b:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3c6f:	41 89 c0             	mov    %eax,%r8d
    3c72:	8a 43 03             	mov    0x3(%rbx),%al
    3c75:	31 d0                	xor    %edx,%eax
    3c77:	44 31 f8             	xor    %r15d,%eax
    3c7a:	44 31 f0             	xor    %r14d,%eax
    3c7d:	44 31 e8             	xor    %r13d,%eax
    3c80:	44 31 e0             	xor    %r12d,%eax
    3c83:	33 44 24 0c          	xor    0xc(%rsp),%eax
    3c87:	32 44 24 0d          	xor    0xd(%rsp),%al
    3c8b:	32 44 24 0e          	xor    0xe(%rsp),%al
    3c8f:	44 31 c0             	xor    %r8d,%eax
    3c92:	88 45 00             	mov    %al,0x0(%rbp)
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    3c95:	0f b6 3b             	movzbl (%rbx),%edi
    3c98:	e8 ab fd ff ff       	callq  3a48 <_double_byte>
    3c9d:	0f b6 f8             	movzbl %al,%edi
    3ca0:	e8 a3 fd ff ff       	callq  3a48 <_double_byte>
    3ca5:	0f b6 f8             	movzbl %al,%edi
    3ca8:	e8 9b fd ff ff       	callq  3a48 <_double_byte>
    3cad:	8a 13                	mov    (%rbx),%dl
    3caf:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3cb3:	41 89 c7             	mov    %eax,%r15d
    3cb6:	88 54 24 0e          	mov    %dl,0xe(%rsp)
    3cba:	e8 89 fd ff ff       	callq  3a48 <_double_byte>
    3cbf:	0f b6 f8             	movzbl %al,%edi
    3cc2:	e8 81 fd ff ff       	callq  3a48 <_double_byte>
    3cc7:	0f b6 f8             	movzbl %al,%edi
    3cca:	e8 79 fd ff ff       	callq  3a48 <_double_byte>
    3ccf:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3cd3:	41 89 c6             	mov    %eax,%r14d
    3cd6:	e8 6d fd ff ff       	callq  3a48 <_double_byte>
    3cdb:	0f b6 f8             	movzbl %al,%edi
    3cde:	e8 65 fd ff ff       	callq  3a48 <_double_byte>
    3ce3:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3ce7:	41 89 c5             	mov    %eax,%r13d
    3cea:	e8 59 fd ff ff       	callq  3a48 <_double_byte>
    3cef:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3cf3:	41 89 c4             	mov    %eax,%r12d
    3cf6:	e8 4d fd ff ff       	callq  3a48 <_double_byte>
    3cfb:	0f b6 f8             	movzbl %al,%edi
    3cfe:	e8 45 fd ff ff       	callq  3a48 <_double_byte>
    3d03:	0f b6 f8             	movzbl %al,%edi
    3d06:	e8 3d fd ff ff       	callq  3a48 <_double_byte>
    3d0b:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3d0f:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3d13:	e8 30 fd ff ff       	callq  3a48 <_double_byte>
    3d18:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3d1c:	8a 54 24 0e          	mov    0xe(%rsp),%dl
    3d20:	32 53 02             	xor    0x2(%rbx),%dl
    3d23:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3d27:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3d2b:	e8 18 fd ff ff       	callq  3a48 <_double_byte>
    3d30:	0f b6 f8             	movzbl %al,%edi
    3d33:	e8 10 fd ff ff       	callq  3a48 <_double_byte>
    3d38:	0f b6 f8             	movzbl %al,%edi
    3d3b:	e8 08 fd ff ff       	callq  3a48 <_double_byte>
    3d40:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3d44:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3d48:	e8 fb fc ff ff       	callq  3a48 <_double_byte>
    3d4d:	0f b6 f8             	movzbl %al,%edi
    3d50:	e8 f3 fc ff ff       	callq  3a48 <_double_byte>
    3d55:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3d59:	41 89 c0             	mov    %eax,%r8d
    3d5c:	8a 43 03             	mov    0x3(%rbx),%al
    3d5f:	31 d0                	xor    %edx,%eax
    3d61:	44 31 f8             	xor    %r15d,%eax
    3d64:	44 31 f0             	xor    %r14d,%eax
    3d67:	44 31 e8             	xor    %r13d,%eax
    3d6a:	44 31 e0             	xor    %r12d,%eax
    3d6d:	33 44 24 0c          	xor    0xc(%rsp),%eax
    3d71:	32 44 24 0d          	xor    0xd(%rsp),%al
    3d75:	32 44 24 0e          	xor    0xe(%rsp),%al
    3d79:	44 31 c0             	xor    %r8d,%eax
    3d7c:	88 45 01             	mov    %al,0x1(%rbp)
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    3d7f:	0f b6 3b             	movzbl (%rbx),%edi
    3d82:	e8 c1 fc ff ff       	callq  3a48 <_double_byte>
    3d87:	0f b6 f8             	movzbl %al,%edi
    3d8a:	e8 b9 fc ff ff       	callq  3a48 <_double_byte>
    3d8f:	0f b6 f8             	movzbl %al,%edi
    3d92:	e8 b1 fc ff ff       	callq  3a48 <_double_byte>
    3d97:	0f b6 3b             	movzbl (%rbx),%edi
    3d9a:	41 89 c7             	mov    %eax,%r15d
    3d9d:	e8 a6 fc ff ff       	callq  3a48 <_double_byte>
    3da2:	0f b6 f8             	movzbl %al,%edi
    3da5:	e8 9e fc ff ff       	callq  3a48 <_double_byte>
    3daa:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3dae:	44 8a 23             	mov    (%rbx),%r12b
    3db1:	41 89 c6             	mov    %eax,%r14d
    3db4:	e8 8f fc ff ff       	callq  3a48 <_double_byte>
    3db9:	0f b6 f8             	movzbl %al,%edi
    3dbc:	e8 87 fc ff ff       	callq  3a48 <_double_byte>
    3dc1:	0f b6 f8             	movzbl %al,%edi
    3dc4:	e8 7f fc ff ff       	callq  3a48 <_double_byte>
    3dc9:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3dcd:	44 32 63 01          	xor    0x1(%rbx),%r12b
    3dd1:	41 89 c5             	mov    %eax,%r13d
    3dd4:	e8 6f fc ff ff       	callq  3a48 <_double_byte>
    3dd9:	0f b6 f8             	movzbl %al,%edi
    3ddc:	e8 67 fc ff ff       	callq  3a48 <_double_byte>
    3de1:	0f b6 f8             	movzbl %al,%edi
    3de4:	e8 5f fc ff ff       	callq  3a48 <_double_byte>
    3de9:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3ded:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3df1:	e8 52 fc ff ff       	callq  3a48 <_double_byte>
    3df6:	0f b6 f8             	movzbl %al,%edi
    3df9:	e8 4a fc ff ff       	callq  3a48 <_double_byte>
    3dfe:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3e02:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3e06:	e8 3d fc ff ff       	callq  3a48 <_double_byte>
    3e0b:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3e0f:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3e13:	e8 30 fc ff ff       	callq  3a48 <_double_byte>
    3e18:	0f b6 f8             	movzbl %al,%edi
    3e1b:	e8 28 fc ff ff       	callq  3a48 <_double_byte>
    3e20:	0f b6 f8             	movzbl %al,%edi
    3e23:	e8 20 fc ff ff       	callq  3a48 <_double_byte>
    3e28:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3e2c:	88 44 24 0f          	mov    %al,0xf(%rsp)
    3e30:	e8 13 fc ff ff       	callq  3a48 <_double_byte>
    3e35:	41 89 c0             	mov    %eax,%r8d
    3e38:	8a 43 03             	mov    0x3(%rbx),%al
    3e3b:	44 31 e0             	xor    %r12d,%eax
    3e3e:	44 31 f8             	xor    %r15d,%eax
    3e41:	44 31 f0             	xor    %r14d,%eax
    3e44:	44 31 e8             	xor    %r13d,%eax
    3e47:	33 44 24 0c          	xor    0xc(%rsp),%eax
    3e4b:	32 44 24 0d          	xor    0xd(%rsp),%al
    3e4f:	32 44 24 0e          	xor    0xe(%rsp),%al
    3e53:	32 44 24 0f          	xor    0xf(%rsp),%al
    3e57:	44 31 c0             	xor    %r8d,%eax
    3e5a:	88 45 02             	mov    %al,0x2(%rbp)
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    3e5d:	0f b6 3b             	movzbl (%rbx),%edi
    3e60:	e8 e3 fb ff ff       	callq  3a48 <_double_byte>
    3e65:	0f b6 f8             	movzbl %al,%edi
    3e68:	e8 db fb ff ff       	callq  3a48 <_double_byte>
    3e6d:	0f b6 f8             	movzbl %al,%edi
    3e70:	e8 d3 fb ff ff       	callq  3a48 <_double_byte>
    3e75:	0f b6 3b             	movzbl (%rbx),%edi
    3e78:	41 89 c4             	mov    %eax,%r12d
    3e7b:	e8 c8 fb ff ff       	callq  3a48 <_double_byte>
    3e80:	8a 13                	mov    (%rbx),%dl
    3e82:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3e86:	41 89 c7             	mov    %eax,%r15d
    3e89:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    3e8d:	e8 b6 fb ff ff       	callq  3a48 <_double_byte>
    3e92:	0f b6 f8             	movzbl %al,%edi
    3e95:	e8 ae fb ff ff       	callq  3a48 <_double_byte>
    3e9a:	0f b6 f8             	movzbl %al,%edi
    3e9d:	e8 a6 fb ff ff       	callq  3a48 <_double_byte>
    3ea2:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3ea6:	41 89 c6             	mov    %eax,%r14d
    3ea9:	e8 9a fb ff ff       	callq  3a48 <_double_byte>
    3eae:	0f b6 f8             	movzbl %al,%edi
    3eb1:	e8 92 fb ff ff       	callq  3a48 <_double_byte>
    3eb6:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3eba:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    3ebe:	32 53 01             	xor    0x1(%rbx),%dl
    3ec1:	41 89 c5             	mov    %eax,%r13d
    3ec4:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    3ec8:	e8 7b fb ff ff       	callq  3a48 <_double_byte>
    3ecd:	0f b6 f8             	movzbl %al,%edi
    3ed0:	e8 73 fb ff ff       	callq  3a48 <_double_byte>
    3ed5:	0f b6 f8             	movzbl %al,%edi
    3ed8:	e8 6b fb ff ff       	callq  3a48 <_double_byte>
    3edd:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    3ee1:	32 53 02             	xor    0x2(%rbx),%dl
    3ee4:	41 31 d4             	xor    %edx,%r12d
    3ee7:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3eeb:	45 31 fc             	xor    %r15d,%r12d
    3eee:	45 31 f4             	xor    %r14d,%r12d
    3ef1:	45 31 ec             	xor    %r13d,%r12d
    3ef4:	41 31 c4             	xor    %eax,%r12d
    3ef7:	e8 4c fb ff ff       	callq  3a48 <_double_byte>
    3efc:	0f b6 f8             	movzbl %al,%edi
    3eff:	e8 44 fb ff ff       	callq  3a48 <_double_byte>
    3f04:	0f b6 f8             	movzbl %al,%edi
    3f07:	e8 3c fb ff ff       	callq  3a48 <_double_byte>
    3f0c:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3f10:	41 89 c5             	mov    %eax,%r13d
    3f13:	e8 30 fb ff ff       	callq  3a48 <_double_byte>
    3f18:	45 31 ec             	xor    %r13d,%r12d
    3f1b:	0f b6 f8             	movzbl %al,%edi
    3f1e:	e8 25 fb ff ff       	callq  3a48 <_double_byte>
    3f23:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3f27:	41 89 c6             	mov    %eax,%r14d
    3f2a:	e8 19 fb ff ff       	callq  3a48 <_double_byte>
    3f2f:	45 31 f4             	xor    %r14d,%r12d
    3f32:	41 31 c4             	xor    %eax,%r12d
    3f35:	44 88 65 03          	mov    %r12b,0x3(%rbp)
}
    3f39:	48 83 c4 18          	add    $0x18,%rsp
    3f3d:	5b                   	pop    %rbx
    3f3e:	5d                   	pop    %rbp
    3f3f:	41 5c                	pop    %r12
    3f41:	41 5d                	pop    %r13
    3f43:	41 5e                	pop    %r14
    3f45:	41 5f                	pop    %r15
    3f47:	c3                   	retq   

0000000000003f48 <tc_aes_decrypt>:

int tc_aes_decrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    3f48:	f3 0f 1e fa          	endbr64 
    3f4c:	41 57                	push   %r15
    3f4e:	41 56                	push   %r14
    3f50:	41 55                	push   %r13
    3f52:	41 54                	push   %r12
    3f54:	49 89 d4             	mov    %rdx,%r12
    3f57:	55                   	push   %rbp
    3f58:	53                   	push   %rbx
    3f59:	48 83 ec 48          	sub    $0x48,%rsp
    3f5d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    3f62:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3f69:	00 00 
    3f6b:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    3f70:	31 c0                	xor    %eax,%eax

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3f72:	48 85 d2             	test   %rdx,%rdx
    3f75:	0f 94 c2             	sete   %dl
	} else if (in == (const uint8_t *) 0) {
    3f78:	48 85 f6             	test   %rsi,%rsi
    3f7b:	0f 94 c0             	sete   %al
	} else if (s == (TCAesKeySched_t) 0) {
    3f7e:	08 c2                	or     %al,%dl
    3f80:	0f 85 21 01 00 00    	jne    40a7 <tc_aes_decrypt+0x15f>
    3f86:	48 85 ff             	test   %rdi,%rdi
    3f89:	0f 84 18 01 00 00    	je     40a7 <tc_aes_decrypt+0x15f>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3f8f:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
    3f94:	48 89 f2             	mov    %rsi,%rdx
    3f97:	b9 10 00 00 00       	mov    $0x10,%ecx
    3f9c:	be 10 00 00 00       	mov    $0x10,%esi
    3fa1:	48 89 ef             	mov    %rbp,%rdi
    3fa4:	4d 8d b4 24 90 00 00 	lea    0x90(%r12),%r14
    3fab:	00 
		s[i] = inv_sbox[s[i]];
    3fac:	4c 8d 3d 4d 50 00 00 	lea    0x504d(%rip),%r15        # 9000 <inv_sbox>
	(void)_copy(state, sizeof(state), in, sizeof(state));
    3fb3:	e8 6c fa ff ff       	callq  3a24 <_copy>

	add_round_key(state, s->words + Nb*Nr);
    3fb8:	49 8d b4 24 a0 00 00 	lea    0xa0(%r12),%rsi
    3fbf:	00 
    3fc0:	48 89 ef             	mov    %rbp,%rdi
    3fc3:	e8 ba fa ff ff       	callq  3a82 <add_round_key>

	for (i = Nr - 1; i > 0; --i) {
		inv_shift_rows(state);
    3fc8:	48 89 ef             	mov    %rbp,%rdi
    3fcb:	49 89 ed             	mov    %rbp,%r13
    3fce:	48 8d 5c 24 28       	lea    0x28(%rsp),%rbx
    3fd3:	e8 0f fb ff ff       	callq  3ae7 <inv_shift_rows>
    3fd8:	48 89 e8             	mov    %rbp,%rax
		s[i] = inv_sbox[s[i]];
    3fdb:	0f b6 10             	movzbl (%rax),%edx
    3fde:	48 ff c0             	inc    %rax
    3fe1:	41 8a 14 17          	mov    (%r15,%rdx,1),%dl
    3fe5:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb*Nk); ++i) {
    3fe8:	48 39 d8             	cmp    %rbx,%rax
    3feb:	75 ee                	jne    3fdb <tc_aes_decrypt+0x93>
		inv_sub_bytes(state);
		add_round_key(state, s->words + Nb*i);
    3fed:	4c 89 f6             	mov    %r14,%rsi
    3ff0:	48 89 ef             	mov    %rbp,%rdi
    3ff3:	49 83 ee 10          	sub    $0x10,%r14
    3ff7:	e8 86 fa ff ff       	callq  3a82 <add_round_key>
	mult_row_column(t, s);
    3ffc:	48 89 ee             	mov    %rbp,%rsi
    3fff:	48 89 df             	mov    %rbx,%rdi
    4002:	e8 91 fb ff ff       	callq  3b98 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4007:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
    400c:	48 8d 7c 24 2c       	lea    0x2c(%rsp),%rdi
    4011:	e8 82 fb ff ff       	callq  3b98 <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    4016:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    401b:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    4020:	e8 73 fb ff ff       	callq  3b98 <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    4025:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
    402a:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
    402f:	e8 64 fb ff ff       	callq  3b98 <mult_row_column>
	(void)_copy(s, sizeof(t), t, sizeof(t));
    4034:	b9 10 00 00 00       	mov    $0x10,%ecx
    4039:	48 89 da             	mov    %rbx,%rdx
    403c:	48 89 ef             	mov    %rbp,%rdi
    403f:	be 10 00 00 00       	mov    $0x10,%esi
    4044:	e8 db f9 ff ff       	callq  3a24 <_copy>
	for (i = Nr - 1; i > 0; --i) {
    4049:	4d 39 e6             	cmp    %r12,%r14
    404c:	0f 85 76 ff ff ff    	jne    3fc8 <tc_aes_decrypt+0x80>
		inv_mix_columns(state);
	}

	inv_shift_rows(state);
    4052:	48 89 ef             	mov    %rbp,%rdi
    4055:	e8 8d fa ff ff       	callq  3ae7 <inv_shift_rows>
		s[i] = inv_sbox[s[i]];
    405a:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
    405f:	49 ff c5             	inc    %r13
    4062:	41 8a 04 07          	mov    (%r15,%rax,1),%al
    4066:	41 88 45 ff          	mov    %al,-0x1(%r13)
	for (i = 0; i < (Nb*Nk); ++i) {
    406a:	49 39 dd             	cmp    %rbx,%r13
    406d:	75 eb                	jne    405a <tc_aes_decrypt+0x112>
	inv_sub_bytes(state);
	add_round_key(state, s->words);
    406f:	4c 89 e6             	mov    %r12,%rsi
    4072:	48 89 ef             	mov    %rbp,%rdi
    4075:	e8 08 fa ff ff       	callq  3a82 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    407a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    407f:	b9 10 00 00 00       	mov    $0x10,%ecx
    4084:	48 89 ea             	mov    %rbp,%rdx
    4087:	be 10 00 00 00       	mov    $0x10,%esi
    408c:	e8 93 f9 ff ff       	callq  3a24 <_copy>

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    4091:	ba 10 00 00 00       	mov    $0x10,%edx
    4096:	31 f6                	xor    %esi,%esi
    4098:	48 89 ef             	mov    %rbp,%rdi
    409b:	e8 9d f9 ff ff       	callq  3a3d <_set>


	return TC_CRYPTO_SUCCESS;
    40a0:	b8 01 00 00 00       	mov    $0x1,%eax
    40a5:	eb 02                	jmp    40a9 <tc_aes_decrypt+0x161>
		return TC_CRYPTO_FAIL;
    40a7:	31 c0                	xor    %eax,%eax
}
    40a9:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
    40ae:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    40b5:	00 00 
    40b7:	74 05                	je     40be <tc_aes_decrypt+0x176>
    40b9:	e8 f2 e3 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    40be:	48 83 c4 48          	add    $0x48,%rsp
    40c2:	5b                   	pop    %rbx
    40c3:	5d                   	pop    %rbp
    40c4:	41 5c                	pop    %r12
    40c6:	41 5d                	pop    %r13
    40c8:	41 5e                	pop    %r14
    40ca:	41 5f                	pop    %r15
    40cc:	c3                   	retq   

00000000000040cd <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    40cd:	8a 46 03             	mov    0x3(%rsi),%al
    40d0:	30 07                	xor    %al,(%rdi)
    40d2:	8a 46 02             	mov    0x2(%rsi),%al
    40d5:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    40d8:	8a 46 01             	mov    0x1(%rsi),%al
    40db:	30 47 02             	xor    %al,0x2(%rdi)
    40de:	8b 06                	mov    (%rsi),%eax
    40e0:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    40e3:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    40e7:	30 47 04             	xor    %al,0x4(%rdi)
    40ea:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    40ee:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    40f1:	8a 46 05             	mov    0x5(%rsi),%al
    40f4:	30 47 06             	xor    %al,0x6(%rdi)
    40f7:	8b 46 04             	mov    0x4(%rsi),%eax
    40fa:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    40fd:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    4101:	30 47 08             	xor    %al,0x8(%rdi)
    4104:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    4108:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    410b:	8a 46 09             	mov    0x9(%rsi),%al
    410e:	30 47 0a             	xor    %al,0xa(%rdi)
    4111:	8b 46 08             	mov    0x8(%rsi),%eax
    4114:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    4117:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    411b:	30 47 0c             	xor    %al,0xc(%rdi)
    411e:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    4122:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    4125:	8a 46 0d             	mov    0xd(%rsi),%al
    4128:	30 47 0e             	xor    %al,0xe(%rdi)
    412b:	8b 46 0c             	mov    0xc(%rsi),%eax
    412e:	30 47 0f             	xor    %al,0xf(%rdi)
}
    4131:	c3                   	retq   

0000000000004132 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    4132:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4136:	b9 10 00 00 00       	mov    $0x10,%ecx
    413b:	be 10 00 00 00       	mov    $0x10,%esi
{
    4140:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4147:	00 00 
    4149:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    414e:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4150:	8a 07                	mov    (%rdi),%al
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4152:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4157:	88 44 24 08          	mov    %al,0x8(%rsp)
    415b:	8a 47 05             	mov    0x5(%rdi),%al
    415e:	88 44 24 09          	mov    %al,0x9(%rsp)
    4162:	8a 47 0a             	mov    0xa(%rdi),%al
    4165:	88 44 24 0a          	mov    %al,0xa(%rsp)
    4169:	8a 47 0f             	mov    0xf(%rdi),%al
    416c:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    4170:	8a 47 04             	mov    0x4(%rdi),%al
    4173:	88 44 24 0c          	mov    %al,0xc(%rsp)
    4177:	8a 47 09             	mov    0x9(%rdi),%al
    417a:	88 44 24 0d          	mov    %al,0xd(%rsp)
    417e:	8a 47 0e             	mov    0xe(%rdi),%al
    4181:	88 44 24 0e          	mov    %al,0xe(%rsp)
    4185:	8a 47 03             	mov    0x3(%rdi),%al
    4188:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    418c:	8a 47 08             	mov    0x8(%rdi),%al
    418f:	88 44 24 10          	mov    %al,0x10(%rsp)
    4193:	8a 47 0d             	mov    0xd(%rdi),%al
    4196:	88 44 24 11          	mov    %al,0x11(%rsp)
    419a:	8a 47 02             	mov    0x2(%rdi),%al
    419d:	88 44 24 12          	mov    %al,0x12(%rsp)
    41a1:	8a 47 07             	mov    0x7(%rdi),%al
    41a4:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    41a8:	8a 47 0c             	mov    0xc(%rdi),%al
    41ab:	88 44 24 14          	mov    %al,0x14(%rsp)
    41af:	8a 47 01             	mov    0x1(%rdi),%al
    41b2:	88 44 24 15          	mov    %al,0x15(%rsp)
    41b6:	8a 47 06             	mov    0x6(%rdi),%al
    41b9:	88 44 24 16          	mov    %al,0x16(%rsp)
    41bd:	8a 47 0b             	mov    0xb(%rdi),%al
    41c0:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void) _copy(s, sizeof(t), t, sizeof(t));
    41c4:	e8 5b f8 ff ff       	callq  3a24 <_copy>
}
    41c9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    41ce:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    41d5:	00 00 
    41d7:	74 05                	je     41de <shift_rows+0xac>
    41d9:	e8 d2 e2 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    41de:	48 83 c4 28          	add    $0x28,%rsp
    41e2:	c3                   	retq   

00000000000041e3 <mult_row_column>:
{
    41e3:	41 55                	push   %r13
    41e5:	41 54                	push   %r12
    41e7:	49 89 fc             	mov    %rdi,%r12
    41ea:	55                   	push   %rbp
    41eb:	53                   	push   %rbx
    41ec:	48 89 f3             	mov    %rsi,%rbx
    41ef:	50                   	push   %rax
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    41f0:	0f b6 3e             	movzbl (%rsi),%edi
    41f3:	e8 50 f8 ff ff       	callq  3a48 <_double_byte>
    41f8:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    41fc:	89 c5                	mov    %eax,%ebp
    41fe:	e8 45 f8 ff ff       	callq  3a48 <_double_byte>
    4203:	41 89 c0             	mov    %eax,%r8d
    4206:	8a 43 01             	mov    0x1(%rbx),%al
    4209:	32 43 02             	xor    0x2(%rbx),%al
    420c:	32 43 03             	xor    0x3(%rbx),%al
    420f:	31 e8                	xor    %ebp,%eax
    4211:	44 31 c0             	xor    %r8d,%eax
    4214:	41 88 04 24          	mov    %al,(%r12)
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    4218:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    421c:	40 8a 2b             	mov    (%rbx),%bpl
    421f:	e8 24 f8 ff ff       	callq  3a48 <_double_byte>
    4224:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    4228:	41 89 c5             	mov    %eax,%r13d
    422b:	e8 18 f8 ff ff       	callq  3a48 <_double_byte>
    4230:	41 89 c0             	mov    %eax,%r8d
    4233:	8a 43 02             	mov    0x2(%rbx),%al
    4236:	31 e8                	xor    %ebp,%eax
    4238:	32 43 03             	xor    0x3(%rbx),%al
    423b:	44 31 e8             	xor    %r13d,%eax
    423e:	44 31 c0             	xor    %r8d,%eax
    4241:	41 88 44 24 01       	mov    %al,0x1(%r12)
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    4246:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    424a:	40 8a 2b             	mov    (%rbx),%bpl
    424d:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    4251:	e8 f2 f7 ff ff       	callq  3a48 <_double_byte>
    4256:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    425a:	41 89 c5             	mov    %eax,%r13d
    425d:	e8 e6 f7 ff ff       	callq  3a48 <_double_byte>
    4262:	40 32 6b 03          	xor    0x3(%rbx),%bpl
    4266:	44 31 ed             	xor    %r13d,%ebp
    4269:	31 c5                	xor    %eax,%ebp
    426b:	41 88 6c 24 02       	mov    %bpl,0x2(%r12)
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4270:	0f b6 3b             	movzbl (%rbx),%edi
    4273:	e8 d0 f7 ff ff       	callq  3a48 <_double_byte>
    4278:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    427c:	40 8a 2b             	mov    (%rbx),%bpl
    427f:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    4283:	40 32 6b 02          	xor    0x2(%rbx),%bpl
    4287:	31 c5                	xor    %eax,%ebp
    4289:	e8 ba f7 ff ff       	callq  3a48 <_double_byte>
    428e:	31 c5                	xor    %eax,%ebp
    4290:	41 88 6c 24 03       	mov    %bpl,0x3(%r12)
}
    4295:	5a                   	pop    %rdx
    4296:	5b                   	pop    %rbx
    4297:	5d                   	pop    %rbp
    4298:	41 5c                	pop    %r12
    429a:	41 5d                	pop    %r13
    429c:	c3                   	retq   

000000000000429d <tc_aes128_set_encrypt_key>:
{
    429d:	f3 0f 1e fa          	endbr64 
    42a1:	48 83 ec 48          	sub    $0x48,%rsp
    42a5:	49 89 f8             	mov    %rdi,%r8
    42a8:	49 89 f1             	mov    %rsi,%r9
	const unsigned int rconst[11] = {
    42ab:	b9 0b 00 00 00       	mov    $0xb,%ecx
{
    42b0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    42b7:	00 00 
    42b9:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    42be:	31 c0                	xor    %eax,%eax
	const unsigned int rconst[11] = {
    42c0:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
    42c5:	48 8d 35 34 4e 00 00 	lea    0x4e34(%rip),%rsi        # 9100 <inv_sbox+0x100>
    42cc:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
	} else if (k == (const uint8_t *) 0) {
    42ce:	4d 85 c0             	test   %r8,%r8
    42d1:	0f 84 ad 00 00 00    	je     4384 <tc_aes128_set_encrypt_key+0xe7>
    42d7:	4d 85 c9             	test   %r9,%r9
    42da:	0f 84 a4 00 00 00    	je     4384 <tc_aes128_set_encrypt_key+0xe7>
    42e0:	31 d2                	xor    %edx,%edx
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    42e2:	41 0f b6 04 11       	movzbl (%r9,%rdx,1),%eax
    42e7:	41 0f b6 4c 11 01    	movzbl 0x1(%r9,%rdx,1),%ecx
    42ed:	c1 e0 18             	shl    $0x18,%eax
    42f0:	c1 e1 10             	shl    $0x10,%ecx
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    42f3:	09 c8                	or     %ecx,%eax
    42f5:	41 0f b6 4c 11 03    	movzbl 0x3(%r9,%rdx,1),%ecx
    42fb:	09 c8                	or     %ecx,%eax
    42fd:	41 0f b6 4c 11 02    	movzbl 0x2(%r9,%rdx,1),%ecx
    4303:	c1 e1 08             	shl    $0x8,%ecx
    4306:	09 c8                	or     %ecx,%eax
    4308:	41 89 04 10          	mov    %eax,(%r8,%rdx,1)
	for (i = 0; i < Nk; ++i) {
    430c:	48 83 c2 04          	add    $0x4,%rdx
    4310:	48 83 fa 10          	cmp    $0x10,%rdx
    4314:	75 cc                	jne    42e2 <tc_aes128_set_encrypt_key+0x45>
    4316:	be 04 00 00 00       	mov    $0x4,%esi
			t = subword(rotword(t)) ^ rconst[i/Nk];
    431b:	48 8d 3d 1e 4e 00 00 	lea    0x4e1e(%rip),%rdi        # 9140 <sbox>
		t = s->words[i-1];
    4322:	41 8b 44 b0 fc       	mov    -0x4(%r8,%rsi,4),%eax
		if ((i % Nk) == 0) {
    4327:	40 f6 c6 03          	test   $0x3,%sil
    432b:	75 3e                	jne    436b <tc_aes128_set_encrypt_key+0xce>
	return (((a) >> 24)|((a) << 8));
    432d:	c1 c0 08             	rol    $0x8,%eax
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4330:	89 c2                	mov    %eax,%edx
    4332:	c1 ea 18             	shr    $0x18,%edx
    4335:	0f b6 0c 17          	movzbl (%rdi,%rdx,1),%ecx
    4339:	0f b6 d0             	movzbl %al,%edx
    433c:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    4340:	c1 e1 18             	shl    $0x18,%ecx
    4343:	09 d1                	or     %edx,%ecx
    4345:	89 c2                	mov    %eax,%edx
    4347:	c1 ea 10             	shr    $0x10,%edx
    434a:	0f b6 d2             	movzbl %dl,%edx
    434d:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    4351:	c1 e2 10             	shl    $0x10,%edx
    4354:	09 d1                	or     %edx,%ecx
    4356:	0f b6 d4             	movzbl %ah,%edx
    4359:	0f b6 04 17          	movzbl (%rdi,%rdx,1),%eax
    435d:	89 f2                	mov    %esi,%edx
    435f:	c1 ea 02             	shr    $0x2,%edx
    4362:	c1 e0 08             	shl    $0x8,%eax
    4365:	09 c8                	or     %ecx,%eax
    4367:	33 44 94 0c          	xor    0xc(%rsp,%rdx,4),%eax
		s->words[i] = s->words[i-Nk] ^ t;
    436b:	41 33 44 b0 f0       	xor    -0x10(%r8,%rsi,4),%eax
    4370:	41 89 04 b0          	mov    %eax,(%r8,%rsi,4)
	for (; i < (Nb * (Nr + 1)); ++i) {
    4374:	48 ff c6             	inc    %rsi
    4377:	48 83 fe 2c          	cmp    $0x2c,%rsi
    437b:	75 a5                	jne    4322 <tc_aes128_set_encrypt_key+0x85>
	return TC_CRYPTO_SUCCESS;
    437d:	b8 01 00 00 00       	mov    $0x1,%eax
    4382:	eb 02                	jmp    4386 <tc_aes128_set_encrypt_key+0xe9>
		return TC_CRYPTO_FAIL;
    4384:	31 c0                	xor    %eax,%eax
}
    4386:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    438b:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4392:	00 00 
    4394:	74 05                	je     439b <tc_aes128_set_encrypt_key+0xfe>
    4396:	e8 15 e1 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    439b:	48 83 c4 48          	add    $0x48,%rsp
    439f:	c3                   	retq   

00000000000043a0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    43a0:	f3 0f 1e fa          	endbr64 
    43a4:	41 57                	push   %r15
    43a6:	41 56                	push   %r14
    43a8:	41 55                	push   %r13
    43aa:	41 54                	push   %r12
    43ac:	49 89 d4             	mov    %rdx,%r12
    43af:	55                   	push   %rbp
    43b0:	53                   	push   %rbx
    43b1:	48 83 ec 38          	sub    $0x38,%rsp
    43b5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    43bc:	00 00 
    43be:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    43c3:	31 c0                	xor    %eax,%eax
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    43c5:	48 85 f6             	test   %rsi,%rsi
    43c8:	0f 94 c2             	sete   %dl
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    43cb:	4d 85 e4             	test   %r12,%r12
    43ce:	0f 94 c0             	sete   %al
    43d1:	08 c2                	or     %al,%dl
    43d3:	0f 85 25 01 00 00    	jne    44fe <tc_aes_encrypt+0x15e>
    43d9:	49 89 fd             	mov    %rdi,%r13
    43dc:	48 85 ff             	test   %rdi,%rdi
    43df:	0f 84 19 01 00 00    	je     44fe <tc_aes_encrypt+0x15e>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    43e5:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    43ea:	48 89 f2             	mov    %rsi,%rdx
    43ed:	b9 10 00 00 00       	mov    $0x10,%ecx
    43f2:	be 10 00 00 00       	mov    $0x10,%esi
    43f7:	48 89 ef             	mov    %rbp,%rdi
    43fa:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
    43ff:	e8 20 f6 ff ff       	callq  3a24 <_copy>
	add_round_key(state, s->words);
    4404:	4c 89 e6             	mov    %r12,%rsi
    4407:	48 89 ef             	mov    %rbp,%rdi
    440a:	49 81 c4 a0 00 00 00 	add    $0xa0,%r12
    4411:	e8 b7 fc ff ff       	callq  40cd <add_round_key>
		s[i] = sbox[s[i]];
    4416:	4c 8d 05 23 4d 00 00 	lea    0x4d23(%rip),%r8        # 9140 <sbox>
	for (i = 0; i < (Nb * Nk); ++i) {
    441d:	48 89 eb             	mov    %rbp,%rbx
    4420:	4c 8d 7c 24 18       	lea    0x18(%rsp),%r15
{
    4425:	48 89 e8             	mov    %rbp,%rax
		s[i] = sbox[s[i]];
    4428:	0f b6 10             	movzbl (%rax),%edx
    442b:	48 ff c0             	inc    %rax
    442e:	41 8a 14 10          	mov    (%r8,%rdx,1),%dl
    4432:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb * Nk); ++i) {
    4435:	4c 39 f8             	cmp    %r15,%rax
    4438:	75 ee                	jne    4428 <tc_aes_encrypt+0x88>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    443a:	48 89 ef             	mov    %rbp,%rdi
    443d:	e8 f0 fc ff ff       	callq  4132 <shift_rows>
	mult_row_column(t, s);
    4442:	48 89 ee             	mov    %rbp,%rsi
    4445:	4c 89 ff             	mov    %r15,%rdi
    4448:	e8 96 fd ff ff       	callq  41e3 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    444d:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    4452:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
    4457:	e8 87 fd ff ff       	callq  41e3 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    445c:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    4461:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    4466:	e8 78 fd ff ff       	callq  41e3 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    446b:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
    4470:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
    4475:	e8 69 fd ff ff       	callq  41e3 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    447a:	b9 10 00 00 00       	mov    $0x10,%ecx
    447f:	4c 89 fa             	mov    %r15,%rdx
    4482:	48 89 ef             	mov    %rbp,%rdi
    4485:	be 10 00 00 00       	mov    $0x10,%esi
    448a:	e8 95 f5 ff ff       	callq  3a24 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    448f:	4c 89 f6             	mov    %r14,%rsi
    4492:	48 89 ef             	mov    %rbp,%rdi
    4495:	49 83 c6 10          	add    $0x10,%r14
    4499:	e8 2f fc ff ff       	callq  40cd <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    449e:	4d 39 e6             	cmp    %r12,%r14
    44a1:	4c 8d 05 98 4c 00 00 	lea    0x4c98(%rip),%r8        # 9140 <sbox>
    44a8:	0f 85 6f ff ff ff    	jne    441d <tc_aes_encrypt+0x7d>
		s[i] = sbox[s[i]];
    44ae:	0f b6 03             	movzbl (%rbx),%eax
    44b1:	48 ff c3             	inc    %rbx
    44b4:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    44b8:	88 43 ff             	mov    %al,-0x1(%rbx)
	for (i = 0; i < (Nb * Nk); ++i) {
    44bb:	4c 39 fb             	cmp    %r15,%rbx
    44be:	75 ee                	jne    44ae <tc_aes_encrypt+0x10e>
	}

	sub_bytes(state);
	shift_rows(state);
    44c0:	48 89 ef             	mov    %rbp,%rdi
    44c3:	e8 6a fc ff ff       	callq  4132 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    44c8:	4c 89 e6             	mov    %r12,%rsi
    44cb:	48 89 ef             	mov    %rbp,%rdi
    44ce:	e8 fa fb ff ff       	callq  40cd <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    44d3:	b9 10 00 00 00       	mov    $0x10,%ecx
    44d8:	48 89 ea             	mov    %rbp,%rdx
    44db:	4c 89 ef             	mov    %r13,%rdi
    44de:	be 10 00 00 00       	mov    $0x10,%esi
    44e3:	e8 3c f5 ff ff       	callq  3a24 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    44e8:	ba 10 00 00 00       	mov    $0x10,%edx
    44ed:	31 f6                	xor    %esi,%esi
    44ef:	48 89 ef             	mov    %rbp,%rdi
    44f2:	e8 46 f5 ff ff       	callq  3a3d <_set>

	return TC_CRYPTO_SUCCESS;
    44f7:	b8 01 00 00 00       	mov    $0x1,%eax
    44fc:	eb 02                	jmp    4500 <tc_aes_encrypt+0x160>
		return TC_CRYPTO_FAIL;
    44fe:	31 c0                	xor    %eax,%eax
}
    4500:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    4505:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    450c:	00 00 
    450e:	74 05                	je     4515 <tc_aes_encrypt+0x175>
    4510:	e8 9b df ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4515:	48 83 c4 38          	add    $0x38,%rsp
    4519:	5b                   	pop    %rbx
    451a:	5d                   	pop    %rbp
    451b:	41 5c                	pop    %r12
    451d:	41 5d                	pop    %r13
    451f:	41 5e                	pop    %r14
    4521:	41 5f                	pop    %r15
    4523:	c3                   	retq   

0000000000004524 <tc_cbc_mode_encrypt>:
#include <tinycrypt/utils.h>

int tc_cbc_mode_encrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    4524:	f3 0f 1e fa          	endbr64 
    4528:	41 57                	push   %r15
    452a:	41 56                	push   %r14
    452c:	41 55                	push   %r13
    452e:	41 54                	push   %r12
    4530:	55                   	push   %rbp
    4531:	53                   	push   %rbx
    4532:	48 83 ec 28          	sub    $0x28,%rsp
    4536:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    453d:	00 00 
    453f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    4544:	31 c0                	xor    %eax,%eax

	uint8_t buffer[TC_AES_BLOCK_SIZE];
	unsigned int n, m;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    4546:	48 85 ff             	test   %rdi,%rdi
    4549:	0f 84 d8 00 00 00    	je     4627 <tc_cbc_mode_encrypt+0x103>
    454f:	49 89 d6             	mov    %rdx,%r14
    4552:	48 85 d2             	test   %rdx,%rdx
    4555:	0f 84 cc 00 00 00    	je     4627 <tc_cbc_mode_encrypt+0x103>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    455b:	4d 85 c9             	test   %r9,%r9
    455e:	89 cb                	mov    %ecx,%ebx
    4560:	4d 89 cc             	mov    %r9,%r12
    4563:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    4566:	85 db                	test   %ebx,%ebx
    4568:	0f 94 c0             	sete   %al
    456b:	08 c2                	or     %al,%dl
    456d:	0f 85 b4 00 00 00    	jne    4627 <tc_cbc_mode_encrypt+0x103>
    4573:	85 f6                	test   %esi,%esi
    4575:	0f 84 ac 00 00 00    	je     4627 <tc_cbc_mode_encrypt+0x103>
    457b:	89 da                	mov    %ebx,%edx
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
		return TC_CRYPTO_FAIL;
    457d:	31 c0                	xor    %eax,%eax
    457f:	09 f2                	or     %esi,%edx
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    4581:	83 e2 0f             	and    $0xf,%edx
    4584:	0f 85 9f 00 00 00    	jne    4629 <tc_cbc_mode_encrypt+0x105>
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
    458a:	8d 4b 10             	lea    0x10(%rbx),%ecx
		return TC_CRYPTO_FAIL;
    458d:	89 d0                	mov    %edx,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    458f:	39 f1                	cmp    %esi,%ecx
    4591:	0f 85 92 00 00 00    	jne    4629 <tc_cbc_mode_encrypt+0x105>
	}

	/* copy iv to the buffer */
	(void)_copy(buffer, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    4597:	4c 8d 6c 24 08       	lea    0x8(%rsp),%r13
    459c:	48 89 fd             	mov    %rdi,%rbp
    459f:	4d 89 c7             	mov    %r8,%r15
    45a2:	4c 89 c2             	mov    %r8,%rdx
    45a5:	b9 10 00 00 00       	mov    $0x10,%ecx
    45aa:	be 10 00 00 00       	mov    $0x10,%esi
    45af:	4c 89 ef             	mov    %r13,%rdi
    45b2:	4c 01 f3             	add    %r14,%rbx
    45b5:	e8 6a f4 ff ff       	callq  3a24 <_copy>
	/* copy iv to the output buffer */
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    45ba:	48 89 ef             	mov    %rbp,%rdi
    45bd:	b9 10 00 00 00       	mov    $0x10,%ecx
    45c2:	4c 89 fa             	mov    %r15,%rdx
    45c5:	be 10 00 00 00       	mov    $0x10,%esi
	out += TC_AES_BLOCK_SIZE;
    45ca:	48 83 c5 10          	add    $0x10,%rbp
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    45ce:	e8 51 f4 ff ff       	callq  3a24 <_copy>

	for (n = m = 0; n < inlen; ++n) {
    45d3:	31 c0                	xor    %eax,%eax
    45d5:	4c 39 f3             	cmp    %r14,%rbx
    45d8:	74 46                	je     4620 <tc_cbc_mode_encrypt+0xfc>
		buffer[m++] ^= *in++;
    45da:	89 c6                	mov    %eax,%esi
    45dc:	49 ff c6             	inc    %r14
    45df:	8d 48 01             	lea    0x1(%rax),%ecx
    45e2:	8a 54 34 08          	mov    0x8(%rsp,%rsi,1),%dl
    45e6:	41 32 56 ff          	xor    -0x1(%r14),%dl
    45ea:	88 54 34 08          	mov    %dl,0x8(%rsp,%rsi,1)
		if (m == TC_AES_BLOCK_SIZE) {
    45ee:	83 f8 0f             	cmp    $0xf,%eax
    45f1:	75 29                	jne    461c <tc_cbc_mode_encrypt+0xf8>
			(void)tc_aes_encrypt(buffer, buffer, sched);
    45f3:	4c 89 e2             	mov    %r12,%rdx
    45f6:	4c 89 ee             	mov    %r13,%rsi
    45f9:	4c 89 ef             	mov    %r13,%rdi
    45fc:	e8 9f fd ff ff       	callq  43a0 <tc_aes_encrypt>
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    4601:	b9 10 00 00 00       	mov    $0x10,%ecx
    4606:	48 89 ef             	mov    %rbp,%rdi
    4609:	4c 89 ea             	mov    %r13,%rdx
    460c:	be 10 00 00 00       	mov    $0x10,%esi
				    buffer, TC_AES_BLOCK_SIZE);
			out += TC_AES_BLOCK_SIZE;
    4611:	48 83 c5 10          	add    $0x10,%rbp
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    4615:	e8 0a f4 ff ff       	callq  3a24 <_copy>
			m = 0;
    461a:	31 c9                	xor    %ecx,%ecx
	for (n = m = 0; n < inlen; ++n) {
    461c:	89 c8                	mov    %ecx,%eax
    461e:	eb b5                	jmp    45d5 <tc_cbc_mode_encrypt+0xb1>
		}
	}

	return TC_CRYPTO_SUCCESS;
    4620:	b8 01 00 00 00       	mov    $0x1,%eax
    4625:	eb 02                	jmp    4629 <tc_cbc_mode_encrypt+0x105>
		return TC_CRYPTO_FAIL;
    4627:	31 c0                	xor    %eax,%eax
}
    4629:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    462e:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4635:	00 00 
    4637:	74 05                	je     463e <tc_cbc_mode_encrypt+0x11a>
    4639:	e8 72 de ff ff       	callq  24b0 <__stack_chk_fail@plt>
    463e:	48 83 c4 28          	add    $0x28,%rsp
    4642:	5b                   	pop    %rbx
    4643:	5d                   	pop    %rbp
    4644:	41 5c                	pop    %r12
    4646:	41 5d                	pop    %r13
    4648:	41 5e                	pop    %r14
    464a:	41 5f                	pop    %r15
    464c:	c3                   	retq   

000000000000464d <tc_cbc_mode_decrypt>:

int tc_cbc_mode_decrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    464d:	f3 0f 1e fa          	endbr64 
    4651:	41 57                	push   %r15
    4653:	41 56                	push   %r14
    4655:	41 55                	push   %r13
    4657:	41 54                	push   %r12
    4659:	55                   	push   %rbp
    465a:	53                   	push   %rbx
    465b:	48 83 ec 38          	sub    $0x38,%rsp
    465f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4666:	00 00 
    4668:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    466d:	31 c0                	xor    %eax,%eax
	uint8_t buffer[TC_AES_BLOCK_SIZE];
	const uint8_t *p;
	unsigned int n, m;

	/* sanity check the inputs */
	if (out == (uint8_t *) 0 ||
    466f:	48 85 ff             	test   %rdi,%rdi
    4672:	74 7d                	je     46f1 <tc_cbc_mode_decrypt+0xa4>
    4674:	49 89 d4             	mov    %rdx,%r12
    4677:	48 85 d2             	test   %rdx,%rdx
    467a:	74 75                	je     46f1 <tc_cbc_mode_decrypt+0xa4>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    467c:	4d 85 c9             	test   %r9,%r9
    467f:	4d 89 ce             	mov    %r9,%r14
    4682:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    4685:	85 c9                	test   %ecx,%ecx
    4687:	0f 94 c0             	sete   %al
    468a:	08 c2                	or     %al,%dl
    468c:	75 63                	jne    46f1 <tc_cbc_mode_decrypt+0xa4>
    468e:	85 f6                	test   %esi,%esi
    4690:	74 5f                	je     46f1 <tc_cbc_mode_decrypt+0xa4>
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    4692:	89 c8                	mov    %ecx,%eax
    4694:	09 f0                	or     %esi,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    4696:	a8 0f                	test   $0xf,%al
    4698:	75 57                	jne    46f1 <tc_cbc_mode_decrypt+0xa4>
    469a:	39 f1                	cmp    %esi,%ecx
    469c:	75 53                	jne    46f1 <tc_cbc_mode_decrypt+0xa4>
    469e:	89 f0                	mov    %esi,%eax
    46a0:	49 89 fd             	mov    %rdi,%r13
    46a3:	4d 89 c7             	mov    %r8,%r15
    46a6:	31 db                	xor    %ebx,%ebx
    46a8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	 * that would not otherwise be possible.
	 */
	p = iv;
	for (n = m = 0; n < outlen; ++n) {
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
			(void)tc_aes_decrypt(buffer, in, sched);
    46ad:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
	for (n = m = 0; n < outlen; ++n) {
    46b2:	31 c0                	xor    %eax,%eax
    46b4:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    46b9:	74 2f                	je     46ea <tc_cbc_mode_decrypt+0x9d>
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
    46bb:	f6 c3 0f             	test   $0xf,%bl
    46be:	75 14                	jne    46d4 <tc_cbc_mode_decrypt+0x87>
			(void)tc_aes_decrypt(buffer, in, sched);
    46c0:	4c 89 e6             	mov    %r12,%rsi
    46c3:	4c 89 f2             	mov    %r14,%rdx
    46c6:	48 89 ef             	mov    %rbp,%rdi
			in += TC_AES_BLOCK_SIZE;
    46c9:	49 83 c4 10          	add    $0x10,%r12
			(void)tc_aes_decrypt(buffer, in, sched);
    46cd:	e8 76 f8 ff ff       	callq  3f48 <tc_aes_decrypt>
			m = 0;
    46d2:	31 c0                	xor    %eax,%eax
		}
		*out++ = buffer[m++] ^ *p++;
    46d4:	89 c2                	mov    %eax,%edx
    46d6:	ff c0                	inc    %eax
    46d8:	8a 54 14 18          	mov    0x18(%rsp,%rdx,1),%dl
    46dc:	41 32 14 1f          	xor    (%r15,%rbx,1),%dl
    46e0:	41 88 54 1d 00       	mov    %dl,0x0(%r13,%rbx,1)
	for (n = m = 0; n < outlen; ++n) {
    46e5:	48 ff c3             	inc    %rbx
    46e8:	eb ca                	jmp    46b4 <tc_cbc_mode_decrypt+0x67>
	}

	return TC_CRYPTO_SUCCESS;
    46ea:	b8 01 00 00 00       	mov    $0x1,%eax
    46ef:	eb 02                	jmp    46f3 <tc_cbc_mode_decrypt+0xa6>
		return TC_CRYPTO_FAIL;
    46f1:	31 c0                	xor    %eax,%eax
}
    46f3:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    46f8:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    46ff:	00 00 
    4701:	74 05                	je     4708 <tc_cbc_mode_decrypt+0xbb>
    4703:	e8 a8 dd ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4708:	48 83 c4 38          	add    $0x38,%rsp
    470c:	5b                   	pop    %rbx
    470d:	5d                   	pop    %rbp
    470e:	41 5c                	pop    %r12
    4710:	41 5d                	pop    %r13
    4712:	41 5e                	pop    %r14
    4714:	41 5f                	pop    %r15
    4716:	c3                   	retq   

0000000000004717 <tc_ctr_mode>:
#include <tinycrypt/ctr_mode.h>
#include <tinycrypt/utils.h>

int tc_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
		unsigned int inlen, uint8_t *ctr, const TCAesKeySched_t sched)
{
    4717:	f3 0f 1e fa          	endbr64 
    471b:	41 57                	push   %r15
    471d:	41 56                	push   %r14
    471f:	41 55                	push   %r13
    4721:	41 54                	push   %r12
    4723:	55                   	push   %rbp
    4724:	53                   	push   %rbx
    4725:	48 83 ec 58          	sub    $0x58,%rsp
    4729:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4730:	00 00 
    4732:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    4737:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	unsigned int block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    4739:	48 85 ff             	test   %rdi,%rdi
    473c:	74 08                	je     4746 <tc_ctr_mode+0x2f>
    473e:	49 89 d4             	mov    %rdx,%r12
    4741:	48 85 d2             	test   %rdx,%rdx
    4744:	75 07                	jne    474d <tc_ctr_mode+0x36>
	    ctr == (uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
	    outlen == 0 ||
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
    4746:	31 c0                	xor    %eax,%eax
    4748:	e9 cb 00 00 00       	jmpq   4818 <tc_ctr_mode+0x101>
	    ctr == (uint8_t *) 0 ||
    474d:	4d 85 c0             	test   %r8,%r8
    4750:	74 f4                	je     4746 <tc_ctr_mode+0x2f>
    4752:	4d 89 cd             	mov    %r9,%r13
    4755:	4d 85 c9             	test   %r9,%r9
    4758:	74 ec                	je     4746 <tc_ctr_mode+0x2f>
	    inlen == 0 ||
    475a:	85 c9                	test   %ecx,%ecx
    475c:	89 cb                	mov    %ecx,%ebx
    475e:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    4761:	85 f6                	test   %esi,%esi
    4763:	0f 94 c0             	sete   %al
    4766:	08 c2                	or     %al,%dl
    4768:	75 dc                	jne    4746 <tc_ctr_mode+0x2f>
    476a:	39 f1                	cmp    %esi,%ecx
    476c:	75 d8                	jne    4746 <tc_ctr_mode+0x2f>
	}

	/* copy the ctr to the nonce */
	(void)_copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    476e:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4773:	4c 89 c2             	mov    %r8,%rdx
    4776:	48 89 fd             	mov    %rdi,%rbp
    4779:	b9 10 00 00 00       	mov    $0x10,%ecx
    477e:	4c 89 ff             	mov    %r15,%rdi
    4781:	be 10 00 00 00       	mov    $0x10,%esi
    4786:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    478b:	e8 94 f2 ff ff       	callq  3a24 <_copy>

	/* select the last 4 bytes of the nonce to be incremented */
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
    4790:	89 d8                	mov    %ebx,%eax
    4792:	44 8b 4c 24 44       	mov    0x44(%rsp),%r9d
		    (nonce[14] << 8) | (nonce[15]);
	for (i = 0; i < inlen; ++i) {
    4797:	31 db                	xor    %ebx,%ebx
    4799:	48 89 04 24          	mov    %rax,(%rsp)
    479d:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			/* encrypt data using the current nonce */
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    47a2:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    47a7:	41 0f c9             	bswap  %r9d
	for (i = 0; i < inlen; ++i) {
    47aa:	48 3b 1c 24          	cmp    (%rsp),%rbx
    47ae:	74 5b                	je     480b <tc_ctr_mode+0xf4>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    47b0:	41 89 de             	mov    %ebx,%r14d
    47b3:	41 83 e6 0f          	and    $0xf,%r14d
    47b7:	75 3d                	jne    47f6 <tc_ctr_mode+0xdf>
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    47b9:	4c 89 ea             	mov    %r13,%rdx
    47bc:	4c 89 fe             	mov    %r15,%rsi
    47bf:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    47c4:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    47c9:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    47ce:	e8 cd fb ff ff       	callq  43a0 <tc_aes_encrypt>
    47d3:	85 c0                	test   %eax,%eax
    47d5:	0f 84 6b ff ff ff    	je     4746 <tc_ctr_mode+0x2f>
				block_num++;
    47db:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
				nonce[12] = (uint8_t)(block_num >> 24);
    47e0:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    47e5:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
				block_num++;
    47ea:	41 ff c1             	inc    %r9d
				nonce[13] = (uint8_t)(block_num >> 16);
				nonce[14] = (uint8_t)(block_num >> 8);
				nonce[15] = (uint8_t)(block_num);
    47ed:	44 89 c8             	mov    %r9d,%eax
    47f0:	0f c8                	bswap  %eax
				nonce[12] = (uint8_t)(block_num >> 24);
    47f2:	89 44 24 44          	mov    %eax,0x44(%rsp)
			} else {
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i%(TC_AES_BLOCK_SIZE)] ^ *in++;
    47f6:	45 89 f6             	mov    %r14d,%r14d
    47f9:	42 8a 44 34 28       	mov    0x28(%rsp,%r14,1),%al
    47fe:	41 32 04 1c          	xor    (%r12,%rbx,1),%al
    4802:	88 44 1d 00          	mov    %al,0x0(%rbp,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    4806:	48 ff c3             	inc    %rbx
    4809:	eb 9f                	jmp    47aa <tc_ctr_mode+0x93>
	}

	/* update the counter */
	ctr[12] = nonce[12]; ctr[13] = nonce[13];
    480b:	8b 44 24 44          	mov    0x44(%rsp),%eax
    480f:	41 89 40 0c          	mov    %eax,0xc(%r8)
	ctr[14] = nonce[14]; ctr[15] = nonce[15];

	return TC_CRYPTO_SUCCESS;
    4813:	b8 01 00 00 00       	mov    $0x1,%eax
}
    4818:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    481d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4824:	00 00 
    4826:	74 05                	je     482d <tc_ctr_mode+0x116>
    4828:	e8 83 dc ff ff       	callq  24b0 <__stack_chk_fail@plt>
    482d:	48 83 c4 58          	add    $0x58,%rsp
    4831:	5b                   	pop    %rbx
    4832:	5d                   	pop    %rbp
    4833:	41 5c                	pop    %r12
    4835:	41 5d                	pop    %r13
    4837:	41 5e                	pop    %r14
    4839:	41 5f                	pop    %r15
    483b:	c3                   	retq   

000000000000483c <ccm_cbc_mac>:
/**
 * Variation of CBC-MAC mode used in CCM.
 */
static void ccm_cbc_mac(uint8_t *T, const uint8_t *data, unsigned int dlen,
			unsigned int flag, TCAesKeySched_t sched)
{
    483c:	41 56                	push   %r14
    483e:	41 55                	push   %r13
    4840:	4d 89 c5             	mov    %r8,%r13
    4843:	41 54                	push   %r12
    4845:	49 89 f4             	mov    %rsi,%r12
    4848:	55                   	push   %rbp
    4849:	89 d5                	mov    %edx,%ebp
    484b:	53                   	push   %rbx
    484c:	48 89 fb             	mov    %rdi,%rbx

	unsigned int i;

	if (flag > 0) {
    484f:	85 c9                	test   %ecx,%ecx
    4851:	74 34                	je     4887 <ccm_cbc_mac+0x4b>
		T[0] ^= (uint8_t)(dlen >> 8);
    4853:	89 d0                	mov    %edx,%eax
		T[1] ^= (uint8_t)(dlen);
    4855:	30 57 01             	xor    %dl,0x1(%rdi)
		dlen += 2; i = 2;
    4858:	83 c5 02             	add    $0x2,%ebp
    485b:	b9 02 00 00 00       	mov    $0x2,%ecx
		T[0] ^= (uint8_t)(dlen >> 8);
    4860:	c1 e8 08             	shr    $0x8,%eax
    4863:	30 07                	xor    %al,(%rdi)
		dlen += 2; i = 2;
    4865:	eb 20                	jmp    4887 <ccm_cbc_mac+0x4b>
	} else {
		i = 0;
	}

	while (i < dlen) {
		T[i++ % (Nb * Nk)] ^= *data++;
    4867:	44 8d 71 01          	lea    0x1(%rcx),%r14d
    486b:	83 e1 0f             	and    $0xf,%ecx
    486e:	49 ff c4             	inc    %r12
    4871:	41 8a 44 24 ff       	mov    -0x1(%r12),%al
    4876:	30 04 0b             	xor    %al,(%rbx,%rcx,1)
		if (((i % (Nb * Nk)) == 0) || dlen == i) {
    4879:	41 f6 c6 0f          	test   $0xf,%r14b
    487d:	74 0e                	je     488d <ccm_cbc_mac+0x51>
    487f:	41 39 ee             	cmp    %ebp,%r14d
    4882:	74 09                	je     488d <ccm_cbc_mac+0x51>
		T[i++ % (Nb * Nk)] ^= *data++;
    4884:	44 89 f1             	mov    %r14d,%ecx
	while (i < dlen) {
    4887:	39 e9                	cmp    %ebp,%ecx
    4889:	72 dc                	jb     4867 <ccm_cbc_mac+0x2b>
    488b:	eb 10                	jmp    489d <ccm_cbc_mac+0x61>
			(void) tc_aes_encrypt(T, T, sched);
    488d:	4c 89 ea             	mov    %r13,%rdx
    4890:	48 89 de             	mov    %rbx,%rsi
    4893:	48 89 df             	mov    %rbx,%rdi
    4896:	e8 05 fb ff ff       	callq  43a0 <tc_aes_encrypt>
    489b:	eb e7                	jmp    4884 <ccm_cbc_mac+0x48>
		}
	}
}
    489d:	5b                   	pop    %rbx
    489e:	5d                   	pop    %rbp
    489f:	41 5c                	pop    %r12
    48a1:	41 5d                	pop    %r13
    48a3:	41 5e                	pop    %r14
    48a5:	c3                   	retq   

00000000000048a6 <ccm_ctr_mode.constprop.0>:
 * The CTR mode used by CCM is slightly different than the conventional CTR
 * mode (the counter is increased before encryption, instead of after
 * encryption). Besides, it is assumed that the counter is stored in the last
 * 2 bytes of the nonce.
 */
static int ccm_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
    48a6:	41 57                	push   %r15
    48a8:	41 56                	push   %r14
    48aa:	41 55                	push   %r13
    48ac:	41 54                	push   %r12
    48ae:	55                   	push   %rbp
    48af:	53                   	push   %rbx
    48b0:	48 83 ec 58          	sub    $0x58,%rsp
    48b4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    48bb:	00 00 
    48bd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    48c2:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	uint16_t block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    48c4:	48 85 ff             	test   %rdi,%rdi
    48c7:	0f 84 dc 00 00 00    	je     49a9 <ccm_ctr_mode.constprop.0+0x103>
    48cd:	49 89 d5             	mov    %rdx,%r13
    48d0:	48 85 d2             	test   %rdx,%rdx
    48d3:	0f 84 d0 00 00 00    	je     49a9 <ccm_ctr_mode.constprop.0+0x103>
    48d9:	4d 89 ce             	mov    %r9,%r14
	    in == (uint8_t *) 0 ||
	    ctr == (uint8_t *) 0 ||
    48dc:	4d 85 c9             	test   %r9,%r9
    48df:	0f 84 c6 00 00 00    	je     49ab <ccm_ctr_mode.constprop.0+0x105>
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
    48e5:	85 c9                	test   %ecx,%ecx
    48e7:	89 cb                	mov    %ecx,%ebx
    48e9:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    48ec:	85 f6                	test   %esi,%esi
    48ee:	0f 94 c0             	sete   %al
    48f1:	08 c2                	or     %al,%dl
    48f3:	0f 85 b0 00 00 00    	jne    49a9 <ccm_ctr_mode.constprop.0+0x103>
    48f9:	39 f1                	cmp    %esi,%ecx
    48fb:	0f 85 a8 00 00 00    	jne    49a9 <ccm_ctr_mode.constprop.0+0x103>
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
	}

	/* copy the counter to the nonce */
	(void) _copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    4901:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4906:	4c 89 c2             	mov    %r8,%rdx
    4909:	49 89 fc             	mov    %rdi,%r12
    490c:	b9 10 00 00 00       	mov    $0x10,%ecx
    4911:	4c 89 ff             	mov    %r15,%rdi
    4914:	be 10 00 00 00       	mov    $0x10,%esi
    4919:	4c 89 c5             	mov    %r8,%rbp
    491c:	e8 03 f1 ff ff       	callq  3a24 <_copy>

	/* select the last 2 bytes of the nonce to be incremented */
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4921:	44 0f b6 44 24 46    	movzbl 0x46(%rsp),%r8d
    4927:	0f b6 44 24 47       	movzbl 0x47(%rsp),%eax
	for (i = 0; i < inlen; ++i) {
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			block_num++;
			nonce[14] = (uint8_t)(block_num >> 8);
			nonce[15] = (uint8_t)(block_num);
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    492c:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4931:	41 c1 e0 08          	shl    $0x8,%r8d
    4935:	41 09 c0             	or     %eax,%r8d
	for (i = 0; i < inlen; ++i) {
    4938:	89 d8                	mov    %ebx,%eax
    493a:	31 db                	xor    %ebx,%ebx
    493c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4941:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    4946:	74 51                	je     4999 <ccm_ctr_mode.constprop.0+0xf3>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    4948:	89 d8                	mov    %ebx,%eax
    494a:	83 e0 0f             	and    $0xf,%eax
    494d:	89 44 24 18          	mov    %eax,0x18(%rsp)
    4951:	75 30                	jne    4983 <ccm_ctr_mode.constprop.0+0xdd>
			block_num++;
    4953:	41 ff c0             	inc    %r8d
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4956:	4c 89 f2             	mov    %r14,%rdx
    4959:	4c 89 fe             	mov    %r15,%rsi
    495c:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
			nonce[14] = (uint8_t)(block_num >> 8);
    4961:	44 89 c0             	mov    %r8d,%eax
    4964:	44 89 44 24 1c       	mov    %r8d,0x1c(%rsp)
    4969:	86 e0                	xchg   %ah,%al
    496b:	66 89 44 24 46       	mov    %ax,0x46(%rsp)
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4970:	e8 2b fa ff ff       	callq  43a0 <tc_aes_encrypt>
    4975:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    497a:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    497f:	85 c0                	test   %eax,%eax
    4981:	74 28                	je     49ab <ccm_ctr_mode.constprop.0+0x105>
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i % (TC_AES_BLOCK_SIZE)] ^ *in++;
    4983:	8b 44 24 18          	mov    0x18(%rsp),%eax
    4987:	8a 44 04 28          	mov    0x28(%rsp,%rax,1),%al
    498b:	41 32 44 1d 00       	xor    0x0(%r13,%rbx,1),%al
    4990:	41 88 04 1c          	mov    %al,(%r12,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    4994:	48 ff c3             	inc    %rbx
    4997:	eb a8                	jmp    4941 <ccm_ctr_mode.constprop.0+0x9b>
	}

	/* update the counter */
	ctr[14] = nonce[14]; ctr[15] = nonce[15];
    4999:	66 8b 44 24 46       	mov    0x46(%rsp),%ax
    499e:	66 89 45 0e          	mov    %ax,0xe(%rbp)

	return TC_CRYPTO_SUCCESS;
    49a2:	b8 01 00 00 00       	mov    $0x1,%eax
    49a7:	eb 02                	jmp    49ab <ccm_ctr_mode.constprop.0+0x105>
		return TC_CRYPTO_FAIL;
    49a9:	31 c0                	xor    %eax,%eax
}
    49ab:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    49b0:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    49b7:	00 00 
    49b9:	74 05                	je     49c0 <ccm_ctr_mode.constprop.0+0x11a>
    49bb:	e8 f0 da ff ff       	callq  24b0 <__stack_chk_fail@plt>
    49c0:	48 83 c4 58          	add    $0x58,%rsp
    49c4:	5b                   	pop    %rbx
    49c5:	5d                   	pop    %rbp
    49c6:	41 5c                	pop    %r12
    49c8:	41 5d                	pop    %r13
    49ca:	41 5e                	pop    %r14
    49cc:	41 5f                	pop    %r15
    49ce:	c3                   	retq   

00000000000049cf <tc_ccm_config>:
{
    49cf:	f3 0f 1e fa          	endbr64 
	if (c == (TCCcmMode_t) 0 ||
    49d3:	48 85 ff             	test   %rdi,%rdi
    49d6:	0f 94 c0             	sete   %al
	    sched == (TCAesKeySched_t) 0 ||
    49d9:	48 85 f6             	test   %rsi,%rsi
    49dc:	41 0f 94 c1          	sete   %r9b
	if (c == (TCCcmMode_t) 0 ||
    49e0:	44 09 c8             	or     %r9d,%eax
	    sched == (TCAesKeySched_t) 0 ||
    49e3:	48 85 d2             	test   %rdx,%rdx
    49e6:	41 0f 94 c1          	sete   %r9b
	} else if (nlen != 13) {
    49ea:	44 08 c8             	or     %r9b,%al
    49ed:	75 27                	jne    4a16 <tc_ccm_config+0x47>
    49ef:	83 f9 0d             	cmp    $0xd,%ecx
    49f2:	75 22                	jne    4a16 <tc_ccm_config+0x47>
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    49f4:	41 8d 48 fc          	lea    -0x4(%r8),%ecx
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    49f8:	31 c0                	xor    %eax,%eax
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    49fa:	83 f9 0c             	cmp    $0xc,%ecx
    49fd:	77 19                	ja     4a18 <tc_ccm_config+0x49>
    49ff:	41 f6 c0 01          	test   $0x1,%r8b
    4a03:	75 13                	jne    4a18 <tc_ccm_config+0x49>
	c->mlen = mlen;
    4a05:	44 89 47 10          	mov    %r8d,0x10(%rdi)
	return TC_CRYPTO_SUCCESS;
    4a09:	b8 01 00 00 00       	mov    $0x1,%eax
	c->sched = sched;
    4a0e:	48 89 37             	mov    %rsi,(%rdi)
	c->nonce = nonce;
    4a11:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	return TC_CRYPTO_SUCCESS;
    4a15:	c3                   	retq   
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    4a16:	31 c0                	xor    %eax,%eax
}
    4a18:	c3                   	retq   

0000000000004a19 <tc_ccm_generation_encryption>:

int tc_ccm_generation_encryption(uint8_t *out, unsigned int olen,
				 const uint8_t *associated_data,
				 unsigned int alen, const uint8_t *payload,
				 unsigned int plen, TCCcmMode_t c)
{
    4a19:	f3 0f 1e fa          	endbr64 
    4a1d:	41 57                	push   %r15
    4a1f:	41 56                	push   %r14
    4a21:	41 55                	push   %r13
    4a23:	41 54                	push   %r12
    4a25:	55                   	push   %rbp
    4a26:	53                   	push   %rbx
    4a27:	48 83 ec 48          	sub    $0x48,%rsp
    4a2b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4a32:	00 00 
    4a34:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4a39:	31 c0                	xor    %eax,%eax
    4a3b:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4a42:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4a43:	48 85 ff             	test   %rdi,%rdi
    4a46:	0f 84 59 01 00 00    	je     4ba5 <tc_ccm_generation_encryption+0x18c>
    4a4c:	48 85 ed             	test   %rbp,%rbp
    4a4f:	0f 84 50 01 00 00    	je     4ba5 <tc_ccm_generation_encryption+0x18c>
    4a55:	44 89 cb             	mov    %r9d,%ebx
    4a58:	49 89 fc             	mov    %rdi,%r12
    4a5b:	49 89 d3             	mov    %rdx,%r11
    4a5e:	41 89 ca             	mov    %ecx,%r10d
    4a61:	4d 89 c6             	mov    %r8,%r14
		(c == (TCCcmMode_t) 0) ||
    4a64:	85 db                	test   %ebx,%ebx
    4a66:	74 0c                	je     4a74 <tc_ccm_generation_encryption+0x5b>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
		((alen > 0) && (associated_data == (uint8_t *) 0)) ||
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4a68:	45 31 c0             	xor    %r8d,%r8d
		(c == (TCCcmMode_t) 0) ||
    4a6b:	4d 85 f6             	test   %r14,%r14
    4a6e:	0f 84 34 01 00 00    	je     4ba8 <tc_ccm_generation_encryption+0x18f>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4a74:	45 85 d2             	test   %r10d,%r10d
    4a77:	74 0c                	je     4a85 <tc_ccm_generation_encryption+0x6c>
		return TC_CRYPTO_FAIL;
    4a79:	45 31 c0             	xor    %r8d,%r8d
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4a7c:	4d 85 db             	test   %r11,%r11
    4a7f:	0f 84 23 01 00 00    	je     4ba8 <tc_ccm_generation_encryption+0x18f>
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    4a85:	41 81 fa ff fe 00 00 	cmp    $0xfeff,%r10d
    4a8c:	0f 87 13 01 00 00    	ja     4ba5 <tc_ccm_generation_encryption+0x18c>
    4a92:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    4a98:	0f 87 07 01 00 00    	ja     4ba5 <tc_ccm_generation_encryption+0x18c>
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4a9e:	8b 45 10             	mov    0x10(%rbp),%eax
		return TC_CRYPTO_FAIL;
    4aa1:	45 31 c0             	xor    %r8d,%r8d
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4aa4:	8d 14 18             	lea    (%rax,%rbx,1),%edx
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    4aa7:	39 f2                	cmp    %esi,%edx
    4aa9:	0f 87 f9 00 00 00    	ja     4ba8 <tc_ccm_generation_encryption+0x18f>
	unsigned int i;

	/* GENERATING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4aaf:	45 85 d2             	test   %r10d,%r10d
	for (i = 1; i <= 13; ++i) {
		b[i] = c->nonce[i - 1];
    4ab2:	48 8b 75 08          	mov    0x8(%rbp),%rsi
    4ab6:	4c 8d 6c 24 18       	lea    0x18(%rsp),%r13
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4abb:	0f 95 c2             	setne  %dl
    4abe:	83 e8 02             	sub    $0x2,%eax
    4ac1:	d1 e8                	shr    %eax
    4ac3:	c1 e2 06             	shl    $0x6,%edx
    4ac6:	c1 e0 03             	shl    $0x3,%eax
    4ac9:	09 d0                	or     %edx,%eax
		b[i] = c->nonce[i - 1];
    4acb:	48 8d 54 24 19       	lea    0x19(%rsp),%rdx
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4ad0:	83 c8 01             	or     $0x1,%eax
    4ad3:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    4ad7:	31 c0                	xor    %eax,%eax
    4ad9:	8a 0c 06             	mov    (%rsi,%rax,1),%cl
    4adc:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
	for (i = 1; i <= 13; ++i) {
    4adf:	48 ff c0             	inc    %rax
    4ae2:	48 83 f8 0d          	cmp    $0xd,%rax
    4ae6:	75 f1                	jne    4ad9 <tc_ccm_generation_encryption+0xc0>
	}
	b[14] = (uint8_t)(plen >> 8);
    4ae8:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(tag, b, c->sched);
    4aea:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4aee:	4c 8d 7c 24 28       	lea    0x28(%rsp),%r15
    4af3:	4c 89 ee             	mov    %r13,%rsi
	b[14] = (uint8_t)(plen >> 8);
    4af6:	86 e0                	xchg   %ah,%al
	(void) tc_aes_encrypt(tag, b, c->sched);
    4af8:	4c 89 ff             	mov    %r15,%rdi
    4afb:	44 89 54 24 0c       	mov    %r10d,0xc(%rsp)
    4b00:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = (uint8_t)(plen >> 8);
    4b04:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
	(void) tc_aes_encrypt(tag, b, c->sched);
    4b09:	e8 92 f8 ff ff       	callq  43a0 <tc_aes_encrypt>
	if (alen > 0) {
    4b0e:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
    4b13:	4c 8b 1c 24          	mov    (%rsp),%r11
    4b17:	45 85 d2             	test   %r10d,%r10d
    4b1a:	74 17                	je     4b33 <tc_ccm_generation_encryption+0x11a>
		ccm_cbc_mac(tag, associated_data, alen, 1, c->sched);
    4b1c:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4b20:	b9 01 00 00 00       	mov    $0x1,%ecx
    4b25:	44 89 d2             	mov    %r10d,%edx
    4b28:	4c 89 de             	mov    %r11,%rsi
    4b2b:	4c 89 ff             	mov    %r15,%rdi
    4b2e:	e8 09 fd ff ff       	callq  483c <ccm_cbc_mac>
	}
	if (plen > 0) {
    4b33:	85 db                	test   %ebx,%ebx
    4b35:	74 13                	je     4b4a <tc_ccm_generation_encryption+0x131>
		ccm_cbc_mac(tag, payload, plen, 0, c->sched);
    4b37:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4b3b:	31 c9                	xor    %ecx,%ecx
    4b3d:	89 da                	mov    %ebx,%edx
    4b3f:	4c 89 f6             	mov    %r14,%rsi
    4b42:	4c 89 ff             	mov    %r15,%rdi
    4b45:	e8 f2 fc ff ff       	callq  483c <ccm_cbc_mac>
	/* formatting the sequence b for encryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
	b[14] = b[15] = TC_ZERO_BYTE;

	/* encrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4b4a:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    4b4e:	89 d9                	mov    %ebx,%ecx
    4b50:	89 de                	mov    %ebx,%esi
    4b52:	4d 89 e8             	mov    %r13,%r8
    4b55:	4c 89 f2             	mov    %r14,%rdx
    4b58:	4c 89 e7             	mov    %r12,%rdi
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    4b5b:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/

	/* encrypting b and adding the tag to the output: */
	(void) tc_aes_encrypt(b, b, c->sched);
	out += plen;
    4b60:	4c 01 e3             	add    %r12,%rbx
	b[14] = b[15] = TC_ZERO_BYTE;
    4b63:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4b6a:	e8 37 fd ff ff       	callq  48a6 <ccm_ctr_mode.constprop.0>
	(void) tc_aes_encrypt(b, b, c->sched);
    4b6f:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4b73:	4c 89 ee             	mov    %r13,%rsi
    4b76:	4c 89 ef             	mov    %r13,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/
    4b79:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4b80:	e8 1b f8 ff ff       	callq  43a0 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    4b85:	31 c0                	xor    %eax,%eax
    4b87:	39 45 10             	cmp    %eax,0x10(%rbp)
    4b8a:	76 11                	jbe    4b9d <tc_ccm_generation_encryption+0x184>
		*out++ = tag[i] ^ b[i];
    4b8c:	41 8a 14 07          	mov    (%r15,%rax,1),%dl
    4b90:	41 32 54 05 00       	xor    0x0(%r13,%rax,1),%dl
    4b95:	88 14 03             	mov    %dl,(%rbx,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    4b98:	48 ff c0             	inc    %rax
    4b9b:	eb ea                	jmp    4b87 <tc_ccm_generation_encryption+0x16e>
	}

	return TC_CRYPTO_SUCCESS;
    4b9d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    4ba3:	eb 03                	jmp    4ba8 <tc_ccm_generation_encryption+0x18f>
		return TC_CRYPTO_FAIL;
    4ba5:	45 31 c0             	xor    %r8d,%r8d
}
    4ba8:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    4bad:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4bb4:	00 00 
    4bb6:	74 05                	je     4bbd <tc_ccm_generation_encryption+0x1a4>
    4bb8:	e8 f3 d8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4bbd:	48 83 c4 48          	add    $0x48,%rsp
    4bc1:	44 89 c0             	mov    %r8d,%eax
    4bc4:	5b                   	pop    %rbx
    4bc5:	5d                   	pop    %rbp
    4bc6:	41 5c                	pop    %r12
    4bc8:	41 5d                	pop    %r13
    4bca:	41 5e                	pop    %r14
    4bcc:	41 5f                	pop    %r15
    4bce:	c3                   	retq   

0000000000004bcf <tc_ccm_decryption_verification>:

int tc_ccm_decryption_verification(uint8_t *out, unsigned int olen,
				   const uint8_t *associated_data,
				   unsigned int alen, const uint8_t *payload,
				   unsigned int plen, TCCcmMode_t c)
{
    4bcf:	f3 0f 1e fa          	endbr64 
    4bd3:	41 57                	push   %r15
    4bd5:	41 56                	push   %r14
    4bd7:	41 55                	push   %r13
    4bd9:	49 89 fd             	mov    %rdi,%r13
    4bdc:	41 54                	push   %r12
    4bde:	55                   	push   %rbp
    4bdf:	53                   	push   %rbx
    4be0:	48 83 ec 48          	sub    $0x48,%rsp
    4be4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4beb:	00 00 
    4bed:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4bf2:	31 c0                	xor    %eax,%eax
    4bf4:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4bfb:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4bfc:	48 85 ff             	test   %rdi,%rdi
    4bff:	0f 84 a2 01 00 00    	je     4da7 <tc_ccm_decryption_verification+0x1d8>
    4c05:	48 85 ed             	test   %rbp,%rbp
    4c08:	0f 84 99 01 00 00    	je     4da7 <tc_ccm_decryption_verification+0x1d8>
    4c0e:	89 f7                	mov    %esi,%edi
    4c10:	49 89 d6             	mov    %rdx,%r14
    4c13:	41 89 cf             	mov    %ecx,%r15d
    4c16:	4d 89 c3             	mov    %r8,%r11
    4c19:	44 89 cb             	mov    %r9d,%ebx
	    (c == (TCCcmMode_t) 0) ||
    4c1c:	45 85 c9             	test   %r9d,%r9d
    4c1f:	74 09                	je     4c2a <tc_ccm_decryption_verification+0x5b>
    4c21:	4d 85 c0             	test   %r8,%r8
    4c24:	0f 84 7f 01 00 00    	je     4da9 <tc_ccm_decryption_verification+0x1da>
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4c2a:	45 85 ff             	test   %r15d,%r15d
    4c2d:	74 0b                	je     4c3a <tc_ccm_decryption_verification+0x6b>
	    ((alen > 0) && (associated_data == (uint8_t *) 0)) ||
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4c2f:	31 c0                	xor    %eax,%eax
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4c31:	4d 85 f6             	test   %r14,%r14
    4c34:	0f 84 6f 01 00 00    	je     4da9 <tc_ccm_decryption_verification+0x1da>
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    4c3a:	41 81 ff ff fe 00 00 	cmp    $0xfeff,%r15d
    4c41:	0f 87 60 01 00 00    	ja     4da7 <tc_ccm_decryption_verification+0x1d8>
    4c47:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    4c4d:	0f 87 54 01 00 00    	ja     4da7 <tc_ccm_decryption_verification+0x1d8>
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
    4c53:	89 de                	mov    %ebx,%esi
    4c55:	2b 75 10             	sub    0x10(%rbp),%esi
		return TC_CRYPTO_FAIL;
    4c58:	31 c0                	xor    %eax,%eax
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    4c5a:	39 fe                	cmp    %edi,%esi
    4c5c:	0f 87 47 01 00 00    	ja     4da9 <tc_ccm_decryption_verification+0x1da>
	unsigned int i;

	/* DECRYPTION: */

	/* formatting the sequence b for decryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    4c62:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    4c67:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    4c6b:	31 c0                	xor    %eax,%eax
    4c6d:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
    4c72:	4c 8d 54 24 19       	lea    0x19(%rsp),%r10
    4c77:	8a 14 01             	mov    (%rcx,%rax,1),%dl
    4c7a:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    4c7e:	48 ff c0             	inc    %rax
    4c81:	48 83 f8 0d          	cmp    $0xd,%rax
    4c85:	75 f0                	jne    4c77 <tc_ccm_decryption_verification+0xa8>
	}
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */

	/* decrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    4c87:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    4c8b:	89 f1                	mov    %esi,%ecx
    4c8d:	4c 89 da             	mov    %r11,%rdx
    4c90:	4d 89 e0             	mov    %r12,%r8
    4c93:	4c 89 ef             	mov    %r13,%rdi
    4c96:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
    4c9b:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */
    4c9f:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    4ca6:	e8 fb fb ff ff       	callq  48a6 <ccm_ctr_mode.constprop.0>

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */

	/* encrypting b and restoring the tag from input: */
	(void) tc_aes_encrypt(b, b, c->sched);
    4cab:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4caf:	4c 89 e6             	mov    %r12,%rsi
    4cb2:	4c 89 e7             	mov    %r12,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */
    4cb5:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4cbc:	e8 df f6 ff ff       	callq  43a0 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    4cc1:	8b 45 10             	mov    0x10(%rbp),%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4cc4:	4c 8b 1c 24          	mov    (%rsp),%r11
    4cc8:	41 89 d8             	mov    %ebx,%r8d
	for (i = 0; i < c->mlen; ++i) {
    4ccb:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4cd0:	49 29 c0             	sub    %rax,%r8
	for (i = 0; i < c->mlen; ++i) {
    4cd3:	48 89 c1             	mov    %rax,%rcx
    4cd6:	31 c0                	xor    %eax,%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4cd8:	4d 01 c3             	add    %r8,%r11
	for (i = 0; i < c->mlen; ++i) {
    4cdb:	39 c1                	cmp    %eax,%ecx
    4cdd:	76 11                	jbe    4cf0 <tc_ccm_decryption_verification+0x121>
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4cdf:	41 8a 14 03          	mov    (%r11,%rax,1),%dl
    4ce3:	41 32 14 04          	xor    (%r12,%rax,1),%dl
    4ce7:	88 54 04 28          	mov    %dl,0x28(%rsp,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    4ceb:	48 ff c0             	inc    %rax
    4cee:	eb eb                	jmp    4cdb <tc_ccm_decryption_verification+0x10c>
	}

	/* VERIFYING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    4cf0:	45 85 ff             	test   %r15d,%r15d
    4cf3:	0f 95 c0             	setne  %al
    4cf6:	c1 e0 06             	shl    $0x6,%eax
    4cf9:	89 c6                	mov    %eax,%esi
    4cfb:	8d 41 fe             	lea    -0x2(%rcx),%eax
    4cfe:	d1 e8                	shr    %eax
    4d00:	8d 04 c5 00 00 00 00 	lea    0x0(,%rax,8),%eax
    4d07:	09 f0                	or     %esi,%eax
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    4d09:	48 8b 75 08          	mov    0x8(%rbp),%rsi
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    4d0d:	83 c8 01             	or     $0x1,%eax
    4d10:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    4d14:	31 c0                	xor    %eax,%eax
    4d16:	8a 14 06             	mov    (%rsi,%rax,1),%dl
    4d19:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    4d1d:	48 ff c0             	inc    %rax
    4d20:	48 83 f8 0d          	cmp    $0xd,%rax
    4d24:	75 f0                	jne    4d16 <tc_ccm_decryption_verification+0x147>
	}
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    4d26:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen - c->mlen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(b, b, c->sched);
    4d28:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4d2c:	4c 89 e6             	mov    %r12,%rsi
    4d2f:	4c 89 e7             	mov    %r12,%rdi
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    4d32:	29 c8                	sub    %ecx,%eax
    4d34:	88 64 24 26          	mov    %ah,0x26(%rsp)
	b[15] = (uint8_t)(plen - c->mlen);
    4d38:	89 d8                	mov    %ebx,%eax
    4d3a:	29 c8                	sub    %ecx,%eax
    4d3c:	88 44 24 27          	mov    %al,0x27(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4d40:	e8 5b f6 ff ff       	callq  43a0 <tc_aes_encrypt>
	if (alen > 0) {
    4d45:	45 85 ff             	test   %r15d,%r15d
    4d48:	74 17                	je     4d61 <tc_ccm_decryption_verification+0x192>
		ccm_cbc_mac(b, associated_data, alen, 1, c->sched);
    4d4a:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4d4e:	b9 01 00 00 00       	mov    $0x1,%ecx
    4d53:	44 89 fa             	mov    %r15d,%edx
    4d56:	4c 89 f6             	mov    %r14,%rsi
    4d59:	4c 89 e7             	mov    %r12,%rdi
    4d5c:	e8 db fa ff ff       	callq  483c <ccm_cbc_mac>
	}
	if (plen > 0) {
    4d61:	85 db                	test   %ebx,%ebx
    4d63:	74 16                	je     4d7b <tc_ccm_decryption_verification+0x1ac>
		ccm_cbc_mac(b, out, plen - c->mlen, 0, c->sched);
    4d65:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4d69:	89 da                	mov    %ebx,%edx
    4d6b:	31 c9                	xor    %ecx,%ecx
    4d6d:	2b 55 10             	sub    0x10(%rbp),%edx
    4d70:	4c 89 ee             	mov    %r13,%rsi
    4d73:	4c 89 e7             	mov    %r12,%rdi
    4d76:	e8 c1 fa ff ff       	callq  483c <ccm_cbc_mac>
	}

	/* comparing the received tag and the computed one: */
	if (_compare(b, tag, c->mlen) == 0) {
    4d7b:	8b 55 10             	mov    0x10(%rbp),%edx
    4d7e:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
    4d83:	4c 89 e7             	mov    %r12,%rdi
    4d86:	e8 d0 ec ff ff       	callq  3a5b <_compare>
    4d8b:	41 89 c0             	mov    %eax,%r8d
		return TC_CRYPTO_SUCCESS;
    4d8e:	b8 01 00 00 00       	mov    $0x1,%eax
	if (_compare(b, tag, c->mlen) == 0) {
    4d93:	45 85 c0             	test   %r8d,%r8d
    4d96:	74 11                	je     4da9 <tc_ccm_decryption_verification+0x1da>
  	} else {
		/* erase the decrypted buffer in case of mac validation failure: */
		_set(out, 0, plen - c->mlen);
    4d98:	2b 5d 10             	sub    0x10(%rbp),%ebx
    4d9b:	31 f6                	xor    %esi,%esi
    4d9d:	4c 89 ef             	mov    %r13,%rdi
    4da0:	89 da                	mov    %ebx,%edx
    4da2:	e8 96 ec ff ff       	callq  3a3d <_set>
		return TC_CRYPTO_FAIL;
    4da7:	31 c0                	xor    %eax,%eax
		return TC_CRYPTO_FAIL;
	}
}
    4da9:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    4dae:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4db5:	00 00 
    4db7:	74 05                	je     4dbe <tc_ccm_decryption_verification+0x1ef>
    4db9:	e8 f2 d6 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4dbe:	48 83 c4 48          	add    $0x48,%rsp
    4dc2:	5b                   	pop    %rbx
    4dc3:	5d                   	pop    %rbp
    4dc4:	41 5c                	pop    %r12
    4dc6:	41 5d                	pop    %r13
    4dc8:	41 5e                	pop    %r14
    4dca:	41 5f                	pop    %r15
    4dcc:	c3                   	retq   

0000000000004dcd <arch_cpu_idle>:
 * arch_busy_wait()
 */
#endif

void arch_cpu_idle(void)
{
    4dcd:	f3 0f 1e fa          	endbr64 
    4dd1:	50                   	push   %rax
	sys_trace_idle();
	posix_irq_full_unlock();
    4dd2:	e8 74 10 00 00       	callq  5e4b <posix_irq_full_unlock>
	posix_halt_cpu();
}
    4dd7:	5a                   	pop    %rdx
	posix_halt_cpu();
    4dd8:	e9 42 06 00 00       	jmpq   541f <posix_halt_cpu>

0000000000004ddd <arch_irq_enable>:
	posix_irq_offload(routine, parameter);
}
#endif

void arch_irq_enable(unsigned int irq)
{
    4ddd:	f3 0f 1e fa          	endbr64 
	posix_irq_enable(irq);
    4de1:	e9 70 10 00 00       	jmpq   5e56 <posix_irq_enable>

0000000000004de6 <pc_safe_call>:
#endif

static inline void pc_safe_call(int test, const char *test_str)
{
	/* LCOV_EXCL_START */ /* See Note1 */
	if (unlikely(test)) {
    4de6:	85 ff                	test   %edi,%edi
    4de8:	74 0e                	je     4df8 <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    4dea:	48 8d 3d 37 47 00 00 	lea    0x4737(%rip),%rdi        # 9528 <default_cmd+0x2c8>
    4df1:	31 c0                	xor    %eax,%eax
    4df3:	e9 d3 13 00 00       	jmpq   61cb <posix_print_error_and_exit>
					   test_str);
	}
	/* LCOV_EXCL_STOP */
}
    4df8:	c3                   	retq   

0000000000004df9 <posix_preexit_cleanup>:
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
}


static void posix_preexit_cleanup(void)
{
    4df9:	50                   	push   %rax
	/*
	 * Release the mutex so the next allowed thread can run
	 */
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    4dfa:	48 8d 3d bf 97 00 00 	lea    0x97bf(%rip),%rdi        # e5c0 <mtx_threads>
    4e01:	e8 9a d7 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    4e06:	48 8d 35 35 47 00 00 	lea    0x4735(%rip),%rsi        # 9542 <default_cmd+0x2e2>
    4e0d:	89 c7                	mov    %eax,%edi
    4e0f:	e8 d2 ff ff ff       	callq  4de6 <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    4e14:	e8 d7 d7 ff ff       	callq  25f0 <pthread_self@plt>
}
    4e19:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    4e1a:	48 89 c7             	mov    %rax,%rdi
    4e1d:	e9 be d5 ff ff       	jmpq   23e0 <pthread_detach@plt>

0000000000004e22 <abort_tail>:
{
    4e22:	50                   	push   %rax
    4e23:	58                   	pop    %rax
	threads_table[this_th_nbr].running = false;
    4e24:	48 63 ff             	movslq %edi,%rdi
{
    4e27:	50                   	push   %rax
	threads_table[this_th_nbr].running = false;
    4e28:	48 c1 e7 05          	shl    $0x5,%rdi
    4e2c:	48 03 3d 05 9f 00 00 	add    0x9f05(%rip),%rdi        # ed38 <threads_table>
    4e33:	c6 47 04 00          	movb   $0x0,0x4(%rdi)
	threads_table[this_th_nbr].state = ABORTED;
    4e37:	c7 07 03 00 00 00    	movl   $0x3,(%rdi)
	posix_preexit_cleanup();
    4e3d:	e8 b7 ff ff ff       	callq  4df9 <posix_preexit_cleanup>
	pthread_exit(NULL);
    4e42:	31 ff                	xor    %edi,%edi
    4e44:	e8 67 d7 ff ff       	callq  25b0 <pthread_exit@plt>

0000000000004e49 <posix_wait_until_allowed>:
{
    4e49:	41 54                	push   %r12
	threads_table[this_th_nbr].running = false;
    4e4b:	48 8b 05 e6 9e 00 00 	mov    0x9ee6(%rip),%rax        # ed38 <threads_table>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    4e52:	4c 8d 25 67 97 00 00 	lea    0x9767(%rip),%r12        # e5c0 <mtx_threads>
{
    4e59:	55                   	push   %rbp
    4e5a:	53                   	push   %rbx
    4e5b:	48 63 df             	movslq %edi,%rbx
    4e5e:	48 89 dd             	mov    %rbx,%rbp
	threads_table[this_th_nbr].running = false;
    4e61:	48 c1 e3 05          	shl    $0x5,%rbx
    4e65:	c6 44 18 04 00       	movb   $0x0,0x4(%rax,%rbx,1)
	while (this_th_nbr != currently_allowed_thread) {
    4e6a:	39 2d 90 9f 00 00    	cmp    %ebp,0x9f90(%rip)        # ee00 <currently_allowed_thread>
    4e70:	74 28                	je     4e9a <posix_wait_until_allowed+0x51>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    4e72:	4c 89 e6             	mov    %r12,%rsi
    4e75:	48 8d 3d 84 97 00 00 	lea    0x9784(%rip),%rdi        # e600 <cond_threads>
    4e7c:	e8 1f d6 ff ff       	callq  24a0 <pthread_cond_wait@plt>
		if (threads_table &&
    4e81:	48 8b 05 b0 9e 00 00 	mov    0x9eb0(%rip),%rax        # ed38 <threads_table>
    4e88:	48 85 c0             	test   %rax,%rax
    4e8b:	74 dd                	je     4e6a <posix_wait_until_allowed+0x21>
    4e8d:	83 3c 18 02          	cmpl   $0x2,(%rax,%rbx,1)
    4e91:	75 d7                	jne    4e6a <posix_wait_until_allowed+0x21>
			abort_tail(this_th_nbr);
    4e93:	89 ef                	mov    %ebp,%edi
    4e95:	e8 88 ff ff ff       	callq  4e22 <abort_tail>
	threads_table[this_th_nbr].running = true;
    4e9a:	48 8b 05 97 9e 00 00 	mov    0x9e97(%rip),%rax        # ed38 <threads_table>
    4ea1:	c6 44 18 04 01       	movb   $0x1,0x4(%rax,%rbx,1)
}
    4ea6:	5b                   	pop    %rbx
    4ea7:	5d                   	pop    %rbp
    4ea8:	41 5c                	pop    %r12
    4eaa:	c3                   	retq   

0000000000004eab <posix_cleanup_handler>:

/**
 * Handler called when any thread is cancelled or exits
 */
static void posix_cleanup_handler(void *arg)
{
    4eab:	f3 0f 1e fa          	endbr64 
	 * and the mutex was already released
	 * Otherwise, release the mutex so other threads which may be
	 * caught waiting for it could terminate
	 */

	if (!terminate) {
    4eaf:	80 3d 87 9f 00 00 00 	cmpb   $0x0,0x9f87(%rip)        # ee3d <terminate>
    4eb6:	74 29                	je     4ee1 <posix_cleanup_handler+0x36>
{
    4eb8:	50                   	push   %rax
		ptr->thread_idx,
		__func__);
#endif


	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    4eb9:	48 8d 3d 00 97 00 00 	lea    0x9700(%rip),%rdi        # e5c0 <mtx_threads>
    4ec0:	e8 db d6 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    4ec5:	48 8d 35 76 46 00 00 	lea    0x4676(%rip),%rsi        # 9542 <default_cmd+0x2e2>
    4ecc:	89 c7                	mov    %eax,%edi
    4ece:	e8 13 ff ff ff       	callq  4de6 <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    4ed3:	e8 18 d7 ff ff       	callq  25f0 <pthread_self@plt>
}
    4ed8:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    4ed9:	48 89 c7             	mov    %rax,%rdi
    4edc:	e9 ff d4 ff ff       	jmpq   23e0 <pthread_detach@plt>
    4ee1:	c3                   	retq   

0000000000004ee2 <posix_thread_starter>:
 *  It will block the thread until a arch_swap() is called for it
 *
 * Spawned from posix_new_thread() below
 */
static void *posix_thread_starter(void *arg)
{
    4ee2:	f3 0f 1e fa          	endbr64 
    4ee6:	50                   	push   %rax
    4ee7:	58                   	pop    %rax
    4ee8:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    4eef:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

	/*
	 * We block until all other running threads reach the while loop
	 * in posix_wait_until_allowed() and they release the mutex
	 */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    4ef4:	48 8d 3d c5 96 00 00 	lea    0x96c5(%rip),%rdi        # e5c0 <mtx_threads>
{
    4efb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4f02:	00 00 
    4f04:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    4f09:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    4f0b:	e8 a0 d7 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    4f10:	48 8d 35 4e 46 00 00 	lea    0x464e(%rip),%rsi        # 9565 <default_cmd+0x305>
    4f17:	89 c7                	mov    %eax,%edi
    4f19:	e8 c8 fe ff ff       	callq  4de6 <pc_safe_call>

	/*
	 * The program may have been finished before this thread ever got to run
	 */
	/* LCOV_EXCL_START */ /* See Note1 */
	if (!threads_table) {
    4f1e:	48 83 3d 12 9e 00 00 	cmpq   $0x0,0x9e12(%rip)        # ed38 <threads_table>
    4f25:	00 
    4f26:	75 11                	jne    4f39 <posix_thread_starter+0x57>
		posix_cleanup_handler(arg);
    4f28:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4f2d:	e8 79 ff ff ff       	callq  4eab <posix_cleanup_handler>
		pthread_exit(NULL);
    4f32:	31 ff                	xor    %edi,%edi
    4f34:	e8 77 d6 ff ff       	callq  25b0 <pthread_exit@plt>
	}
	/* LCOV_EXCL_STOP */

	pthread_cleanup_push(posix_cleanup_handler, arg);
    4f39:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    4f3e:	31 f6                	xor    %esi,%esi
    4f40:	e8 3b d7 ff ff       	callq  2680 <__sigsetjmp@plt>
    4f45:	f3 0f 1e fa          	endbr64 
    4f49:	85 c0                	test   %eax,%eax
    4f4b:	74 14                	je     4f61 <posix_thread_starter+0x7f>
    4f4d:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4f52:	e8 54 ff ff ff       	callq  4eab <posix_cleanup_handler>
    4f57:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    4f5c:	e8 ef d6 ff ff       	callq  2650 <__pthread_unwind_next@plt>
    4f61:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    4f66:	e8 e5 d4 ff ff       	callq  2450 <__pthread_register_cancel@plt>

	/*
	 * The thread would try to execute immediately, so we block it
	 * until allowed
	 */
	posix_wait_until_allowed(thread_idx);
    4f6b:	8b 7c 24 08          	mov    0x8(%rsp),%edi
    4f6f:	e8 d5 fe ff ff       	callq  4e49 <posix_wait_until_allowed>

	posix_new_thread_pre_start();
    4f74:	e8 92 03 00 00       	callq  530b <posix_new_thread_pre_start>

	posix_thread_status_t *ptr = threads_table[thread_idx].t_status;
    4f79:	48 63 44 24 08       	movslq 0x8(%rsp),%rax
    4f7e:	48 c1 e0 05          	shl    $0x5,%rax
    4f82:	48 03 05 af 9d 00 00 	add    0x9daf(%rip),%rax        # ed38 <threads_table>
    4f89:	48 8b 40 18          	mov    0x18(%rax),%rax

	z_thread_entry(ptr->entry_point, ptr->arg1, ptr->arg2, ptr->arg3);
    4f8d:	48 8b 48 18          	mov    0x18(%rax),%rcx
    4f91:	48 8b 50 10          	mov    0x10(%rax),%rdx
    4f95:	48 8b 70 08          	mov    0x8(%rax),%rsi
    4f99:	48 8b 38             	mov    (%rax),%rdi
    4f9c:	e8 1d dc ff ff       	callq  2bbe <z_thread_entry>

0000000000004fa1 <posix_swap>:
{
    4fa1:	f3 0f 1e fa          	endbr64 
    4fa5:	55                   	push   %rbp
    4fa6:	89 f5                	mov    %esi,%ebp
	currently_allowed_thread = next_allowed_th;
    4fa8:	89 3d 52 9e 00 00    	mov    %edi,0x9e52(%rip)        # ee00 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    4fae:	48 8d 3d 4b 96 00 00 	lea    0x964b(%rip),%rdi        # e600 <cond_threads>
    4fb5:	e8 56 d4 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    4fba:	48 8d 35 c5 45 00 00 	lea    0x45c5(%rip),%rsi        # 9586 <default_cmd+0x326>
    4fc1:	89 c7                	mov    %eax,%edi
    4fc3:	e8 1e fe ff ff       	callq  4de6 <pc_safe_call>
	if (threads_table[this_th_nbr].state == ABORTING) {
    4fc8:	48 63 c5             	movslq %ebp,%rax
		abort_tail(this_th_nbr);
    4fcb:	89 ef                	mov    %ebp,%edi
	if (threads_table[this_th_nbr].state == ABORTING) {
    4fcd:	48 c1 e0 05          	shl    $0x5,%rax
    4fd1:	48 03 05 60 9d 00 00 	add    0x9d60(%rip),%rax        # ed38 <threads_table>
    4fd8:	83 38 02             	cmpl   $0x2,(%rax)
    4fdb:	75 05                	jne    4fe2 <posix_swap+0x41>
		abort_tail(this_th_nbr);
    4fdd:	e8 40 fe ff ff       	callq  4e22 <abort_tail>
}
    4fe2:	5d                   	pop    %rbp
		posix_wait_until_allowed(this_th_nbr);
    4fe3:	e9 61 fe ff ff       	jmpq   4e49 <posix_wait_until_allowed>

0000000000004fe8 <posix_main_thread_start>:
{
    4fe8:	f3 0f 1e fa          	endbr64 
    4fec:	50                   	push   %rax
	currently_allowed_thread = next_allowed_th;
    4fed:	89 3d 0d 9e 00 00    	mov    %edi,0x9e0d(%rip)        # ee00 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    4ff3:	48 8d 3d 06 96 00 00 	lea    0x9606(%rip),%rdi        # e600 <cond_threads>
    4ffa:	e8 11 d4 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    4fff:	48 8d 35 80 45 00 00 	lea    0x4580(%rip),%rsi        # 9586 <default_cmd+0x326>
    5006:	89 c7                	mov    %eax,%edi
    5008:	e8 d9 fd ff ff       	callq  4de6 <pc_safe_call>
	posix_preexit_cleanup();
    500d:	e8 e7 fd ff ff       	callq  4df9 <posix_preexit_cleanup>
	pthread_exit(NULL);
    5012:	31 ff                	xor    %edi,%edi
    5014:	e8 97 d5 ff ff       	callq  25b0 <pthread_exit@plt>

0000000000005019 <posix_new_thread>:
 * Create a new POSIX thread for the new Zephyr thread.
 * arch_new_thread() picks from the kernel structures what it is that we need
 * to call with what parameters
 */
void posix_new_thread(posix_thread_status_t *ptr)
{
    5019:	f3 0f 1e fa          	endbr64 
    501d:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    501e:	8b 35 e4 9d 00 00    	mov    0x9de4(%rip),%esi        # ee08 <threads_table_size>
{
    5024:	48 89 fb             	mov    %rdi,%rbx
	for (int i = 0; i < threads_table_size; i++) {
    5027:	31 c0                	xor    %eax,%eax
		if ((threads_table[i].state == NOTUSED)
    5029:	48 8b 3d 08 9d 00 00 	mov    0x9d08(%rip),%rdi        # ed38 <threads_table>
    5030:	41 89 c0             	mov    %eax,%r8d
	for (int i = 0; i < threads_table_size; i++) {
    5033:	39 c6                	cmp    %eax,%esi
    5035:	7e 13                	jle    504a <posix_new_thread+0x31>
		if ((threads_table[i].state == NOTUSED)
    5037:	48 ff c0             	inc    %rax
    503a:	48 89 c2             	mov    %rax,%rdx
    503d:	48 c1 e2 05          	shl    $0x5,%rdx
    5041:	83 7c 17 e0 00       	cmpl   $0x0,-0x20(%rdi,%rdx,1)
    5046:	75 e8                	jne    5030 <posix_new_thread+0x17>
    5048:	eb 52                	jmp    509c <posix_new_thread+0x83>
				(threads_table_size + PC_ALLOC_CHUNK_SIZE)
    504a:	83 c6 40             	add    $0x40,%esi
    504d:	48 63 f6             	movslq %esi,%rsi
	threads_table = realloc(threads_table,
    5050:	48 c1 e6 05          	shl    $0x5,%rsi
    5054:	e8 77 d5 ff ff       	callq  25d0 <realloc@plt>
    5059:	48 89 05 d8 9c 00 00 	mov    %rax,0x9cd8(%rip)        # ed38 <threads_table>
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    5060:	48 85 c0             	test   %rax,%rax
    5063:	75 0c                	jne    5071 <posix_new_thread+0x58>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    5065:	48 8d 3d 40 45 00 00 	lea    0x4540(%rip),%rdi        # 95ac <default_cmd+0x34c>
    506c:	e8 5a 11 00 00       	callq  61cb <posix_print_error_and_exit>
	(void)memset(&threads_table[threads_table_size], 0,
    5071:	48 63 15 90 9d 00 00 	movslq 0x9d90(%rip),%rdx        # ee08 <threads_table_size>
    5078:	31 c0                	xor    %eax,%eax
    507a:	b9 00 02 00 00       	mov    $0x200,%ecx
    507f:	49 89 d0             	mov    %rdx,%r8
    5082:	48 c1 e2 05          	shl    $0x5,%rdx
    5086:	48 03 15 ab 9c 00 00 	add    0x9cab(%rip),%rdx        # ed38 <threads_table>
    508d:	48 89 d7             	mov    %rdx,%rdi
    5090:	f3 ab                	rep stos %eax,%es:(%rdi)
	threads_table_size += PC_ALLOC_CHUNK_SIZE;
    5092:	41 8d 40 40          	lea    0x40(%r8),%eax
    5096:	89 05 6c 9d 00 00    	mov    %eax,0x9d6c(%rip)        # ee08 <threads_table_size>
	int t_slot;

	t_slot = ttable_get_empty_slot();
	threads_table[t_slot].state = USED;
    509c:	49 63 c8             	movslq %r8d,%rcx
	threads_table[t_slot].running = false;
	threads_table[t_slot].thead_cnt = thread_create_count++;
    509f:	8b 05 5f 9d 00 00    	mov    0x9d5f(%rip),%eax        # ee04 <thread_create_count>
	threads_table[t_slot].t_status = ptr;
	ptr->thread_idx = t_slot;

	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    50a5:	31 f6                	xor    %esi,%esi
	threads_table[t_slot].state = USED;
    50a7:	48 89 cf             	mov    %rcx,%rdi
    50aa:	48 c1 e7 05          	shl    $0x5,%rdi
    50ae:	48 03 3d 83 9c 00 00 	add    0x9c83(%rip),%rdi        # ed38 <threads_table>
	threads_table[t_slot].thead_cnt = thread_create_count++;
    50b5:	8d 50 01             	lea    0x1(%rax),%edx
	threads_table[t_slot].t_status = ptr;
    50b8:	48 89 5f 18          	mov    %rbx,0x18(%rdi)
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    50bc:	48 83 c7 08          	add    $0x8,%rdi
	threads_table[t_slot].state = USED;
    50c0:	c7 47 f8 01 00 00 00 	movl   $0x1,-0x8(%rdi)
	threads_table[t_slot].running = false;
    50c7:	c6 47 fc 00          	movb   $0x0,-0x4(%rdi)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    50cb:	89 47 08             	mov    %eax,0x8(%rdi)
	ptr->thread_idx = t_slot;
    50ce:	44 89 43 20          	mov    %r8d,0x20(%rbx)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    50d2:	89 15 2c 9d 00 00    	mov    %edx,0x9d2c(%rip)        # ee04 <thread_create_count>
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    50d8:	48 8d 15 03 fe ff ff 	lea    -0x1fd(%rip),%rdx        # 4ee2 <posix_thread_starter>
    50df:	e8 dc d2 ff ff       	callq  23c0 <pthread_create@plt>
    50e4:	48 8d 35 e9 44 00 00 	lea    0x44e9(%rip),%rsi        # 95d4 <default_cmd+0x374>
		__func__,
		threads_table[t_slot].thead_cnt,
		t_slot,
		threads_table[t_slot].thread);

}
    50eb:	5b                   	pop    %rbx
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    50ec:	89 c7                	mov    %eax,%edi
    50ee:	e9 f3 fc ff ff       	jmpq   4de6 <pc_safe_call>

00000000000050f3 <posix_init_multithreading>:
/**
 * Called from zephyr_wrapper()
 * prepare whatever needs to be prepared to be able to start threads
 */
void posix_init_multithreading(void)
{
    50f3:	f3 0f 1e fa          	endbr64 
    50f7:	52                   	push   %rdx
	thread_create_count = 0;

	currently_allowed_thread = -1;

	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    50f8:	be 20 00 00 00       	mov    $0x20,%esi
    50fd:	bf 40 00 00 00       	mov    $0x40,%edi
	thread_create_count = 0;
    5102:	c7 05 f8 9c 00 00 00 	movl   $0x0,0x9cf8(%rip)        # ee04 <thread_create_count>
    5109:	00 00 00 
	currently_allowed_thread = -1;
    510c:	c7 05 ea 9c 00 00 ff 	movl   $0xffffffff,0x9cea(%rip)        # ee00 <currently_allowed_thread>
    5113:	ff ff ff 
	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    5116:	e8 15 d4 ff ff       	callq  2530 <calloc@plt>
    511b:	48 89 05 16 9c 00 00 	mov    %rax,0x9c16(%rip)        # ed38 <threads_table>
				sizeof(struct threads_table_el));
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    5122:	48 85 c0             	test   %rax,%rax
    5125:	75 0c                	jne    5133 <posix_init_multithreading+0x40>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    5127:	48 8d 3d 7e 44 00 00 	lea    0x447e(%rip),%rdi        # 95ac <default_cmd+0x34c>
    512e:	e8 98 10 00 00       	callq  61cb <posix_print_error_and_exit>
	}

	threads_table_size = PC_ALLOC_CHUNK_SIZE;


	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    5133:	48 8d 3d 86 94 00 00 	lea    0x9486(%rip),%rdi        # e5c0 <mtx_threads>
	threads_table_size = PC_ALLOC_CHUNK_SIZE;
    513a:	c7 05 c4 9c 00 00 40 	movl   $0x40,0x9cc4(%rip)        # ee08 <threads_table_size>
    5141:	00 00 00 
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    5144:	e8 67 d5 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5149:	48 8d 35 15 44 00 00 	lea    0x4415(%rip),%rsi        # 9565 <default_cmd+0x305>
    5150:	89 c7                	mov    %eax,%edi
}
    5152:	58                   	pop    %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    5153:	e9 8e fc ff ff       	jmpq   4de6 <pc_safe_call>

0000000000005158 <posix_core_clean_up>:
 * => we prefer the supposed memory leak report from valgrind, and ensure we
 * will not hang
 *
 */
void posix_core_clean_up(void)
{
    5158:	f3 0f 1e fa          	endbr64 

	if (!threads_table) { /* LCOV_EXCL_BR_LINE */
    515c:	48 83 3d d4 9b 00 00 	cmpq   $0x0,0x9bd4(%rip)        # ed38 <threads_table>
    5163:	00 
    5164:	74 62                	je     51c8 <posix_core_clean_up+0x70>
{
    5166:	55                   	push   %rbp
			continue;
		}

		/* LCOV_EXCL_START */
		if (pthread_cancel(threads_table[i].thread)) {
			posix_print_warning(
    5167:	48 8d 2d ca 44 00 00 	lea    0x44ca(%rip),%rbp        # 9638 <default_cmd+0x3d8>
{
    516e:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    516f:	31 db                	xor    %ebx,%ebx
{
    5171:	52                   	push   %rdx
	terminate = true;
    5172:	c6 05 c4 9c 00 00 01 	movb   $0x1,0x9cc4(%rip)        # ee3d <terminate>
	for (int i = 0; i < threads_table_size; i++) {
    5179:	39 1d 89 9c 00 00    	cmp    %ebx,0x9c89(%rip)        # ee08 <threads_table_size>
    517f:	48 8b 3d b2 9b 00 00 	mov    0x9bb2(%rip),%rdi        # ed38 <threads_table>
    5186:	7e 2c                	jle    51b4 <posix_core_clean_up+0x5c>
		if (threads_table[i].state != USED) {
    5188:	48 63 c3             	movslq %ebx,%rax
    518b:	48 c1 e0 05          	shl    $0x5,%rax
    518f:	48 01 c7             	add    %rax,%rdi
    5192:	83 3f 01             	cmpl   $0x1,(%rdi)
    5195:	75 19                	jne    51b0 <posix_core_clean_up+0x58>
		if (pthread_cancel(threads_table[i].thread)) {
    5197:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    519b:	e8 80 d2 ff ff       	callq  2420 <pthread_cancel@plt>
    51a0:	85 c0                	test   %eax,%eax
    51a2:	74 0c                	je     51b0 <posix_core_clean_up+0x58>
			posix_print_warning(
    51a4:	89 de                	mov    %ebx,%esi
    51a6:	48 89 ef             	mov    %rbp,%rdi
    51a9:	31 c0                	xor    %eax,%eax
    51ab:	e8 f4 10 00 00       	callq  62a4 <posix_print_warning>
	for (int i = 0; i < threads_table_size; i++) {
    51b0:	ff c3                	inc    %ebx
    51b2:	eb c5                	jmp    5179 <posix_core_clean_up+0x21>
				i);
		}
		/* LCOV_EXCL_STOP */
	}

	free(threads_table);
    51b4:	e8 f7 d1 ff ff       	callq  23b0 <free@plt>
	threads_table = NULL;
    51b9:	48 c7 05 74 9b 00 00 	movq   $0x0,0x9b74(%rip)        # ed38 <threads_table>
    51c0:	00 00 00 00 
}
    51c4:	58                   	pop    %rax
    51c5:	5b                   	pop    %rbx
    51c6:	5d                   	pop    %rbp
    51c7:	c3                   	retq   
    51c8:	c3                   	retq   

00000000000051c9 <posix_abort_thread>:


void posix_abort_thread(int thread_idx)
{
    51c9:	f3 0f 1e fa          	endbr64 
	if (threads_table[thread_idx].state != USED) { /* LCOV_EXCL_BR_LINE */
    51cd:	48 63 ff             	movslq %edi,%rdi
    51d0:	48 c1 e7 05          	shl    $0x5,%rdi
    51d4:	48 03 3d 5d 9b 00 00 	add    0x9b5d(%rip),%rdi        # ed38 <threads_table>
    51db:	83 3f 01             	cmpl   $0x1,(%rdi)
    51de:	75 06                	jne    51e6 <posix_abort_thread+0x1d>

	PC_DEBUG("Aborting not scheduled thread [%i] %i\n",
		threads_table[thread_idx].thead_cnt,
		thread_idx);

	threads_table[thread_idx].state = ABORTING;
    51e0:	c7 07 02 00 00 00    	movl   $0x2,(%rdi)
	 * mutex or awakes on the condition.
	 * Note that even if we would pthread_cancel() the thread here, that
	 * would be the case, but with a pthread_cancel() the mutex state would
	 * be uncontrolled
	 */
}
    51e6:	c3                   	retq   

00000000000051e7 <z_impl_k_thread_abort>:


#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
    51e7:	f3 0f 1e fa          	endbr64 
    51eb:	41 55                	push   %r13
    51ed:	41 54                	push   %r12
    51ef:	55                   	push   %rbp
    51f0:	48 89 fd             	mov    %rdi,%rbp
    51f3:	53                   	push   %rbx
    51f4:	52                   	push   %rdx
	unsigned int key;
	int thread_idx;

	posix_thread_status_t *tstatus =
    51f5:	48 8b 5f 50          	mov    0x50(%rdi),%rbx
					(posix_thread_status_t *)
					thread->callee_saved.thread_status;

	thread_idx = tstatus->thread_idx;
    51f9:	44 8b 6b 20          	mov    0x20(%rbx),%r13d
	return key == false;
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	return posix_irq_lock();
    51fd:	e8 32 0c 00 00       	callq  5e34 <posix_irq_lock>
    5202:	41 89 c4             	mov    %eax,%r12d

	key = irq_lock();

	if (_current == thread) {
    5205:	48 8d 05 b4 9a 00 00 	lea    0x9ab4(%rip),%rax        # ecc0 <_kernel>
    520c:	48 39 68 10          	cmp    %rbp,0x10(%rax)
    5210:	75 34                	jne    5246 <z_impl_k_thread_abort+0x5f>
		if (tstatus->aborted == 0) { /* LCOV_EXCL_BR_LINE */
    5212:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    5216:	75 09                	jne    5221 <z_impl_k_thread_abort+0x3a>
			tstatus->aborted = 1;
    5218:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
    521f:	eb 11                	jmp    5232 <z_impl_k_thread_abort+0x4b>
		} else {
			posix_print_warning(/* LCOV_EXCL_LINE */
    5221:	44 89 ee             	mov    %r13d,%esi
    5224:	48 8d 3d 41 44 00 00 	lea    0x4441(%rip),%rdi        # 966c <default_cmd+0x40c>
    522b:	31 c0                	xor    %eax,%eax
    522d:	e8 72 10 00 00       	callq  62a4 <posix_print_warning>
				PREFIX"The kernel is trying to abort and swap "
				"out of an already aborted thread %i. This "
				"should NOT have happened\n",
				thread_idx);
		}
		threads_table[thread_idx].state = ABORTING;
    5232:	49 63 c5             	movslq %r13d,%rax
    5235:	48 c1 e0 05          	shl    $0x5,%rax
    5239:	48 03 05 f8 9a 00 00 	add    0x9af8(%rip),%rax        # ed38 <threads_table>
    5240:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
			threads_table[thread_idx].thead_cnt,
			thread_idx,
			__func__);
	}

	z_thread_abort(thread);
    5246:	48 89 ef             	mov    %rbp,%rdi
    5249:	e8 60 2f 00 00       	callq  81ae <z_thread_abort>

	if (tstatus->aborted == 0) {
    524e:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    5252:	75 0f                	jne    5263 <z_impl_k_thread_abort+0x7c>
		PC_DEBUG("%s aborting now [%i] %i\n",
			__func__,
			threads_table[thread_idx].thead_cnt,
			thread_idx);

		tstatus->aborted = 1;
    5254:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
		posix_abort_thread(thread_idx);
    525b:	44 89 ef             	mov    %r13d,%edi
    525e:	e8 66 ff ff ff       	callq  51c9 <posix_abort_thread>
			thread_idx);
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
}
    5263:	58                   	pop    %rax
	z_reschedule_irqlock(key);
    5264:	44 89 e7             	mov    %r12d,%edi
}
    5267:	5b                   	pop    %rbx
    5268:	5d                   	pop    %rbp
    5269:	41 5c                	pop    %r12
    526b:	41 5d                	pop    %r13
	z_reschedule_irqlock(key);
    526d:	e9 2f 28 00 00       	jmpq   7aa1 <z_reschedule_irqlock>

0000000000005272 <arch_swap>:
#include "irq.h"
#include "kswap.h"
#include <power/power.h>

int arch_swap(unsigned int key)
{
    5272:	f3 0f 1e fa          	endbr64 
    5276:	53                   	push   %rbx
	 * threads => those are all nicely kept by the native OS kernel
	 */
#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif
	_current->callee_saved.key = key;
    5277:	48 8d 1d 42 9a 00 00 	lea    0x9a42(%rip),%rbx        # ecc0 <_kernel>
    527e:	48 8b 43 10          	mov    0x10(%rbx),%rax
	 * arch_thread_return_value_set()
	 */

	posix_thread_status_t *ready_thread_ptr =
		(posix_thread_status_t *)
		_kernel.ready_q.cache->callee_saved.thread_status;
    5282:	48 8b 53 38          	mov    0x38(%rbx),%rdx
	_current->callee_saved.key = key;
    5286:	89 78 48             	mov    %edi,0x48(%rax)
	posix_thread_status_t *ready_thread_ptr =
    5289:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
	_current->callee_saved.retval = -EAGAIN;
    528d:	c7 40 4c f5 ff ff ff 	movl   $0xfffffff5,0x4c(%rax)

	posix_thread_status_t *this_thread_ptr  =
    5294:	48 8b 40 50          	mov    0x50(%rax),%rax
		(posix_thread_status_t *)
		_current->callee_saved.thread_status;


	_current = _kernel.ready_q.cache;
    5298:	48 89 53 10          	mov    %rdx,0x10(%rbx)
	 * Here a "real" arch would load all processor registers for the thread
	 * to run. In this arch case, we just block this thread until allowed
	 * to run later, and signal to whomever is allowed to run to
	 * continue.
	 */
	posix_swap(ready_thread_ptr->thread_idx,
    529c:	8b 79 20             	mov    0x20(%rcx),%edi
    529f:	8b 70 20             	mov    0x20(%rax),%esi
    52a2:	e8 fa fc ff ff       	callq  4fa1 <posix_swap>
		this_thread_ptr->thread_idx);

	/* When we continue, _kernel->current points back to this thread */

	irq_unlock(_current->callee_saved.key);
    52a7:	48 8b 43 10          	mov    0x10(%rbx),%rax
}


static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	posix_irq_unlock(key);
    52ab:	8b 78 48             	mov    0x48(%rax),%edi
    52ae:	e8 8f 0b 00 00       	callq  5e42 <posix_irq_unlock>

	return _current->callee_saved.retval;
    52b3:	48 8b 43 10          	mov    0x10(%rbx),%rax
}
    52b7:	5b                   	pop    %rbx
	return _current->callee_saved.retval;
    52b8:	8b 40 4c             	mov    0x4c(%rax),%eax
}
    52bb:	c3                   	retq   

00000000000052bc <arch_switch_to_main_thread>:
 * Note that we will never come back to this thread: posix_main_thread_start()
 * does never return.
 */
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    52bc:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(stack_ptr);
	ARG_UNUSED(_main);

	posix_thread_status_t *ready_thread_ptr =
			(posix_thread_status_t *)
			_kernel.ready_q.cache->callee_saved.thread_status;
    52c0:	48 8d 05 f9 99 00 00 	lea    0x99f9(%rip),%rax        # ecc0 <_kernel>
    52c7:	48 8b 50 38          	mov    0x38(%rax),%rdx
	posix_thread_status_t *ready_thread_ptr =
    52cb:	48 8b 4a 50          	mov    0x50(%rdx),%rcx

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif

	_current = _kernel.ready_q.cache;
    52cf:	48 89 50 10          	mov    %rdx,0x10(%rax)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
#endif

	posix_main_thread_start(ready_thread_ptr->thread_idx);
    52d3:	8b 79 20             	mov    0x20(%rcx),%edi
    52d6:	e9 0d fd ff ff       	jmpq   4fe8 <posix_main_thread_start>

00000000000052db <arch_new_thread>:
 * pthreads stack and therefore we ignore the stack size
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    52db:	f3 0f 1e fa          	endbr64 

	/* z_thread_entry() arguments */
	thread_status->entry_point = entry;
	thread_status->arg1 = p1;
	thread_status->arg2 = p2;
	thread_status->arg3 = p3;
    52df:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
{
    52e4:	49 89 fa             	mov    %rdi,%r10
	thread_status = Z_STACK_PTR_TO_FRAME(posix_thread_status_t, stack_ptr);
    52e7:	48 8d 7a d8          	lea    -0x28(%rdx),%rdi
	thread_status->entry_point = entry;
    52eb:	48 89 4a d8          	mov    %rcx,-0x28(%rdx)
	thread_status->arg1 = p1;
    52ef:	4c 89 42 e0          	mov    %r8,-0x20(%rdx)
	thread_status->arg2 = p2;
    52f3:	4c 89 4a e8          	mov    %r9,-0x18(%rdx)
	thread_status->arg3 = p3;
    52f7:	48 89 42 f0          	mov    %rax,-0x10(%rdx)
#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
	thread_status->aborted = 0;
    52fb:	c7 42 fc 00 00 00 00 	movl   $0x0,-0x4(%rdx)
#endif

	thread->callee_saved.thread_status = thread_status;
    5302:	49 89 7a 50          	mov    %rdi,0x50(%r10)

	posix_new_thread(thread_status);
    5306:	e9 0e fd ff ff       	jmpq   5019 <posix_new_thread>

000000000000530b <posix_new_thread_pre_start>:
}

void posix_new_thread_pre_start(void)
{
    530b:	f3 0f 1e fa          	endbr64 
	posix_irq_full_unlock();
    530f:	e9 37 0b 00 00       	jmpq   5e4b <posix_irq_full_unlock>

0000000000005314 <pc_safe_call>:
	if (unlikely(test)) {
    5314:	85 ff                	test   %edi,%edi
    5316:	74 0e                	je     5326 <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5318:	48 8d 3d 09 42 00 00 	lea    0x4209(%rip),%rdi        # 9528 <default_cmd+0x2c8>
    531f:	31 c0                	xor    %eax,%eax
    5321:	e9 a5 0e 00 00       	jmpq   61cb <posix_print_error_and_exit>
}
    5326:	c3                   	retq   

0000000000005327 <zephyr_wrapper>:
/**
 * Just a wrapper function to call Zephyr's z_cstart()
 * called from posix_boot_cpu()
 */
static void *zephyr_wrapper(void *a)
{
    5327:	f3 0f 1e fa          	endbr64 
    532b:	50                   	push   %rax
    532c:	58                   	pop    %rax
	/* Ensure posix_boot_cpu has reached the cond loop */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    532d:	48 8d 3d 0c 93 00 00 	lea    0x930c(%rip),%rdi        # e640 <mtx_cpu>
{
    5334:	50                   	push   %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5335:	e8 76 d3 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    533a:	48 8d 35 a7 43 00 00 	lea    0x43a7(%rip),%rsi        # 96e8 <default_cmd+0x488>
    5341:	89 c7                	mov    %eax,%edi
    5343:	e8 cc ff ff ff       	callq  5314 <pc_safe_call>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5348:	48 8d 3d f1 92 00 00 	lea    0x92f1(%rip),%rdi        # e640 <mtx_cpu>
    534f:	e8 4c d2 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    5354:	48 8d 35 aa 43 00 00 	lea    0x43aa(%rip),%rsi        # 9705 <default_cmd+0x4a5>
    535b:	89 c7                	mov    %eax,%edi
    535d:	e8 b2 ff ff ff       	callq  5314 <pc_safe_call>

		PS_DEBUG("Zephyr init started (%lu)\n",
			zephyr_thread);
#endif

	posix_init_multithreading();
    5362:	e8 8c fd ff ff       	callq  50f3 <posix_init_multithreading>

	/* Start Zephyr: */
	z_cstart();
    5367:	e8 13 23 00 00       	callq  767f <z_cstart>

000000000000536c <posix_is_cpu_running>:
{
    536c:	f3 0f 1e fa          	endbr64 
	return !cpu_halted;
    5370:	8a 05 06 71 00 00    	mov    0x7106(%rip),%al        # c47c <cpu_halted>
    5376:	83 f0 01             	xor    $0x1,%eax
    5379:	0f b6 c0             	movzbl %al,%eax
}
    537c:	c3                   	retq   

000000000000537d <posix_change_cpu_state_and_wait>:
{
    537d:	f3 0f 1e fa          	endbr64 
    5381:	55                   	push   %rbp
    5382:	89 fd                	mov    %edi,%ebp
    5384:	53                   	push   %rbx
    5385:	89 fb                	mov    %edi,%ebx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5387:	48 8d 3d b2 92 00 00 	lea    0x92b2(%rip),%rdi        # e640 <mtx_cpu>
{
    538e:	52                   	push   %rdx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    538f:	e8 1c d3 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5394:	48 8d 35 4d 43 00 00 	lea    0x434d(%rip),%rsi        # 96e8 <default_cmd+0x488>
    539b:	89 c7                	mov    %eax,%edi
    539d:	e8 72 ff ff ff       	callq  5314 <pc_safe_call>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    53a2:	48 8d 3d d7 92 00 00 	lea    0x92d7(%rip),%rdi        # e680 <cond_cpu>
	cpu_halted = halted;
    53a9:	88 1d cd 70 00 00    	mov    %bl,0x70cd(%rip)        # c47c <cpu_halted>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    53af:	48 8d 1d 8a 92 00 00 	lea    0x928a(%rip),%rbx        # e640 <mtx_cpu>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    53b6:	e8 55 d0 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    53bb:	48 8d 35 62 43 00 00 	lea    0x4362(%rip),%rsi        # 9724 <default_cmd+0x4c4>
    53c2:	89 c7                	mov    %eax,%edi
    53c4:	e8 4b ff ff ff       	callq  5314 <pc_safe_call>
	while (cpu_halted == halted) {
    53c9:	40 38 2d ac 70 00 00 	cmp    %bpl,0x70ac(%rip)        # c47c <cpu_halted>
    53d0:	75 11                	jne    53e3 <posix_change_cpu_state_and_wait+0x66>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    53d2:	48 89 de             	mov    %rbx,%rsi
    53d5:	48 8d 3d a4 92 00 00 	lea    0x92a4(%rip),%rdi        # e680 <cond_cpu>
    53dc:	e8 bf d0 ff ff       	callq  24a0 <pthread_cond_wait@plt>
    53e1:	eb e6                	jmp    53c9 <posix_change_cpu_state_and_wait+0x4c>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    53e3:	48 8d 3d 56 92 00 00 	lea    0x9256(%rip),%rdi        # e640 <mtx_cpu>
    53ea:	e8 b1 d1 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    53ef:	48 8d 35 0f 43 00 00 	lea    0x430f(%rip),%rsi        # 9705 <default_cmd+0x4a5>
    53f6:	89 c7                	mov    %eax,%edi
}
    53f8:	58                   	pop    %rax
    53f9:	5b                   	pop    %rbx
    53fa:	5d                   	pop    %rbp
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    53fb:	e9 14 ff ff ff       	jmpq   5314 <pc_safe_call>

0000000000005400 <posix_interrupt_raised>:
{
    5400:	f3 0f 1e fa          	endbr64 
    5404:	51                   	push   %rcx
	posix_change_cpu_state_and_wait(false);
    5405:	31 ff                	xor    %edi,%edi
    5407:	e8 71 ff ff ff       	callq  537d <posix_change_cpu_state_and_wait>
	if (soc_terminate) {
    540c:	80 3d 2b 9a 00 00 00 	cmpb   $0x0,0x9a2b(%rip)        # ee3e <soc_terminate>
    5413:	74 08                	je     541d <posix_interrupt_raised+0x1d>
		posix_exit(0);
    5415:	31 ff                	xor    %edi,%edi
}
    5417:	5a                   	pop    %rdx
		posix_exit(0);
    5418:	e9 b2 0c 00 00       	jmpq   60cf <posix_exit>
}
    541d:	58                   	pop    %rax
    541e:	c3                   	retq   

000000000000541f <posix_halt_cpu>:
{
    541f:	f3 0f 1e fa          	endbr64 
    5423:	50                   	push   %rax
	posix_change_cpu_state_and_wait(true);
    5424:	bf 01 00 00 00       	mov    $0x1,%edi
    5429:	e8 4f ff ff ff       	callq  537d <posix_change_cpu_state_and_wait>
}
    542e:	5a                   	pop    %rdx
	posix_irq_handler();
    542f:	e9 c6 08 00 00       	jmpq   5cfa <posix_irq_handler>

0000000000005434 <posix_boot_cpu>:
 * The HW models will call this function to "boot" the CPU
 * == spawn the Zephyr init thread, which will then spawn
 * anything it wants, and run until the CPU is set back to idle again
 */
void posix_boot_cpu(void)
{
    5434:	f3 0f 1e fa          	endbr64 
    5438:	53                   	push   %rbx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5439:	48 8d 3d 00 92 00 00 	lea    0x9200(%rip),%rdi        # e640 <mtx_cpu>
	/* Create a thread for Zephyr init: */
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));

	/* And we wait until Zephyr has run til completion (has gone to idle) */
	while (cpu_halted == false) {
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5440:	48 8d 1d f9 91 00 00 	lea    0x91f9(%rip),%rbx        # e640 <mtx_cpu>
{
    5447:	48 83 ec 10          	sub    $0x10,%rsp
    544b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5452:	00 00 
    5454:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5459:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    545b:	e8 50 d2 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5460:	48 8d 35 81 42 00 00 	lea    0x4281(%rip),%rsi        # 96e8 <default_cmd+0x488>
    5467:	89 c7                	mov    %eax,%edi
    5469:	e8 a6 fe ff ff       	callq  5314 <pc_safe_call>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    546e:	48 89 e7             	mov    %rsp,%rdi
    5471:	31 c9                	xor    %ecx,%ecx
    5473:	31 f6                	xor    %esi,%esi
    5475:	48 8d 15 ab fe ff ff 	lea    -0x155(%rip),%rdx        # 5327 <zephyr_wrapper>
	cpu_halted = false;
    547c:	c6 05 f9 6f 00 00 00 	movb   $0x0,0x6ff9(%rip)        # c47c <cpu_halted>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    5483:	e8 38 cf ff ff       	callq  23c0 <pthread_create@plt>
    5488:	48 8d 35 b7 42 00 00 	lea    0x42b7(%rip),%rsi        # 9746 <default_cmd+0x4e6>
    548f:	89 c7                	mov    %eax,%edi
    5491:	e8 7e fe ff ff       	callq  5314 <pc_safe_call>
	while (cpu_halted == false) {
    5496:	80 3d df 6f 00 00 00 	cmpb   $0x0,0x6fdf(%rip)        # c47c <cpu_halted>
    549d:	75 11                	jne    54b0 <posix_boot_cpu+0x7c>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    549f:	48 89 de             	mov    %rbx,%rsi
    54a2:	48 8d 3d d7 91 00 00 	lea    0x91d7(%rip),%rdi        # e680 <cond_cpu>
    54a9:	e8 f2 cf ff ff       	callq  24a0 <pthread_cond_wait@plt>
    54ae:	eb e6                	jmp    5496 <posix_boot_cpu+0x62>
	}
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    54b0:	48 8d 3d 89 91 00 00 	lea    0x9189(%rip),%rdi        # e640 <mtx_cpu>
    54b7:	e8 e4 d0 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    54bc:	48 8d 35 42 42 00 00 	lea    0x4242(%rip),%rsi        # 9705 <default_cmd+0x4a5>
    54c3:	89 c7                	mov    %eax,%edi
    54c5:	e8 4a fe ff ff       	callq  5314 <pc_safe_call>

	if (soc_terminate) {
    54ca:	80 3d 6d 99 00 00 00 	cmpb   $0x0,0x996d(%rip)        # ee3e <soc_terminate>
    54d1:	74 07                	je     54da <posix_boot_cpu+0xa6>
		posix_exit(0);
    54d3:	31 ff                	xor    %edi,%edi
    54d5:	e8 f5 0b 00 00       	callq  60cf <posix_exit>
	}
}
    54da:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    54df:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    54e6:	00 00 
    54e8:	74 05                	je     54ef <posix_boot_cpu+0xbb>
    54ea:	e8 c1 cf ff ff       	callq  24b0 <__stack_chk_fail@plt>
    54ef:	48 83 c4 10          	add    $0x10,%rsp
    54f3:	5b                   	pop    %rbx
    54f4:	c3                   	retq   

00000000000054f5 <run_native_tasks>:
 * @brief Run the set of special native tasks corresponding to the given level
 *
 * @param level One of _NATIVE_*_LEVEL as defined in soc.h
 */
void run_native_tasks(int level)
{
    54f5:	f3 0f 1e fa          	endbr64 
		__native_tasks_end
	};

	void (**fptr)(void);

	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    54f9:	48 8d 05 60 66 00 00 	lea    0x6660(%rip),%rax        # bb60 <native_pre_tasks.6323>
    5500:	48 63 d7             	movslq %edi,%rdx
{
    5503:	41 54                	push   %r12
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    5505:	ff c7                	inc    %edi
{
    5507:	55                   	push   %rbp
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    5508:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    550c:	49 89 c4             	mov    %rax,%r12
{
    550f:	53                   	push   %rbx
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    5510:	48 63 df             	movslq %edi,%rbx
    5513:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    5517:	76 11                	jbe    552a <run_native_tasks+0x35>
		fptr++) {
		if (*fptr) { /* LCOV_EXCL_BR_LINE */
    5519:	48 8b 45 00          	mov    0x0(%rbp),%rax
    551d:	48 85 c0             	test   %rax,%rax
    5520:	74 02                	je     5524 <run_native_tasks+0x2f>
			(*fptr)();
    5522:	ff d0                	callq  *%rax
		fptr++) {
    5524:	48 83 c5 08          	add    $0x8,%rbp
    5528:	eb e9                	jmp    5513 <run_native_tasks+0x1e>
		}
	}
}
    552a:	5b                   	pop    %rbx
    552b:	5d                   	pop    %rbp
    552c:	41 5c                	pop    %r12
    552e:	c3                   	retq   

000000000000552f <posix_soc_clean_up>:
 * Clean up all memory allocated by the SOC and POSIX core
 *
 * This function can be called from both HW and SW threads
 */
void posix_soc_clean_up(void)
{
    552f:	f3 0f 1e fa          	endbr64 
    5533:	51                   	push   %rcx
	 * If we are being called from a HW thread we can cleanup
	 *
	 * Otherwise (!cpu_halted) we give back control to the HW thread and
	 * tell it to terminate ASAP
	 */
	if (cpu_halted) {
    5534:	80 3d 41 6f 00 00 00 	cmpb   $0x0,0x6f41(%rip)        # c47c <cpu_halted>
    553b:	74 10                	je     554d <posix_soc_clean_up+0x1e>

		posix_core_clean_up();
    553d:	e8 16 fc ff ff       	callq  5158 <posix_core_clean_up>
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    5542:	bf 04 00 00 00       	mov    $0x4,%edi
			 * won't really wait 1 second
			 */
		}
	}
	/* LCOV_EXCL_STOP */
}
    5547:	5a                   	pop    %rdx
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    5548:	e9 a8 ff ff ff       	jmpq   54f5 <run_native_tasks>
	} else if (soc_terminate == false) {
    554d:	80 3d ea 98 00 00 00 	cmpb   $0x0,0x98ea(%rip)        # ee3e <soc_terminate>
    5554:	75 68                	jne    55be <posix_soc_clean_up+0x8f>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5556:	48 8d 3d e3 90 00 00 	lea    0x90e3(%rip),%rdi        # e640 <mtx_cpu>
		soc_terminate = true;
    555d:	c6 05 da 98 00 00 01 	movb   $0x1,0x98da(%rip)        # ee3e <soc_terminate>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5564:	e8 47 d1 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5569:	48 8d 35 78 41 00 00 	lea    0x4178(%rip),%rsi        # 96e8 <default_cmd+0x488>
    5570:	89 c7                	mov    %eax,%edi
    5572:	e8 9d fd ff ff       	callq  5314 <pc_safe_call>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    5577:	48 8d 3d 02 91 00 00 	lea    0x9102(%rip),%rdi        # e680 <cond_cpu>
		cpu_halted = true;
    557e:	c6 05 f7 6e 00 00 01 	movb   $0x1,0x6ef7(%rip)        # c47c <cpu_halted>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    5585:	e8 86 ce ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    558a:	48 8d 35 93 41 00 00 	lea    0x4193(%rip),%rsi        # 9724 <default_cmd+0x4c4>
    5591:	89 c7                	mov    %eax,%edi
    5593:	e8 7c fd ff ff       	callq  5314 <pc_safe_call>
		PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5598:	48 8d 3d a1 90 00 00 	lea    0x90a1(%rip),%rdi        # e640 <mtx_cpu>
    559f:	e8 fc cf ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    55a4:	48 8d 35 5a 41 00 00 	lea    0x415a(%rip),%rsi        # 9705 <default_cmd+0x4a5>
    55ab:	89 c7                	mov    %eax,%edi
    55ad:	e8 62 fd ff ff       	callq  5314 <pc_safe_call>
			sleep(1);
    55b2:	bf 01 00 00 00       	mov    $0x1,%edi
    55b7:	e8 e4 d0 ff ff       	callq  26a0 <sleep@plt>
		while (1) {
    55bc:	eb f4                	jmp    55b2 <posix_soc_clean_up+0x83>
}
    55be:	58                   	pop    %rax
    55bf:	c3                   	retq   

00000000000055c0 <hwm_signal_end_handler>:

/**
 * Handler for SIGTERM and SIGINT
 */
void hwm_signal_end_handler(int sig)
{
    55c0:	f3 0f 1e fa          	endbr64 
	signaled_end = 1;
    55c4:	c7 05 3e 98 00 00 01 	movl   $0x1,0x983e(%rip)        # ee0c <signaled_end>
    55cb:	00 00 00 
}
    55ce:	c3                   	retq   

00000000000055cf <hwm_set_sig_handler>:
 *
 * Note that SA_RESETHAND requires either _POSIX_C_SOURCE>=200809 or
 * _XOPEN_SOURCE>=500
 */
void hwm_set_sig_handler(void)
{
    55cf:	f3 0f 1e fa          	endbr64 
    55d3:	55                   	push   %rbp
    55d4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    55db:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    55e2:	00 00 
    55e4:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
    55eb:	00 
    55ec:	31 c0                	xor    %eax,%eax
	struct sigaction act;

	act.sa_handler = hwm_signal_end_handler;
    55ee:	48 8d 05 cb ff ff ff 	lea    -0x35(%rip),%rax        # 55c0 <hwm_signal_end_handler>
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    55f5:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
	act.sa_handler = hwm_signal_end_handler;
    55fa:	48 89 04 24          	mov    %rax,(%rsp)
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    55fe:	e8 7d cf ff ff       	callq  2580 <sigemptyset@plt>
	if (unlikely(test)) {
    5603:	85 c0                	test   %eax,%eax
    5605:	74 15                	je     561c <hwm_set_sig_handler+0x4d>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5607:	48 8d 35 73 41 00 00 	lea    0x4173(%rip),%rsi        # 9781 <default_cmd+0x521>
    560e:	48 8d 3d 13 3f 00 00 	lea    0x3f13(%rip),%rdi        # 9528 <default_cmd+0x2c8>
    5615:	31 c0                	xor    %eax,%eax
    5617:	e8 af 0b 00 00       	callq  61cb <posix_print_error_and_exit>

	act.sa_flags = SA_RESETHAND;

	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    561c:	48 89 e5             	mov    %rsp,%rbp
    561f:	31 d2                	xor    %edx,%edx
    5621:	bf 0f 00 00 00       	mov    $0xf,%edi
	act.sa_flags = SA_RESETHAND;
    5626:	c7 84 24 88 00 00 00 	movl   $0x80000000,0x88(%rsp)
    562d:	00 00 00 80 
	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    5631:	48 89 ee             	mov    %rbp,%rsi
    5634:	e8 07 ce ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    5639:	85 c0                	test   %eax,%eax
    563b:	74 15                	je     5652 <hwm_set_sig_handler+0x83>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    563d:	48 8d 35 57 41 00 00 	lea    0x4157(%rip),%rsi        # 979b <default_cmd+0x53b>
    5644:	48 8d 3d dd 3e 00 00 	lea    0x3edd(%rip),%rdi        # 9528 <default_cmd+0x2c8>
    564b:	31 c0                	xor    %eax,%eax
    564d:	e8 79 0b 00 00       	callq  61cb <posix_print_error_and_exit>
	PC_SAFE_CALL(sigaction(SIGINT, &act, NULL));
    5652:	31 d2                	xor    %edx,%edx
    5654:	48 89 ee             	mov    %rbp,%rsi
    5657:	bf 02 00 00 00       	mov    $0x2,%edi
    565c:	e8 df cd ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    5661:	85 c0                	test   %eax,%eax
    5663:	74 15                	je     567a <hwm_set_sig_handler+0xab>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5665:	48 8d 35 4e 41 00 00 	lea    0x414e(%rip),%rsi        # 97ba <default_cmd+0x55a>
    566c:	48 8d 3d b5 3e 00 00 	lea    0x3eb5(%rip),%rdi        # 9528 <default_cmd+0x2c8>
    5673:	31 c0                	xor    %eax,%eax
    5675:	e8 51 0b 00 00       	callq  61cb <posix_print_error_and_exit>
}
    567a:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    5681:	00 
    5682:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5689:	00 00 
    568b:	74 05                	je     5692 <hwm_set_sig_handler+0xc3>
    568d:	e8 1e ce ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5692:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    5699:	5d                   	pop    %rbp
    569a:	c3                   	retq   

000000000000569b <hwm_find_next_timer>:
/**
 * Find in between all timers which is the next one
 * and update  next_timer_* accordingly
 */
void hwm_find_next_timer(void)
{
    569b:	f3 0f 1e fa          	endbr64 
	next_timer_index = 0;
	next_timer_time  = *Timer_list[0];
    569f:	48 8d 05 e2 96 00 00 	lea    0x96e2(%rip),%rax        # ed88 <hw_timer_timer>
	next_timer_index = 0;
    56a6:	c7 05 c0 6d 00 00 00 	movl   $0x0,0x6dc0(%rip)        # c470 <next_timer_index>
    56ad:	00 00 00 
	next_timer_time  = *Timer_list[0];
    56b0:	48 8b 10             	mov    (%rax),%rdx

	for (unsigned int i = 1; i < NUMBER_OF_TIMERS ; i++) {
		if (next_timer_time > *Timer_list[i]) {
    56b3:	48 8d 05 a6 6d 00 00 	lea    0x6da6(%rip),%rax        # c460 <irq_ctrl_timer>
    56ba:	48 8b 00             	mov    (%rax),%rax
	next_timer_time  = *Timer_list[0];
    56bd:	48 89 15 7c 96 00 00 	mov    %rdx,0x967c(%rip)        # ed40 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    56c4:	48 39 c2             	cmp    %rax,%rdx
    56c7:	76 11                	jbe    56da <hwm_find_next_timer+0x3f>
			next_timer_index = i;
    56c9:	c7 05 9d 6d 00 00 01 	movl   $0x1,0x6d9d(%rip)        # c470 <next_timer_index>
    56d0:	00 00 00 
			next_timer_time = *Timer_list[i];
    56d3:	48 89 05 66 96 00 00 	mov    %rax,0x9666(%rip)        # ed40 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    56da:	48 8d 05 f7 96 00 00 	lea    0x96f7(%rip),%rax        # edd8 <hw_counter_timer>
    56e1:	48 8b 00             	mov    (%rax),%rax
    56e4:	48 3b 05 55 96 00 00 	cmp    0x9655(%rip),%rax        # ed40 <next_timer_time>
    56eb:	73 11                	jae    56fe <hwm_find_next_timer+0x63>
			next_timer_index = i;
    56ed:	c7 05 79 6d 00 00 02 	movl   $0x2,0x6d79(%rip)        # c470 <next_timer_index>
    56f4:	00 00 00 
			next_timer_time = *Timer_list[i];
    56f7:	48 89 05 42 96 00 00 	mov    %rax,0x9642(%rip)        # ed40 <next_timer_time>
		}
	}
}
    56fe:	c3                   	retq   

00000000000056ff <hwm_main_loop>:
/**
 * Entry point for the HW models
 * The HW models execute in an infinite loop until terminated
 */
void hwm_main_loop(void)
{
    56ff:	f3 0f 1e fa          	endbr64 
    5703:	48 83 ec 18          	sub    $0x18,%rsp
	if (next_timer_time >= simu_time) { /* LCOV_EXCL_BR_LINE */
    5707:	48 8b 35 32 96 00 00 	mov    0x9632(%rip),%rsi        # ed40 <next_timer_time>
    570e:	48 8b 15 33 96 00 00 	mov    0x9633(%rip),%rdx        # ed48 <simu_time>
    5715:	48 39 d6             	cmp    %rdx,%rsi
    5718:	72 09                	jb     5723 <hwm_main_loop+0x24>
		simu_time = next_timer_time;
    571a:	48 89 35 27 96 00 00 	mov    %rsi,0x9627(%rip)        # ed48 <simu_time>
    5721:	eb 14                	jmp    5737 <hwm_main_loop+0x38>
		posix_print_warning("next_timer_time corrupted (%"PRIu64"<= %"
    5723:	8b 0d 47 6d 00 00    	mov    0x6d47(%rip),%ecx        # c470 <next_timer_index>
    5729:	48 8d 3d a8 40 00 00 	lea    0x40a8(%rip),%rdi        # 97d8 <default_cmd+0x578>
    5730:	31 c0                	xor    %eax,%eax
    5732:	e8 6d 0b 00 00       	callq  62a4 <posix_print_warning>
	if (signaled_end || (simu_time > end_of_time)) {
    5737:	8b 15 cf 96 00 00    	mov    0x96cf(%rip),%edx        # ee0c <signaled_end>
    573d:	48 8b 05 04 96 00 00 	mov    0x9604(%rip),%rax        # ed48 <simu_time>
    5744:	85 d2                	test   %edx,%edx
    5746:	75 09                	jne    5751 <hwm_main_loop+0x52>
    5748:	48 39 05 01 6d 00 00 	cmp    %rax,0x6d01(%rip)        # c450 <end_of_time>
    574f:	73 36                	jae    5787 <hwm_main_loop+0x88>
				((long double)simu_time)/1.0e6);
    5751:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    5756:	df 6c 24 08          	fildll 0x8(%rsp)
    575a:	48 85 c0             	test   %rax,%rax
    575d:	79 06                	jns    5765 <hwm_main_loop+0x66>
    575f:	d8 05 3f 3c 00 00    	fadds  0x3c3f(%rip)        # 93a4 <default_cmd+0x144>
		posix_print_trace("\nStopped at %.3Lfs\n",
    5765:	d8 35 3d 3c 00 00    	fdivs  0x3c3d(%rip)        # 93a8 <default_cmd+0x148>
    576b:	50                   	push   %rax
    576c:	48 8d 3d 9a 40 00 00 	lea    0x409a(%rip),%rdi        # 980d <default_cmd+0x5ad>
    5773:	50                   	push   %rax
    5774:	31 c0                	xor    %eax,%eax
    5776:	db 3c 24             	fstpt  (%rsp)
    5779:	e8 f5 0b 00 00       	callq  6373 <posix_print_trace>
    577e:	5a                   	pop    %rdx
		posix_exit(0);
    577f:	31 ff                	xor    %edi,%edi
		posix_print_trace("\nStopped at %.3Lfs\n",
    5781:	59                   	pop    %rcx
		posix_exit(0);
    5782:	e8 48 09 00 00       	callq  60cf <posix_exit>
	while (1) {
		hwm_sleep_until_next_timer();

		switch (next_timer_index) { /* LCOV_EXCL_BR_LINE */
    5787:	8b 05 e3 6c 00 00    	mov    0x6ce3(%rip),%eax        # c470 <next_timer_index>
    578d:	83 f8 01             	cmp    $0x1,%eax
    5790:	74 10                	je     57a2 <hwm_main_loop+0xa3>
    5792:	83 f8 02             	cmp    $0x2,%eax
    5795:	74 12                	je     57a9 <hwm_main_loop+0xaa>
    5797:	85 c0                	test   %eax,%eax
    5799:	75 15                	jne    57b0 <hwm_main_loop+0xb1>
		case HWTIMER:
			hwtimer_timer_reached();
    579b:	e8 02 03 00 00       	callq  5aa2 <hwtimer_timer_reached>
			break;
    57a0:	eb 1c                	jmp    57be <hwm_main_loop+0xbf>
		case IRQCNT:
			hw_irq_ctrl_timer_triggered();
    57a2:	e8 11 09 00 00       	callq  60b8 <hw_irq_ctrl_timer_triggered>
			break;
    57a7:	eb 15                	jmp    57be <hwm_main_loop+0xbf>
		case HW_COUNTER:
			hw_counter_triggered();
    57a9:	e8 29 16 00 00       	callq  6dd7 <hw_counter_triggered>
			break;
    57ae:	eb 0e                	jmp    57be <hwm_main_loop+0xbf>
			sdl_handle_events();
			break;
#endif
		default:
			/* LCOV_EXCL_START */
			posix_print_error_and_exit(
    57b0:	48 8d 3d 6a 40 00 00 	lea    0x406a(%rip),%rdi        # 9821 <default_cmd+0x5c1>
    57b7:	31 c0                	xor    %eax,%eax
    57b9:	e8 0d 0a 00 00       	callq  61cb <posix_print_error_and_exit>
					"next_timer_index corrupted\n");
			break;
			/* LCOV_EXCL_STOP */
		}

		hwm_find_next_timer();
    57be:	e8 d8 fe ff ff       	callq  569b <hwm_find_next_timer>
		hwm_sleep_until_next_timer();
    57c3:	e9 3f ff ff ff       	jmpq   5707 <hwm_main_loop+0x8>

00000000000057c8 <hwm_set_end_of_time>:

/**
 * Set the simulated time when the process will stop
 */
void hwm_set_end_of_time(uint64_t new_end_of_time)
{
    57c8:	f3 0f 1e fa          	endbr64 
	end_of_time = new_end_of_time;
    57cc:	48 89 3d 7d 6c 00 00 	mov    %rdi,0x6c7d(%rip)        # c450 <end_of_time>
}
    57d3:	c3                   	retq   

00000000000057d4 <hwm_get_time>:

/**
 * Return the current time as known by the device
 */
uint64_t hwm_get_time(void)
{
    57d4:	f3 0f 1e fa          	endbr64 
	return simu_time;
}
    57d8:	48 8b 05 69 95 00 00 	mov    0x9569(%rip),%rax        # ed48 <simu_time>
    57df:	c3                   	retq   

00000000000057e0 <hwm_init>:

/**
 * Function to initialize the HW models
 */
void hwm_init(void)
{
    57e0:	f3 0f 1e fa          	endbr64 
    57e4:	50                   	push   %rax
	hwm_set_sig_handler();
    57e5:	e8 e5 fd ff ff       	callq  55cf <hwm_set_sig_handler>
	hwtimer_init();
    57ea:	e8 7e 01 00 00       	callq  596d <hwtimer_init>
	hw_counter_init();
    57ef:	e8 a8 15 00 00       	callq  6d9c <hw_counter_init>
	hw_irq_ctrl_init();
    57f4:	e8 f3 06 00 00       	callq  5eec <hw_irq_ctrl_init>

	hwm_find_next_timer();
}
    57f9:	5a                   	pop    %rdx
	hwm_find_next_timer();
    57fa:	e9 9c fe ff ff       	jmpq   569b <hwm_find_next_timer>

00000000000057ff <hwm_cleanup>:
 * Function to free any resources allocated by the HW models
 * Note that this function needs to be designed so it is possible
 * to call it more than once during cleanup
 */
void hwm_cleanup(void)
{
    57ff:	f3 0f 1e fa          	endbr64 
    5803:	50                   	push   %rax
	hwtimer_cleanup();
    5804:	e8 67 02 00 00       	callq  5a70 <hwtimer_cleanup>
	hw_irq_ctrl_cleanup();
}
    5809:	5a                   	pop    %rdx
	hw_irq_ctrl_cleanup();
    580a:	e9 1c 07 00 00       	jmpq   5f2b <hw_irq_ctrl_cleanup>

000000000000580f <hwtimer_update_timer>:
	real_time_mode = new_rt;
}

static void hwtimer_update_timer(void)
{
	hw_timer_timer = MIN(hw_timer_tick_timer, hw_timer_awake_timer);
    580f:	48 8d 15 62 95 00 00 	lea    0x9562(%rip),%rdx        # ed78 <hw_timer_awake_timer>
    5816:	48 8d 05 63 95 00 00 	lea    0x9563(%rip),%rax        # ed80 <hw_timer_tick_timer>
    581d:	48 8b 00             	mov    (%rax),%rax
    5820:	48 39 02             	cmp    %rax,(%rdx)
    5823:	48 0f 46 02          	cmovbe (%rdx),%rax
    5827:	48 8d 15 5a 95 00 00 	lea    0x955a(%rip),%rdx        # ed88 <hw_timer_timer>
    582e:	48 89 02             	mov    %rax,(%rdx)
}
    5831:	c3                   	retq   

0000000000005832 <native_add_time_options>:
	ARG_UNUSED(offset);
	hwtimer_reset_rtc();
}

static void native_add_time_options(void)
{
    5832:	f3 0f 1e fa          	endbr64 
		(void *)&args.stop_at, cmd_stop_at_found,
		"In simulated seconds, when to stop automatically"},

		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(timer_options);
    5836:	48 8d 3d c3 67 00 00 	lea    0x67c3(%rip),%rdi        # c000 <timer_options.3187>
    583d:	e9 e8 13 00 00       	jmpq   6c2a <native_add_command_line_opts>

0000000000005842 <cmd_stop_at_found>:
{
    5842:	f3 0f 1e fa          	endbr64 
	if (args.stop_at < 0) {
    5846:	0f 57 c0             	xorps  %xmm0,%xmm0
{
    5849:	52                   	push   %rdx
	if (args.stop_at < 0) {
    584a:	66 0f 2f 05 6e 8e 00 	comisd 0x8e6e(%rip),%xmm0        # e6c0 <args>
    5851:	00 
    5852:	76 11                	jbe    5865 <cmd_stop_at_found+0x23>
    5854:	48 89 fe             	mov    %rdi,%rsi
		posix_print_error_and_exit("Error: stop-at must be positive "
    5857:	31 c0                	xor    %eax,%eax
    5859:	48 8d 3d dd 3f 00 00 	lea    0x3fdd(%rip),%rdi        # 983d <default_cmd+0x5dd>
    5860:	e8 66 09 00 00       	callq  61cb <posix_print_error_and_exit>
	hwm_set_end_of_time(args.stop_at*1e6);
    5865:	f2 0f 10 05 0b 3a 00 	movsd  0x3a0b(%rip),%xmm0        # 9278 <default_cmd+0x18>
    586c:	00 
    586d:	f2 0f 59 05 4b 8e 00 	mulsd  0x8e4b(%rip),%xmm0        # e6c0 <args>
    5874:	00 
    5875:	f2 0f 10 0d 03 3a 00 	movsd  0x3a03(%rip),%xmm1        # 9280 <default_cmd+0x20>
    587c:	00 
    587d:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5881:	73 07                	jae    588a <cmd_stop_at_found+0x48>
    5883:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5888:	eb 0e                	jmp    5898 <cmd_stop_at_found+0x56>
    588a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    588e:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5893:	48 0f ba ff 3f       	btc    $0x3f,%rdi
}
    5898:	58                   	pop    %rax
	hwm_set_end_of_time(args.stop_at*1e6);
    5899:	e9 2a ff ff ff       	jmpq   57c8 <hwm_set_end_of_time>

000000000000589e <hwtimer_set_real_time_mode>:
{
    589e:	f3 0f 1e fa          	endbr64 
	real_time_mode = new_rt;
    58a2:	40 88 3d d4 6b 00 00 	mov    %dil,0x6bd4(%rip)        # c47d <real_time_mode>
}
    58a9:	c3                   	retq   

00000000000058aa <cmd_no_realtime_found>:
{
    58aa:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(false);
    58ae:	31 ff                	xor    %edi,%edi
    58b0:	e9 e9 ff ff ff       	jmpq   589e <hwtimer_set_real_time_mode>

00000000000058b5 <cmd_realtime_found>:
{
    58b5:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(true);
    58b9:	bf 01 00 00 00       	mov    $0x1,%edi
    58be:	e9 db ff ff ff       	jmpq   589e <hwtimer_set_real_time_mode>

00000000000058c3 <get_host_us_time>:
{
    58c3:	f3 0f 1e fa          	endbr64 
    58c7:	48 83 ec 28          	sub    $0x28,%rsp
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    58cb:	bf 04 00 00 00       	mov    $0x4,%edi
{
    58d0:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    58d7:	00 00 
    58d9:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    58de:	31 c0                	xor    %eax,%eax
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    58e0:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    58e5:	e8 96 cb ff ff       	callq  2480 <clock_gettime@plt>
	return (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    58ea:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    58ef:	48 85 d2             	test   %rdx,%rdx
    58f2:	78 07                	js     58fb <get_host_us_time+0x38>
    58f4:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    58f9:	eb 15                	jmp    5910 <get_host_us_time+0x4d>
    58fb:	48 89 d0             	mov    %rdx,%rax
    58fe:	83 e2 01             	and    $0x1,%edx
    5901:	48 d1 e8             	shr    %rax
    5904:	48 09 d0             	or     %rdx,%rax
    5907:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    590c:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5910:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5915:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    591a:	f2 0f 59 05 56 39 00 	mulsd  0x3956(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5921:	00 
    5922:	48 99                	cqto   
    5924:	48 f7 f9             	idiv   %rcx
    5927:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    592c:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5930:	f2 0f 10 0d 48 39 00 	movsd  0x3948(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5937:	00 
    5938:	66 0f 2f c1          	comisd %xmm1,%xmm0
    593c:	73 07                	jae    5945 <get_host_us_time+0x82>
    593e:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5943:	eb 0e                	jmp    5953 <get_host_us_time+0x90>
    5945:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5949:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    594e:	48 0f ba f8 3f       	btc    $0x3f,%rax
}
    5953:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    5958:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    595f:	00 00 
    5961:	74 05                	je     5968 <get_host_us_time+0xa5>
    5963:	e8 48 cb ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5968:	48 83 c4 28          	add    $0x28,%rsp
    596c:	c3                   	retq   

000000000000596d <hwtimer_init>:
{
    596d:	f3 0f 1e fa          	endbr64 
    5971:	48 83 ec 28          	sub    $0x28,%rsp
    5975:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    597c:	00 00 
    597e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5983:	31 c0                	xor    %eax,%eax
	hw_timer_tick_timer = NEVER;
    5985:	48 8d 05 f4 93 00 00 	lea    0x93f4(%rip),%rax        # ed80 <hw_timer_tick_timer>
	silent_ticks = 0;
    598c:	48 c7 05 d1 93 00 00 	movq   $0x0,0x93d1(%rip)        # ed68 <silent_ticks>
    5993:	00 00 00 00 
	hw_timer_tick_timer = NEVER;
    5997:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hw_timer_awake_timer = NEVER;
    599e:	48 8d 05 d3 93 00 00 	lea    0x93d3(%rip),%rax        # ed78 <hw_timer_awake_timer>
    59a5:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    59ac:	e8 5e fe ff ff       	callq  580f <hwtimer_update_timer>
	if (real_time_mode) {
    59b1:	80 3d c5 6a 00 00 00 	cmpb   $0x0,0x6ac5(%rip)        # c47d <real_time_mode>
    59b8:	74 17                	je     59d1 <hwtimer_init+0x64>
		boot_time = get_host_us_time();
    59ba:	e8 04 ff ff ff       	callq  58c3 <get_host_us_time>
		last_radj_stime = 0U;
    59bf:	48 c7 05 86 93 00 00 	movq   $0x0,0x9386(%rip)        # ed50 <last_radj_stime>
    59c6:	00 00 00 00 
		last_radj_rtime = boot_time;
    59ca:	48 89 05 87 93 00 00 	mov    %rax,0x9387(%rip)        # ed58 <last_radj_rtime>
	if (!reset_rtc) {
    59d1:	80 3d 67 94 00 00 00 	cmpb   $0x0,0x9467(%rip)        # ee3f <reset_rtc>
    59d8:	75 7c                	jne    5a56 <hwtimer_init+0xe9>
		clock_gettime(CLOCK_REALTIME, &tv);
    59da:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    59df:	31 ff                	xor    %edi,%edi
    59e1:	e8 9a ca ff ff       	callq  2480 <clock_gettime@plt>
		realhosttime = (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    59e6:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    59eb:	48 85 d2             	test   %rdx,%rdx
    59ee:	78 07                	js     59f7 <hwtimer_init+0x8a>
    59f0:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    59f5:	eb 15                	jmp    5a0c <hwtimer_init+0x9f>
    59f7:	48 89 d0             	mov    %rdx,%rax
    59fa:	83 e2 01             	and    $0x1,%edx
    59fd:	48 d1 e8             	shr    %rax
    5a00:	48 09 d0             	or     %rdx,%rax
    5a03:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5a08:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5a0c:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5a11:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    5a16:	f2 0f 59 05 5a 38 00 	mulsd  0x385a(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5a1d:	00 
    5a1e:	48 99                	cqto   
    5a20:	48 f7 f9             	idiv   %rcx
    5a23:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5a28:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5a2c:	f2 0f 10 0d 4c 38 00 	movsd  0x384c(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5a33:	00 
    5a34:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5a38:	73 07                	jae    5a41 <hwtimer_init+0xd4>
    5a3a:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5a3f:	eb 0e                	jmp    5a4f <hwtimer_init+0xe2>
    5a41:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5a45:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5a4a:	48 0f ba f8 3f       	btc    $0x3f,%rax
		rtc_offset += realhosttime;
    5a4f:	48 01 05 0a 93 00 00 	add    %rax,0x930a(%rip)        # ed60 <rtc_offset>
}
    5a56:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    5a5b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5a62:	00 00 
    5a64:	74 05                	je     5a6b <hwtimer_init+0xfe>
    5a66:	e8 45 ca ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5a6b:	48 83 c4 28          	add    $0x28,%rsp
    5a6f:	c3                   	retq   

0000000000005a70 <hwtimer_cleanup>:
{
    5a70:	f3 0f 1e fa          	endbr64 
}
    5a74:	c3                   	retq   

0000000000005a75 <hwtimer_enable>:
{
    5a75:	f3 0f 1e fa          	endbr64 
    5a79:	50                   	push   %rax
	tick_p = period;
    5a7a:	48 89 3d ef 92 00 00 	mov    %rdi,0x92ef(%rip)        # ed70 <tick_p>
	hw_timer_tick_timer = hwm_get_time() + tick_p;
    5a81:	e8 4e fd ff ff       	callq  57d4 <hwm_get_time>
    5a86:	48 8d 15 f3 92 00 00 	lea    0x92f3(%rip),%rdx        # ed80 <hw_timer_tick_timer>
    5a8d:	48 03 05 dc 92 00 00 	add    0x92dc(%rip),%rax        # ed70 <tick_p>
    5a94:	48 89 02             	mov    %rax,(%rdx)
	hwtimer_update_timer();
    5a97:	e8 73 fd ff ff       	callq  580f <hwtimer_update_timer>
}
    5a9c:	5a                   	pop    %rdx
	hwm_find_next_timer();
    5a9d:	e9 f9 fb ff ff       	jmpq   569b <hwm_find_next_timer>

0000000000005aa2 <hwtimer_timer_reached>:
{
    5aa2:	f3 0f 1e fa          	endbr64 
    5aa6:	55                   	push   %rbp
    5aa7:	53                   	push   %rbx
    5aa8:	48 83 ec 38          	sub    $0x38,%rsp
    5aac:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5ab3:	00 00 
    5ab5:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5aba:	31 c0                	xor    %eax,%eax
	uint64_t Now = hw_timer_timer;
    5abc:	48 8d 05 c5 92 00 00 	lea    0x92c5(%rip),%rax        # ed88 <hw_timer_timer>
    5ac3:	48 8b 18             	mov    (%rax),%rbx
	if (hw_timer_awake_timer == Now) {
    5ac6:	48 8d 05 ab 92 00 00 	lea    0x92ab(%rip),%rax        # ed78 <hw_timer_awake_timer>
    5acd:	48 39 18             	cmp    %rbx,(%rax)
    5ad0:	75 16                	jne    5ae8 <hwtimer_timer_reached+0x46>
	hw_timer_awake_timer = NEVER;
    5ad2:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    5ad9:	e8 31 fd ff ff       	callq  580f <hwtimer_update_timer>
	hw_irq_ctrl_set_irq(PHONY_HARD_IRQ);
    5ade:	bf ff ff 00 00       	mov    $0xffff,%edi
    5ae3:	e8 5a 05 00 00       	callq  6042 <hw_irq_ctrl_set_irq>
	if (hw_timer_tick_timer == Now) {
    5ae8:	48 8d 2d 91 92 00 00 	lea    0x9291(%rip),%rbp        # ed80 <hw_timer_tick_timer>
    5aef:	48 39 5d 00          	cmp    %rbx,0x0(%rbp)
    5af3:	0f 85 12 01 00 00    	jne    5c0b <hwtimer_timer_reached+0x169>
	if (real_time_mode) {
    5af9:	80 3d 7d 69 00 00 00 	cmpb   $0x0,0x697d(%rip)        # c47d <real_time_mode>
    5b00:	0f 84 d6 00 00 00    	je     5bdc <hwtimer_timer_reached+0x13a>
				    / clock_ratio
    5b06:	48 2b 1d 43 92 00 00 	sub    0x9243(%rip),%rbx        # ed50 <last_radj_stime>
    5b0d:	78 07                	js     5b16 <hwtimer_timer_reached+0x74>
    5b0f:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5b14:	eb 15                	jmp    5b2b <hwtimer_timer_reached+0x89>
    5b16:	48 89 d8             	mov    %rbx,%rax
    5b19:	83 e3 01             	and    $0x1,%ebx
    5b1c:	48 d1 e8             	shr    %rax
    5b1f:	48 09 d8             	or     %rbx,%rax
    5b22:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5b27:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
				    + last_radj_rtime;
    5b2b:	48 8b 15 26 92 00 00 	mov    0x9226(%rip),%rdx        # ed58 <last_radj_rtime>
				    / clock_ratio
    5b32:	f2 0f 5e 05 1e 69 00 	divsd  0x691e(%rip),%xmm0        # c458 <clock_ratio>
    5b39:	00 
				    + last_radj_rtime;
    5b3a:	48 85 d2             	test   %rdx,%rdx
    5b3d:	78 07                	js     5b46 <hwtimer_timer_reached+0xa4>
    5b3f:	f2 48 0f 2a ca       	cvtsi2sd %rdx,%xmm1
    5b44:	eb 15                	jmp    5b5b <hwtimer_timer_reached+0xb9>
    5b46:	48 89 d0             	mov    %rdx,%rax
    5b49:	83 e2 01             	and    $0x1,%edx
    5b4c:	48 d1 e8             	shr    %rax
    5b4f:	48 09 d0             	or     %rdx,%rax
    5b52:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5b57:	f2 0f 58 c9          	addsd  %xmm1,%xmm1
    5b5b:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
		uint64_t expected_rt = (hw_timer_tick_timer - last_radj_stime)
    5b5f:	f2 0f 10 0d 19 37 00 	movsd  0x3719(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5b66:	00 
    5b67:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5b6b:	73 07                	jae    5b74 <hwtimer_timer_reached+0xd2>
    5b6d:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5b72:	eb 0e                	jmp    5b82 <hwtimer_timer_reached+0xe0>
    5b74:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5b78:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5b7d:	48 0f ba fb 3f       	btc    $0x3f,%rbx
		uint64_t real_time = get_host_us_time();
    5b82:	e8 3c fd ff ff       	callq  58c3 <get_host_us_time>
		int64_t diff = expected_rt - real_time;
    5b87:	48 29 c3             	sub    %rax,%rbx
		if (diff > 0) { /* we need to slow down */
    5b8a:	48 85 db             	test   %rbx,%rbx
    5b8d:	7e 4d                	jle    5bdc <hwtimer_timer_reached+0x13a>
			requested_time.tv_sec  = diff / 1e6;
    5b8f:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5b94:	f2 0f 10 1d dc 36 00 	movsd  0x36dc(%rip),%xmm3        # 9278 <default_cmd+0x18>
    5b9b:	00 
			(void) nanosleep(&requested_time, &remaining);
    5b9c:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
    5ba1:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
			requested_time.tv_sec  = diff / 1e6;
    5ba6:	66 0f 28 d0          	movapd %xmm0,%xmm2
    5baa:	f2 0f 5e d3          	divsd  %xmm3,%xmm2
    5bae:	f2 48 0f 2c c2       	cvttsd2si %xmm2,%rax
						 requested_time.tv_sec*1e6)*1e3;
    5bb3:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
			requested_time.tv_sec  = diff / 1e6;
    5bb8:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
						 requested_time.tv_sec*1e6)*1e3;
    5bbd:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
			requested_time.tv_nsec = (diff -
    5bc1:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
						 requested_time.tv_sec*1e6)*1e3;
    5bc5:	f2 0f 59 05 bb 36 00 	mulsd  0x36bb(%rip),%xmm0        # 9288 <default_cmd+0x28>
    5bcc:	00 
			requested_time.tv_nsec = (diff -
    5bcd:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5bd2:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			(void) nanosleep(&requested_time, &remaining);
    5bd7:	e8 04 c9 ff ff       	callq  24e0 <nanosleep@plt>
	hw_timer_tick_timer += tick_p;
    5bdc:	48 8b 05 8d 91 00 00 	mov    0x918d(%rip),%rax        # ed70 <tick_p>
    5be3:	48 01 45 00          	add    %rax,0x0(%rbp)
	hwtimer_update_timer();
    5be7:	e8 23 fc ff ff       	callq  580f <hwtimer_update_timer>
	if (silent_ticks > 0) {
    5bec:	48 8b 05 75 91 00 00 	mov    0x9175(%rip),%rax        # ed68 <silent_ticks>
    5bf3:	48 85 c0             	test   %rax,%rax
    5bf6:	7e 0c                	jle    5c04 <hwtimer_timer_reached+0x162>
		silent_ticks -= 1;
    5bf8:	48 ff c8             	dec    %rax
    5bfb:	48 89 05 66 91 00 00 	mov    %rax,0x9166(%rip)        # ed68 <silent_ticks>
    5c02:	eb 07                	jmp    5c0b <hwtimer_timer_reached+0x169>
		hw_irq_ctrl_set_irq(TIMER_TICK_IRQ);
    5c04:	31 ff                	xor    %edi,%edi
    5c06:	e8 37 04 00 00       	callq  6042 <hw_irq_ctrl_set_irq>
}
    5c0b:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5c10:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5c17:	00 00 
    5c19:	74 05                	je     5c20 <hwtimer_timer_reached+0x17e>
    5c1b:	e8 90 c8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5c20:	48 83 c4 38          	add    $0x38,%rsp
    5c24:	5b                   	pop    %rbx
    5c25:	5d                   	pop    %rbp
    5c26:	c3                   	retq   

0000000000005c27 <hwtimer_set_silent_ticks>:
{
    5c27:	f3 0f 1e fa          	endbr64 
	silent_ticks = sys_ticks;
    5c2b:	48 89 3d 36 91 00 00 	mov    %rdi,0x9136(%rip)        # ed68 <silent_ticks>
}
    5c32:	c3                   	retq   

0000000000005c33 <hwtimer_reset_rtc>:
{
    5c33:	f3 0f 1e fa          	endbr64 
	reset_rtc = true;
    5c37:	c6 05 01 92 00 00 01 	movb   $0x1,0x9201(%rip)        # ee3f <reset_rtc>
}
    5c3e:	c3                   	retq   

0000000000005c3f <cmd_rtcreset_found>:
{
    5c3f:	f3 0f 1e fa          	endbr64 
	hwtimer_reset_rtc();
    5c43:	e9 eb ff ff ff       	jmpq   5c33 <hwtimer_reset_rtc>

0000000000005c48 <hwtimer_set_rtc_offset>:
{
    5c48:	f3 0f 1e fa          	endbr64 
	rtc_offset = offset;
    5c4c:	48 89 3d 0d 91 00 00 	mov    %rdi,0x910d(%rip)        # ed60 <rtc_offset>
}
    5c53:	c3                   	retq   

0000000000005c54 <cmd_rtcoffset_found>:
{
    5c54:	f3 0f 1e fa          	endbr64 
	hwtimer_set_rtc_offset(args.rtc_offset*1e6);
    5c58:	f2 0f 10 05 18 36 00 	movsd  0x3618(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5c5f:	00 
    5c60:	f2 0f 59 05 60 8a 00 	mulsd  0x8a60(%rip),%xmm0        # e6c8 <args+0x8>
    5c67:	00 
    5c68:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5c6d:	e9 d6 ff ff ff       	jmpq   5c48 <hwtimer_set_rtc_offset>

0000000000005c72 <hwtimer_set_rt_ratio>:
{
    5c72:	f3 0f 1e fa          	endbr64 
	clock_ratio = ratio;
    5c76:	f2 0f 11 05 da 67 00 	movsd  %xmm0,0x67da(%rip)        # c458 <clock_ratio>
    5c7d:	00 
}
    5c7e:	c3                   	retq   

0000000000005c7f <cmd_rt_ratio_found>:
{
    5c7f:	f3 0f 1e fa          	endbr64 
	if ((args.rt_ratio <= 0)) {
    5c83:	0f 57 c0             	xorps  %xmm0,%xmm0
    5c86:	66 0f 2f 05 4a 8a 00 	comisd 0x8a4a(%rip),%xmm0        # e6d8 <args+0x18>
    5c8d:	00 
    5c8e:	72 1a                	jb     5caa <cmd_rt_ratio_found+0x2b>
{
    5c90:	50                   	push   %rax
		posix_print_error_and_exit("The ratio needs to be > 0. "
    5c91:	48 8d 3d cb 3b 00 00 	lea    0x3bcb(%rip),%rdi        # 9863 <default_cmd+0x603>
    5c98:	31 c0                	xor    %eax,%eax
    5c9a:	e8 2c 05 00 00       	callq  61cb <posix_print_error_and_exit>
	hwtimer_set_rt_ratio(args.rt_ratio);
    5c9f:	f2 0f 10 05 31 8a 00 	movsd  0x8a31(%rip),%xmm0        # e6d8 <args+0x18>
    5ca6:	00 
}
    5ca7:	5a                   	pop    %rdx
    5ca8:	eb 08                	jmp    5cb2 <cmd_rt_ratio_found+0x33>
	hwtimer_set_rt_ratio(args.rt_ratio);
    5caa:	f2 0f 10 05 26 8a 00 	movsd  0x8a26(%rip),%xmm0        # e6d8 <args+0x18>
    5cb1:	00 
    5cb2:	e9 bb ff ff ff       	jmpq   5c72 <hwtimer_set_rt_ratio>

0000000000005cb7 <cmd_rt_drift_found>:
{
    5cb7:	f3 0f 1e fa          	endbr64 
    5cbb:	52                   	push   %rdx
	if (!(args.rt_drift > -1)) {
    5cbc:	f2 0f 10 05 0c 8a 00 	movsd  0x8a0c(%rip),%xmm0        # e6d0 <args+0x10>
    5cc3:	00 
    5cc4:	66 0f 2f 05 c4 35 00 	comisd 0x35c4(%rip),%xmm0        # 9290 <default_cmd+0x30>
    5ccb:	00 
    5ccc:	77 0e                	ja     5cdc <cmd_rt_drift_found+0x25>
		posix_print_error_and_exit("The drift needs to be > -1. "
    5cce:	48 8d 3d ca 3b 00 00 	lea    0x3bca(%rip),%rdi        # 989f <default_cmd+0x63f>
    5cd5:	31 c0                	xor    %eax,%eax
    5cd7:	e8 ef 04 00 00       	callq  61cb <posix_print_error_and_exit>
	args.rt_ratio = args.rt_drift + 1;
    5cdc:	f2 0f 10 05 b4 35 00 	movsd  0x35b4(%rip),%xmm0        # 9298 <default_cmd+0x38>
    5ce3:	00 
    5ce4:	f2 0f 58 05 e4 89 00 	addsd  0x89e4(%rip),%xmm0        # e6d0 <args+0x10>
    5ceb:	00 
    5cec:	f2 0f 11 05 e4 89 00 	movsd  %xmm0,0x89e4(%rip)        # e6d8 <args+0x18>
    5cf3:	00 
}
    5cf4:	58                   	pop    %rax
	hwtimer_set_rt_ratio(args.rt_ratio);
    5cf5:	e9 78 ff ff ff       	jmpq   5c72 <hwtimer_set_rt_ratio>

0000000000005cfa <posix_irq_handler>:
 * Note that even that this function is executing in a Zephyr thread,  it is
 * effectively the model of the interrupt controller passing context to the IRQ
 * handler and therefore its priority handling
 */
void posix_irq_handler(void)
{
    5cfa:	f3 0f 1e fa          	endbr64 
    5cfe:	41 56                	push   %r14
    5d00:	41 55                	push   %r13
    5d02:	41 54                	push   %r12
    5d04:	55                   	push   %rbp
    5d05:	53                   	push   %rbx
	uint64_t irq_lock;
	int irq_nbr;
	static int may_swap;

	irq_lock = hw_irq_ctrl_get_current_lock();
    5d06:	e8 5e 02 00 00       	callq  5f69 <hw_irq_ctrl_get_current_lock>

	if (irq_lock) {
    5d0b:	85 c0                	test   %eax,%eax
    5d0d:	0f 85 e6 00 00 00    	jne    5df9 <posix_irq_handler+0xff>
		/* "spurious" wakes can happen with interrupts locked */
		return;
	}

	if (_kernel.cpus[0].nested == 0) {
    5d13:	48 8d 1d a6 8f 00 00 	lea    0x8fa6(%rip),%rbx        # ecc0 <_kernel>
    5d1a:	8b 03                	mov    (%rbx),%eax
    5d1c:	85 c0                	test   %eax,%eax
    5d1e:	75 0a                	jne    5d2a <posix_irq_handler+0x30>
		may_swap = 0;
    5d20:	c7 05 e6 90 00 00 00 	movl   $0x0,0x90e6(%rip)        # ee10 <may_swap.5208>
    5d27:	00 00 00 
	}

	_kernel.cpus[0].nested++;
    5d2a:	ff c0                	inc    %eax
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5d2c:	4c 8d 2d ad 89 00 00 	lea    0x89ad(%rip),%r13        # e6e0 <irq_vector_table>
	_kernel.cpus[0].nested++;
    5d33:	89 03                	mov    %eax,(%rbx)

	while ((irq_nbr = hw_irq_ctrl_get_highest_prio_irq()) != -1) {
    5d35:	e8 7a 02 00 00       	callq  5fb4 <hw_irq_ctrl_get_highest_prio_irq>
    5d3a:	89 c5                	mov    %eax,%ebp
    5d3c:	83 f8 ff             	cmp    $0xffffffff,%eax
    5d3f:	0f 84 84 00 00 00    	je     5dc9 <posix_irq_handler+0xcf>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    5d45:	e8 f1 01 00 00       	callq  5f3b <hw_irq_ctrl_get_cur_prio>
		int last_running_irq = currently_running_irq;

		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    5d4a:	89 ef                	mov    %ebp,%edi
		int last_running_irq = currently_running_irq;
    5d4c:	44 8b 35 21 67 00 00 	mov    0x6721(%rip),%r14d        # c474 <currently_running_irq>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    5d53:	41 89 c4             	mov    %eax,%r12d
		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    5d56:	e8 fd 01 00 00       	callq  5f58 <hw_irq_ctrl_get_prio>
    5d5b:	0f b6 f8             	movzbl %al,%edi
    5d5e:	e8 cd 01 00 00       	callq  5f30 <hw_irq_ctrl_set_cur_prio>
		hw_irq_ctrl_clear_irq(irq_nbr);
    5d63:	89 ef                	mov    %ebp,%edi
    5d65:	e8 b9 02 00 00       	callq  6023 <hw_irq_ctrl_clear_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5d6a:	48 63 c5             	movslq %ebp,%rax

		currently_running_irq = irq_nbr;
    5d6d:	89 2d 01 67 00 00    	mov    %ebp,0x6701(%rip)        # c474 <currently_running_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5d73:	48 6b c0 18          	imul   $0x18,%rax,%rax
    5d77:	4c 01 e8             	add    %r13,%rax
    5d7a:	48 8b 50 08          	mov    0x8(%rax),%rdx
    5d7e:	48 85 d2             	test   %rdx,%rdx
    5d81:	75 12                	jne    5d95 <posix_irq_handler+0x9b>
		posix_print_error_and_exit("Received irq %i without a "
    5d83:	89 ee                	mov    %ebp,%esi
    5d85:	48 8d 3d 29 3f 00 00 	lea    0x3f29(%rip),%rdi        # 9cb5 <default_cmd+0xa55>
    5d8c:	31 c0                	xor    %eax,%eax
    5d8e:	e8 38 04 00 00       	callq  61cb <posix_print_error_and_exit>
    5d93:	eb 20                	jmp    5db5 <posix_irq_handler+0xbb>
		if (irq_vector_table[irq_nbr].flags & ISR_FLAG_DIRECT) {
    5d95:	f6 40 04 01          	testb  $0x1,0x4(%rax)
    5d99:	74 0a                	je     5da5 <posix_irq_handler+0xab>
			*may_swap |= ((direct_irq_f_ptr)
    5d9b:	ff d2                	callq  *%rdx
    5d9d:	09 05 6d 90 00 00    	or     %eax,0x906d(%rip)        # ee10 <may_swap.5208>
    5da3:	eb 10                	jmp    5db5 <posix_irq_handler+0xbb>
			((normal_irq_f_ptr)irq_vector_table[irq_nbr].func)
    5da5:	48 8b 78 10          	mov    0x10(%rax),%rdi
    5da9:	ff d2                	callq  *%rdx
			*may_swap = 1;
    5dab:	c7 05 5b 90 00 00 01 	movl   $0x1,0x905b(%rip)        # ee10 <may_swap.5208>
    5db2:	00 00 00 
		vector_to_irq(irq_nbr, &may_swap);
		currently_running_irq = last_running_irq;

		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    5db5:	44 89 e7             	mov    %r12d,%edi
		currently_running_irq = last_running_irq;
    5db8:	44 89 35 b5 66 00 00 	mov    %r14d,0x66b5(%rip)        # c474 <currently_running_irq>
		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    5dbf:	e8 6c 01 00 00       	callq  5f30 <hw_irq_ctrl_set_cur_prio>
    5dc4:	e9 6c ff ff ff       	jmpq   5d35 <posix_irq_handler+0x3b>
	}

	_kernel.cpus[0].nested--;
    5dc9:	ff 0b                	decl   (%rbx)
	/* Call swap if all the following is true:
	 * 1) may_swap was enabled
	 * 2) We are not nesting irq_handler calls (interrupts)
	 * 3) Next thread to run in the ready queue is not this thread
	 */
	if (may_swap
    5dcb:	83 3d 3e 90 00 00 00 	cmpl   $0x0,0x903e(%rip)        # ee10 <may_swap.5208>
    5dd2:	74 25                	je     5df9 <posix_irq_handler+0xff>
		&& (hw_irq_ctrl_get_cur_prio() == 256)
    5dd4:	e8 62 01 00 00       	callq  5f3b <hw_irq_ctrl_get_cur_prio>
    5dd9:	3d 00 01 00 00       	cmp    $0x100,%eax
    5dde:	75 19                	jne    5df9 <posix_irq_handler+0xff>
		&& (_kernel.ready_q.cache != _current)) {
    5de0:	48 8b 43 10          	mov    0x10(%rbx),%rax
    5de4:	48 39 43 38          	cmp    %rax,0x38(%rbx)
    5de8:	74 0f                	je     5df9 <posix_irq_handler+0xff>

		(void)z_swap_irqlock(irq_lock);
	}
}
    5dea:	5b                   	pop    %rbx

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    5deb:	31 ff                	xor    %edi,%edi
    5ded:	5d                   	pop    %rbp
    5dee:	41 5c                	pop    %r12
    5df0:	41 5d                	pop    %r13
    5df2:	41 5e                	pop    %r14
    5df4:	e9 79 f4 ff ff       	jmpq   5272 <arch_swap>
    5df9:	5b                   	pop    %rbx
    5dfa:	5d                   	pop    %rbp
    5dfb:	41 5c                	pop    %r12
    5dfd:	41 5d                	pop    %r13
    5dff:	41 5e                	pop    %r14
    5e01:	c3                   	retq   

0000000000005e02 <posix_irq_handler_im_from_sw>:
 * Thru this function the IRQ controller can raise an immediate  interrupt which
 * will interrupt the SW itself
 * (this function should only be called from the HW model code, from SW threads)
 */
void posix_irq_handler_im_from_sw(void)
{
    5e02:	f3 0f 1e fa          	endbr64 
    5e06:	51                   	push   %rcx
	/*
	 * if a higher priority interrupt than the possibly currently running is
	 * pending we go immediately into irq_handler() to vector into its
	 * handler
	 */
	if (hw_irq_ctrl_get_highest_prio_irq() != -1) {
    5e07:	e8 a8 01 00 00       	callq  5fb4 <hw_irq_ctrl_get_highest_prio_irq>
    5e0c:	ff c0                	inc    %eax
    5e0e:	74 22                	je     5e32 <posix_irq_handler_im_from_sw+0x30>
		if (!posix_is_cpu_running()) { /* LCOV_EXCL_BR_LINE */
    5e10:	e8 57 f5 ff ff       	callq  536c <posix_is_cpu_running>
    5e15:	85 c0                	test   %eax,%eax
    5e17:	75 13                	jne    5e2c <posix_irq_handler_im_from_sw+0x2a>
			/* LCOV_EXCL_START */
			posix_print_error_and_exit("programming error: %s "
    5e19:	48 8d 35 20 34 00 00 	lea    0x3420(%rip),%rsi        # 9240 <__func__.5217>
    5e20:	48 8d 3d bc 3e 00 00 	lea    0x3ebc(%rip),%rdi        # 9ce3 <default_cmd+0xa83>
    5e27:	e8 9f 03 00 00       	callq  61cb <posix_print_error_and_exit>
					__func__);
			/* LCOV_EXCL_STOP */
		}
		posix_irq_handler();
	}
}
    5e2c:	5a                   	pop    %rdx
		posix_irq_handler();
    5e2d:	e9 c8 fe ff ff       	jmpq   5cfa <posix_irq_handler>
}
    5e32:	58                   	pop    %rax
    5e33:	c3                   	retq   

0000000000005e34 <posix_irq_lock>:
 * @return An architecture-dependent lock-out key representing the
 * "interrupt disable state" prior to the call.
 *
 */
unsigned int posix_irq_lock(void)
{
    5e34:	f3 0f 1e fa          	endbr64 
	return hw_irq_ctrl_change_lock(true);
    5e38:	bf 01 00 00 00       	mov    $0x1,%edi
    5e3d:	e9 33 01 00 00       	jmpq   5f75 <hw_irq_ctrl_change_lock>

0000000000005e42 <posix_irq_unlock>:
 *
 * @return N/A
 *
 */
void posix_irq_unlock(unsigned int key)
{
    5e42:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(key);
    5e46:	e9 2a 01 00 00       	jmpq   5f75 <hw_irq_ctrl_change_lock>

0000000000005e4b <posix_irq_full_unlock>:
}

void posix_irq_full_unlock(void)
{
    5e4b:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(false);
    5e4f:	31 ff                	xor    %edi,%edi
    5e51:	e9 1f 01 00 00       	jmpq   5f75 <hw_irq_ctrl_change_lock>

0000000000005e56 <posix_irq_enable>:
}

void posix_irq_enable(unsigned int irq)
{
    5e56:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_enable_irq(irq);
    5e5a:	e9 31 02 00 00       	jmpq   6090 <hw_irq_ctrl_enable_irq>

0000000000005e5f <posix_isr_declare>:
 * @param isr_param_p ISR parameter
 * @param flags_p IRQ options
 */
void posix_isr_declare(unsigned int irq_p, int flags, void isr_p(const void *),
		       const void *isr_param_p)
{
    5e5f:	f3 0f 1e fa          	endbr64 
	irq_vector_table[irq_p].irq   = irq_p;
    5e63:	89 f8                	mov    %edi,%eax
{
    5e65:	49 89 d0             	mov    %rdx,%r8
	irq_vector_table[irq_p].irq   = irq_p;
    5e68:	48 6b d0 18          	imul   $0x18,%rax,%rdx
    5e6c:	48 8d 05 6d 88 00 00 	lea    0x886d(%rip),%rax        # e6e0 <irq_vector_table>
    5e73:	48 01 d0             	add    %rdx,%rax
    5e76:	89 38                	mov    %edi,(%rax)
	irq_vector_table[irq_p].func  = isr_p;
    5e78:	4c 89 40 08          	mov    %r8,0x8(%rax)
	irq_vector_table[irq_p].param = isr_param_p;
    5e7c:	48 89 48 10          	mov    %rcx,0x10(%rax)
	irq_vector_table[irq_p].flags = flags;
    5e80:	89 70 04             	mov    %esi,0x4(%rax)
}
    5e83:	c3                   	retq   

0000000000005e84 <posix_irq_priority_set>:
 * Lower values take priority over higher values.
 *
 * @return N/A
 */
void posix_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5e84:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_prio_set(irq, prio);
    5e88:	e9 b9 00 00 00       	jmpq   5f46 <hw_irq_ctrl_prio_set>

0000000000005e8d <irq_raising_from_hw_now>:
	/*
	 * We always awake the CPU even if the IRQ was masked,
	 * but not if irqs are locked unless this is due to a
	 * PHONY_HARD_IRQ
	 */
	if ((irqs_locked == false) || (lock_ignore)) {
    5e8d:	80 3d ad 8f 00 00 00 	cmpb   $0x0,0x8fad(%rip)        # ee41 <irqs_locked>
    5e94:	74 09                	je     5e9f <irq_raising_from_hw_now+0x12>
    5e96:	80 3d a3 8f 00 00 00 	cmpb   $0x0,0x8fa3(%rip)        # ee40 <lock_ignore>
    5e9d:	74 0c                	je     5eab <irq_raising_from_hw_now+0x1e>
		lock_ignore = false;
    5e9f:	c6 05 9a 8f 00 00 00 	movb   $0x0,0x8f9a(%rip)        # ee40 <lock_ignore>
		posix_interrupt_raised();
    5ea6:	e9 55 f5 ff ff       	jmpq   5400 <posix_interrupt_raised>
	}
}
    5eab:	c3                   	retq   

0000000000005eac <hw_irq_ctrl_irq_raise_prefix>:
{
    5eac:	89 f9                	mov    %edi,%ecx
	if (irq < N_IRQS) {
    5eae:	83 ff 1f             	cmp    $0x1f,%edi
    5eb1:	77 29                	ja     5edc <hw_irq_ctrl_irq_raise_prefix+0x30>
		if (irq_mask & (1 << irq)) {
    5eb3:	b8 01 00 00 00       	mov    $0x1,%eax
		irq_premask |= ((uint64_t)1<<irq);
    5eb8:	ba 01 00 00 00       	mov    $0x1,%edx
		if (irq_mask & (1 << irq)) {
    5ebd:	d3 e0                	shl    %cl,%eax
		irq_premask |= ((uint64_t)1<<irq);
    5ebf:	48 d3 e2             	shl    %cl,%rdx
    5ec2:	48 09 15 cf 8e 00 00 	or     %rdx,0x8ecf(%rip)        # ed98 <irq_premask>
		if (irq_mask & (1 << irq)) {
    5ec9:	48 98                	cltq   
    5ecb:	48 85 05 be 8e 00 00 	test   %rax,0x8ebe(%rip)        # ed90 <irq_mask>
    5ed2:	74 17                	je     5eeb <hw_irq_ctrl_irq_raise_prefix+0x3f>
			irq_status |= ((uint64_t)1<<irq);
    5ed4:	48 09 15 c5 8e 00 00 	or     %rdx,0x8ec5(%rip)        # eda0 <irq_status>
    5edb:	c3                   	retq   
	} else if (irq == PHONY_HARD_IRQ) {
    5edc:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
    5ee2:	75 07                	jne    5eeb <hw_irq_ctrl_irq_raise_prefix+0x3f>
		lock_ignore = true;
    5ee4:	c6 05 55 8f 00 00 01 	movb   $0x1,0x8f55(%rip)        # ee40 <lock_ignore>
}
    5eeb:	c3                   	retq   

0000000000005eec <hw_irq_ctrl_init>:
{
    5eec:	f3 0f 1e fa          	endbr64 
	irqs_locked = false;
    5ef0:	c6 05 4a 8f 00 00 00 	movb   $0x0,0x8f4a(%rip)        # ee41 <irqs_locked>
    5ef7:	48 8d 05 e2 8a 00 00 	lea    0x8ae2(%rip),%rax        # e9e0 <irq_prio>
	irq_mask = 0U; /* Let's assume all interrupts are disable at boot */
    5efe:	48 c7 05 87 8e 00 00 	movq   $0x0,0x8e87(%rip)        # ed90 <irq_mask>
    5f05:	00 00 00 00 
	irq_premask = 0U;
    5f09:	48 8d 50 20          	lea    0x20(%rax),%rdx
    5f0d:	48 c7 05 80 8e 00 00 	movq   $0x0,0x8e80(%rip)        # ed98 <irq_premask>
    5f14:	00 00 00 00 
	lock_ignore = false;
    5f18:	c6 05 21 8f 00 00 00 	movb   $0x0,0x8f21(%rip)        # ee40 <lock_ignore>
		irq_prio[i] = 255U;
    5f1f:	c6 00 ff             	movb   $0xff,(%rax)
	for (int i = 0 ; i < N_IRQS; i++) {
    5f22:	48 ff c0             	inc    %rax
    5f25:	48 39 d0             	cmp    %rdx,%rax
    5f28:	75 f5                	jne    5f1f <hw_irq_ctrl_init+0x33>
}
    5f2a:	c3                   	retq   

0000000000005f2b <hw_irq_ctrl_cleanup>:
{
    5f2b:	f3 0f 1e fa          	endbr64 
}
    5f2f:	c3                   	retq   

0000000000005f30 <hw_irq_ctrl_set_cur_prio>:
{
    5f30:	f3 0f 1e fa          	endbr64 
	currently_running_prio = new;
    5f34:	89 3d 3e 65 00 00    	mov    %edi,0x653e(%rip)        # c478 <currently_running_prio>
}
    5f3a:	c3                   	retq   

0000000000005f3b <hw_irq_ctrl_get_cur_prio>:
{
    5f3b:	f3 0f 1e fa          	endbr64 
}
    5f3f:	8b 05 33 65 00 00    	mov    0x6533(%rip),%eax        # c478 <currently_running_prio>
    5f45:	c3                   	retq   

0000000000005f46 <hw_irq_ctrl_prio_set>:
{
    5f46:	f3 0f 1e fa          	endbr64 
	irq_prio[irq] = prio;
    5f4a:	89 ff                	mov    %edi,%edi
    5f4c:	48 8d 05 8d 8a 00 00 	lea    0x8a8d(%rip),%rax        # e9e0 <irq_prio>
    5f53:	40 88 34 38          	mov    %sil,(%rax,%rdi,1)
}
    5f57:	c3                   	retq   

0000000000005f58 <hw_irq_ctrl_get_prio>:
{
    5f58:	f3 0f 1e fa          	endbr64 
	return irq_prio[irq];
    5f5c:	89 ff                	mov    %edi,%edi
    5f5e:	48 8d 05 7b 8a 00 00 	lea    0x8a7b(%rip),%rax        # e9e0 <irq_prio>
    5f65:	8a 04 38             	mov    (%rax,%rdi,1),%al
}
    5f68:	c3                   	retq   

0000000000005f69 <hw_irq_ctrl_get_current_lock>:
{
    5f69:	f3 0f 1e fa          	endbr64 
	return irqs_locked;
    5f6d:	0f b6 05 cd 8e 00 00 	movzbl 0x8ecd(%rip),%eax        # ee41 <irqs_locked>
}
    5f74:	c3                   	retq   

0000000000005f75 <hw_irq_ctrl_change_lock>:
{
    5f75:	f3 0f 1e fa          	endbr64 
	irqs_locked = new_lock;
    5f79:	85 ff                	test   %edi,%edi
{
    5f7b:	41 54                	push   %r12
	uint32_t previous_lock = irqs_locked;
    5f7d:	44 0f b6 25 bc 8e 00 	movzbl 0x8ebc(%rip),%r12d        # ee41 <irqs_locked>
    5f84:	00 
	irqs_locked = new_lock;
    5f85:	0f 95 05 b5 8e 00 00 	setne  0x8eb5(%rip)        # ee41 <irqs_locked>
	if ((previous_lock == true) && (new_lock == false)) {
    5f8c:	75 14                	jne    5fa2 <hw_irq_ctrl_change_lock+0x2d>
    5f8e:	45 84 e4             	test   %r12b,%r12b
    5f91:	74 0f                	je     5fa2 <hw_irq_ctrl_change_lock+0x2d>
		if (irq_status != 0U) {
    5f93:	48 83 3d 05 8e 00 00 	cmpq   $0x0,0x8e05(%rip)        # eda0 <irq_status>
    5f9a:	00 
    5f9b:	74 05                	je     5fa2 <hw_irq_ctrl_change_lock+0x2d>
			posix_irq_handler_im_from_sw();
    5f9d:	e8 60 fe ff ff       	callq  5e02 <posix_irq_handler_im_from_sw>
}
    5fa2:	44 89 e0             	mov    %r12d,%eax
    5fa5:	41 5c                	pop    %r12
    5fa7:	c3                   	retq   

0000000000005fa8 <hw_irq_ctrl_get_irq_status>:
{
    5fa8:	f3 0f 1e fa          	endbr64 
}
    5fac:	48 8b 05 ed 8d 00 00 	mov    0x8ded(%rip),%rax        # eda0 <irq_status>
    5fb3:	c3                   	retq   

0000000000005fb4 <hw_irq_ctrl_get_highest_prio_irq>:
{
    5fb4:	f3 0f 1e fa          	endbr64 
	if (irqs_locked) {
    5fb8:	80 3d 82 8e 00 00 00 	cmpb   $0x0,0x8e82(%rip)        # ee41 <irqs_locked>
    5fbf:	75 55                	jne    6016 <hw_irq_ctrl_get_highest_prio_irq+0x62>
{
    5fc1:	51                   	push   %rcx
	uint64_t irq_status = hw_irq_ctrl_get_irq_status();
    5fc2:	e8 e1 ff ff ff       	callq  5fa8 <hw_irq_ctrl_get_irq_status>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    5fc7:	8b 3d ab 64 00 00    	mov    0x64ab(%rip),%edi        # c478 <currently_running_prio>
	int winner_prio = 256;
    5fcd:	be 00 01 00 00       	mov    $0x100,%esi
	int winner = -1;
    5fd2:	41 83 c8 ff          	or     $0xffffffff,%r8d
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    5fd6:	41 83 c9 ff          	or     $0xffffffff,%r9d
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    5fda:	41 ba 01 00 00 00    	mov    $0x1,%r10d
		if ((winner_prio > (int)irq_prio[irq_nbr])
    5fe0:	4c 8d 1d f9 89 00 00 	lea    0x89f9(%rip),%r11        # e9e0 <irq_prio>
	while (irq_status != 0U) {
    5fe7:	48 85 c0             	test   %rax,%rax
    5fea:	74 32                	je     601e <hw_irq_ctrl_get_highest_prio_irq+0x6a>
    5fec:	0f bc c8             	bsf    %eax,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    5fef:	4c 89 d2             	mov    %r10,%rdx
		int irq_nbr = find_lsb_set(irq_status) - 1;
    5ff2:	41 0f 44 c9          	cmove  %r9d,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    5ff6:	48 d3 e2             	shl    %cl,%rdx
    5ff9:	48 f7 d2             	not    %rdx
    5ffc:	48 21 d0             	and    %rdx,%rax
		if ((winner_prio > (int)irq_prio[irq_nbr])
    5fff:	48 63 d1             	movslq %ecx,%rdx
    6002:	41 0f b6 14 13       	movzbl (%r11,%rdx,1),%edx
    6007:	39 f2                	cmp    %esi,%edx
    6009:	7d dc                	jge    5fe7 <hw_irq_ctrl_get_highest_prio_irq+0x33>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    600b:	39 fa                	cmp    %edi,%edx
    600d:	0f 4c f2             	cmovl  %edx,%esi
    6010:	44 0f 4c c1          	cmovl  %ecx,%r8d
    6014:	eb d1                	jmp    5fe7 <hw_irq_ctrl_get_highest_prio_irq+0x33>
    6016:	41 83 c8 ff          	or     $0xffffffff,%r8d
}
    601a:	44 89 c0             	mov    %r8d,%eax
    601d:	c3                   	retq   
    601e:	44 89 c0             	mov    %r8d,%eax
    6021:	5a                   	pop    %rdx
    6022:	c3                   	retq   

0000000000006023 <hw_irq_ctrl_clear_irq>:
{
    6023:	f3 0f 1e fa          	endbr64 
	irq_status  &= ~((uint64_t)1<<irq);
    6027:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    602e:	89 f9                	mov    %edi,%ecx
    6030:	48 d3 c0             	rol    %cl,%rax
    6033:	48 21 05 66 8d 00 00 	and    %rax,0x8d66(%rip)        # eda0 <irq_status>
	irq_premask &= ~((uint64_t)1<<irq);
    603a:	48 21 05 57 8d 00 00 	and    %rax,0x8d57(%rip)        # ed98 <irq_premask>
}
    6041:	c3                   	retq   

0000000000006042 <hw_irq_ctrl_set_irq>:
{
    6042:	f3 0f 1e fa          	endbr64 
    6046:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    6047:	e8 60 fe ff ff       	callq  5eac <hw_irq_ctrl_irq_raise_prefix>
	if ((irqs_locked == false) || (lock_ignore)) {
    604c:	80 3d ee 8d 00 00 00 	cmpb   $0x0,0x8dee(%rip)        # ee41 <irqs_locked>
    6053:	74 09                	je     605e <hw_irq_ctrl_set_irq+0x1c>
    6055:	80 3d e4 8d 00 00 00 	cmpb   $0x0,0x8de4(%rip)        # ee40 <lock_ignore>
    605c:	74 15                	je     6073 <hw_irq_ctrl_set_irq+0x31>
		irq_ctrl_timer = hwm_get_time();
    605e:	e8 71 f7 ff ff       	callq  57d4 <hwm_get_time>
    6063:	48 8d 15 f6 63 00 00 	lea    0x63f6(%rip),%rdx        # c460 <irq_ctrl_timer>
    606a:	48 89 02             	mov    %rax,(%rdx)
}
    606d:	5a                   	pop    %rdx
		hwm_find_next_timer();
    606e:	e9 28 f6 ff ff       	jmpq   569b <hwm_find_next_timer>
}
    6073:	58                   	pop    %rax
    6074:	c3                   	retq   

0000000000006075 <hw_irq_ctrl_raise_im_from_sw>:
 * Like hw_irq_ctrl_raise_im() but for SW threads
 *
 * Call only from SW threads
 */
void hw_irq_ctrl_raise_im_from_sw(unsigned int irq)
{
    6075:	f3 0f 1e fa          	endbr64 
    6079:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    607a:	e8 2d fe ff ff       	callq  5eac <hw_irq_ctrl_irq_raise_prefix>

	if (irqs_locked == false) {
    607f:	80 3d bb 8d 00 00 00 	cmpb   $0x0,0x8dbb(%rip)        # ee41 <irqs_locked>
    6086:	75 06                	jne    608e <hw_irq_ctrl_raise_im_from_sw+0x19>
		posix_irq_handler_im_from_sw();
	}
}
    6088:	5a                   	pop    %rdx
		posix_irq_handler_im_from_sw();
    6089:	e9 74 fd ff ff       	jmpq   5e02 <posix_irq_handler_im_from_sw>
}
    608e:	58                   	pop    %rax
    608f:	c3                   	retq   

0000000000006090 <hw_irq_ctrl_enable_irq>:
{
    6090:	f3 0f 1e fa          	endbr64 
	irq_mask |= ((uint64_t)1<<irq);
    6094:	b8 01 00 00 00       	mov    $0x1,%eax
    6099:	89 f9                	mov    %edi,%ecx
    609b:	48 d3 e0             	shl    %cl,%rax
    609e:	48 09 05 eb 8c 00 00 	or     %rax,0x8ceb(%rip)        # ed90 <irq_mask>
	if (irq_premask & ((uint64_t)1<<irq)) { /* if IRQ is pending */
    60a5:	48 8b 05 ec 8c 00 00 	mov    0x8cec(%rip),%rax        # ed98 <irq_premask>
    60ac:	48 0f a3 f8          	bt     %rdi,%rax
    60b0:	73 05                	jae    60b7 <hw_irq_ctrl_enable_irq+0x27>
		hw_irq_ctrl_raise_im_from_sw(irq);
    60b2:	e9 be ff ff ff       	jmpq   6075 <hw_irq_ctrl_raise_im_from_sw>
}
    60b7:	c3                   	retq   

00000000000060b8 <hw_irq_ctrl_timer_triggered>:

void hw_irq_ctrl_timer_triggered(void)
{
    60b8:	f3 0f 1e fa          	endbr64 
	irq_ctrl_timer = NEVER;
    60bc:	48 8d 05 9d 63 00 00 	lea    0x639d(%rip),%rax        # c460 <irq_ctrl_timer>
    60c3:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	irq_raising_from_hw_now();
    60ca:	e9 be fd ff ff       	jmpq   5e8d <irq_raising_from_hw_now>

00000000000060cf <posix_exit>:
#include <stdlib.h>
#include <sys/util.h>
#include "cmdline.h"

void posix_exit(int exit_code)
{
    60cf:	f3 0f 1e fa          	endbr64 
    60d3:	50                   	push   %rax
	static int max_exit_code;

	max_exit_code = MAX(exit_code, max_exit_code);
    60d4:	39 3d 3a 8d 00 00    	cmp    %edi,0x8d3a(%rip)        # ee14 <max_exit_code.2396>
    60da:	0f 4d 3d 33 8d 00 00 	cmovge 0x8d33(%rip),%edi        # ee14 <max_exit_code.2396>
    60e1:	89 3d 2d 8d 00 00    	mov    %edi,0x8d2d(%rip)        # ee14 <max_exit_code.2396>
	/*
	 * posix_soc_clean_up may not return if this is called from a SW thread,
	 * but instead it would get posix_exit() recalled again
	 * ASAP from the HW thread
	 */
	posix_soc_clean_up();
    60e7:	e8 43 f4 ff ff       	callq  552f <posix_soc_clean_up>
	hwm_cleanup();
    60ec:	e8 0e f7 ff ff       	callq  57ff <hwm_cleanup>
	native_cleanup_cmd_line();
    60f1:	e8 10 0b 00 00       	callq  6c06 <native_cleanup_cmd_line>
	exit(max_exit_code);
    60f6:	8b 3d 18 8d 00 00    	mov    0x8d18(%rip),%edi        # ee14 <max_exit_code.2396>
    60fc:	e8 5f c5 ff ff       	callq  2660 <exit@plt>

0000000000006101 <main>:
/**
 * This is the actual main for the Linux process,
 * the Zephyr application main is renamed something else thru a define.
 */
int main(int argc, char *argv[])
{
    6101:	f3 0f 1e fa          	endbr64 
    6105:	55                   	push   %rbp
    6106:	89 fd                	mov    %edi,%ebp
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    6108:	31 ff                	xor    %edi,%edi
{
    610a:	48 83 ec 10          	sub    $0x10,%rsp
    610e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    6113:	e8 dd f3 ff ff       	callq  54f5 <run_native_tasks>

	native_handle_cmd_line(argc, argv);
    6118:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    611d:	89 ef                	mov    %ebp,%edi
    611f:	e8 bd 0b 00 00       	callq  6ce1 <native_handle_cmd_line>

	run_native_tasks(_NATIVE_PRE_BOOT_2_LEVEL);
    6124:	bf 01 00 00 00       	mov    $0x1,%edi
    6129:	e8 c7 f3 ff ff       	callq  54f5 <run_native_tasks>

	hwm_init();
    612e:	e8 ad f6 ff ff       	callq  57e0 <hwm_init>

	run_native_tasks(_NATIVE_PRE_BOOT_3_LEVEL);
    6133:	bf 02 00 00 00       	mov    $0x2,%edi
    6138:	e8 b8 f3 ff ff       	callq  54f5 <run_native_tasks>

	posix_boot_cpu();
    613d:	e8 f2 f2 ff ff       	callq  5434 <posix_boot_cpu>

	run_native_tasks(_NATIVE_FIRST_SLEEP_LEVEL);
    6142:	bf 03 00 00 00       	mov    $0x3,%edi
    6147:	e8 a9 f3 ff ff       	callq  54f5 <run_native_tasks>

	hwm_main_loop();
    614c:	e8 ae f5 ff ff       	callq  56ff <hwm_main_loop>

	/* This line should be unreachable */
	return 1; /* LCOV_EXCL_LINE */
}
    6151:	48 83 c4 10          	add    $0x10,%rsp
    6155:	b8 01 00 00 00       	mov    $0x1,%eax
    615a:	5d                   	pop    %rbp
    615b:	c3                   	retq   

000000000000615c <trace_disable_color>:
 * Indexed 0:stdout, 1:stderr
 */
static int is_a_tty[2] = {-1, -1};

void trace_disable_color(char *argv, int offset)
{
    615c:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 0;
    6160:	48 c7 05 fd 62 00 00 	movq   $0x0,0x62fd(%rip)        # c468 <is_a_tty>
    6167:	00 00 00 00 
	is_a_tty[1] = 0;
}
    616b:	c3                   	retq   

000000000000616c <trace_enable_color>:

void trace_enable_color(char *argv, int offset)
{
    616c:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = -1;
    6170:	48 c7 05 ed 62 00 00 	movq   $0xffffffffffffffff,0x62ed(%rip)        # c468 <is_a_tty>
    6177:	ff ff ff ff 
	is_a_tty[1] = -1;

}
    617b:	c3                   	retq   

000000000000617c <trace_force_color>:

void trace_force_color(char *argv, int offset)
{
    617c:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 1;
    6180:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
    6187:	00 00 00 
    618a:	48 89 05 d7 62 00 00 	mov    %rax,0x62d7(%rip)        # c468 <is_a_tty>
	is_a_tty[1] = 1;
}
    6191:	c3                   	retq   

0000000000006192 <decide_about_color>:
{
	return is_a_tty[file_number];
}

static void decide_about_color(void)
{
    6192:	f3 0f 1e fa          	endbr64 
    6196:	52                   	push   %rdx
	if (is_a_tty[0] == -1) {
    6197:	83 3d ca 62 00 00 ff 	cmpl   $0xffffffff,0x62ca(%rip)        # c468 <is_a_tty>
    619e:	75 10                	jne    61b0 <decide_about_color+0x1e>
		is_a_tty[0] = isatty(STDOUT_FILENO);
    61a0:	bf 01 00 00 00       	mov    $0x1,%edi
    61a5:	e8 86 c2 ff ff       	callq  2430 <isatty@plt>
    61aa:	89 05 b8 62 00 00    	mov    %eax,0x62b8(%rip)        # c468 <is_a_tty>
	}
	if (is_a_tty[1] == -1) {
    61b0:	83 3d b5 62 00 00 ff 	cmpl   $0xffffffff,0x62b5(%rip)        # c46c <is_a_tty+0x4>
    61b7:	75 10                	jne    61c9 <decide_about_color+0x37>
		is_a_tty[1] = isatty(STDERR_FILENO);
    61b9:	bf 02 00 00 00       	mov    $0x2,%edi
    61be:	e8 6d c2 ff ff       	callq  2430 <isatty@plt>
    61c3:	89 05 a3 62 00 00    	mov    %eax,0x62a3(%rip)        # c46c <is_a_tty+0x4>
	}
}
    61c9:	58                   	pop    %rax
    61ca:	c3                   	retq   

00000000000061cb <posix_print_error_and_exit>:
{
    61cb:	f3 0f 1e fa          	endbr64 
    61cf:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    61d6:	49 89 fa             	mov    %rdi,%r10
    61d9:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    61de:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    61e3:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    61e8:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    61ed:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    61f2:	84 c0                	test   %al,%al
    61f4:	74 37                	je     622d <posix_print_error_and_exit+0x62>
    61f6:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    61fb:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    6200:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    6205:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    620c:	00 
    620d:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    6214:	00 
    6215:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    621c:	00 
    621d:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    6224:	00 
    6225:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    622c:	00 
    622d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6234:	00 00 
    6236:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    623b:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    623d:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    6244:	00 

__fortify_function int
vfprintf (FILE *__restrict __stream,
	  const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
    6245:	48 89 e1             	mov    %rsp,%rcx
    6248:	4c 89 d2             	mov    %r10,%rdx
    624b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6250:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    6255:	be 01 00 00 00       	mov    $0x1,%esi
    625a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    625f:	48 8b 05 8a 5d 00 00 	mov    0x5d8a(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    6266:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    626d:	48 8b 38             	mov    (%rax),%rdi
    6270:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6277:	00 
    6278:	e8 73 c1 ff ff       	callq  23f0 <__vfprintf_chk@plt>
	posix_exit(1);
    627d:	bf 01 00 00 00       	mov    $0x1,%edi
    6282:	e8 48 fe ff ff       	callq  60cf <posix_exit>
}
    6287:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    628c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6293:	00 00 
    6295:	74 05                	je     629c <posix_print_error_and_exit+0xd1>
    6297:	e8 14 c2 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    629c:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    62a3:	c3                   	retq   

00000000000062a4 <posix_print_warning>:
{
    62a4:	f3 0f 1e fa          	endbr64 
    62a8:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    62af:	49 89 fa             	mov    %rdi,%r10
    62b2:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    62b7:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    62bc:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    62c1:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    62c6:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    62cb:	84 c0                	test   %al,%al
    62cd:	74 37                	je     6306 <posix_print_warning+0x62>
    62cf:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    62d4:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    62d9:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    62de:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    62e5:	00 
    62e6:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    62ed:	00 
    62ee:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    62f5:	00 
    62f6:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    62fd:	00 
    62fe:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    6305:	00 
    6306:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    630d:	00 00 
    630f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6314:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    6316:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    631d:	00 
    631e:	48 89 e1             	mov    %rsp,%rcx
    6321:	4c 89 d2             	mov    %r10,%rdx
    6324:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6329:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    632e:	be 01 00 00 00       	mov    $0x1,%esi
    6333:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6338:	48 8b 05 b1 5c 00 00 	mov    0x5cb1(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    633f:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    6346:	48 8b 38             	mov    (%rax),%rdi
    6349:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6350:	00 
    6351:	e8 9a c0 ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    6356:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    635b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6362:	00 00 
    6364:	74 05                	je     636b <posix_print_warning+0xc7>
    6366:	e8 45 c1 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    636b:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    6372:	c3                   	retq   

0000000000006373 <posix_print_trace>:
{
    6373:	f3 0f 1e fa          	endbr64 
    6377:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    637e:	49 89 fa             	mov    %rdi,%r10
    6381:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    6386:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    638b:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    6390:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    6395:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    639a:	84 c0                	test   %al,%al
    639c:	74 37                	je     63d5 <posix_print_trace+0x62>
    639e:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    63a3:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    63a8:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    63ad:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    63b4:	00 
    63b5:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    63bc:	00 
    63bd:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    63c4:	00 
    63c5:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    63cc:	00 
    63cd:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    63d4:	00 
    63d5:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    63dc:	00 00 
    63de:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    63e3:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    63e5:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    63ec:	00 
    63ed:	48 89 e1             	mov    %rsp,%rcx
    63f0:	4c 89 d2             	mov    %r10,%rdx
    63f3:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    63f8:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    63fd:	be 01 00 00 00       	mov    $0x1,%esi
    6402:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6407:	48 8b 05 9a 5b 00 00 	mov    0x5b9a(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    640e:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    6415:	48 8b 38             	mov    (%rax),%rdi
    6418:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    641f:	00 
    6420:	e8 cb bf ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    6425:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    642a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6431:	00 00 
    6433:	74 05                	je     643a <posix_print_trace+0xc7>
    6435:	e8 76 c0 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    643a:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    6441:	c3                   	retq   

0000000000006442 <native_add_tracing_options>:

NATIVE_TASK(decide_about_color, PRE_BOOT_2, 0);

void native_add_tracing_options(void)
{
    6442:	f3 0f 1e fa          	endbr64 
		"force-color", "force-color", 'b',
		NULL, trace_force_color,
		"Enable color in traces even if printing to files/pipes"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(trace_options);
    6446:	48 8d 3d 73 5d 00 00 	lea    0x5d73(%rip),%rdi        # c1c0 <trace_options.3560>
    644d:	e9 d8 07 00 00       	jmpq   6c2a <native_add_command_line_opts>

0000000000006452 <cmd_gen_switch_syntax.constprop.0>:
 * should be used
 *
 * The string is saved in <buf> which has been allocated <size> bytes by the
 * caller
 */
static void cmd_gen_switch_syntax(char *buf, int size,
    6452:	41 55                	push   %r13
    6454:	41 bd 46 00 00 00    	mov    $0x46,%r13d
    645a:	41 54                	push   %r12
    645c:	49 89 f4             	mov    %rsi,%r12
    645f:	55                   	push   %rbp
    6460:	48 89 fd             	mov    %rdi,%rbp
    6463:	53                   	push   %rbx
    6464:	41 53                	push   %r11

	if (size <= 0) {
		return;
	}

	if (args_s_el->is_mandatory == false) {
    6466:	80 7e 01 00          	cmpb   $0x0,0x1(%rsi)
    646a:	75 0c                	jne    6478 <cmd_gen_switch_syntax.constprop.0+0x26>
		*buf++ = '[';
    646c:	c6 07 5b             	movb   $0x5b,(%rdi)
    646f:	48 ff c5             	inc    %rbp
		size--;
    6472:	41 bd 45 00 00 00    	mov    $0x45,%r13d
	}

	if (args_s_el->is_switch == true) {
    6478:	41 80 7c 24 02 00    	cmpb   $0x0,0x2(%r12)
    647e:	4d 8b 4c 24 08       	mov    0x8(%r12),%r9
    6483:	49 63 f5             	movslq %r13d,%rsi
    6486:	74 1c                	je     64a4 <cmd_gen_switch_syntax.constprop.0+0x52>
  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
    6488:	4c 8d 05 41 39 00 00 	lea    0x3941(%rip),%r8        # 9dd0 <default_cmd+0xb70>
    648f:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6493:	48 89 ef             	mov    %rbp,%rdi
    6496:	31 c0                	xor    %eax,%eax
    6498:	ba 01 00 00 00       	mov    $0x1,%edx
    649d:	e8 fe be ff ff       	callq  23a0 <__snprintf_chk@plt>
    64a2:	eb 38                	jmp    64dc <cmd_gen_switch_syntax.constprop.0+0x8a>
		ret = snprintf(buf, size, "-%s", args_s_el->option);
	} else {
		if (args_s_el->type != 'l') {
    64a4:	41 80 7c 24 18 6c    	cmpb   $0x6c,0x18(%r12)
    64aa:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    64af:	74 0c                	je     64bd <cmd_gen_switch_syntax.constprop.0+0x6b>
    64b1:	4c 8d 05 1c 39 00 00 	lea    0x391c(%rip),%r8        # 9dd4 <default_cmd+0xb74>
    64b8:	41 52                	push   %r10
    64ba:	50                   	push   %rax
    64bb:	eb 0a                	jmp    64c7 <cmd_gen_switch_syntax.constprop.0+0x75>
    64bd:	41 50                	push   %r8
    64bf:	4c 8d 05 17 39 00 00 	lea    0x3917(%rip),%r8        # 9ddd <default_cmd+0xb7d>
    64c6:	50                   	push   %rax
    64c7:	48 89 ef             	mov    %rbp,%rdi
    64ca:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    64ce:	ba 01 00 00 00       	mov    $0x1,%edx
    64d3:	31 c0                	xor    %eax,%eax
    64d5:	e8 c6 be ff ff       	callq  23a0 <__snprintf_chk@plt>
    64da:	5e                   	pop    %rsi
    64db:	5f                   	pop    %rdi
    64dc:	48 63 d8             	movslq %eax,%rbx
			ret = snprintf(buf, size, "-%s <%s>...",
					args_s_el->option, args_s_el->name);
		}
	}

	if (ret < 0) {
    64df:	85 db                	test   %ebx,%ebx
    64e1:	79 1a                	jns    64fd <cmd_gen_switch_syntax.constprop.0+0xab>
		posix_print_error_and_exit("Unexpected error in %s %i\n",
    64e3:	ba 07 01 00 00       	mov    $0x107,%edx
    64e8:	48 8d 35 fa 38 00 00 	lea    0x38fa(%rip),%rsi        # 9de9 <default_cmd+0xb89>
    64ef:	48 8d 3d 31 39 00 00 	lea    0x3931(%rip),%rdi        # 9e27 <default_cmd+0xbc7>
    64f6:	31 c0                	xor    %eax,%eax
    64f8:	e8 ce fc ff ff       	callq  61cb <posix_print_error_and_exit>
					   __FILE__, __LINE__);
	}
	if (size - ret < 0) {
    64fd:	41 29 dd             	sub    %ebx,%r13d
    6500:	78 2c                	js     652e <cmd_gen_switch_syntax.constprop.0+0xdc>
		return;
	}
	buf += ret;
	size -= ret;

	if (args_s_el->is_mandatory == false) {
    6502:	41 80 7c 24 01 00    	cmpb   $0x0,0x1(%r12)
	buf += ret;
    6508:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
	if (args_s_el->is_mandatory == false) {
    650d:	49 63 f5             	movslq %r13d,%rsi
    6510:	48 8d 15 2b 39 00 00 	lea    0x392b(%rip),%rdx        # 9e42 <default_cmd+0xbe2>
    6517:	74 07                	je     6520 <cmd_gen_switch_syntax.constprop.0+0xce>
    6519:	48 8d 15 23 39 00 00 	lea    0x3923(%rip),%rdx        # 9e43 <default_cmd+0xbe3>
		snprintf(buf, size, "] ");
	} else {
		snprintf(buf, size, " ");
	}
}
    6520:	59                   	pop    %rcx
    6521:	31 c0                	xor    %eax,%eax
    6523:	5b                   	pop    %rbx
    6524:	5d                   	pop    %rbp
    6525:	41 5c                	pop    %r12
    6527:	41 5d                	pop    %r13
    6529:	e9 a2 bf ff ff       	jmpq   24d0 <snprintf@plt>
    652e:	58                   	pop    %rax
    652f:	5b                   	pop    %rbx
    6530:	5d                   	pop    %rbp
    6531:	41 5c                	pop    %r12
    6533:	41 5d                	pop    %r13
    6535:	c3                   	retq   

0000000000006536 <cmd_is_option>:
{
    6536:	f3 0f 1e fa          	endbr64 
    653a:	41 54                	push   %r12
    653c:	49 89 f8             	mov    %rdi,%r8
    653f:	41 89 d4             	mov    %edx,%r12d
    6542:	55                   	push   %rbp
    6543:	48 89 f5             	mov    %rsi,%rbp
    6546:	53                   	push   %rbx
	int of = 0;
    6547:	31 db                	xor    %ebx,%ebx
    6549:	80 3f 2d             	cmpb   $0x2d,(%rdi)
	if (arg[of] == '-') {
    654c:	0f 94 c0             	sete   %al
	int of = 0;
    654f:	0f 94 c3             	sete   %bl
	if (arg[of] == '-') {
    6552:	0f b6 c0             	movzbl %al,%eax
    6555:	80 3c 07 2d          	cmpb   $0x2d,(%rdi,%rax,1)
    6559:	75 02                	jne    655d <cmd_is_option+0x27>
		of++;
    655b:	ff c3                	inc    %ebx
	if (!with_value) {
    655d:	45 85 e4             	test   %r12d,%r12d
    6560:	75 28                	jne    658a <cmd_is_option+0x54>
		if (strcmp(&arg[of], option) != 0) {
    6562:	48 63 fb             	movslq %ebx,%rdi
    6565:	48 89 ee             	mov    %rbp,%rsi
    6568:	4c 01 c7             	add    %r8,%rdi
    656b:	e8 d0 bf ff ff       	callq  2540 <strcmp@plt>
    6570:	85 c0                	test   %eax,%eax
    6572:	75 68                	jne    65dc <cmd_is_option+0xa6>
	size_t to_match_len = strlen(option);
    6574:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6578:	48 89 ef             	mov    %rbp,%rdi
    657b:	f2 ae                	repnz scas %es:(%rdi),%al
    657d:	48 89 c8             	mov    %rcx,%rax
    6580:	48 f7 d0             	not    %rax
			return of + to_match_len;
    6583:	44 8d 64 03 ff       	lea    -0x1(%rbx,%rax,1),%r12d
    6588:	eb 52                	jmp    65dc <cmd_is_option+0xa6>
    658a:	31 d2                	xor    %edx,%edx
    658c:	44 8d 24 13          	lea    (%rbx,%rdx,1),%r12d
	while (!(arg[of] == 0 && *option == 0)) {
    6590:	8a 4c 15 00          	mov    0x0(%rbp,%rdx,1),%cl
    6594:	49 63 c4             	movslq %r12d,%rax
    6597:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    659b:	89 c6                	mov    %eax,%esi
    659d:	40 08 ce             	or     %cl,%sil
    65a0:	74 24                	je     65c6 <cmd_is_option+0x90>
		if (*option == 0) {
    65a2:	84 c9                	test   %cl,%cl
    65a4:	75 17                	jne    65bd <cmd_is_option+0x87>
			if ((arg[of] == ':') || (arg[of] == '=')) {
    65a6:	3c 3a                	cmp    $0x3a,%al
    65a8:	74 04                	je     65ae <cmd_is_option+0x78>
    65aa:	3c 3d                	cmp    $0x3d,%al
    65ac:	75 2b                	jne    65d9 <cmd_is_option+0xa3>
				of++;
    65ae:	41 ff c4             	inc    %r12d
	if (arg[of] == 0) { /* we need a value to follow */
    65b1:	49 63 c4             	movslq %r12d,%rax
    65b4:	41 80 3c 00 00       	cmpb   $0x0,(%r8,%rax,1)
    65b9:	75 21                	jne    65dc <cmd_is_option+0xa6>
    65bb:	eb 09                	jmp    65c6 <cmd_is_option+0x90>
		if (arg[of] != *option) {
    65bd:	48 ff c2             	inc    %rdx
    65c0:	38 c8                	cmp    %cl,%al
    65c2:	74 c8                	je     658c <cmd_is_option+0x56>
    65c4:	eb 13                	jmp    65d9 <cmd_is_option+0xa3>
		posix_print_error_and_exit("Incorrect option syntax '%s'. The "
    65c6:	4c 89 c6             	mov    %r8,%rsi
    65c9:	48 8d 3d 75 38 00 00 	lea    0x3875(%rip),%rdi        # 9e45 <default_cmd+0xbe5>
    65d0:	31 c0                	xor    %eax,%eax
    65d2:	e8 f4 fb ff ff       	callq  61cb <posix_print_error_and_exit>
    65d7:	eb 03                	jmp    65dc <cmd_is_option+0xa6>
			return 0;
    65d9:	45 31 e4             	xor    %r12d,%r12d
}
    65dc:	44 89 e0             	mov    %r12d,%eax
    65df:	5b                   	pop    %rbx
    65e0:	5d                   	pop    %rbp
    65e1:	41 5c                	pop    %r12
    65e3:	c3                   	retq   

00000000000065e4 <cmd_is_help_option>:
{
    65e4:	f3 0f 1e fa          	endbr64 
    65e8:	55                   	push   %rbp
	if (arg[0] == '-') {
    65e9:	80 3f 2d             	cmpb   $0x2d,(%rdi)
{
    65ec:	48 89 fd             	mov    %rdi,%rbp
	if (arg[0] == '-') {
    65ef:	75 0f                	jne    6600 <cmd_is_help_option+0x1c>
	if (arg[0] == '-') {
    65f1:	80 7f 01 2d          	cmpb   $0x2d,0x1(%rdi)
    65f5:	74 05                	je     65fc <cmd_is_help_option+0x18>
		arg++;
    65f7:	48 ff c5             	inc    %rbp
    65fa:	eb 04                	jmp    6600 <cmd_is_help_option+0x1c>
		arg++;
    65fc:	48 83 c5 02          	add    $0x2,%rbp
	if ((strcasecmp(arg, "?") == 0) ||
    6600:	48 8d 35 98 38 00 00 	lea    0x3898(%rip),%rsi        # 9e9f <default_cmd+0xc3f>
    6607:	48 89 ef             	mov    %rbp,%rdi
    660a:	e8 c1 bd ff ff       	callq  23d0 <strcasecmp@plt>
    660f:	41 89 c0             	mov    %eax,%r8d
		return 1;
    6612:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    6617:	45 85 c0             	test   %r8d,%r8d
    661a:	74 33                	je     664f <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "h") == 0) ||
    661c:	48 8d 35 7e 38 00 00 	lea    0x387e(%rip),%rsi        # 9ea1 <default_cmd+0xc41>
    6623:	48 89 ef             	mov    %rbp,%rdi
    6626:	e8 a5 bd ff ff       	callq  23d0 <strcasecmp@plt>
    662b:	41 89 c0             	mov    %eax,%r8d
		return 1;
    662e:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    6633:	45 85 c0             	test   %r8d,%r8d
    6636:	74 17                	je     664f <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "help") == 0)) {
    6638:	48 8d 35 02 39 00 00 	lea    0x3902(%rip),%rsi        # 9f41 <default_cmd+0xce1>
    663f:	48 89 ef             	mov    %rbp,%rdi
    6642:	e8 89 bd ff ff       	callq  23d0 <strcasecmp@plt>
	    (strcasecmp(arg, "h") == 0) ||
    6647:	85 c0                	test   %eax,%eax
    6649:	0f 94 c0             	sete   %al
    664c:	0f b6 c0             	movzbl %al,%eax
}
    664f:	5d                   	pop    %rbp
    6650:	c3                   	retq   

0000000000006651 <cmd_read_option_value>:
{
    6651:	f3 0f 1e fa          	endbr64 
    6655:	41 54                	push   %r12
    6657:	49 89 fc             	mov    %rdi,%r12
    665a:	55                   	push   %rbp
    665b:	48 89 cd             	mov    %rcx,%rbp
    665e:	53                   	push   %rbx
    665f:	48 89 f3             	mov    %rsi,%rbx
    6662:	48 83 ec 10          	sub    $0x10,%rsp
    6666:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    666d:	00 00 
    666f:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6674:	31 c0                	xor    %eax,%eax
	char *endptr = NULL;
    6676:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    667d:	00 
	switch (type) {
    667e:	80 fa 64             	cmp    $0x64,%dl
    6681:	0f 84 11 01 00 00    	je     6798 <cmd_read_option_value+0x147>
    6687:	7f 26                	jg     66af <cmd_read_option_value+0x5e>
    6689:	80 fa 55             	cmp    $0x55,%dl
    668c:	0f 84 f1 00 00 00    	je     6783 <cmd_read_option_value+0x132>
    6692:	80 fa 62             	cmp    $0x62,%dl
    6695:	74 42                	je     66d9 <cmd_read_option_value+0x88>
    6697:	80 fa 49             	cmp    $0x49,%dl
    669a:	0f 85 06 01 00 00    	jne    67a6 <cmd_read_option_value+0x155>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    66a0:	48 89 e6             	mov    %rsp,%rsi
    66a3:	31 d2                	xor    %edx,%edx
    66a5:	e8 a6 be ff ff       	callq  2550 <strtoll@plt>
    66aa:	e9 e4 00 00 00       	jmpq   6793 <cmd_read_option_value+0x142>
	switch (type) {
    66af:	80 fa 73             	cmp    $0x73,%dl
    66b2:	0f 84 aa 00 00 00    	je     6762 <cmd_read_option_value+0x111>
    66b8:	80 fa 75             	cmp    $0x75,%dl
    66bb:	0f 84 b6 00 00 00    	je     6777 <cmd_read_option_value+0x126>
    66c1:	80 fa 69             	cmp    $0x69,%dl
    66c4:	0f 85 dc 00 00 00    	jne    67a6 <cmd_read_option_value+0x155>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    66ca:	48 89 e6             	mov    %rsp,%rsi
    66cd:	31 d2                	xor    %edx,%edx
    66cf:	e8 bc be ff ff       	callq  2590 <strtol@plt>
    66d4:	e9 b6 00 00 00       	jmpq   678f <cmd_read_option_value+0x13e>
		if (strcasecmp(str, "false") == 0) {
    66d9:	48 8d 35 c3 37 00 00 	lea    0x37c3(%rip),%rsi        # 9ea3 <default_cmd+0xc43>
    66e0:	e8 eb bc ff ff       	callq  23d0 <strcasecmp@plt>
    66e5:	85 c0                	test   %eax,%eax
    66e7:	75 0a                	jne    66f3 <cmd_read_option_value+0xa2>
			*(bool *)dest = false;
    66e9:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 5;
    66ec:	49 8d 44 24 05       	lea    0x5(%r12),%rax
    66f1:	eb 1b                	jmp    670e <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "0") == 0) {
    66f3:	48 8d 35 a1 3c 00 00 	lea    0x3ca1(%rip),%rsi        # a39b <default_cmd+0x113b>
    66fa:	4c 89 e7             	mov    %r12,%rdi
    66fd:	e8 3e be ff ff       	callq  2540 <strcmp@plt>
    6702:	85 c0                	test   %eax,%eax
    6704:	75 11                	jne    6717 <cmd_read_option_value+0xc6>
			*(bool *)dest = false;
    6706:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 1;
    6709:	49 8d 44 24 01       	lea    0x1(%r12),%rax
    670e:	48 89 04 24          	mov    %rax,(%rsp)
	if (!error && endptr && *endptr != 0) {
    6712:	e9 a0 00 00 00       	jmpq   67b7 <cmd_read_option_value+0x166>
		} else if (strcasecmp(str, "true") == 0) {
    6717:	48 8d 35 8b 37 00 00 	lea    0x378b(%rip),%rsi        # 9ea9 <default_cmd+0xc49>
    671e:	4c 89 e7             	mov    %r12,%rdi
    6721:	e8 aa bc ff ff       	callq  23d0 <strcasecmp@plt>
    6726:	85 c0                	test   %eax,%eax
    6728:	75 0a                	jne    6734 <cmd_read_option_value+0xe3>
			*(bool *)dest = true;
    672a:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 4;
    672d:	49 8d 44 24 04       	lea    0x4(%r12),%rax
    6732:	eb da                	jmp    670e <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "1") == 0) {
    6734:	48 8d 35 73 37 00 00 	lea    0x3773(%rip),%rsi        # 9eae <default_cmd+0xc4e>
    673b:	4c 89 e7             	mov    %r12,%rdi
    673e:	e8 fd bd ff ff       	callq  2540 <strcmp@plt>
    6743:	85 c0                	test   %eax,%eax
    6745:	74 16                	je     675d <cmd_read_option_value+0x10c>
		posix_print_error_and_exit("Error reading value of %s '%s'. Use"
    6747:	4c 89 e2             	mov    %r12,%rdx
    674a:	48 89 ee             	mov    %rbp,%rsi
    674d:	48 8d 3d 5c 37 00 00 	lea    0x375c(%rip),%rdi        # 9eb0 <default_cmd+0xc50>
    6754:	31 c0                	xor    %eax,%eax
    6756:	e8 70 fa ff ff       	callq  61cb <posix_print_error_and_exit>
    675b:	eb 68                	jmp    67c5 <cmd_read_option_value+0x174>
			*(bool *)dest = true;
    675d:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 1;
    6760:	eb a7                	jmp    6709 <cmd_read_option_value+0xb8>
		*(char **)dest = (char *)str;
    6762:	48 89 3b             	mov    %rdi,(%rbx)
		endptr = (char *)str + strlen(str);
    6765:	31 c0                	xor    %eax,%eax
    6767:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    676b:	f2 ae                	repnz scas %es:(%rdi),%al
    676d:	48 f7 d1             	not    %rcx
    6770:	49 8d 44 0c ff       	lea    -0x1(%r12,%rcx,1),%rax
    6775:	eb 97                	jmp    670e <cmd_read_option_value+0xbd>
		*(uint32_t *)dest = strtoul(str, &endptr, 0);
    6777:	48 89 e6             	mov    %rsp,%rsi
    677a:	31 d2                	xor    %edx,%edx
    677c:	e8 9f be ff ff       	callq  2620 <strtoul@plt>
    6781:	eb 0c                	jmp    678f <cmd_read_option_value+0x13e>
		*(uint64_t *)dest = strtoull(str, &endptr, 0);
    6783:	48 89 e6             	mov    %rsp,%rsi
    6786:	31 d2                	xor    %edx,%edx
    6788:	e8 93 bd ff ff       	callq  2520 <strtoull@plt>
    678d:	eb 04                	jmp    6793 <cmd_read_option_value+0x142>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    678f:	89 03                	mov    %eax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6791:	eb 24                	jmp    67b7 <cmd_read_option_value+0x166>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    6793:	48 89 03             	mov    %rax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6796:	eb 1f                	jmp    67b7 <cmd_read_option_value+0x166>
		*(double *)dest = strtod(str, &endptr);
    6798:	48 89 e6             	mov    %rsp,%rsi
    679b:	e8 c0 bc ff ff       	callq  2460 <strtod@plt>
    67a0:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
	if (!error && endptr && *endptr != 0) {
    67a4:	eb 11                	jmp    67b7 <cmd_read_option_value+0x166>
	switch (type) {
    67a6:	0f be f2             	movsbl %dl,%esi
		posix_print_error_and_exit(CMD_TYPE_ERROR, type);
    67a9:	48 8d 3d 42 37 00 00 	lea    0x3742(%rip),%rdi        # 9ef2 <default_cmd+0xc92>
    67b0:	31 c0                	xor    %eax,%eax
    67b2:	e8 14 fa ff ff       	callq  61cb <posix_print_error_and_exit>
	if (!error && endptr && *endptr != 0) {
    67b7:	48 8b 04 24          	mov    (%rsp),%rax
    67bb:	48 85 c0             	test   %rax,%rax
    67be:	74 05                	je     67c5 <cmd_read_option_value+0x174>
    67c0:	80 38 00             	cmpb   $0x0,(%rax)
    67c3:	75 82                	jne    6747 <cmd_read_option_value+0xf6>
}
    67c5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    67ca:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    67d1:	00 00 
    67d3:	74 05                	je     67da <cmd_read_option_value+0x189>
    67d5:	e8 d6 bc ff ff       	callq  24b0 <__stack_chk_fail@plt>
    67da:	48 83 c4 10          	add    $0x10,%rsp
    67de:	5b                   	pop    %rbx
    67df:	5d                   	pop    %rbp
    67e0:	41 5c                	pop    %r12
    67e2:	c3                   	retq   

00000000000067e3 <cmd_args_set_defaults>:
{
    67e3:	f3 0f 1e fa          	endbr64 
    67e7:	55                   	push   %rbp
	int count = 0;
    67e8:	31 ed                	xor    %ebp,%ebp
{
    67ea:	53                   	push   %rbx
    67eb:	48 89 fb             	mov    %rdi,%rbx
    67ee:	52                   	push   %rdx
	while (args_struct[count].option != NULL) {
    67ef:	48 63 d5             	movslq %ebp,%rdx
    67f2:	48 6b d2 38          	imul   $0x38,%rdx,%rdx
    67f6:	48 01 da             	add    %rbx,%rdx
    67f9:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
    67fe:	0f 84 a0 00 00 00    	je     68a4 <cmd_args_set_defaults+0xc1>
		if (args_struct[count].dest == NULL) {
    6804:	48 8b 42 20          	mov    0x20(%rdx),%rax
    6808:	ff c5                	inc    %ebp
    680a:	48 85 c0             	test   %rax,%rax
    680d:	74 e0                	je     67ef <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    680f:	0f be 72 18          	movsbl 0x18(%rdx),%esi
    6813:	40 80 fe 64          	cmp    $0x64,%sil
    6817:	74 69                	je     6882 <cmd_args_set_defaults+0x9f>
    6819:	7f 2d                	jg     6848 <cmd_args_set_defaults+0x65>
    681b:	40 80 fe 55          	cmp    $0x55,%sil
    681f:	74 55                	je     6876 <cmd_args_set_defaults+0x93>
    6821:	7f 1a                	jg     683d <cmd_args_set_defaults+0x5a>
    6823:	40 84 f6             	test   %sil,%sil
    6826:	74 c7                	je     67ef <cmd_args_set_defaults+0xc>
    6828:	40 80 fe 49          	cmp    $0x49,%sil
    682c:	75 63                	jne    6891 <cmd_args_set_defaults+0xae>
			*(int64_t *)args_struct[count].dest = INT64_MAX;
    682e:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
    6835:	ff ff 7f 
    6838:	48 89 08             	mov    %rcx,(%rax)
			break;
    683b:	eb b2                	jmp    67ef <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    683d:	40 80 fe 62          	cmp    $0x62,%sil
    6841:	75 4e                	jne    6891 <cmd_args_set_defaults+0xae>
			*(bool *)args_struct[count].dest = false;
    6843:	c6 00 00             	movb   $0x0,(%rax)
			break;
    6846:	eb a7                	jmp    67ef <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6848:	40 80 fe 73          	cmp    $0x73,%sil
    684c:	74 14                	je     6862 <cmd_args_set_defaults+0x7f>
    684e:	40 80 fe 75          	cmp    $0x75,%sil
    6852:	74 17                	je     686b <cmd_args_set_defaults+0x88>
    6854:	40 80 fe 69          	cmp    $0x69,%sil
    6858:	75 37                	jne    6891 <cmd_args_set_defaults+0xae>
			*(int32_t *)args_struct[count].dest = INT32_MAX;
    685a:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
			break;
    6860:	eb 8d                	jmp    67ef <cmd_args_set_defaults+0xc>
			*(char **)args_struct[count].dest = NULL;
    6862:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			break;
    6869:	eb 84                	jmp    67ef <cmd_args_set_defaults+0xc>
			*(uint32_t *)args_struct[count].dest = UINT32_MAX;
    686b:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
			break;
    6871:	e9 79 ff ff ff       	jmpq   67ef <cmd_args_set_defaults+0xc>
			*(uint64_t *)args_struct[count].dest = UINT64_MAX;
    6876:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
			break;
    687d:	e9 6d ff ff ff       	jmpq   67ef <cmd_args_set_defaults+0xc>
			*(double *)args_struct[count].dest = NAN;
    6882:	48 8b 0d 17 2a 00 00 	mov    0x2a17(%rip),%rcx        # 92a0 <default_cmd+0x40>
    6889:	48 89 08             	mov    %rcx,(%rax)
			break;
    688c:	e9 5e ff ff ff       	jmpq   67ef <cmd_args_set_defaults+0xc>
			posix_print_error_and_exit(CMD_TYPE_ERROR,
    6891:	48 8d 3d 5a 36 00 00 	lea    0x365a(%rip),%rdi        # 9ef2 <default_cmd+0xc92>
    6898:	31 c0                	xor    %eax,%eax
    689a:	e8 2c f9 ff ff       	callq  61cb <posix_print_error_and_exit>
			break;
    689f:	e9 4b ff ff ff       	jmpq   67ef <cmd_args_set_defaults+0xc>
}
    68a4:	58                   	pop    %rax
    68a5:	5b                   	pop    %rbx
    68a6:	5d                   	pop    %rbp
    68a7:	c3                   	retq   

00000000000068a8 <cmd_print_switches_help>:

/**
 * Print short list of available switches
 */
void cmd_print_switches_help(struct args_struct_t args_struct[])
{
    68a8:	f3 0f 1e fa          	endbr64 
    68ac:	41 56                	push   %r14
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    68ae:	be 01 00 00 00       	mov    $0x1,%esi
    68b3:	48 8d 0d 5d 36 00 00 	lea    0x365d(%rip),%rcx        # 9f17 <default_cmd+0xcb7>
    68ba:	48 8d 15 6f 36 00 00 	lea    0x366f(%rip),%rdx        # 9f30 <default_cmd+0xcd0>
    68c1:	41 55                	push   %r13
	int count = 0;
	int printed_in_line = strlen(_HELP_SWITCH) + 1;
    68c3:	41 be 19 00 00 00    	mov    $0x19,%r14d
	int count = 0;
    68c9:	45 31 ed             	xor    %r13d,%r13d
{
    68cc:	41 54                	push   %r12
    68ce:	49 89 fc             	mov    %rdi,%r12
    68d1:	55                   	push   %rbp
    68d2:	53                   	push   %rbx
    68d3:	48 83 ec 50          	sub    $0x50,%rsp

	fprintf(stdout, "%s ", _HELP_SWITCH);
    68d7:	48 8b 1d ca 56 00 00 	mov    0x56ca(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
{
    68de:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    68e5:	00 00 
    68e7:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    68ec:	31 c0                	xor    %eax,%eax

	while (args_struct[count].option != NULL) {
		char stringy[_MAX_STRINGY_LEN];

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    68ee:	48 8d 6c 24 02       	lea    0x2(%rsp),%rbp
    68f3:	48 8b 3b             	mov    (%rbx),%rdi
    68f6:	e8 75 bd ff ff       	callq  2670 <__fprintf_chk@plt>
	while (args_struct[count].option != NULL) {
    68fb:	49 63 f5             	movslq %r13d,%rsi
    68fe:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    6902:	4c 01 e6             	add    %r12,%rsi
    6905:	48 83 7e 08 00       	cmpq   $0x0,0x8(%rsi)
    690a:	74 6e                	je     697a <cmd_print_switches_help+0xd2>
		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    690c:	48 89 ef             	mov    %rbp,%rdi
    690f:	e8 3e fb ff ff       	callq  6452 <cmd_gen_switch_syntax.constprop.0>
				      &args_struct[count]);

		if (printed_in_line + strlen(stringy) > _MAX_LINE_WIDTH) {
    6914:	31 c0                	xor    %eax,%eax
    6916:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    691a:	48 89 ef             	mov    %rbp,%rdi
    691d:	f2 ae                	repnz scas %es:(%rdi),%al
    691f:	49 63 c6             	movslq %r14d,%rax
    6922:	48 f7 d1             	not    %rcx
    6925:	48 8d 44 01 ff       	lea    -0x1(%rcx,%rax,1),%rax
    692a:	48 83 f8 64          	cmp    $0x64,%rax
    692e:	76 19                	jbe    6949 <cmd_print_switches_help+0xa1>
    6930:	48 8b 3b             	mov    (%rbx),%rdi
    6933:	48 8d 15 76 36 00 00 	lea    0x3676(%rip),%rdx        # 9fb0 <default_cmd+0xd50>
    693a:	31 c0                	xor    %eax,%eax
			fprintf(stdout, "\n");
			printed_in_line = 0;
    693c:	45 31 f6             	xor    %r14d,%r14d
    693f:	be 01 00 00 00       	mov    $0x1,%esi
    6944:	e8 27 bd ff ff       	callq  2670 <__fprintf_chk@plt>
    6949:	48 8b 3b             	mov    (%rbx),%rdi
    694c:	48 89 e9             	mov    %rbp,%rcx
    694f:	48 8d 15 7b 34 00 00 	lea    0x347b(%rip),%rdx        # 9dd1 <default_cmd+0xb71>
    6956:	31 c0                	xor    %eax,%eax
    6958:	be 01 00 00 00       	mov    $0x1,%esi
		}

		fprintf(stdout, "%s", stringy);
		printed_in_line += strlen(stringy);
		count++;
    695d:	41 ff c5             	inc    %r13d
    6960:	e8 0b bd ff ff       	callq  2670 <__fprintf_chk@plt>
		printed_in_line += strlen(stringy);
    6965:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6969:	31 c0                	xor    %eax,%eax
    696b:	48 89 ef             	mov    %rbp,%rdi
    696e:	f2 ae                	repnz scas %es:(%rdi),%al
    6970:	48 f7 d1             	not    %rcx
    6973:	45 8d 74 0e ff       	lea    -0x1(%r14,%rcx,1),%r14d
		count++;
    6978:	eb 81                	jmp    68fb <cmd_print_switches_help+0x53>
    697a:	48 8b 3b             	mov    (%rbx),%rdi
    697d:	31 c0                	xor    %eax,%eax
    697f:	be 01 00 00 00       	mov    $0x1,%esi
    6984:	48 8d 15 25 36 00 00 	lea    0x3625(%rip),%rdx        # 9fb0 <default_cmd+0xd50>
    698b:	e8 e0 bc ff ff       	callq  2670 <__fprintf_chk@plt>
	}

	fprintf(stdout, "\n");
}
    6990:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    6995:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    699c:	00 00 
    699e:	74 05                	je     69a5 <cmd_print_switches_help+0xfd>
    69a0:	e8 0b bb ff ff       	callq  24b0 <__stack_chk_fail@plt>
    69a5:	48 83 c4 50          	add    $0x50,%rsp
    69a9:	5b                   	pop    %rbx
    69aa:	5d                   	pop    %rbp
    69ab:	41 5c                	pop    %r12
    69ad:	41 5d                	pop    %r13
    69af:	41 5e                	pop    %r14
    69b1:	c3                   	retq   

00000000000069b2 <cmd_print_long_help>:

/**
 * Print the long help message of the program
 */
void cmd_print_long_help(struct args_struct_t args_struct[])
{
    69b2:	f3 0f 1e fa          	endbr64 
    69b6:	41 57                	push   %r15
    69b8:	4c 8d 3d f2 35 00 00 	lea    0x35f2(%rip),%r15        # 9fb1 <default_cmd+0xd51>
    69bf:	41 56                	push   %r14
    69c1:	41 55                	push   %r13
	int ret;
	int count = 0;
    69c3:	45 31 ed             	xor    %r13d,%r13d
{
    69c6:	41 54                	push   %r12
    69c8:	49 89 fc             	mov    %rdi,%r12
    69cb:	55                   	push   %rbp
    69cc:	53                   	push   %rbx
    69cd:	48 83 ec 68          	sub    $0x68,%rsp
    69d1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    69d8:	00 00 
    69da:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    69df:	31 c0                	xor    %eax,%eax
	int printed_in_line = 0;
	char stringy[_MAX_STRINGY_LEN];

	cmd_print_switches_help(args_struct);
    69e1:	e8 c2 fe ff ff       	callq  68a8 <cmd_print_switches_help>

	fprintf(stdout, "\n %-*s:%s\n", _LONG_HELP_ALIGN-1,
    69e6:	48 8b 1d bb 55 00 00 	mov    0x55bb(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
    69ed:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    69f2:	31 c0                	xor    %eax,%eax
    69f4:	4c 8d 0d 39 35 00 00 	lea    0x3539(%rip),%r9        # 9f34 <default_cmd+0xcd4>
    69fb:	4c 8d 05 15 35 00 00 	lea    0x3515(%rip),%r8        # 9f17 <default_cmd+0xcb7>
    6a02:	be 01 00 00 00       	mov    $0x1,%esi
    6a07:	48 8b 3b             	mov    (%rbx),%rdi
    6a0a:	48 8d 15 35 35 00 00 	lea    0x3535(%rip),%rdx        # 9f46 <default_cmd+0xce6>
    6a11:	e8 5a bc ff ff       	callq  2670 <__fprintf_chk@plt>
		_HELP_SWITCH, _HELP_DESCR);

	while (args_struct[count].option != NULL) {
    6a16:	49 63 ed             	movslq %r13d,%rbp
    6a19:	48 6b ed 38          	imul   $0x38,%rbp,%rbp
    6a1d:	4c 01 e5             	add    %r12,%rbp
    6a20:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
    6a25:	0f 84 c8 00 00 00    	je     6af3 <cmd_print_long_help+0x141>
		int printed_right;
		char *toprint;
		int total_to_print;

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6a2b:	4c 8d 44 24 12       	lea    0x12(%rsp),%r8
    6a30:	48 89 ee             	mov    %rbp,%rsi
    6a33:	4c 89 c7             	mov    %r8,%rdi
    6a36:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    6a3b:	e8 12 fa ff ff       	callq  6452 <cmd_gen_switch_syntax.constprop.0>
    6a40:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    6a45:	48 8b 3b             	mov    (%rbx),%rdi
    6a48:	31 c0                	xor    %eax,%eax
    6a4a:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    6a4f:	48 8d 15 fb 34 00 00 	lea    0x34fb(%rip),%rdx        # 9f51 <default_cmd+0xcf1>
    6a56:	be 01 00 00 00       	mov    $0x1,%esi
    6a5b:	e8 10 bc ff ff       	callq  2670 <__fprintf_chk@plt>
				      &args_struct[count]);

		ret = fprintf(stdout, " %-*s:", _LONG_HELP_ALIGN-1, stringy);
		printed_in_line = ret;
		printed_right = 0;
		toprint = args_struct[count].descript;
    6a60:	4c 8b 75 30          	mov    0x30(%rbp),%r14
		total_to_print = strlen(toprint);
    6a64:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6a68:	48 8d 15 e9 34 00 00 	lea    0x34e9(%rip),%rdx        # 9f58 <default_cmd+0xcf8>
    6a6f:	41 89 c0             	mov    %eax,%r8d
    6a72:	31 c0                	xor    %eax,%eax
    6a74:	be 01 00 00 00       	mov    $0x1,%esi
    6a79:	4c 89 f7             	mov    %r14,%rdi
    6a7c:	f2 ae                	repnz scas %es:(%rdi),%al
    6a7e:	48 8b 3b             	mov    (%rbx),%rdi
    6a81:	48 f7 d1             	not    %rcx
    6a84:	8d 41 ff             	lea    -0x1(%rcx),%eax
		ret = fprintf(stdout, "%.*s\n",
    6a87:	b9 64 00 00 00       	mov    $0x64,%ecx
		total_to_print = strlen(toprint);
    6a8c:	89 44 24 08          	mov    %eax,0x8(%rsp)
		ret = fprintf(stdout, "%.*s\n",
    6a90:	44 29 c1             	sub    %r8d,%ecx
    6a93:	31 c0                	xor    %eax,%eax
    6a95:	4d 89 f0             	mov    %r14,%r8
    6a98:	e8 d3 bb ff ff       	callq  2670 <__fprintf_chk@plt>
				_MAX_LINE_WIDTH - printed_in_line,
				&toprint[printed_right]);
		printed_right += ret - 1;
    6a9d:	8d 68 ff             	lea    -0x1(%rax),%ebp

		while (printed_right < total_to_print) {
    6aa0:	3b 6c 24 08          	cmp    0x8(%rsp),%ebp
    6aa4:	7d 45                	jge    6aeb <cmd_print_long_help+0x139>
    6aa6:	48 8b 3b             	mov    (%rbx),%rdi
    6aa9:	4d 89 f8             	mov    %r15,%r8
    6aac:	b9 1e 00 00 00       	mov    $0x1e,%ecx
    6ab1:	be 01 00 00 00       	mov    $0x1,%esi
    6ab6:	48 8d 15 a1 34 00 00 	lea    0x34a1(%rip),%rdx        # 9f5e <default_cmd+0xcfe>
    6abd:	31 c0                	xor    %eax,%eax
    6abf:	e8 ac bb ff ff       	callq  2670 <__fprintf_chk@plt>
			fprintf(stdout, "%*s", _LONG_HELP_ALIGN, "");
			ret = fprintf(stdout, "%.*s\n",
    6ac4:	4c 63 c5             	movslq %ebp,%r8
    6ac7:	48 8b 3b             	mov    (%rbx),%rdi
    6aca:	b9 46 00 00 00       	mov    $0x46,%ecx
    6acf:	4d 01 f0             	add    %r14,%r8
    6ad2:	48 8d 15 7f 34 00 00 	lea    0x347f(%rip),%rdx        # 9f58 <default_cmd+0xcf8>
    6ad9:	be 01 00 00 00       	mov    $0x1,%esi
    6ade:	31 c0                	xor    %eax,%eax
    6ae0:	e8 8b bb ff ff       	callq  2670 <__fprintf_chk@plt>
				      _MAX_LINE_WIDTH - _LONG_HELP_ALIGN,
				      &toprint[printed_right]);
			printed_right += ret - 1;
    6ae5:	8d 6c 05 ff          	lea    -0x1(%rbp,%rax,1),%ebp
    6ae9:	eb b5                	jmp    6aa0 <cmd_print_long_help+0xee>
		}
		count++;
    6aeb:	41 ff c5             	inc    %r13d
    6aee:	e9 23 ff ff ff       	jmpq   6a16 <cmd_print_long_help+0x64>
    6af3:	48 8b 3b             	mov    (%rbx),%rdi
    6af6:	48 8d 15 b3 34 00 00 	lea    0x34b3(%rip),%rdx        # 9fb0 <default_cmd+0xd50>
    6afd:	be 01 00 00 00       	mov    $0x1,%esi
    6b02:	31 c0                	xor    %eax,%eax
    6b04:	e8 67 bb ff ff       	callq  2670 <__fprintf_chk@plt>
    6b09:	48 8b 3b             	mov    (%rbx),%rdi
    6b0c:	31 c0                	xor    %eax,%eax
    6b0e:	be 01 00 00 00       	mov    $0x1,%esi
    6b13:	48 8d 15 48 34 00 00 	lea    0x3448(%rip),%rdx        # 9f62 <default_cmd+0xd02>
    6b1a:	e8 51 bb ff ff       	callq  2670 <__fprintf_chk@plt>
	}
	fprintf(stdout, "\n");
	fprintf(stdout, "Note that which options are available depends on the "
		"enabled features/drivers\n\n");
}
    6b1f:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    6b24:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6b2b:	00 00 
    6b2d:	74 05                	je     6b34 <cmd_print_long_help+0x182>
    6b2f:	e8 7c b9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6b34:	48 83 c4 68          	add    $0x68,%rsp
    6b38:	5b                   	pop    %rbx
    6b39:	5d                   	pop    %rbp
    6b3a:	41 5c                	pop    %r12
    6b3c:	41 5d                	pop    %r13
    6b3e:	41 5e                	pop    %r14
    6b40:	41 5f                	pop    %r15
    6b42:	c3                   	retq   

0000000000006b43 <cmd_parse_one_arg>:
 * Try to find if this argument is in the list (and it is not manual)
 * if it does, try to parse it, set its dest accordingly, and return true
 * if it is not found, return false
 */
bool cmd_parse_one_arg(char *argv, struct args_struct_t args_struct[])
{
    6b43:	f3 0f 1e fa          	endbr64 
    6b47:	41 56                	push   %r14
    6b49:	41 55                	push   %r13
    6b4b:	49 89 f5             	mov    %rsi,%r13
    6b4e:	41 54                	push   %r12
    6b50:	55                   	push   %rbp
    6b51:	48 89 fd             	mov    %rdi,%rbp
    6b54:	53                   	push   %rbx
	int count = 0;
	int ret;

	if (cmd_is_help_option(argv)) {
    6b55:	e8 8a fa ff ff       	callq  65e4 <cmd_is_help_option>
    6b5a:	85 c0                	test   %eax,%eax
    6b5c:	74 0f                	je     6b6d <cmd_parse_one_arg+0x2a>
		cmd_print_long_help(args_struct);
    6b5e:	4c 89 ef             	mov    %r13,%rdi
    6b61:	e8 4c fe ff ff       	callq  69b2 <cmd_print_long_help>
		posix_exit(0);
    6b66:	31 ff                	xor    %edi,%edi
    6b68:	e8 62 f5 ff ff       	callq  60cf <posix_exit>
{
    6b6d:	45 31 f6             	xor    %r14d,%r14d
	}

	while (args_struct[count].option != NULL) {
    6b70:	49 63 de             	movslq %r14d,%rbx
    6b73:	48 6b db 38          	imul   $0x38,%rbx,%rbx
    6b77:	4c 01 eb             	add    %r13,%rbx
    6b7a:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    6b7e:	48 85 f6             	test   %rsi,%rsi
    6b81:	74 78                	je     6bfb <cmd_parse_one_arg+0xb8>
		if (args_struct[count].manual) {
    6b83:	80 3b 00             	cmpb   $0x0,(%rbx)
    6b86:	75 6b                	jne    6bf3 <cmd_parse_one_arg+0xb0>
			count++;
			continue;
		}
		ret = cmd_is_option(argv, args_struct[count].option,
				    !args_struct[count].is_switch);
    6b88:	8a 53 02             	mov    0x2(%rbx),%dl
		ret = cmd_is_option(argv, args_struct[count].option,
    6b8b:	48 89 ef             	mov    %rbp,%rdi
				    !args_struct[count].is_switch);
    6b8e:	83 f2 01             	xor    $0x1,%edx
		ret = cmd_is_option(argv, args_struct[count].option,
    6b91:	0f b6 d2             	movzbl %dl,%edx
    6b94:	e8 9d f9 ff ff       	callq  6536 <cmd_is_option>
    6b99:	41 89 c4             	mov    %eax,%r12d
		if (ret) {
    6b9c:	85 c0                	test   %eax,%eax
    6b9e:	74 53                	je     6bf3 <cmd_parse_one_arg+0xb0>
	if (arg_element->dest != NULL) {
    6ba0:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    6ba4:	48 85 f6             	test   %rsi,%rsi
    6ba7:	74 33                	je     6bdc <cmd_parse_one_arg+0x99>
		if (arg_element->is_switch) {
    6ba9:	80 7b 02 00          	cmpb   $0x0,0x2(%rbx)
    6bad:	0f be 53 18          	movsbl 0x18(%rbx),%edx
    6bb1:	74 1a                	je     6bcd <cmd_parse_one_arg+0x8a>
			if (arg_element->type == 'b') {
    6bb3:	80 fa 62             	cmp    $0x62,%dl
    6bb6:	75 05                	jne    6bbd <cmd_parse_one_arg+0x7a>
				*(bool *)arg_element->dest = true;
    6bb8:	c6 06 01             	movb   $0x1,(%rsi)
    6bbb:	eb 1f                	jmp    6bdc <cmd_parse_one_arg+0x99>
				posix_print_error_and_exit(CMD_ERR_BOOL_SWI);
    6bbd:	48 8d 3d ee 33 00 00 	lea    0x33ee(%rip),%rdi        # 9fb2 <default_cmd+0xd52>
    6bc4:	31 c0                	xor    %eax,%eax
    6bc6:	e8 00 f6 ff ff       	callq  61cb <posix_print_error_and_exit>
    6bcb:	eb 0f                	jmp    6bdc <cmd_parse_one_arg+0x99>
			cmd_read_option_value(&argv[offset],
    6bcd:	48 63 f8             	movslq %eax,%rdi
    6bd0:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
    6bd4:	48 01 ef             	add    %rbp,%rdi
    6bd7:	e8 75 fa ff ff       	callq  6651 <cmd_read_option_value>
	if (arg_element->call_when_found) {
    6bdc:	48 8b 53 28          	mov    0x28(%rbx),%rdx
			cmd_handle_this_matched_arg(argv,
						    ret,
						    &args_struct[count]);
			return true;
    6be0:	b0 01                	mov    $0x1,%al
	if (arg_element->call_when_found) {
    6be2:	48 85 d2             	test   %rdx,%rdx
    6be5:	74 16                	je     6bfd <cmd_parse_one_arg+0xba>
		arg_element->call_when_found(argv, offset);
    6be7:	44 89 e6             	mov    %r12d,%esi
    6bea:	48 89 ef             	mov    %rbp,%rdi
    6bed:	ff d2                	callq  *%rdx
			return true;
    6bef:	b0 01                	mov    $0x1,%al
    6bf1:	eb 0a                	jmp    6bfd <cmd_parse_one_arg+0xba>
    6bf3:	41 ff c6             	inc    %r14d
    6bf6:	e9 75 ff ff ff       	jmpq   6b70 <cmd_parse_one_arg+0x2d>
		}
		count++;
	}
	return false;
    6bfb:	31 c0                	xor    %eax,%eax
}
    6bfd:	5b                   	pop    %rbx
    6bfe:	5d                   	pop    %rbp
    6bff:	41 5c                	pop    %r12
    6c01:	41 5d                	pop    %r13
    6c03:	41 5e                	pop    %r14
    6c05:	c3                   	retq   

0000000000006c06 <native_cleanup_cmd_line>:
static int used_args;
static int args_aval;
#define ARGS_ALLOC_CHUNK_SIZE 20

void native_cleanup_cmd_line(void)
{
    6c06:	f3 0f 1e fa          	endbr64 
	if (args_struct != NULL) { /* LCOV_EXCL_BR_LINE */
    6c0a:	48 8b 3d 97 81 00 00 	mov    0x8197(%rip),%rdi        # eda8 <args_struct>
    6c11:	48 85 ff             	test   %rdi,%rdi
    6c14:	74 13                	je     6c29 <native_cleanup_cmd_line+0x23>
{
    6c16:	50                   	push   %rax
		free(args_struct);
    6c17:	e8 94 b7 ff ff       	callq  23b0 <free@plt>
		args_struct = NULL;
    6c1c:	48 c7 05 81 81 00 00 	movq   $0x0,0x8181(%rip)        # eda8 <args_struct>
    6c23:	00 00 00 00 
	}
}
    6c27:	5a                   	pop    %rdx
    6c28:	c3                   	retq   
    6c29:	c3                   	retq   

0000000000006c2a <native_add_command_line_opts>:
 *
 * Each option to be added is described in one entry of the input <args>
 * This input must be terminated with an entry containing ARG_TABLE_ENDMARKER.
 */
void native_add_command_line_opts(struct args_struct_t *args)
{
    6c2a:	f3 0f 1e fa          	endbr64 
    6c2e:	41 54                	push   %r12
    6c30:	55                   	push   %rbp
    6c31:	48 89 fd             	mov    %rdi,%rbp
    6c34:	53                   	push   %rbx
	int count = 0;
    6c35:	31 db                	xor    %ebx,%ebx

	while (args[count].option != NULL) {
    6c37:	48 63 c3             	movslq %ebx,%rax
    6c3a:	ff c3                	inc    %ebx
    6c3c:	48 6b c0 38          	imul   $0x38,%rax,%rax
    6c40:	48 83 7c 05 08 00    	cmpq   $0x0,0x8(%rbp,%rax,1)
    6c46:	75 ef                	jne    6c37 <native_add_command_line_opts+0xd>
		count++;
	}
	count++; /*for the end marker*/

	if (used_args + count >= args_aval) {
    6c48:	8b 15 ce 81 00 00    	mov    0x81ce(%rip),%edx        # ee1c <used_args>
    6c4e:	8b 05 c4 81 00 00    	mov    0x81c4(%rip),%eax        # ee18 <args_aval>
    6c54:	01 da                	add    %ebx,%edx
    6c56:	39 c2                	cmp    %eax,%edx
    6c58:	7c 44                	jl     6c9e <native_add_command_line_opts+0x74>
		if (growby < ARGS_ALLOC_CHUNK_SIZE) {
			growby = ARGS_ALLOC_CHUNK_SIZE;
		}

		struct args_struct_t *new_args_struct = realloc(args_struct,
				      (args_aval + growby)*
    6c5a:	83 fb 14             	cmp    $0x14,%ebx
    6c5d:	41 bc 14 00 00 00    	mov    $0x14,%r12d
		struct args_struct_t *new_args_struct = realloc(args_struct,
    6c63:	48 8b 3d 3e 81 00 00 	mov    0x813e(%rip),%rdi        # eda8 <args_struct>
				      (args_aval + growby)*
    6c6a:	44 0f 4d e3          	cmovge %ebx,%r12d
    6c6e:	41 01 c4             	add    %eax,%r12d
    6c71:	49 63 f4             	movslq %r12d,%rsi
		struct args_struct_t *new_args_struct = realloc(args_struct,
    6c74:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    6c78:	e8 53 b9 ff ff       	callq  25d0 <realloc@plt>
				      sizeof(struct args_struct_t));
		args_aval += growby;
    6c7d:	44 89 25 94 81 00 00 	mov    %r12d,0x8194(%rip)        # ee18 <args_aval>
		/* LCOV_EXCL_START */
		if (new_args_struct == NULL) {
    6c84:	48 85 c0             	test   %rax,%rax
    6c87:	75 0e                	jne    6c97 <native_add_command_line_opts+0x6d>
			posix_print_error_and_exit("Could not allocate memory");
    6c89:	48 8d 3d 6d 33 00 00 	lea    0x336d(%rip),%rdi        # 9ffd <default_cmd+0xd9d>
    6c90:	e8 36 f5 ff ff       	callq  61cb <posix_print_error_and_exit>
    6c95:	eb 07                	jmp    6c9e <native_add_command_line_opts+0x74>
		} else {
			args_struct = new_args_struct;
    6c97:	48 89 05 0a 81 00 00 	mov    %rax,0x810a(%rip)        # eda8 <args_struct>
		}
		/* LCOV_EXCL_STOP */
	}

	memcpy(&args_struct[used_args], args,
    6c9e:	48 63 05 77 81 00 00 	movslq 0x8177(%rip),%rax        # ee1c <used_args>
    6ca5:	48 63 cb             	movslq %ebx,%rcx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    6ca8:	48 89 ee             	mov    %rbp,%rsi
    6cab:	48 6b c9 38          	imul   $0x38,%rcx,%rcx
    6caf:	48 89 c2             	mov    %rax,%rdx
    6cb2:	48 6b c0 38          	imul   $0x38,%rax,%rax
    6cb6:	48 03 05 eb 80 00 00 	add    0x80eb(%rip),%rax        # eda8 <args_struct>
    6cbd:	48 89 c7             	mov    %rax,%rdi
		count*sizeof(struct args_struct_t));

	used_args += count - 1;
    6cc0:	8d 44 1a ff          	lea    -0x1(%rdx,%rbx,1),%eax
    6cc4:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
    6cc6:	89 05 50 81 00 00    	mov    %eax,0x8150(%rip)        # ee1c <used_args>
	/*
	 * -1 as the end marker should be overwritten next time something
	 * is added
	 */
}
    6ccc:	5b                   	pop    %rbx
    6ccd:	5d                   	pop    %rbp
    6cce:	41 5c                	pop    %r12
    6cd0:	c3                   	retq   

0000000000006cd1 <native_add_testargs_option>:

void native_add_testargs_option(void)
{
    6cd1:	f3 0f 1e fa          	endbr64 
		(void *)NULL, NULL,
		"Any argument that follows will be ignored by the top level, "
		"and made available for possible tests"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(testargs_options);
    6cd5:	48 8d 3d c4 55 00 00 	lea    0x55c4(%rip),%rdi        # c2a0 <testargs_options.2552>
    6cdc:	e9 49 ff ff ff       	jmpq   6c2a <native_add_command_line_opts>

0000000000006ce1 <native_handle_cmd_line>:
 * Handle possible command line arguments.
 *
 * We also store them for later use by possible test applications
 */
void native_handle_cmd_line(int argc, char *argv[])
{
    6ce1:	f3 0f 1e fa          	endbr64 
    6ce5:	41 57                	push   %r15

	cmd_args_set_defaults(args_struct);

	for (i = 1; i < argc; i++) {

		if ((cmd_is_option(argv[i], "testargs", 0))) {
    6ce7:	4c 8d 3d 29 33 00 00 	lea    0x3329(%rip),%r15        # a017 <default_cmd+0xdb7>
{
    6cee:	41 56                	push   %r14
    6cf0:	41 55                	push   %r13
    6cf2:	41 54                	push   %r12
    6cf4:	49 89 f4             	mov    %rsi,%r12
    6cf7:	55                   	push   %rbp
	for (i = 1; i < argc; i++) {
    6cf8:	bd 01 00 00 00       	mov    $0x1,%ebp
{
    6cfd:	53                   	push   %rbx
    6cfe:	89 fb                	mov    %edi,%ebx
    6d00:	52                   	push   %rdx
	native_add_tracing_options();
    6d01:	e8 3c f7 ff ff       	callq  6442 <native_add_tracing_options>
	native_add_testargs_option();
    6d06:	e8 c6 ff ff ff       	callq  6cd1 <native_add_testargs_option>
	cmd_args_set_defaults(args_struct);
    6d0b:	48 8b 3d 96 80 00 00 	mov    0x8096(%rip),%rdi        # eda8 <args_struct>
	s_argv = argv;
    6d12:	4c 89 25 9f 80 00 00 	mov    %r12,0x809f(%rip)        # edb8 <s_argv>
	s_argc = argc;
    6d19:	89 1d 05 81 00 00    	mov    %ebx,0x8105(%rip)        # ee24 <s_argc>
	cmd_args_set_defaults(args_struct);
    6d1f:	e8 bf fa ff ff       	callq  67e3 <cmd_args_set_defaults>
	for (i = 1; i < argc; i++) {
    6d24:	41 89 ee             	mov    %ebp,%r14d
    6d27:	39 eb                	cmp    %ebp,%ebx
    6d29:	7e 65                	jle    6d90 <native_handle_cmd_line+0xaf>
		if ((cmd_is_option(argv[i], "testargs", 0))) {
    6d2b:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    6d2f:	31 d2                	xor    %edx,%edx
    6d31:	4c 89 fe             	mov    %r15,%rsi
    6d34:	4c 8d 6d 01          	lea    0x1(%rbp),%r13
    6d38:	e8 f9 f7 ff ff       	callq  6536 <cmd_is_option>
    6d3d:	85 c0                	test   %eax,%eax
    6d3f:	74 18                	je     6d59 <native_handle_cmd_line+0x78>
			test_argc = argc - i - 1;
    6d41:	ff cb                	dec    %ebx
			test_argv = &argv[i+1];
    6d43:	4b 8d 04 ec          	lea    (%r12,%r13,8),%rax
			test_argc = argc - i - 1;
    6d47:	44 29 f3             	sub    %r14d,%ebx
			test_argv = &argv[i+1];
    6d4a:	48 89 05 5f 80 00 00 	mov    %rax,0x805f(%rip)        # edb0 <test_argv>
			test_argc = argc - i - 1;
    6d51:	89 1d c9 80 00 00    	mov    %ebx,0x80c9(%rip)        # ee20 <test_argc>
			break;
    6d57:	eb 37                	jmp    6d90 <native_handle_cmd_line+0xaf>
		}

		if (!cmd_parse_one_arg(argv[i], args_struct)) {
    6d59:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    6d5d:	48 8b 35 44 80 00 00 	mov    0x8044(%rip),%rsi        # eda8 <args_struct>
    6d64:	e8 da fd ff ff       	callq  6b43 <cmd_parse_one_arg>
    6d69:	84 c0                	test   %al,%al
    6d6b:	75 1e                	jne    6d8b <native_handle_cmd_line+0xaa>
			cmd_print_switches_help(args_struct);
    6d6d:	48 8b 3d 34 80 00 00 	mov    0x8034(%rip),%rdi        # eda8 <args_struct>
    6d74:	e8 2f fb ff ff       	callq  68a8 <cmd_print_switches_help>
	posix_print_error_and_exit("Incorrect option '%s'. Did you misspell it?"
    6d79:	49 8b 34 ec          	mov    (%r12,%rbp,8),%rsi
    6d7d:	48 8d 3d 9c 32 00 00 	lea    0x329c(%rip),%rdi        # a020 <default_cmd+0xdc0>
    6d84:	31 c0                	xor    %eax,%eax
    6d86:	e8 40 f4 ff ff       	callq  61cb <posix_print_error_and_exit>
	for (i = 1; i < argc; i++) {
    6d8b:	4c 89 ed             	mov    %r13,%rbp
    6d8e:	eb 94                	jmp    6d24 <native_handle_cmd_line+0x43>
			print_invalid_opt_error(argv[i]);
		}
	}
}
    6d90:	58                   	pop    %rax
    6d91:	5b                   	pop    %rbx
    6d92:	5d                   	pop    %rbp
    6d93:	41 5c                	pop    %r12
    6d95:	41 5d                	pop    %r13
    6d97:	41 5e                	pop    %r14
    6d99:	41 5f                	pop    %r15
    6d9b:	c3                   	retq   

0000000000006d9c <hw_counter_init>:

/**
 * Initialize the counter with prescaler of HW
 */
void hw_counter_init(void)
{
    6d9c:	f3 0f 1e fa          	endbr64 
	hw_counter_timer = NEVER;
    6da0:	48 8d 05 31 80 00 00 	lea    0x8031(%rip),%rax        # edd8 <hw_counter_timer>
	counter_target = NEVER;
	counter_value = 0;
	counter_running = false;
    6da7:	c6 05 94 80 00 00 00 	movb   $0x0,0x8094(%rip)        # ee42 <counter_running>
	counter_target = NEVER;
    6dae:	48 c7 05 0f 80 00 00 	movq   $0xffffffffffffffff,0x800f(%rip)        # edc8 <counter_target>
    6db5:	ff ff ff ff 
	hw_counter_timer = NEVER;
    6db9:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	counter_value = 0;
    6dc0:	48 c7 05 05 80 00 00 	movq   $0x0,0x8005(%rip)        # edd0 <counter_value>
    6dc7:	00 00 00 00 
	counter_period = NEVER;
    6dcb:	48 c7 05 ea 7f 00 00 	movq   $0xffffffffffffffff,0x7fea(%rip)        # edc0 <counter_period>
    6dd2:	ff ff ff ff 
}
    6dd6:	c3                   	retq   

0000000000006dd7 <hw_counter_triggered>:

void hw_counter_triggered(void)
{
    6dd7:	f3 0f 1e fa          	endbr64 
	if (!counter_running) {
    6ddb:	80 3d 60 80 00 00 00 	cmpb   $0x0,0x8060(%rip)        # ee42 <counter_running>
{
    6de2:	53                   	push   %rbx
    6de3:	48 8d 1d ee 7f 00 00 	lea    0x7fee(%rip),%rbx        # edd8 <hw_counter_timer>
	if (!counter_running) {
    6dea:	75 09                	jne    6df5 <hw_counter_triggered+0x1e>
		hw_counter_timer = NEVER;
    6dec:	48 c7 03 ff ff ff ff 	movq   $0xffffffffffffffff,(%rbx)
		return;
    6df3:	eb 34                	jmp    6e29 <hw_counter_triggered+0x52>
	}

	hw_counter_timer = hwm_get_time() + counter_period;
    6df5:	e8 da e9 ff ff       	callq  57d4 <hwm_get_time>
    6dfa:	48 03 05 bf 7f 00 00 	add    0x7fbf(%rip),%rax        # edc0 <counter_period>
    6e01:	48 89 03             	mov    %rax,(%rbx)
	counter_value = counter_value + 1;
    6e04:	48 8b 05 c5 7f 00 00 	mov    0x7fc5(%rip),%rax        # edd0 <counter_value>
    6e0b:	48 ff c0             	inc    %rax

	if (counter_value == counter_target) {
    6e0e:	48 3b 05 b3 7f 00 00 	cmp    0x7fb3(%rip),%rax        # edc8 <counter_target>
	counter_value = counter_value + 1;
    6e15:	48 89 05 b4 7f 00 00 	mov    %rax,0x7fb4(%rip)        # edd0 <counter_value>
	if (counter_value == counter_target) {
    6e1c:	75 0b                	jne    6e29 <hw_counter_triggered+0x52>
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    6e1e:	bf 02 00 00 00       	mov    $0x2,%edi
	}
}
    6e23:	5b                   	pop    %rbx
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    6e24:	e9 19 f2 ff ff       	jmpq   6042 <hw_irq_ctrl_set_irq>
}
    6e29:	5b                   	pop    %rbx
    6e2a:	c3                   	retq   

0000000000006e2b <tc_query_caps>:

	return 0;
}

static int tc_query_caps(const struct device *dev)
{
    6e2b:	f3 0f 1e fa          	endbr64 
	return (CAP_RAW_KEY | CAP_SEPARATE_IO_BUFS | CAP_SYNC_OPS);
}
    6e2f:	b8 32 00 00 00       	mov    $0x32,%eax
    6e34:	c3                   	retq   

0000000000006e35 <tc_shim_init>:

	return 0;
}

static int tc_shim_init(const struct device *dev)
{
    6e35:	f3 0f 1e fa          	endbr64 
	int i;

	ARG_UNUSED(dev);
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
		tc_driver_state[i].in_use = 0;
    6e39:	c7 05 bd 7b 00 00 00 	movl   $0x0,0x7bbd(%rip)        # ea00 <tc_driver_state>
    6e40:	00 00 00 
	}

	return 0;
}
    6e43:	31 c0                	xor    %eax,%eax
		tc_driver_state[i].in_use = 0;
    6e45:	c7 05 65 7c 00 00 00 	movl   $0x0,0x7c65(%rip)        # eab4 <tc_driver_state+0xb4>
    6e4c:	00 00 00 
}
    6e4f:	c3                   	retq   

0000000000006e50 <tc_session_free>:
{
    6e50:	f3 0f 1e fa          	endbr64 
	struct tc_shim_drv_state *data =  sessn->drv_sessn_state;
    6e54:	48 8b 56 20          	mov    0x20(%rsi),%rdx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    6e58:	31 c0                	xor    %eax,%eax
    6e5a:	b9 2d 00 00 00       	mov    $0x2d,%ecx
    6e5f:	48 89 d7             	mov    %rdx,%rdi
    6e62:	f3 ab                	rep stos %eax,%es:(%rdi)
}
    6e64:	c3                   	retq   

0000000000006e65 <tc_session_setup>:
{
    6e65:	f3 0f 1e fa          	endbr64 
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    6e69:	ff ca                	dec    %edx
		return -EINVAL;
    6e6b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    6e70:	0f 85 fb 00 00 00    	jne    6f71 <tc_session_setup+0x10c>
{
    6e76:	55                   	push   %rbp
    6e77:	53                   	push   %rbx
    6e78:	48 89 f3             	mov    %rsi,%rbx
    6e7b:	57                   	push   %rdi
	if (!(ctx->flags & CAP_SYNC_OPS)) {
    6e7c:	f6 46 36 20          	testb  $0x20,0x36(%rsi)
    6e80:	0f 84 e7 00 00 00    	je     6f6d <tc_session_setup+0x108>
	if (ctx->keylen != TC_AES_KEY_SIZE) {
    6e86:	66 83 7e 34 10       	cmpw   $0x10,0x34(%rsi)
    6e8b:	0f 85 dc 00 00 00    	jne    6f6d <tc_session_setup+0x108>
	if (op_type == CRYPTO_CIPHER_OP_ENCRYPT) {
    6e91:	41 ff c8             	dec    %r8d
    6e94:	75 1c                	jne    6eb2 <tc_session_setup+0x4d>
		switch (mode) {
    6e96:	83 f9 03             	cmp    $0x3,%ecx
    6e99:	74 1c                	je     6eb7 <tc_session_setup+0x52>
    6e9b:	83 f9 04             	cmp    $0x4,%ecx
    6e9e:	74 2f                	je     6ecf <tc_session_setup+0x6a>
    6ea0:	83 f9 02             	cmp    $0x2,%ecx
    6ea3:	0f 85 c4 00 00 00    	jne    6f6d <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_encrypt;
    6ea9:	48 8d 05 0e 03 00 00 	lea    0x30e(%rip),%rax        # 71be <do_cbc_encrypt>
    6eb0:	eb 49                	jmp    6efb <tc_session_setup+0x96>
		switch (mode) {
    6eb2:	83 f9 03             	cmp    $0x3,%ecx
    6eb5:	75 21                	jne    6ed8 <tc_session_setup+0x73>
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    6eb7:	83 7b 30 20          	cmpl   $0x20,0x30(%rbx)
		return -EINVAL;
    6ebb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    6ec0:	0f 85 a7 00 00 00    	jne    6f6d <tc_session_setup+0x108>
			ctx->ops.ctr_crypt_hndlr = do_ctr_op;
    6ec6:	48 8d 05 5a 02 00 00 	lea    0x25a(%rip),%rax        # 7127 <do_ctr_op>
    6ecd:	eb 2c                	jmp    6efb <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_encrypt_mac;
    6ecf:	48 8d 05 a1 01 00 00 	lea    0x1a1(%rip),%rax        # 7077 <do_ccm_encrypt_mac>
    6ed6:	eb 23                	jmp    6efb <tc_session_setup+0x96>
		switch (mode) {
    6ed8:	83 f9 04             	cmp    $0x4,%ecx
    6edb:	74 17                	je     6ef4 <tc_session_setup+0x8f>
    6edd:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    6ee2:	83 f9 02             	cmp    $0x2,%ecx
    6ee5:	0f 85 82 00 00 00    	jne    6f6d <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_decrypt;
    6eeb:	48 8d 05 3c 01 00 00 	lea    0x13c(%rip),%rax        # 702e <do_cbc_decrypt>
    6ef2:	eb 07                	jmp    6efb <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_decrypt_auth;
    6ef4:	48 8d 05 77 00 00 00 	lea    0x77(%rip),%rax        # 6f72 <do_ccm_decrypt_auth>
    6efb:	48 89 43 08          	mov    %rax,0x8(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    6eff:	48 63 05 fa 7a 00 00 	movslq 0x7afa(%rip),%rax        # ea00 <tc_driver_state>
	ctx->ops.cipher_mode = mode;
    6f06:	89 0b                	mov    %ecx,(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    6f08:	85 c0                	test   %eax,%eax
    6f0a:	74 1f                	je     6f2b <tc_session_setup+0xc6>
    6f0c:	83 3d a1 7b 00 00 00 	cmpl   $0x0,0x7ba1(%rip)        # eab4 <tc_driver_state+0xb4>
		return -ENOSPC;
    6f13:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
		if (tc_driver_state[i].in_use == 0) {
    6f18:	75 53                	jne    6f6d <tc_session_setup+0x108>
			tc_driver_state[i].in_use = 1;
    6f1a:	c7 05 90 7b 00 00 01 	movl   $0x1,0x7b90(%rip)        # eab4 <tc_driver_state+0xb4>
    6f21:	00 00 00 
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
    6f24:	b8 01 00 00 00       	mov    $0x1,%eax
    6f29:	eb 0a                	jmp    6f35 <tc_session_setup+0xd0>
			tc_driver_state[i].in_use = 1;
    6f2b:	c7 05 cb 7a 00 00 01 	movl   $0x1,0x7acb(%rip)        # ea00 <tc_driver_state>
    6f32:	00 00 00 
	data = &tc_driver_state[idx];
    6f35:	48 69 c0 b4 00 00 00 	imul   $0xb4,%rax,%rax
    6f3c:	48 8d 15 bd 7a 00 00 	lea    0x7abd(%rip),%rdx        # ea00 <tc_driver_state>
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    6f43:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    6f47:	48 8d 7c 02 04       	lea    0x4(%rdx,%rax,1),%rdi
	data = &tc_driver_state[idx];
    6f4c:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    6f50:	e8 48 d3 ff ff       	callq  429d <tc_aes128_set_encrypt_key>
    6f55:	85 c0                	test   %eax,%eax
    6f57:	75 0e                	jne    6f67 <tc_session_setup+0x102>
		tc_driver_state[idx].in_use = 0;
    6f59:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
		return -EIO;
    6f60:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    6f65:	eb 06                	jmp    6f6d <tc_session_setup+0x108>
	ctx->drv_sessn_state = data;
    6f67:	48 89 6b 20          	mov    %rbp,0x20(%rbx)
	return 0;
    6f6b:	31 c0                	xor    %eax,%eax
}
    6f6d:	5a                   	pop    %rdx
    6f6e:	5b                   	pop    %rbx
    6f6f:	5d                   	pop    %rbp
    6f70:	c3                   	retq   
    6f71:	c3                   	retq   

0000000000006f72 <do_ccm_decrypt_auth>:
{
    6f72:	f3 0f 1e fa          	endbr64 
    6f76:	41 55                	push   %r13
    6f78:	41 54                	push   %r12
    6f7a:	49 89 f4             	mov    %rsi,%r12
    6f7d:	55                   	push   %rbp
    6f7e:	53                   	push   %rbx
    6f7f:	48 89 fb             	mov    %rdi,%rbx
    6f82:	48 83 ec 28          	sub    $0x28,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    6f86:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    6f8a:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    6f8f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6f96:	00 00 
    6f98:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6f9d:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    6f9f:	48 8b 47 20          	mov    0x20(%rdi),%rax
    6fa3:	49 89 e5             	mov    %rsp,%r13
	struct cipher_pkt *op = aead_op->pkt;
    6fa6:	48 8b 2e             	mov    (%rsi),%rbp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    6fa9:	4c 89 ef             	mov    %r13,%rdi
    6fac:	48 8d 70 04          	lea    0x4(%rax),%rsi
    6fb0:	e8 1a da ff ff       	callq  49cf <tc_ccm_config>
    6fb5:	85 c0                	test   %eax,%eax
    6fb7:	75 07                	jne    6fc0 <do_ccm_decrypt_auth+0x4e>
		return -EIO;
    6fb9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    6fbe:	eb 4e                	jmp    700e <do_ccm_decrypt_auth+0x9c>
	if (aead_op->tag != op->in_buf + op->in_len) {
    6fc0:	48 63 45 08          	movslq 0x8(%rbp),%rax
    6fc4:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    6fc8:	48 89 c2             	mov    %rax,%rdx
    6fcb:	4c 01 c0             	add    %r8,%rax
    6fce:	49 39 44 24 18       	cmp    %rax,0x18(%r12)
    6fd3:	75 e4                	jne    6fb9 <do_ccm_decrypt_auth+0x47>
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    6fd5:	4d 8b 54 24 08       	mov    0x8(%r12),%r10
    6fda:	8b 75 18             	mov    0x18(%rbp),%esi
    6fdd:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
					   op->in_len + ccm_param->tag_len,
    6fe1:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    6fe5:	41 51                	push   %r9
    6fe7:	41 55                	push   %r13
    6fe9:	41 8b 4c 24 10       	mov    0x10(%r12),%ecx
    6fee:	44 8d 0c 10          	lea    (%rax,%rdx,1),%r9d
    6ff2:	4c 89 d2             	mov    %r10,%rdx
    6ff5:	e8 d5 db ff ff       	callq  4bcf <tc_ccm_decryption_verification>
    6ffa:	41 5a                	pop    %r10
    6ffc:	41 5b                	pop    %r11
    6ffe:	85 c0                	test   %eax,%eax
    7000:	74 b7                	je     6fb9 <do_ccm_decrypt_auth+0x47>
	op->out_len = op->in_len + ccm_param->tag_len;
    7002:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
    7006:	03 45 08             	add    0x8(%rbp),%eax
    7009:	89 45 1c             	mov    %eax,0x1c(%rbp)
	return 0;
    700c:	31 c0                	xor    %eax,%eax
}
    700e:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    7013:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    701a:	00 00 
    701c:	74 05                	je     7023 <do_ccm_decrypt_auth+0xb1>
    701e:	e8 8d b4 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    7023:	48 83 c4 28          	add    $0x28,%rsp
    7027:	5b                   	pop    %rbx
    7028:	5d                   	pop    %rbp
    7029:	41 5c                	pop    %r12
    702b:	41 5d                	pop    %r13
    702d:	c3                   	retq   

000000000000702e <do_cbc_decrypt>:
{
    702e:	f3 0f 1e fa          	endbr64 
	if (iv != op->in_buf) {
    7032:	4c 8b 06             	mov    (%rsi),%r8
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    7035:	48 8b 47 20          	mov    0x20(%rdi),%rax
	if (iv != op->in_buf) {
    7039:	49 39 d0             	cmp    %rdx,%r8
    703c:	75 33                	jne    7071 <do_cbc_decrypt+0x43>
{
    703e:	53                   	push   %rbx
    703f:	48 89 f3             	mov    %rsi,%rbx
			op->in_len - TC_AES_BLOCK_SIZE,
    7042:	8b 4e 08             	mov    0x8(%rsi),%ecx
			op->in_buf + TC_AES_BLOCK_SIZE,
    7045:	49 8d 50 10          	lea    0x10(%r8),%rdx
	if (tc_cbc_mode_decrypt(op->out_buf,
    7049:	8b 76 18             	mov    0x18(%rsi),%esi
    704c:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7050:	4c 8d 48 04          	lea    0x4(%rax),%r9
			op->in_len - TC_AES_BLOCK_SIZE,
    7054:	83 e9 10             	sub    $0x10,%ecx
	if (tc_cbc_mode_decrypt(op->out_buf,
    7057:	e8 f1 d5 ff ff       	callq  464d <tc_cbc_mode_decrypt>
    705c:	85 c0                	test   %eax,%eax
    705e:	75 07                	jne    7067 <do_cbc_decrypt+0x39>
		return -EIO;
    7060:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    7065:	eb 08                	jmp    706f <do_cbc_decrypt+0x41>
	op->out_len = op->in_len;
    7067:	8b 43 08             	mov    0x8(%rbx),%eax
    706a:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    706d:	31 c0                	xor    %eax,%eax
}
    706f:	5b                   	pop    %rbx
    7070:	c3                   	retq   
		return -EIO;
    7071:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
    7076:	c3                   	retq   

0000000000007077 <do_ccm_encrypt_mac>:
{
    7077:	f3 0f 1e fa          	endbr64 
    707b:	41 54                	push   %r12
    707d:	55                   	push   %rbp
    707e:	48 89 f5             	mov    %rsi,%rbp
    7081:	53                   	push   %rbx
    7082:	48 83 ec 20          	sub    $0x20,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7086:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    708a:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    708f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7096:	00 00 
    7098:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    709d:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    709f:	48 8b 47 20          	mov    0x20(%rdi),%rax
    70a3:	49 89 e4             	mov    %rsp,%r12
	struct cipher_pkt *op = aead_op->pkt;
    70a6:	48 8b 1e             	mov    (%rsi),%rbx
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    70a9:	4c 89 e7             	mov    %r12,%rdi
    70ac:	48 8d 70 04          	lea    0x4(%rax),%rsi
    70b0:	e8 1a d9 ff ff       	callq  49cf <tc_ccm_config>
    70b5:	85 c0                	test   %eax,%eax
    70b7:	75 07                	jne    70c0 <do_ccm_encrypt_mac+0x49>
		return -EIO;
    70b9:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    70be:	eb 49                	jmp    7109 <do_ccm_encrypt_mac+0x92>
	if (tc_ccm_generation_encryption(op->out_buf, op->out_buf_max,
    70c0:	44 8b 4b 08          	mov    0x8(%rbx),%r9d
    70c4:	8b 73 18             	mov    0x18(%rbx),%esi
    70c7:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    70cb:	8b 4d 10             	mov    0x10(%rbp),%ecx
    70ce:	50                   	push   %rax
    70cf:	48 8b 55 08          	mov    0x8(%rbp),%rdx
    70d3:	4c 8b 03             	mov    (%rbx),%r8
    70d6:	41 54                	push   %r12
    70d8:	e8 3c d9 ff ff       	callq  4a19 <tc_ccm_generation_encryption>
    70dd:	5a                   	pop    %rdx
    70de:	59                   	pop    %rcx
    70df:	85 c0                	test   %eax,%eax
    70e1:	74 d6                	je     70b9 <do_ccm_encrypt_mac+0x42>
	if (aead_op->tag) {
    70e3:	48 8b 45 18          	mov    0x18(%rbp),%rax
    70e7:	48 85 c0             	test   %rax,%rax
    70ea:	74 11                	je     70fd <do_ccm_encrypt_mac+0x86>
		memcpy(aead_op->tag, op->out_buf + op->in_len, ccm.mlen);
    70ec:	48 63 73 08          	movslq 0x8(%rbx),%rsi
    70f0:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    70f4:	48 89 c7             	mov    %rax,%rdi
    70f7:	48 03 73 10          	add    0x10(%rbx),%rsi
    70fb:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
	op->out_len = op->in_len + ccm.mlen;
    70fd:	8b 44 24 10          	mov    0x10(%rsp),%eax
    7101:	03 43 08             	add    0x8(%rbx),%eax
    7104:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    7107:	31 c0                	xor    %eax,%eax
}
    7109:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    710e:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    7115:	00 00 
    7117:	74 05                	je     711e <do_ccm_encrypt_mac+0xa7>
    7119:	e8 92 b3 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    711e:	48 83 c4 20          	add    $0x20,%rsp
    7122:	5b                   	pop    %rbx
    7123:	5d                   	pop    %rbp
    7124:	41 5c                	pop    %r12
    7126:	c3                   	retq   

0000000000007127 <do_ctr_op>:
{
    7127:	f3 0f 1e fa          	endbr64 
    712b:	55                   	push   %rbp
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    712c:	0f 57 c0             	xorps  %xmm0,%xmm0
    712f:	b9 10 00 00 00       	mov    $0x10,%ecx
{
    7134:	53                   	push   %rbx
    7135:	48 89 f3             	mov    %rsi,%rbx
    7138:	48 89 d6             	mov    %rdx,%rsi
    713b:	48 83 ec 28          	sub    $0x28,%rsp
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    713f:	0f b7 57 34          	movzwl 0x34(%rdi),%edx
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    7143:	48 8b 6f 20          	mov    0x20(%rdi),%rbp
{
    7147:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    714e:	00 00 
    7150:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    7155:	31 c0                	xor    %eax,%eax
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7157:	8b 47 30             	mov    0x30(%rdi),%eax
    715a:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    715f:	0f 11 44 24 08       	movups %xmm0,0x8(%rsp)
    7164:	4c 89 c7             	mov    %r8,%rdi
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7167:	c1 e8 03             	shr    $0x3,%eax
    716a:	29 c2                	sub    %eax,%edx
	memcpy(ctr, iv, ivlen);
    716c:	48 63 d2             	movslq %edx,%rdx
    716f:	e8 fc b3 ff ff       	callq  2570 <__memcpy_chk@plt>
	if (tc_ctr_mode(op->out_buf, op->out_buf_max, op->in_buf,
    7174:	8b 4b 08             	mov    0x8(%rbx),%ecx
    7177:	8b 73 18             	mov    0x18(%rbx),%esi
    717a:	4c 8d 4d 04          	lea    0x4(%rbp),%r9
    717e:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7182:	48 8b 13             	mov    (%rbx),%rdx
    7185:	49 89 c0             	mov    %rax,%r8
    7188:	e8 8a d5 ff ff       	callq  4717 <tc_ctr_mode>
    718d:	41 89 c0             	mov    %eax,%r8d
    7190:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    7195:	45 85 c0             	test   %r8d,%r8d
    7198:	74 08                	je     71a2 <do_ctr_op+0x7b>
	op->out_len = op->in_len;
    719a:	8b 43 08             	mov    0x8(%rbx),%eax
    719d:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    71a0:	31 c0                	xor    %eax,%eax
}
    71a2:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    71a7:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    71ae:	00 00 
    71b0:	74 05                	je     71b7 <do_ctr_op+0x90>
    71b2:	e8 f9 b2 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    71b7:	48 83 c4 28          	add    $0x28,%rsp
    71bb:	5b                   	pop    %rbx
    71bc:	5d                   	pop    %rbp
    71bd:	c3                   	retq   

00000000000071be <do_cbc_encrypt>:
{
    71be:	f3 0f 1e fa          	endbr64 
    71c2:	53                   	push   %rbx
    71c3:	48 89 f3             	mov    %rsi,%rbx
	if (tc_cbc_mode_encrypt(op->out_buf,
    71c6:	48 8b 47 20          	mov    0x20(%rdi),%rax
{
    71ca:	49 89 d0             	mov    %rdx,%r8
	if (tc_cbc_mode_encrypt(op->out_buf,
    71cd:	8b 4e 08             	mov    0x8(%rsi),%ecx
    71d0:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    71d4:	8b 76 18             	mov    0x18(%rsi),%esi
    71d7:	48 8b 13             	mov    (%rbx),%rdx
    71da:	4c 8d 48 04          	lea    0x4(%rax),%r9
    71de:	e8 41 d3 ff ff       	callq  4524 <tc_cbc_mode_encrypt>
    71e3:	41 89 c0             	mov    %eax,%r8d
    71e6:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    71eb:	45 85 c0             	test   %r8d,%r8d
    71ee:	74 08                	je     71f8 <do_cbc_encrypt+0x3a>
	op->out_len = op->in_len;
    71f0:	8b 43 08             	mov    0x8(%rbx),%eax
    71f3:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    71f6:	31 c0                	xor    %eax,%eax
}
    71f8:	5b                   	pop    %rbx
    71f9:	c3                   	retq   

00000000000071fa <np_uart_tty_poll_in>:
 * @retval 0 If a character arrived and was stored in p_char
 * @retval -1 If no character was available to read
 */
static int np_uart_tty_poll_in(const struct device *dev,
			       unsigned char *p_char)
{
    71fa:	f3 0f 1e fa          	endbr64 
    71fe:	50                   	push   %rax
	int n = -1;
	int in_f = ((struct native_uart_status *)dev->data)->in_fd;
    71ff:	48 8b 47 20          	mov    0x20(%rdi),%rax
	return __read_chk (__fd, __buf, __nbytes, __bos0 (__buf));

      if (__nbytes > __bos0 (__buf))
	return __read_chk_warn (__fd, __buf, __nbytes, __bos0 (__buf));
    }
  return __read_alias (__fd, __buf, __nbytes);
    7203:	ba 01 00 00 00       	mov    $0x1,%edx
    7208:	8b 78 04             	mov    0x4(%rax),%edi
    720b:	e8 00 b3 ff ff       	callq  2510 <read@plt>
	n = read(in_f, p_char, 1);
	if (n == -1) {
		return -1;
	}
	return 0;
}
    7210:	5a                   	pop    %rdx
	if (n == -1) {
    7211:	ff c0                	inc    %eax
    7213:	0f 94 c0             	sete   %al
    7216:	0f b6 c0             	movzbl %al,%eax
    7219:	f7 d8                	neg    %eax
}
    721b:	c3                   	retq   

000000000000721c <np_cleanup_uart>:

	native_add_command_line_opts(uart_options);
}

static void np_cleanup_uart(void)
{
    721c:	f3 0f 1e fa          	endbr64 
	if (IS_ENABLED(CONFIG_NATIVE_UART_0_ON_OWN_PTY)) {
		if (native_uart_status_0.in_fd != 0) {
    7220:	8b 3d be 7b 00 00    	mov    0x7bbe(%rip),%edi        # ede4 <native_uart_status_0+0x4>
    7226:	85 ff                	test   %edi,%edi
    7228:	74 05                	je     722f <np_cleanup_uart+0x13>
			close(native_uart_status_0.in_fd);
    722a:	e9 d1 b2 ff ff       	jmpq   2500 <close@plt>
#if defined(CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE)
	if (native_uart_status_1.in_fd != 0) {
		close(native_uart_status_1.in_fd);
	}
#endif
}
    722f:	c3                   	retq   

0000000000007230 <np_add_uart_options>:
{
    7230:	f3 0f 1e fa          	endbr64 
	native_add_command_line_opts(uart_options);
    7234:	48 8d 3d 05 51 00 00 	lea    0x5105(%rip),%rdi        # c340 <uart_options.7286>
    723b:	e9 ea f9 ff ff       	jmpq   6c2a <native_add_command_line_opts>

0000000000007240 <np_uart_0_init>:
{
    7240:	f3 0f 1e fa          	endbr64 
    7244:	55                   	push   %rbp
    7245:	48 89 e5             	mov    %rsp,%rbp
    7248:	41 57                	push   %r15
    724a:	41 56                	push   %r14
    724c:	41 55                	push   %r13
    724e:	41 54                	push   %r12
    7250:	53                   	push   %rbx
    7251:	48 83 ec 68          	sub    $0x68,%rsp
	d = (struct native_uart_status *)dev->data;
    7255:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    7259:	bf 02 01 00 00       	mov    $0x102,%edi
		int tty_fn = open_tty(d, DT_INST_LABEL(0),
    725e:	44 8a 3d de 7b 00 00 	mov    0x7bde(%rip),%r15b        # ee43 <auto_attach>
{
    7265:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    726c:	00 00 
    726e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7272:	31 c0                	xor    %eax,%eax
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    7274:	e8 17 b4 ff ff       	callq  2690 <posix_openpt@plt>
    7279:	89 c3                	mov    %eax,%ebx
	if (master_pty == -1) {
    727b:	ff c0                	inc    %eax
    727d:	75 0e                	jne    728d <np_uart_0_init+0x4d>
		ERROR("Could not open a new TTY for the UART\n");
    727f:	48 8d 3d 60 2e 00 00 	lea    0x2e60(%rip),%rdi        # a0e6 <default_cmd+0xe86>
    7286:	31 c0                	xor    %eax,%eax
    7288:	e8 3e ef ff ff       	callq  61cb <posix_print_error_and_exit>
	ret = grantpt(master_pty);
    728d:	89 df                	mov    %ebx,%edi
    728f:	e8 9c b3 ff ff       	callq  2630 <grantpt@plt>
	if (ret == -1) {
    7294:	ff c0                	inc    %eax
    7296:	75 21                	jne    72b9 <np_uart_0_init+0x79>
		err_nbr = errno;
    7298:	e8 63 b1 ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    729d:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    729f:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    72a2:	e8 59 b2 ff ff       	callq  2500 <close@plt>
		ERROR("Could not grant access to the slave PTY side (%i)\n",
    72a7:	41 8b 34 24          	mov    (%r12),%esi
    72ab:	48 8d 3d 5b 2e 00 00 	lea    0x2e5b(%rip),%rdi        # a10d <default_cmd+0xead>
    72b2:	31 c0                	xor    %eax,%eax
    72b4:	e8 12 ef ff ff       	callq  61cb <posix_print_error_and_exit>
	ret = unlockpt(master_pty);
    72b9:	89 df                	mov    %ebx,%edi
    72bb:	e8 a0 b2 ff ff       	callq  2560 <unlockpt@plt>
	if (ret == -1) {
    72c0:	ff c0                	inc    %eax
    72c2:	75 21                	jne    72e5 <np_uart_0_init+0xa5>
		err_nbr = errno;
    72c4:	e8 37 b1 ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    72c9:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    72cb:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    72ce:	e8 2d b2 ff ff       	callq  2500 <close@plt>
		ERROR("Could not unlock the slave PTY side (%i)\n", errno);
    72d3:	41 8b 34 24          	mov    (%r12),%esi
    72d7:	48 8d 3d 62 2e 00 00 	lea    0x2e62(%rip),%rdi        # a140 <default_cmd+0xee0>
    72de:	31 c0                	xor    %eax,%eax
    72e0:	e8 e6 ee ff ff       	callq  61cb <posix_print_error_and_exit>
	slave_pty_name = ptsname(master_pty);
    72e5:	89 df                	mov    %ebx,%edi
    72e7:	e8 a4 b0 ff ff       	callq  2390 <ptsname@plt>
    72ec:	49 89 c4             	mov    %rax,%r12
	if (slave_pty_name == NULL) {
    72ef:	48 85 c0             	test   %rax,%rax
    72f2:	75 20                	jne    7314 <np_uart_0_init+0xd4>
		err_nbr = errno;
    72f4:	e8 07 b1 ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    72f9:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    72fb:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    72fe:	e8 fd b1 ff ff       	callq  2500 <close@plt>
		ERROR("Error getting slave PTY device name (%i)\n", errno);
    7303:	41 8b 36             	mov    (%r14),%esi
    7306:	48 8d 3d 5d 2e 00 00 	lea    0x2e5d(%rip),%rdi        # a16a <default_cmd+0xf0a>
    730d:	31 c0                	xor    %eax,%eax
    730f:	e8 b7 ee ff ff       	callq  61cb <posix_print_error_and_exit>
	flags = fcntl(master_pty, F_GETFL);
    7314:	be 03 00 00 00       	mov    $0x3,%esi
    7319:	89 df                	mov    %ebx,%edi
    731b:	31 c0                	xor    %eax,%eax
    731d:	e8 4e b1 ff ff       	callq  2470 <fcntl@plt>
    7322:	41 89 c6             	mov    %eax,%r14d
	if (flags == -1) {
    7325:	83 f8 ff             	cmp    $0xffffffff,%eax
    7328:	75 2a                	jne    7354 <np_uart_0_init+0x114>
		err_nbr = errno;
    732a:	e8 d1 b0 ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    732f:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7331:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
		close(master_pty);
    7338:	e8 c3 b1 ff ff       	callq  2500 <close@plt>
		ERROR("Could not read the master PTY file status flags (%i)\n",
    733d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    7344:	48 8d 3d 49 2e 00 00 	lea    0x2e49(%rip),%rdi        # a194 <default_cmd+0xf34>
    734b:	31 c0                	xor    %eax,%eax
    734d:	8b 32                	mov    (%rdx),%esi
    734f:	e8 77 ee ff ff       	callq  61cb <posix_print_error_and_exit>
	ret = fcntl(master_pty, F_SETFL, flags | O_NONBLOCK);
    7354:	44 89 f2             	mov    %r14d,%edx
    7357:	31 c0                	xor    %eax,%eax
    7359:	be 04 00 00 00       	mov    $0x4,%esi
    735e:	89 df                	mov    %ebx,%edi
    7360:	80 ce 08             	or     $0x8,%dh
    7363:	e8 08 b1 ff ff       	callq  2470 <fcntl@plt>
	if (ret == -1) {
    7368:	ff c0                	inc    %eax
    736a:	75 20                	jne    738c <np_uart_0_init+0x14c>
		err_nbr = errno;
    736c:	e8 8f b0 ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7371:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7373:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    7376:	e8 85 b1 ff ff       	callq  2500 <close@plt>
		ERROR("Could not set the master PTY as non-blocking (%i)\n",
    737b:	41 8b 36             	mov    (%r14),%esi
    737e:	48 8d 3d 45 2e 00 00 	lea    0x2e45(%rip),%rdi        # a1ca <default_cmd+0xf6a>
    7385:	31 c0                	xor    %eax,%eax
    7387:	e8 3f ee ff ff       	callq  61cb <posix_print_error_and_exit>
	ret = tcgetattr(master_pty, &ter);
    738c:	4c 8d 75 8c          	lea    -0x74(%rbp),%r14
    7390:	89 df                	mov    %ebx,%edi
    7392:	4c 89 f6             	mov    %r14,%rsi
    7395:	e8 66 b2 ff ff       	callq  2600 <tcgetattr@plt>
	if (ret == -1) {
    739a:	ff c0                	inc    %eax
    739c:	75 0e                	jne    73ac <np_uart_0_init+0x16c>
		ERROR("Could not read terminal driver settings\n");
    739e:	48 8d 3d 58 2e 00 00 	lea    0x2e58(%rip),%rdi        # a1fd <default_cmd+0xf9d>
    73a5:	31 c0                	xor    %eax,%eax
    73a7:	e8 1f ee ff ff       	callq  61cb <posix_print_error_and_exit>
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    73ac:	31 f6                	xor    %esi,%esi
    73ae:	4c 89 f2             	mov    %r14,%rdx
    73b1:	89 df                	mov    %ebx,%edi
	ter.c_lflag &= ~(ICANON | ISIG | IEXTEN | ECHO);
    73b3:	81 65 98 f4 7f ff ff 	andl   $0xffff7ff4,-0x68(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    73ba:	48 b8 04 fa ff ff fe 	movabs $0xfffffffefffffa04,%rax
    73c1:	ff ff ff 
	ter.c_cc[VTIME] = 0;
    73c4:	66 c7 45 a2 00 00    	movw   $0x0,-0x5e(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    73ca:	48 21 45 8c          	and    %rax,-0x74(%rbp)
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    73ce:	e8 3d b2 ff ff       	callq  2610 <tcsetattr@plt>
	if (ret == -1) {
    73d3:	ff c0                	inc    %eax
    73d5:	75 0e                	jne    73e5 <np_uart_0_init+0x1a5>
		ERROR("Could not change terminal driver settings\n");
    73d7:	48 8d 3d 48 2e 00 00 	lea    0x2e48(%rip),%rdi        # a226 <default_cmd+0xfc6>
    73de:	31 c0                	xor    %eax,%eax
    73e0:	e8 e6 ed ff ff       	callq  61cb <posix_print_error_and_exit>
	posix_print_trace("%s connected to pseudotty: %s\n",
    73e5:	31 c0                	xor    %eax,%eax
    73e7:	4c 89 e2             	mov    %r12,%rdx
    73ea:	48 8d 35 14 20 00 00 	lea    0x2014(%rip),%rsi        # 9405 <default_cmd+0x1a5>
    73f1:	48 8d 3d 59 2e 00 00 	lea    0x2e59(%rip),%rdi        # a251 <default_cmd+0xff1>
    73f8:	e8 76 ef ff ff       	callq  6373 <posix_print_trace>
	if (do_auto_attach) {
    73fd:	45 84 ff             	test   %r15b,%r15b
    7400:	0f 84 da 00 00 00    	je     74e0 <np_uart_0_init+0x2a0>
	if (auto_attach_cmd == NULL) {
    7406:	48 83 3d da 79 00 00 	cmpq   $0x0,0x79da(%rip)        # ede8 <auto_attach_cmd>
    740d:	00 
{
    740e:	49 89 e6             	mov    %rsp,%r14
	if (auto_attach_cmd == NULL) {
    7411:	75 0e                	jne    7421 <np_uart_0_init+0x1e1>
		auto_attach_cmd = (char *)default_cmd;
    7413:	48 8d 05 46 1e 00 00 	lea    0x1e46(%rip),%rax        # 9260 <default_cmd>
    741a:	48 89 05 c7 79 00 00 	mov    %rax,0x79c7(%rip)        # ede8 <auto_attach_cmd>
	char command[strlen(auto_attach_cmd) + strlen(slave_tty) + 1];
    7421:	4c 8b 0d c0 79 00 00 	mov    0x79c0(%rip),%r9        # ede8 <auto_attach_cmd>
    7428:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
    742c:	31 c0                	xor    %eax,%eax
    742e:	48 89 f1             	mov    %rsi,%rcx
    7431:	4c 89 cf             	mov    %r9,%rdi
    7434:	f2 ae                	repnz scas %es:(%rdi),%al
    7436:	4c 89 e7             	mov    %r12,%rdi
    7439:	48 f7 d1             	not    %rcx
    743c:	48 89 ca             	mov    %rcx,%rdx
    743f:	48 89 f1             	mov    %rsi,%rcx
    7442:	f2 ae                	repnz scas %es:(%rdi),%al
    7444:	48 89 c8             	mov    %rcx,%rax
    7447:	48 89 e1             	mov    %rsp,%rcx
    744a:	48 f7 d0             	not    %rax
    744d:	48 8d 54 02 0e       	lea    0xe(%rdx,%rax,1),%rdx
    7452:	48 89 d0             	mov    %rdx,%rax
    7455:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    745c:	48 29 d1             	sub    %rdx,%rcx
    745f:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    7463:	48 89 ca             	mov    %rcx,%rdx
    7466:	48 39 d4             	cmp    %rdx,%rsp
    7469:	74 12                	je     747d <np_uart_0_init+0x23d>
    746b:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    7472:	48 83 8c 24 f8 0f 00 	orq    $0x0,0xff8(%rsp)
    7479:	00 00 
    747b:	eb e9                	jmp    7466 <np_uart_0_init+0x226>
    747d:	25 ff 0f 00 00       	and    $0xfff,%eax
    7482:	48 29 c4             	sub    %rax,%rsp
    7485:	48 85 c0             	test   %rax,%rax
    7488:	74 06                	je     7490 <np_uart_0_init+0x250>
    748a:	48 83 4c 04 f8 00    	orq    $0x0,-0x8(%rsp,%rax,1)
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
    7490:	4d 89 e0             	mov    %r12,%r8
    7493:	4c 89 c9             	mov    %r9,%rcx
    7496:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    749a:	be 01 00 00 00       	mov    $0x1,%esi
    749f:	48 89 e7             	mov    %rsp,%rdi
    74a2:	31 c0                	xor    %eax,%eax
    74a4:	e8 27 b2 ff ff       	callq  26d0 <__sprintf_chk@plt>
	int ret = system(command);
    74a9:	48 89 e7             	mov    %rsp,%rdi
    74ac:	e8 0f b0 ff ff       	callq  24c0 <system@plt>
    74b1:	41 89 c4             	mov    %eax,%r12d
	if (ret != 0) {
    74b4:	85 c0                	test   %eax,%eax
    74b6:	74 25                	je     74dd <np_uart_0_init+0x29d>
		WARN("Could not attach to the UART with \"%s\"\n", command);
    74b8:	48 89 e6             	mov    %rsp,%rsi
    74bb:	48 8d 3d ae 2d 00 00 	lea    0x2dae(%rip),%rdi        # a270 <default_cmd+0x1010>
    74c2:	31 c0                	xor    %eax,%eax
    74c4:	e8 db ed ff ff       	callq  62a4 <posix_print_warning>
		WARN("The command returned %i\n", WEXITSTATUS(ret));
    74c9:	44 89 e0             	mov    %r12d,%eax
    74cc:	48 8d 3d c5 2d 00 00 	lea    0x2dc5(%rip),%rdi        # a298 <default_cmd+0x1038>
    74d3:	0f b6 f4             	movzbl %ah,%esi
    74d6:	31 c0                	xor    %eax,%eax
    74d8:	e8 c7 ed ff ff       	callq  62a4 <posix_print_warning>
    74dd:	4c 89 f4             	mov    %r14,%rsp
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    74e0:	48 8d 05 13 fd ff ff 	lea    -0x2ed(%rip),%rax        # 71fa <np_uart_tty_poll_in>
		d->in_fd = tty_fn;
    74e7:	41 89 5d 04          	mov    %ebx,0x4(%r13)
		d->out_fd = tty_fn;
    74eb:	41 89 5d 00          	mov    %ebx,0x0(%r13)
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    74ef:	48 89 05 0a 4f 00 00 	mov    %rax,0x4f0a(%rip)        # c400 <np_uart_driver_api_0>
}
    74f6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    74fa:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    7501:	00 00 
    7503:	74 05                	je     750a <np_uart_0_init+0x2ca>
    7505:	e8 a6 af ff ff       	callq  24b0 <__stack_chk_fail@plt>
    750a:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    750e:	31 c0                	xor    %eax,%eax
    7510:	5b                   	pop    %rbx
    7511:	41 5c                	pop    %r12
    7513:	41 5d                	pop    %r13
    7515:	41 5e                	pop    %r14
    7517:	41 5f                	pop    %r15
    7519:	5d                   	pop    %rbp
    751a:	c3                   	retq   

000000000000751b <np_uart_poll_out>:
{
    751b:	f3 0f 1e fa          	endbr64 
    751f:	48 83 ec 18          	sub    $0x18,%rsp
	ret = write(d->out_fd, &out_char, 1);
    7523:	48 8b 47 20          	mov    0x20(%rdi),%rax
    7527:	ba 01 00 00 00       	mov    $0x1,%edx
{
    752c:	40 88 74 24 0c       	mov    %sil,0xc(%rsp)
	ret = write(d->out_fd, &out_char, 1);
    7531:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    7536:	8b 38                	mov    (%rax),%edi
    7538:	e8 53 af ff ff       	callq  2490 <write@plt>
}
    753d:	48 83 c4 18          	add    $0x18,%rsp
    7541:	c3                   	retq   

0000000000007542 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    7542:	f3 0f 1e fa          	endbr64 
	while (dev < __device_end) {
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
	}
}
    7546:	c3                   	retq   

0000000000007547 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    7547:	f3 0f 1e fa          	endbr64 
    754b:	41 55                	push   %r13
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    754d:	48 8d 05 4c 46 00 00 	lea    0x464c(%rip),%rax        # bba0 <levels.4940>
{
    7554:	41 54                	push   %r12
    7556:	49 89 c4             	mov    %rax,%r12
    7559:	55                   	push   %rbp
    755a:	53                   	push   %rbx
    755b:	52                   	push   %rdx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    755c:	48 63 d7             	movslq %edi,%rdx
    755f:	ff c7                	inc    %edi
    7561:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    7565:	48 63 df             	movslq %edi,%rbx
    7568:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    756c:	76 39                	jbe    75a7 <z_sys_init_run_level+0x60>
		const struct device *dev = entry->dev;
    756e:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
		int rc = entry->init(dev);
    7572:	4c 89 ef             	mov    %r13,%rdi
    7575:	ff 55 00             	callq  *0x0(%rbp)

		if (dev != NULL) {
    7578:	4d 85 ed             	test   %r13,%r13
    757b:	74 24                	je     75a1 <z_sys_init_run_level+0x5a>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
    757d:	49 8b 55 18          	mov    0x18(%r13),%rdx
    7581:	85 c0                	test   %eax,%eax
    7583:	74 18                	je     759d <z_sys_init_run_level+0x56>
				if (rc < 0) {
    7585:	89 c1                	mov    %eax,%ecx
    7587:	c1 f9 1f             	sar    $0x1f,%ecx
    758a:	31 c8                	xor    %ecx,%eax
    758c:	29 c8                	sub    %ecx,%eax
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    758e:	b9 ff 00 00 00       	mov    $0xff,%ecx
    7593:	3d ff 00 00 00       	cmp    $0xff,%eax
    7598:	0f 4f c1             	cmovg  %ecx,%eax
    759b:	88 02                	mov    %al,(%rdx)
			}
			dev->state->initialized = true;
    759d:	80 4a 01 01          	orb    $0x1,0x1(%rdx)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    75a1:	48 83 c5 10          	add    $0x10,%rbp
    75a5:	eb c1                	jmp    7568 <z_sys_init_run_level+0x21>
		}
	}
}
    75a7:	58                   	pop    %rax
    75a8:	5b                   	pop    %rbx
    75a9:	5d                   	pop    %rbp
    75aa:	41 5c                	pop    %r12
    75ac:	41 5d                	pop    %r13
    75ae:	c3                   	retq   

00000000000075af <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
    75af:	f3 0f 1e fa          	endbr64 
	return dev->state->initialized && (dev->state->init_res == 0U);
    75b3:	48 8b 47 18          	mov    0x18(%rdi),%rax
    75b7:	8b 00                	mov    (%rax),%eax
    75b9:	66 25 ff 01          	and    $0x1ff,%ax
    75bd:	66 3d 00 01          	cmp    $0x100,%ax
    75c1:	0f 94 c0             	sete   %al
}
    75c4:	c3                   	retq   

00000000000075c5 <z_impl_device_get_binding>:
{
    75c5:	f3 0f 1e fa          	endbr64 
    75c9:	41 54                	push   %r12
    75cb:	55                   	push   %rbp
    75cc:	53                   	push   %rbx
	if ((name == NULL) || (name[0] == '\0')) {
    75cd:	48 85 ff             	test   %rdi,%rdi
    75d0:	75 05                	jne    75d7 <z_impl_device_get_binding+0x12>
		return NULL;
    75d2:	45 31 e4             	xor    %r12d,%r12d
    75d5:	eb 61                	jmp    7638 <z_impl_device_get_binding+0x73>
	if ((name == NULL) || (name[0] == '\0')) {
    75d7:	80 3f 00             	cmpb   $0x0,(%rdi)
    75da:	48 89 fb             	mov    %rdi,%rbx
    75dd:	74 f3                	je     75d2 <z_impl_device_get_binding+0xd>
	for (dev = __device_start; dev != __device_end; dev++) {
    75df:	4c 8d 25 fa 6b 00 00 	lea    0x6bfa(%rip),%r12        # e1e0 <__device_dts_ord_10>
    75e6:	4c 89 e5             	mov    %r12,%rbp
    75e9:	4c 3b 25 e8 49 00 00 	cmp    0x49e8(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    75f0:	74 18                	je     760a <z_impl_device_get_binding+0x45>
		if (z_device_ready(dev) && (dev->name == name)) {
    75f2:	4c 89 e7             	mov    %r12,%rdi
    75f5:	e8 b5 ff ff ff       	callq  75af <z_device_ready>
    75fa:	84 c0                	test   %al,%al
    75fc:	74 06                	je     7604 <z_impl_device_get_binding+0x3f>
    75fe:	49 39 1c 24          	cmp    %rbx,(%r12)
    7602:	74 34                	je     7638 <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    7604:	49 83 c4 30          	add    $0x30,%r12
    7608:	eb df                	jmp    75e9 <z_impl_device_get_binding+0x24>
	for (dev = __device_start; dev != __device_end; dev++) {
    760a:	49 89 ec             	mov    %rbp,%r12
    760d:	4c 3b 25 c4 49 00 00 	cmp    0x49c4(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    7614:	74 bc                	je     75d2 <z_impl_device_get_binding+0xd>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    7616:	4c 89 e7             	mov    %r12,%rdi
    7619:	e8 91 ff ff ff       	callq  75af <z_device_ready>
    761e:	84 c0                	test   %al,%al
    7620:	74 10                	je     7632 <z_impl_device_get_binding+0x6d>
    7622:	49 8b 34 24          	mov    (%r12),%rsi
    7626:	48 89 df             	mov    %rbx,%rdi
    7629:	e8 12 af ff ff       	callq  2540 <strcmp@plt>
    762e:	85 c0                	test   %eax,%eax
    7630:	74 06                	je     7638 <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    7632:	49 83 c4 30          	add    $0x30,%r12
    7636:	eb d5                	jmp    760d <z_impl_device_get_binding+0x48>
}
    7638:	4c 89 e0             	mov    %r12,%rax
    763b:	5b                   	pop    %rbx
    763c:	5d                   	pop    %rbp
    763d:	41 5c                	pop    %r12
    763f:	c3                   	retq   

0000000000007640 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7640:	f3 0f 1e fa          	endbr64 
    7644:	50                   	push   %rax
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7645:	48 8d 05 f8 77 00 00 	lea    0x77f8(%rip),%rax        # ee44 <z_sys_post_kernel>

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    764c:	bf 02 00 00 00       	mov    $0x2,%edi
	z_sys_post_kernel = true;
    7651:	c6 00 01             	movb   $0x1,(%rax)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7654:	e8 ee fe ff ff       	callq  7547 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7659:	e8 a0 0d 00 00       	callq  83fe <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    765e:	bf 03 00 00 00       	mov    $0x3,%edi
    7663:	e8 df fe ff ff       	callq  7547 <z_sys_init_run_level>

	z_init_static_threads();
    7668:	e8 dc 0c 00 00       	callq  8349 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    766d:	e8 d1 b2 ff ff       	callq  2943 <zephyr_app_main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7672:	48 8d 05 a7 75 00 00 	lea    0x75a7(%rip),%rax        # ec20 <z_main_thread>
    7679:	80 60 18 fe          	andb   $0xfe,0x18(%rax)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    767d:	5a                   	pop    %rdx
    767e:	c3                   	retq   

000000000000767f <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    767f:	f3 0f 1e fa          	endbr64 
    7683:	41 55                	push   %r13
    7685:	41 54                	push   %r12
    7687:	55                   	push   %rbp
    7688:	53                   	push   %rbx
    7689:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7690:	48 8d 1d 29 76 00 00 	lea    0x7629(%rip),%rbx        # ecc0 <_kernel>
    7697:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    769e:	00 00 
    76a0:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    76a7:	00 
    76a8:	31 c0                	xor    %eax,%eax
    76aa:	48 89 e0             	mov    %rsp,%rax
	dummy_thread->base.user_options = K_ESSENTIAL;
    76ad:	66 c7 44 24 18 01 01 	movw   $0x101,0x18(%rsp)
	_current_cpu->current = dummy_thread;
    76b4:	48 89 43 10          	mov    %rax,0x10(%rbx)
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    76b8:	e8 85 fe ff ff       	callq  7542 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    76bd:	31 ff                	xor    %edi,%edi
    76bf:	e8 83 fe ff ff       	callq  7547 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    76c4:	bf 01 00 00 00       	mov    $0x1,%edi
    76c9:	e8 79 fe ff ff       	callq  7547 <z_sys_init_run_level>
	z_sched_init();
    76ce:	e8 af 09 00 00       	callq  8082 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    76d3:	45 31 c9             	xor    %r9d,%r9d
    76d6:	45 31 c0             	xor    %r8d,%r8d
    76d9:	ba 00 04 00 00       	mov    $0x400,%edx
	_kernel.ready_q.cache = &z_main_thread;
    76de:	48 8d 2d 3b 75 00 00 	lea    0x753b(%rip),%rbp        # ec20 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    76e5:	48 8d 05 6a 2c 00 00 	lea    0x2c6a(%rip),%rax        # a356 <default_cmd+0x10f6>
    76ec:	48 8d 35 75 5e 00 00 	lea    0x5e75(%rip),%rsi        # d568 <z_main_stack>
    76f3:	48 8d 0d 46 ff ff ff 	lea    -0xba(%rip),%rcx        # 7640 <bg_thread_main>
	_kernel.ready_q.cache = &z_main_thread;
    76fa:	48 89 6b 38          	mov    %rbp,0x38(%rbx)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    76fe:	48 89 ef             	mov    %rbp,%rdi
    7701:	50                   	push   %rax
    7702:	6a 01                	pushq  $0x1
    7704:	6a 00                	pushq  $0x0
    7706:	6a 00                	pushq  $0x0
    7708:	e8 a0 0b 00 00       	callq  82ad <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    770d:	80 65 19 fb          	andb   $0xfb,0x19(%rbp)
    7711:	48 83 c4 20          	add    $0x20,%rsp
	z_ready_thread(&z_main_thread);
    7715:	48 89 ef             	mov    %rbp,%rdi
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7718:	49 89 c5             	mov    %rax,%r13
	z_ready_thread(&z_main_thread);
    771b:	e8 57 08 00 00       	callq  7f77 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    7720:	6a 00                	pushq  $0x0
    7722:	45 31 c9             	xor    %r9d,%r9d
    7725:	49 89 d8             	mov    %rbx,%r8
    7728:	6a 01                	pushq  $0x1
    772a:	4c 8d 25 4f 74 00 00 	lea    0x744f(%rip),%r12        # eb80 <z_idle_threads>
    7731:	ba 00 01 00 00       	mov    $0x100,%edx
    7736:	48 8d 35 2b 5d 00 00 	lea    0x5d2b(%rip),%rsi        # d468 <z_idle_stacks>
    773d:	6a 0f                	pushq  $0xf
    773f:	48 8d 0d 18 10 00 00 	lea    0x1018(%rip),%rcx        # 875e <idle>
    7746:	6a 00                	pushq  $0x0
    7748:	4c 89 e7             	mov    %r12,%rdi
    774b:	e8 5d 0b 00 00       	callq  82ad <z_setup_new_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7750:	4c 89 63 18          	mov    %r12,0x18(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7754:	4c 89 ee             	mov    %r13,%rsi
    7757:	48 89 ef             	mov    %rbp,%rdi
		_kernel.cpus[i].irq_stack =
    775a:	48 8d 05 07 62 00 00 	lea    0x6207(%rip),%rax        # d968 <z_interrupt_stacks>
		_kernel.cpus[i].id = i;
    7761:	c6 43 24 00          	movb   $0x0,0x24(%rbx)
	z_setup_new_thread(thread, stack,
    7765:	48 83 c4 20          	add    $0x20,%rsp
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7769:	48 8d 15 d0 fe ff ff 	lea    -0x130(%rip),%rdx        # 7640 <bg_thread_main>
    7770:	41 80 64 24 19 fb    	andb   $0xfb,0x19(%r12)
		_kernel.cpus[i].irq_stack =
    7776:	48 05 00 08 00 00    	add    $0x800,%rax
    777c:	48 89 43 08          	mov    %rax,0x8(%rbx)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7780:	48 8d 43 28          	lea    0x28(%rbx),%rax
    7784:	48 89 43 28          	mov    %rax,0x28(%rbx)
	list->tail = (sys_dnode_t *)list;
    7788:	48 89 43 30          	mov    %rax,0x30(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    778c:	e8 2b db ff ff       	callq  52bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7791:	ba 27 01 00 00       	mov    $0x127,%edx
    7796:	48 8d 35 be 2b 00 00 	lea    0x2bbe(%rip),%rsi        # a35b <default_cmd+0x10fb>
    779d:	31 c0                	xor    %eax,%eax
    779f:	48 8d 3d 4d 1d 00 00 	lea    0x1d4d(%rip),%rdi        # 94f3 <default_cmd+0x293>
    77a6:	e8 20 ea ff ff       	callq  61cb <posix_print_error_and_exit>

00000000000077ab <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    77ab:	f3 0f 1e fa          	endbr64 
    77af:	41 57                	push   %r15
    77b1:	41 56                	push   %r14
    77b3:	49 89 d6             	mov    %rdx,%r14
    77b6:	41 55                	push   %r13
    77b8:	41 54                	push   %r12
    77ba:	49 89 fc             	mov    %rdi,%r12
    77bd:	55                   	push   %rbp

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    77be:	48 8d 6f 10          	lea    0x10(%rdi),%rbp
{
    77c2:	48 83 ec 10          	sub    $0x10,%rsp
    77c6:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    77cb:	e8 64 e6 ff ff       	callq  5e34 <posix_irq_lock>

	if (msgq->used_msgs < msgq->max_msgs) {
    77d0:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    77d5:	41 89 c5             	mov    %eax,%r13d
    77d8:	41 8b 44 24 18       	mov    0x18(%r12),%eax
    77dd:	41 39 44 24 40       	cmp    %eax,0x40(%r12)
    77e2:	73 6d                	jae    7851 <z_impl_k_msgq_put+0xa6>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    77e4:	4c 89 e7             	mov    %r12,%rdi
    77e7:	e8 49 08 00 00       	callq  8035 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    77ec:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    77f1:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    77f6:	48 85 c0             	test   %rax,%rax
    77f9:	74 25                	je     7820 <z_impl_k_msgq_put+0x75>
    77fb:	48 8b 78 20          	mov    0x20(%rax),%rdi
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
    77ff:	45 31 ff             	xor    %r15d,%r15d
    7802:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->callee_saved.retval = value;
    7804:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
			z_ready_thread(pending_thread);
    780b:	48 89 c7             	mov    %rax,%rdi
    780e:	e8 64 07 00 00       	callq  7f77 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    7813:	44 89 ee             	mov    %r13d,%esi
    7816:	48 89 ef             	mov    %rbp,%rdi
    7819:	e8 5a 02 00 00       	callq  7a78 <z_reschedule>
			return 0;
    781e:	eb 71                	jmp    7891 <z_impl_k_msgq_put+0xe6>
    7820:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7825:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		} else {
			/* put message in queue */
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    7827:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    782c:	49 03 44 24 38       	add    0x38(%r12),%rax
    7831:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    7836:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    783b:	75 0a                	jne    7847 <z_impl_k_msgq_put+0x9c>
				msgq->write_ptr = msgq->buffer_start;
    783d:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7842:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			}
			msgq->used_msgs++;
    7847:	41 ff 44 24 40       	incl   0x40(%r12)
		}
		result = 0;
    784c:	45 31 ff             	xor    %r15d,%r15d
    784f:	eb 38                	jmp    7889 <z_impl_k_msgq_put+0xde>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for message space to become available */
		result = -ENOMSG;
    7851:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7857:	4d 85 f6             	test   %r14,%r14
    785a:	74 2d                	je     7889 <z_impl_k_msgq_put+0xde>
	} else {
		/* wait for put message success, failure, or timeout */
		_current->base.swap_data = (void *) data;
    785c:	48 8d 05 5d 74 00 00 	lea    0x745d(%rip),%rax        # ecc0 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7863:	4c 89 f1             	mov    %r14,%rcx
    7866:	4c 89 e2             	mov    %r12,%rdx
    7869:	48 89 ef             	mov    %rbp,%rdi
		_current->base.swap_data = (void *) data;
    786c:	48 8b 40 10          	mov    0x10(%rax),%rax
    7870:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7874:	48 83 c4 10          	add    $0x10,%rsp
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7878:	44 89 ee             	mov    %r13d,%esi
}
    787b:	5d                   	pop    %rbp
    787c:	41 5c                	pop    %r12
    787e:	41 5d                	pop    %r13
    7880:	41 5e                	pop    %r14
    7882:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7884:	e9 0c 04 00 00       	jmpq   7c95 <z_pend_curr>
	posix_irq_unlock(key);
    7889:	44 89 ef             	mov    %r13d,%edi
    788c:	e8 b1 e5 ff ff       	callq  5e42 <posix_irq_unlock>
}
    7891:	48 83 c4 10          	add    $0x10,%rsp
    7895:	44 89 f8             	mov    %r15d,%eax
    7898:	5d                   	pop    %rbp
    7899:	41 5c                	pop    %r12
    789b:	41 5d                	pop    %r13
    789d:	41 5e                	pop    %r14
    789f:	41 5f                	pop    %r15
    78a1:	c3                   	retq   

00000000000078a2 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    78a2:	f3 0f 1e fa          	endbr64 
    78a6:	41 57                	push   %r15
    78a8:	41 56                	push   %r14
    78aa:	49 89 d6             	mov    %rdx,%r14
    78ad:	41 55                	push   %r13

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    78af:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
{
    78b3:	41 54                	push   %r12
    78b5:	49 89 fc             	mov    %rdi,%r12
    78b8:	55                   	push   %rbp
    78b9:	53                   	push   %rbx
    78ba:	48 89 f3             	mov    %rsi,%rbx
    78bd:	41 51                	push   %r9
	return posix_irq_lock();
    78bf:	e8 70 e5 ff ff       	callq  5e34 <posix_irq_lock>

	if (msgq->used_msgs > 0U) {
    78c4:	41 83 7c 24 40 00    	cmpl   $0x0,0x40(%r12)
    78ca:	89 c5                	mov    %eax,%ebp
    78cc:	0f 84 9f 00 00 00    	je     7971 <z_impl_k_msgq_get+0xcf>
    78d2:	49 8b 74 24 30       	mov    0x30(%r12),%rsi
    78d7:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    78dc:	48 89 df             	mov    %rbx,%rdi
    78df:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
    78e1:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    78e6:	49 03 44 24 30       	add    0x30(%r12),%rax
    78eb:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		if (msgq->read_ptr == msgq->buffer_end) {
    78f0:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    78f5:	75 0a                	jne    7901 <z_impl_k_msgq_get+0x5f>
			msgq->read_ptr = msgq->buffer_start;
    78f7:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    78fc:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		}
		msgq->used_msgs--;
    7901:	41 ff 4c 24 40       	decl   0x40(%r12)

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7906:	4c 89 e7             	mov    %r12,%rdi
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
		}
		result = 0;
    7909:	45 31 ff             	xor    %r15d,%r15d
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    790c:	e8 24 07 00 00       	callq  8035 <z_unpend_first_thread>
    7911:	49 89 c0             	mov    %rax,%r8
		if (pending_thread != NULL) {
    7914:	48 85 c0             	test   %rax,%rax
    7917:	0f 84 8a 00 00 00    	je     79a7 <z_impl_k_msgq_get+0x105>
    791d:	48 8b 70 20          	mov    0x20(%rax),%rsi
    7921:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7926:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    792b:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
			msgq->write_ptr += msgq->msg_size;
    792d:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7932:	49 03 44 24 38       	add    0x38(%r12),%rax
    7937:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    793c:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7941:	75 0a                	jne    794d <z_impl_k_msgq_get+0xab>
				msgq->write_ptr = msgq->buffer_start;
    7943:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7948:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			msgq->used_msgs++;
    794d:	41 ff 44 24 40       	incl   0x40(%r12)
			z_ready_thread(pending_thread);
    7952:	4c 89 c7             	mov    %r8,%rdi
			return 0;
    7955:	45 31 ff             	xor    %r15d,%r15d
    7958:	41 c7 40 4c 00 00 00 	movl   $0x0,0x4c(%r8)
    795f:	00 
			z_ready_thread(pending_thread);
    7960:	e8 12 06 00 00       	callq  7f77 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    7965:	89 ee                	mov    %ebp,%esi
    7967:	4c 89 ef             	mov    %r13,%rdi
    796a:	e8 09 01 00 00       	callq  7a78 <z_reschedule>
			return 0;
    796f:	eb 3d                	jmp    79ae <z_impl_k_msgq_get+0x10c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for a message to become available */
		result = -ENOMSG;
    7971:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7977:	4d 85 f6             	test   %r14,%r14
    797a:	74 2b                	je     79a7 <z_impl_k_msgq_get+0x105>
	} else {
		/* wait for get message success or timeout */
		_current->base.swap_data = data;
    797c:	48 8d 05 3d 73 00 00 	lea    0x733d(%rip),%rax        # ecc0 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7983:	4c 89 f1             	mov    %r14,%rcx
    7986:	4c 89 e2             	mov    %r12,%rdx
    7989:	89 ee                	mov    %ebp,%esi
    798b:	4c 89 ef             	mov    %r13,%rdi
		_current->base.swap_data = data;
    798e:	48 8b 40 10          	mov    0x10(%rax),%rax
    7992:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7996:	41 58                	pop    %r8
    7998:	5b                   	pop    %rbx
    7999:	5d                   	pop    %rbp
    799a:	41 5c                	pop    %r12
    799c:	41 5d                	pop    %r13
    799e:	41 5e                	pop    %r14
    79a0:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    79a2:	e9 ee 02 00 00       	jmpq   7c95 <z_pend_curr>
	posix_irq_unlock(key);
    79a7:	89 ef                	mov    %ebp,%edi
    79a9:	e8 94 e4 ff ff       	callq  5e42 <posix_irq_unlock>
}
    79ae:	5a                   	pop    %rdx
    79af:	44 89 f8             	mov    %r15d,%eax
    79b2:	5b                   	pop    %rbx
    79b3:	5d                   	pop    %rbp
    79b4:	41 5c                	pop    %r12
    79b6:	41 5d                	pop    %r13
    79b8:	41 5e                	pop    %r14
    79ba:	41 5f                	pop    %r15
    79bc:	c3                   	retq   

00000000000079bd <z_sched_prio_cmp>:
 * Do not rely on the actual value returned aside from the above.
 * (Again, like memcmp.)
 */
int32_t z_sched_prio_cmp(struct k_thread *thread_1,
	struct k_thread *thread_2)
{
    79bd:	f3 0f 1e fa          	endbr64 
	/* `prio` is <32b, so the below cannot overflow. */
	int32_t b1 = thread_1->base.prio;
    79c1:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	int32_t b2 = thread_2->base.prio;
    79c5:	0f be 4e 1a          	movsbl 0x1a(%rsi),%ecx
		 * from UB on overflow to impdef.
		 */
		return (int32_t) (d2 - d1);
	}
#endif
	return 0;
    79c9:	31 c0                	xor    %eax,%eax
	if (b1 != b2) {
    79cb:	39 ca                	cmp    %ecx,%edx
    79cd:	74 04                	je     79d3 <z_sched_prio_cmp+0x16>
		return b2 - b1;
    79cf:	89 c8                	mov    %ecx,%eax
    79d1:	29 d0                	sub    %edx,%eax
}
    79d3:	c3                   	retq   

00000000000079d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    79d4:	f3 0f 1e fa          	endbr64 
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    79d8:	83 3d 55 74 00 00 00 	cmpl   $0x0,0x7455(%rip)        # ee34 <slice_time>
    79df:	74 20                	je     7a01 <z_reset_time_slice+0x2d>
{
    79e1:	50                   	push   %rax
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    79e2:	e8 21 c0 ff ff       	callq  3a08 <sys_clock_elapsed>
    79e7:	8b 3d 47 74 00 00    	mov    0x7447(%rip),%edi        # ee34 <slice_time>
    79ed:	48 8d 15 cc 72 00 00 	lea    0x72cc(%rip),%rdx        # ecc0 <_kernel>
		z_set_timeout_expiry(slice_time, false);
    79f4:	31 f6                	xor    %esi,%esi
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    79f6:	01 f8                	add    %edi,%eax
    79f8:	89 42 20             	mov    %eax,0x20(%rdx)
	}
}
    79fb:	5a                   	pop    %rdx
		z_set_timeout_expiry(slice_time, false);
    79fc:	e9 22 0c 00 00       	jmpq   8623 <z_set_timeout_expiry>
    7a01:	c3                   	retq   

0000000000007a02 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7a02:	f3 0f 1e fa          	endbr64 
    7a06:	41 54                	push   %r12
    7a08:	41 89 f4             	mov    %esi,%r12d
    7a0b:	55                   	push   %rbp
    7a0c:	53                   	push   %rbx
    7a0d:	89 fb                	mov    %edi,%ebx
	return posix_irq_lock();
    7a0f:	e8 20 e4 ff ff       	callq  5e34 <posix_irq_lock>
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
    7a14:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    7a19:	89 c5                	mov    %eax,%ebp
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    7a1b:	48 8d 05 9e 72 00 00 	lea    0x729e(%rip),%rax        # ecc0 <_kernel>
    7a22:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    7a29:	89 d8                	mov    %ebx,%eax
		t += off;
    7a2b:	48 83 c0 09          	add    $0x9,%rax
		if (result32 && (t < BIT64(32))) {
    7a2f:	48 39 d0             	cmp    %rdx,%rax
    7a32:	77 0e                	ja     7a42 <k_sched_time_slice_set+0x40>
			return ((uint32_t)t) / (from_hz / to_hz);
    7a34:	8d 43 09             	lea    0x9(%rbx),%eax
    7a37:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7a3c:	31 d2                	xor    %edx,%edx
    7a3e:	f7 f1                	div    %ecx
    7a40:	eb 0a                	jmp    7a4c <k_sched_time_slice_set+0x4a>
			return t / (from_hz / to_hz);
    7a42:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7a47:	31 d2                	xor    %edx,%edx
    7a49:	48 f7 f1             	div    %rcx
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7a4c:	85 db                	test   %ebx,%ebx
    7a4e:	7e 0b                	jle    7a5b <k_sched_time_slice_set+0x59>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7a50:	83 f8 02             	cmp    $0x2,%eax
    7a53:	ba 02 00 00 00       	mov    $0x2,%edx
    7a58:	0f 4c c2             	cmovl  %edx,%eax
		}
		slice_max_prio = prio;
    7a5b:	44 89 25 ce 73 00 00 	mov    %r12d,0x73ce(%rip)        # ee30 <slice_max_prio>
			slice_time = MAX(2, slice_time);
    7a62:	89 05 cc 73 00 00    	mov    %eax,0x73cc(%rip)        # ee34 <slice_time>
		z_reset_time_slice();
    7a68:	e8 67 ff ff ff       	callq  79d4 <z_reset_time_slice>
	}
}
    7a6d:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    7a6e:	89 ef                	mov    %ebp,%edi
    7a70:	5d                   	pop    %rbp
    7a71:	41 5c                	pop    %r12
    7a73:	e9 ca e3 ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007a78 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7a78:	f3 0f 1e fa          	endbr64 
}
#endif

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    7a7c:	48 8d 05 3d 72 00 00 	lea    0x723d(%rip),%rax        # ecc0 <_kernel>
	if (resched(key.key) && need_swap()) {
    7a83:	89 f2                	mov    %esi,%edx
{
    7a85:	89 f7                	mov    %esi,%edi
	if (resched(key.key) && need_swap()) {
    7a87:	0b 10                	or     (%rax),%edx
    7a89:	75 11                	jne    7a9c <z_reschedule+0x24>
    7a8b:	48 8b 48 10          	mov    0x10(%rax),%rcx
    7a8f:	48 39 48 38          	cmp    %rcx,0x38(%rax)
    7a93:	74 07                	je     7a9c <z_reschedule+0x24>
	ret = arch_swap(key);
    7a95:	31 ff                	xor    %edi,%edi
    7a97:	e9 d6 d7 ff ff       	jmpq   5272 <arch_swap>
    7a9c:	e9 a1 e3 ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007aa1 <z_reschedule_irqlock>:
		k_spin_unlock(lock, key);
	}
}

void z_reschedule_irqlock(uint32_t key)
{
    7aa1:	f3 0f 1e fa          	endbr64 
	if (resched(key)) {
    7aa5:	48 8d 05 14 72 00 00 	lea    0x7214(%rip),%rax        # ecc0 <_kernel>
    7aac:	89 fa                	mov    %edi,%edx
    7aae:	0b 10                	or     (%rax),%edx
    7ab0:	75 07                	jne    7ab9 <z_reschedule_irqlock+0x18>
    7ab2:	31 ff                	xor    %edi,%edi
    7ab4:	e9 b9 d7 ff ff       	jmpq   5272 <arch_swap>
    7ab9:	e9 84 e3 ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007abe <z_reschedule_unlocked>:
{
    7abe:	50                   	push   %rax
	return posix_irq_lock();
    7abf:	e8 70 e3 ff ff       	callq  5e34 <posix_irq_lock>
}
    7ac4:	5a                   	pop    %rdx
    7ac5:	89 c7                	mov    %eax,%edi
	(void) z_reschedule_irqlock(arch_irq_lock());
    7ac7:	e9 d5 ff ff ff       	jmpq   7aa1 <z_reschedule_irqlock>

0000000000007acc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7acc:	f3 0f 1e fa          	endbr64 
    7ad0:	50                   	push   %rax
    7ad1:	e8 5e e3 ff ff       	callq  5e34 <posix_irq_lock>
    7ad6:	89 c7                	mov    %eax,%edi
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7ad8:	48 8d 05 e1 71 00 00 	lea    0x71e1(%rip),%rax        # ecc0 <_kernel>
    7adf:	48 8b 40 10          	mov    0x10(%rax),%rax
    7ae3:	fe 48 1b             	decb   0x1b(%rax)
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    7ae6:	5a                   	pop    %rdx
	posix_irq_unlock(key);
    7ae7:	e9 56 e3 ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007aec <z_priq_dumb_remove>:

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    7aec:	f3 0f 1e fa          	endbr64 
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7af0:	48 8b 56 08          	mov    0x8(%rsi),%rdx
	sys_dnode_t *const next = node->next;
    7af4:	48 8b 06             	mov    (%rsi),%rax

	prev->next = next;
    7af7:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    7afa:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    7afe:	48 c7 06 00 00 00 00 	movq   $0x0,(%rsi)
	node->prev = NULL;
    7b05:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
    7b0c:	00 
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7b0d:	c3                   	retq   

0000000000007b0e <unpend_thread_no_timeout>:
{
    7b0e:	53                   	push   %rbx
    7b0f:	48 89 fb             	mov    %rdi,%rbx
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7b12:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    7b16:	48 89 de             	mov    %rbx,%rsi
    7b19:	e8 ce ff ff ff       	callq  7aec <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7b1e:	80 63 19 fd          	andb   $0xfd,0x19(%rbx)
	thread->base.pended_on = NULL;
    7b22:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    7b29:	00 
}
    7b2a:	5b                   	pop    %rbx
    7b2b:	c3                   	retq   

0000000000007b2c <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    7b2c:	f3 0f 1e fa          	endbr64 
	return list->head == list;
    7b30:	48 8b 07             	mov    (%rdi),%rax
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
    7b33:	48 85 c0             	test   %rax,%rax
    7b36:	74 05                	je     7b3d <z_priq_dumb_best+0x11>
    7b38:	48 39 c7             	cmp    %rax,%rdi
    7b3b:	75 02                	jne    7b3f <z_priq_dumb_best+0x13>
	struct k_thread *thread = NULL;
    7b3d:	31 c0                	xor    %eax,%eax
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    7b3f:	c3                   	retq   

0000000000007b40 <update_cache>:
{
    7b40:	41 54                	push   %r12
    7b42:	41 89 fc             	mov    %edi,%r12d
    7b45:	55                   	push   %rbp
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7b46:	48 8d 2d 73 71 00 00 	lea    0x7173(%rip),%rbp        # ecc0 <_kernel>
{
    7b4d:	53                   	push   %rbx
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7b4e:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7b52:	e8 d5 ff ff ff       	callq  7b2c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7b57:	48 89 c3             	mov    %rax,%rbx
    7b5a:	48 85 c0             	test   %rax,%rax
    7b5d:	75 04                	jne    7b63 <update_cache+0x23>
    7b5f:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
	if (preempt_ok != 0) {
    7b63:	48 8b 45 10          	mov    0x10(%rbp),%rax
    7b67:	45 85 e4             	test   %r12d,%r12d
    7b6a:	75 13                	jne    7b7f <update_cache+0x3f>
	if (z_is_thread_prevented_from_running(_current)) {
    7b6c:	f6 40 19 1f          	testb  $0x1f,0x19(%rax)
    7b70:	75 0d                	jne    7b7f <update_cache+0x3f>
	if (is_preempt(_current) || is_metairq(thread)) {
    7b72:	66 83 78 1a 7f       	cmpw   $0x7f,0x1a(%rax)
    7b77:	76 06                	jbe    7b7f <update_cache+0x3f>
		_kernel.ready_q.cache = _current;
    7b79:	48 89 45 38          	mov    %rax,0x38(%rbp)
    7b7d:	eb 0e                	jmp    7b8d <update_cache+0x4d>
		if (thread != _current) {
    7b7f:	48 39 c3             	cmp    %rax,%rbx
    7b82:	74 05                	je     7b89 <update_cache+0x49>
			z_reset_time_slice();
    7b84:	e8 4b fe ff ff       	callq  79d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7b89:	48 89 5d 38          	mov    %rbx,0x38(%rbp)
}
    7b8d:	5b                   	pop    %rbx
    7b8e:	5d                   	pop    %rbp
    7b8f:	41 5c                	pop    %r12
    7b91:	c3                   	retq   

0000000000007b92 <unready_thread>:
{
    7b92:	55                   	push   %rbp
    7b93:	53                   	push   %rbx
    7b94:	48 89 fb             	mov    %rdi,%rbx
    7b97:	52                   	push   %rdx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7b98:	8a 47 19             	mov    0x19(%rdi),%al
	return (thread->base.thread_state & state) != 0U;
    7b9b:	48 8d 2d 1e 71 00 00 	lea    0x711e(%rip),%rbp        # ecc0 <_kernel>
	if (z_is_thread_queued(thread)) {
    7ba2:	84 c0                	test   %al,%al
    7ba4:	79 12                	jns    7bb8 <unready_thread+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7ba6:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7ba9:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7bac:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    7baf:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7bb3:	e8 34 ff ff ff       	callq  7aec <z_priq_dumb_remove>
	update_cache(thread == _current);
    7bb8:	31 ff                	xor    %edi,%edi
    7bba:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
}
    7bbe:	58                   	pop    %rax
	update_cache(thread == _current);
    7bbf:	40 0f 94 c7          	sete   %dil
}
    7bc3:	5b                   	pop    %rbx
    7bc4:	5d                   	pop    %rbp
	update_cache(thread == _current);
    7bc5:	e9 76 ff ff ff       	jmpq   7b40 <update_cache>

0000000000007bca <add_to_waitq_locked>:
{
    7bca:	41 54                	push   %r12
    7bcc:	55                   	push   %rbp
    7bcd:	48 89 f5             	mov    %rsi,%rbp
    7bd0:	53                   	push   %rbx
    7bd1:	48 89 fb             	mov    %rdi,%rbx
	unready_thread(thread);
    7bd4:	e8 b9 ff ff ff       	callq  7b92 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7bd9:	80 4b 19 02          	orb    $0x2,0x19(%rbx)
	if (wait_q != NULL) {
    7bdd:	48 85 ed             	test   %rbp,%rbp
    7be0:	74 5a                	je     7c3c <add_to_waitq_locked+0x72>
    7be2:	4c 8b 65 00          	mov    0x0(%rbp),%r12
		thread->base.pended_on = wait_q;
    7be6:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7bea:	4d 85 e4             	test   %r12,%r12
    7bed:	74 05                	je     7bf4 <add_to_waitq_locked+0x2a>
    7bef:	4c 39 e5             	cmp    %r12,%rbp
    7bf2:	75 14                	jne    7c08 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    7bf4:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = list;
    7bf8:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = tail;
    7bfb:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7bff:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7c02:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    7c06:	eb 34                	jmp    7c3c <add_to_waitq_locked+0x72>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7c08:	4c 89 e6             	mov    %r12,%rsi
    7c0b:	48 89 df             	mov    %rbx,%rdi
    7c0e:	e8 aa fd ff ff       	callq  79bd <z_sched_prio_cmp>
    7c13:	85 c0                	test   %eax,%eax
    7c15:	7e 16                	jle    7c2d <add_to_waitq_locked+0x63>
	sys_dnode_t *const prev = successor->prev;
    7c17:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    7c1c:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    7c1f:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    7c23:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    7c26:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    7c2b:	eb 0f                	jmp    7c3c <add_to_waitq_locked+0x72>
	return (node == list->tail) ? NULL : node->next;
    7c2d:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
    7c31:	74 c1                	je     7bf4 <add_to_waitq_locked+0x2a>
    7c33:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7c37:	4d 85 e4             	test   %r12,%r12
    7c3a:	eb b6                	jmp    7bf2 <add_to_waitq_locked+0x28>
}
    7c3c:	5b                   	pop    %rbx
    7c3d:	5d                   	pop    %rbp
    7c3e:	41 5c                	pop    %r12
    7c40:	c3                   	retq   

0000000000007c41 <pend>:
{
    7c41:	55                   	push   %rbp
    7c42:	53                   	push   %rbx
    7c43:	48 89 fb             	mov    %rdi,%rbx
    7c46:	48 83 ec 18          	sub    $0x18,%rsp
    7c4a:	48 89 14 24          	mov    %rdx,(%rsp)
    7c4e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    7c53:	e8 dc e1 ff ff       	callq  5e34 <posix_irq_lock>
		add_to_waitq_locked(thread, wait_q);
    7c58:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    7c5d:	48 89 df             	mov    %rbx,%rdi
    7c60:	89 c5                	mov    %eax,%ebp
    7c62:	e8 63 ff ff ff       	callq  7bca <add_to_waitq_locked>
	posix_irq_unlock(key);
    7c67:	89 ef                	mov    %ebp,%edi
    7c69:	e8 d4 e1 ff ff       	callq  5e42 <posix_irq_unlock>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7c6e:	48 8b 14 24          	mov    (%rsp),%rdx
    7c72:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    7c76:	74 16                	je     7c8e <pend+0x4d>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7c78:	48 8d 35 74 03 00 00 	lea    0x374(%rip),%rsi        # 7ff3 <z_thread_timeout>
}
    7c7f:	48 83 c4 18          	add    $0x18,%rsp
    7c83:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
    7c87:	5b                   	pop    %rbx
    7c88:	5d                   	pop    %rbp
    7c89:	e9 37 08 00 00       	jmpq   84c5 <z_add_timeout>
    7c8e:	48 83 c4 18          	add    $0x18,%rsp
    7c92:	5b                   	pop    %rbx
    7c93:	5d                   	pop    %rbp
    7c94:	c3                   	retq   

0000000000007c95 <z_pend_curr>:
{
    7c95:	f3 0f 1e fa          	endbr64 
	pend(_current, wait_q, timeout);
    7c99:	48 8d 05 20 70 00 00 	lea    0x7020(%rip),%rax        # ecc0 <_kernel>
{
    7ca0:	55                   	push   %rbp
    7ca1:	89 f5                	mov    %esi,%ebp
    7ca3:	48 89 d6             	mov    %rdx,%rsi
    7ca6:	48 89 ca             	mov    %rcx,%rdx
	pend(_current, wait_q, timeout);
    7ca9:	48 8b 78 10          	mov    0x10(%rax),%rdi
    7cad:	e8 8f ff ff ff       	callq  7c41 <pend>
    7cb2:	89 ef                	mov    %ebp,%edi
}
    7cb4:	5d                   	pop    %rbp
    7cb5:	e9 b8 d5 ff ff       	jmpq   5272 <arch_swap>

0000000000007cba <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    7cba:	41 55                	push   %r13
    7cbc:	41 54                	push   %r12
    7cbe:	55                   	push   %rbp
    7cbf:	53                   	push   %rbx
    7cc0:	48 89 fb             	mov    %rdi,%rbx
    7cc3:	50                   	push   %rax
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7cc4:	e8 89 0a 00 00       	callq  8752 <sys_clock_tick_get_32>
    7cc9:	89 c5                	mov    %eax,%ebp
	return posix_irq_lock();
    7ccb:	e8 64 e1 ff ff       	callq  5e34 <posix_irq_lock>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    7cd0:	4c 8d 2d e9 6f 00 00 	lea    0x6fe9(%rip),%r13        # ecc0 <_kernel>
    7cd7:	41 89 c4             	mov    %eax,%r12d
    7cda:	49 8b 7d 10          	mov    0x10(%r13),%rdi
    7cde:	e8 af fe ff ff       	callq  7b92 <unready_thread>
    7ce3:	49 8b 45 10          	mov    0x10(%r13),%rax
    7ce7:	48 8d 35 05 03 00 00 	lea    0x305(%rip),%rsi        # 7ff3 <z_thread_timeout>
    7cee:	48 89 da             	mov    %rbx,%rdx

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7cf1:	01 eb                	add    %ebp,%ebx
    7cf3:	48 8d 78 28          	lea    0x28(%rax),%rdi
    7cf7:	e8 c9 07 00 00       	callq  84c5 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7cfc:	49 8b 45 10          	mov    0x10(%r13),%rax
    7d00:	44 89 e7             	mov    %r12d,%edi
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7d03:	80 48 19 10          	orb    $0x10,0x19(%rax)
    7d07:	e8 66 d5 ff ff       	callq  5272 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7d0c:	e8 41 0a 00 00       	callq  8752 <sys_clock_tick_get_32>
	if (ticks > 0) {
    7d11:	ba 00 00 00 00       	mov    $0x0,%edx
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7d16:	89 c0                	mov    %eax,%eax
    7d18:	48 29 c3             	sub    %rax,%rbx
    7d1b:	48 89 d8             	mov    %rbx,%rax
    7d1e:	48 0f 48 c2          	cmovs  %rdx,%rax
		return ticks;
	}
#endif

	return 0;
}
    7d22:	5a                   	pop    %rdx
    7d23:	5b                   	pop    %rbx
    7d24:	5d                   	pop    %rbp
    7d25:	41 5c                	pop    %r12
    7d27:	41 5d                	pop    %r13
    7d29:	c3                   	retq   

0000000000007d2a <z_impl_k_thread_suspend>:
{
    7d2a:	f3 0f 1e fa          	endbr64 
    7d2e:	41 54                	push   %r12
    7d30:	55                   	push   %rbp
    7d31:	53                   	push   %rbx
    7d32:	48 89 fb             	mov    %rdi,%rbx
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7d35:	48 83 c7 28          	add    $0x28,%rdi
    7d39:	e8 a3 08 00 00       	callq  85e1 <z_abort_timeout>
    7d3e:	e8 f1 e0 ff ff       	callq  5e34 <posix_irq_lock>
    7d43:	48 8d 2d 76 6f 00 00 	lea    0x6f76(%rip),%rbp        # ecc0 <_kernel>
    7d4a:	41 89 c4             	mov    %eax,%r12d
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7d4d:	8a 43 19             	mov    0x19(%rbx),%al
		if (z_is_thread_queued(thread)) {
    7d50:	84 c0                	test   %al,%al
    7d52:	79 12                	jns    7d66 <z_impl_k_thread_suspend+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d54:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7d57:	48 89 de             	mov    %rbx,%rsi
    7d5a:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d5e:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    7d61:	e8 86 fd ff ff       	callq  7aec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7d66:	80 4b 19 10          	orb    $0x10,0x19(%rbx)
		update_cache(thread == _current);
    7d6a:	31 ff                	xor    %edi,%edi
    7d6c:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    7d70:	40 0f 94 c7          	sete   %dil
    7d74:	e8 c7 fd ff ff       	callq  7b40 <update_cache>
	posix_irq_unlock(key);
    7d79:	44 89 e7             	mov    %r12d,%edi
    7d7c:	e8 c1 e0 ff ff       	callq  5e42 <posix_irq_unlock>
	if (thread == _current) {
    7d81:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    7d85:	75 09                	jne    7d90 <z_impl_k_thread_suspend+0x66>
}
    7d87:	5b                   	pop    %rbx
    7d88:	5d                   	pop    %rbp
    7d89:	41 5c                	pop    %r12
		z_reschedule_unlocked();
    7d8b:	e9 2e fd ff ff       	jmpq   7abe <z_reschedule_unlocked>
}
    7d90:	5b                   	pop    %rbx
    7d91:	5d                   	pop    %rbp
    7d92:	41 5c                	pop    %r12
    7d94:	c3                   	retq   

0000000000007d95 <k_sched_unlock>:
{
    7d95:	f3 0f 1e fa          	endbr64 
    7d99:	55                   	push   %rbp
	return posix_irq_lock();
    7d9a:	e8 95 e0 ff ff       	callq  5e34 <posix_irq_lock>
		update_cache(0);
    7d9f:	31 ff                	xor    %edi,%edi
    7da1:	89 c5                	mov    %eax,%ebp
		++_current->base.sched_locked;
    7da3:	48 8d 05 16 6f 00 00 	lea    0x6f16(%rip),%rax        # ecc0 <_kernel>
    7daa:	48 8b 40 10          	mov    0x10(%rax),%rax
    7dae:	fe 40 1b             	incb   0x1b(%rax)
		update_cache(0);
    7db1:	e8 8a fd ff ff       	callq  7b40 <update_cache>
	posix_irq_unlock(key);
    7db6:	89 ef                	mov    %ebp,%edi
    7db8:	e8 85 e0 ff ff       	callq  5e42 <posix_irq_unlock>
}
    7dbd:	5d                   	pop    %rbp
	z_reschedule_unlocked();
    7dbe:	e9 fb fc ff ff       	jmpq   7abe <z_reschedule_unlocked>

0000000000007dc3 <move_thread_to_end_of_prio_q>:
{
    7dc3:	41 54                	push   %r12
    7dc5:	4c 8d 25 f4 6e 00 00 	lea    0x6ef4(%rip),%r12        # ecc0 <_kernel>
    7dcc:	55                   	push   %rbp
    7dcd:	53                   	push   %rbx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7dce:	8a 47 19             	mov    0x19(%rdi),%al
    7dd1:	48 89 fb             	mov    %rdi,%rbx
	if (z_is_thread_queued(thread)) {
    7dd4:	84 c0                	test   %al,%al
    7dd6:	79 13                	jns    7deb <move_thread_to_end_of_prio_q+0x28>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7dd8:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7ddb:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7dde:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    7de1:	49 8d 7c 24 40       	lea    0x40(%r12),%rdi
    7de6:	e8 01 fd ff ff       	callq  7aec <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7deb:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    7def:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7df4:	48 85 ed             	test   %rbp,%rbp
    7df7:	74 0a                	je     7e03 <move_thread_to_end_of_prio_q+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7df9:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    7dfe:	48 39 c5             	cmp    %rax,%rbp
    7e01:	75 1b                	jne    7e1e <move_thread_to_end_of_prio_q+0x5b>
	sys_dnode_t *const tail = list->tail;
    7e03:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    7e08:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    7e0d:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    7e10:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7e14:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7e17:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    7e1c:	eb 33                	jmp    7e51 <move_thread_to_end_of_prio_q+0x8e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7e1e:	48 89 ee             	mov    %rbp,%rsi
    7e21:	48 89 df             	mov    %rbx,%rdi
    7e24:	e8 94 fb ff ff       	callq  79bd <z_sched_prio_cmp>
    7e29:	85 c0                	test   %eax,%eax
    7e2b:	7e 14                	jle    7e41 <move_thread_to_end_of_prio_q+0x7e>
	sys_dnode_t *const prev = successor->prev;
    7e2d:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    7e31:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    7e34:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    7e38:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    7e3b:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    7e3f:	eb 10                	jmp    7e51 <move_thread_to_end_of_prio_q+0x8e>
	return (node == list->tail) ? NULL : node->next;
    7e41:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    7e46:	74 bb                	je     7e03 <move_thread_to_end_of_prio_q+0x40>
    7e48:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e4c:	48 85 ed             	test   %rbp,%rbp
    7e4f:	eb b0                	jmp    7e01 <move_thread_to_end_of_prio_q+0x3e>
	update_cache(thread == _current);
    7e51:	31 ff                	xor    %edi,%edi
    7e53:	49 39 5c 24 10       	cmp    %rbx,0x10(%r12)
}
    7e58:	5b                   	pop    %rbx
	update_cache(thread == _current);
    7e59:	40 0f 94 c7          	sete   %dil
}
    7e5d:	5d                   	pop    %rbp
    7e5e:	41 5c                	pop    %r12
	update_cache(thread == _current);
    7e60:	e9 db fc ff ff       	jmpq   7b40 <update_cache>

0000000000007e65 <z_time_slice>:
{
    7e65:	f3 0f 1e fa          	endbr64 
    7e69:	55                   	push   %rbp
    7e6a:	53                   	push   %rbx
    7e6b:	89 fb                	mov    %edi,%ebx
    7e6d:	52                   	push   %rdx
	return posix_irq_lock();
    7e6e:	e8 c1 df ff ff       	callq  5e34 <posix_irq_lock>
	if (slice_time && sliceable(_current)) {
    7e73:	83 3d ba 6f 00 00 00 	cmpl   $0x0,0x6fba(%rip)        # ee34 <slice_time>
    7e7a:	89 c5                	mov    %eax,%ebp
    7e7c:	48 8d 05 3d 6e 00 00 	lea    0x6e3d(%rip),%rax        # ecc0 <_kernel>
    7e83:	74 40                	je     7ec5 <z_time_slice+0x60>
    7e85:	48 8b 78 10          	mov    0x10(%rax),%rdi
		&& !z_is_idle_thread_object(thread);
    7e89:	66 83 7f 1a 7f       	cmpw   $0x7f,0x1a(%rdi)
    7e8e:	77 35                	ja     7ec5 <z_time_slice+0x60>
		&& !z_is_thread_prevented_from_running(thread)
    7e90:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
    7e94:	75 2f                	jne    7ec5 <z_time_slice+0x60>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7e96:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
		&& !z_is_idle_thread_object(thread);
    7e9a:	39 15 90 6f 00 00    	cmp    %edx,0x6f90(%rip)        # ee30 <slice_max_prio>
    7ea0:	7f 23                	jg     7ec5 <z_time_slice+0x60>
    7ea2:	48 3b 3d 07 41 00 00 	cmp    0x4107(%rip),%rdi        # bfb0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
    7ea9:	74 1a                	je     7ec5 <z_time_slice+0x60>
		if (ticks >= _current_cpu->slice_ticks) {
    7eab:	8b 50 20             	mov    0x20(%rax),%edx
    7eae:	39 da                	cmp    %ebx,%edx
    7eb0:	7f 0c                	jg     7ebe <z_time_slice+0x59>
			move_thread_to_end_of_prio_q(_current);
    7eb2:	e8 0c ff ff ff       	callq  7dc3 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    7eb7:	e8 18 fb ff ff       	callq  79d4 <z_reset_time_slice>
    7ebc:	eb 0e                	jmp    7ecc <z_time_slice+0x67>
			_current_cpu->slice_ticks -= ticks;
    7ebe:	29 da                	sub    %ebx,%edx
    7ec0:	89 50 20             	mov    %edx,0x20(%rax)
    7ec3:	eb 07                	jmp    7ecc <z_time_slice+0x67>
		_current_cpu->slice_ticks = 0;
    7ec5:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
}
    7ecc:	58                   	pop    %rax
	posix_irq_unlock(key);
    7ecd:	89 ef                	mov    %ebp,%edi
    7ecf:	5b                   	pop    %rbx
    7ed0:	5d                   	pop    %rbp
    7ed1:	e9 6c df ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007ed6 <ready_thread>:
    7ed6:	8a 47 19             	mov    0x19(%rdi),%al
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7ed9:	84 c0                	test   %al,%al
    7edb:	0f 88 95 00 00 00    	js     7f76 <ready_thread+0xa0>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7ee1:	a8 1f                	test   $0x1f,%al
    7ee3:	0f 85 8d 00 00 00    	jne    7f76 <ready_thread+0xa0>
{
    7ee9:	41 54                	push   %r12
    7eeb:	55                   	push   %rbp
    7eec:	53                   	push   %rbx
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7eed:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
    7ef2:	48 89 fb             	mov    %rdi,%rbx
    7ef5:	75 7a                	jne    7f71 <ready_thread+0x9b>
	return list->head == list;
    7ef7:	4c 8d 25 c2 6d 00 00 	lea    0x6dc2(%rip),%r12        # ecc0 <_kernel>
	thread->base.thread_state |= _THREAD_QUEUED;
    7efe:	83 c8 80             	or     $0xffffff80,%eax
    7f01:	88 47 19             	mov    %al,0x19(%rdi)
    7f04:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f09:	48 85 ed             	test   %rbp,%rbp
    7f0c:	74 0a                	je     7f18 <ready_thread+0x42>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f0e:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    7f13:	48 39 c5             	cmp    %rax,%rbp
    7f16:	75 1b                	jne    7f33 <ready_thread+0x5d>
	sys_dnode_t *const tail = list->tail;
    7f18:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    7f1d:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    7f22:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    7f25:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7f29:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7f2c:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    7f31:	eb 33                	jmp    7f66 <ready_thread+0x90>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7f33:	48 89 ee             	mov    %rbp,%rsi
    7f36:	48 89 df             	mov    %rbx,%rdi
    7f39:	e8 7f fa ff ff       	callq  79bd <z_sched_prio_cmp>
    7f3e:	85 c0                	test   %eax,%eax
    7f40:	7e 14                	jle    7f56 <ready_thread+0x80>
	sys_dnode_t *const prev = successor->prev;
    7f42:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    7f46:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    7f49:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    7f4d:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    7f50:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    7f54:	eb 10                	jmp    7f66 <ready_thread+0x90>
	return (node == list->tail) ? NULL : node->next;
    7f56:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    7f5b:	74 bb                	je     7f18 <ready_thread+0x42>
    7f5d:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f61:	48 85 ed             	test   %rbp,%rbp
    7f64:	eb b0                	jmp    7f16 <ready_thread+0x40>
}
    7f66:	5b                   	pop    %rbx
		update_cache(0);
    7f67:	31 ff                	xor    %edi,%edi
}
    7f69:	5d                   	pop    %rbp
    7f6a:	41 5c                	pop    %r12
		update_cache(0);
    7f6c:	e9 cf fb ff ff       	jmpq   7b40 <update_cache>
}
    7f71:	5b                   	pop    %rbx
    7f72:	5d                   	pop    %rbp
    7f73:	41 5c                	pop    %r12
    7f75:	c3                   	retq   
    7f76:	c3                   	retq   

0000000000007f77 <z_ready_thread>:
{
    7f77:	f3 0f 1e fa          	endbr64 
    7f7b:	55                   	push   %rbp
    7f7c:	48 83 ec 10          	sub    $0x10,%rsp
    7f80:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    7f85:	e8 aa de ff ff       	callq  5e34 <posix_irq_lock>
			ready_thread(thread);
    7f8a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    7f8f:	89 c5                	mov    %eax,%ebp
    7f91:	e8 40 ff ff ff       	callq  7ed6 <ready_thread>
}
    7f96:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    7f9a:	89 ef                	mov    %ebp,%edi
    7f9c:	5d                   	pop    %rbp
    7f9d:	e9 a0 de ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000007fa2 <z_sched_start>:
{
    7fa2:	f3 0f 1e fa          	endbr64 
    7fa6:	41 54                	push   %r12
    7fa8:	48 83 ec 10          	sub    $0x10,%rsp
    7fac:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    7fb1:	e8 7e de ff ff       	callq  5e34 <posix_irq_lock>
	if (z_has_thread_started(thread)) {
    7fb6:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    7fbb:	41 89 c4             	mov    %eax,%r12d
    7fbe:	8a 47 19             	mov    0x19(%rdi),%al
    7fc1:	a8 04                	test   $0x4,%al
    7fc3:	75 0e                	jne    7fd3 <z_sched_start+0x31>
}
    7fc5:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    7fc9:	44 89 e7             	mov    %r12d,%edi
    7fcc:	41 5c                	pop    %r12
    7fce:	e9 6f de ff ff       	jmpq   5e42 <posix_irq_unlock>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7fd3:	83 e0 fb             	and    $0xfffffffb,%eax
    7fd6:	88 47 19             	mov    %al,0x19(%rdi)
	ready_thread(thread);
    7fd9:	e8 f8 fe ff ff       	callq  7ed6 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7fde:	48 8d 3d 60 6e 00 00 	lea    0x6e60(%rip),%rdi        # ee45 <sched_spinlock>
}
    7fe5:	48 83 c4 10          	add    $0x10,%rsp
	z_reschedule(&sched_spinlock, key);
    7fe9:	44 89 e6             	mov    %r12d,%esi
}
    7fec:	41 5c                	pop    %r12
	z_reschedule(&sched_spinlock, key);
    7fee:	e9 85 fa ff ff       	jmpq   7a78 <z_reschedule>

0000000000007ff3 <z_thread_timeout>:
{
    7ff3:	f3 0f 1e fa          	endbr64 
    7ff7:	41 54                	push   %r12
    7ff9:	55                   	push   %rbp
    7ffa:	53                   	push   %rbx
    7ffb:	48 89 fb             	mov    %rdi,%rbx
	return posix_irq_lock();
    7ffe:	e8 31 de ff ff       	callq  5e34 <posix_irq_lock>
    8003:	89 c5                	mov    %eax,%ebp
		if (!killed) {
    8005:	f6 43 f1 28          	testb  $0x28,-0xf(%rbx)
    8009:	75 1f                	jne    802a <z_thread_timeout+0x37>
			if (thread->base.pended_on != NULL) {
    800b:	48 83 7b e8 00       	cmpq   $0x0,-0x18(%rbx)
	struct k_thread *thread = CONTAINER_OF(timeout,
    8010:	4c 8d 63 d8          	lea    -0x28(%rbx),%r12
			if (thread->base.pended_on != NULL) {
    8014:	74 08                	je     801e <z_thread_timeout+0x2b>
				unpend_thread_no_timeout(thread);
    8016:	4c 89 e7             	mov    %r12,%rdi
    8019:	e8 f0 fa ff ff       	callq  7b0e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    801e:	80 63 f1 eb          	andb   $0xeb,-0xf(%rbx)
			ready_thread(thread);
    8022:	4c 89 e7             	mov    %r12,%rdi
    8025:	e8 ac fe ff ff       	callq  7ed6 <ready_thread>
}
    802a:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    802b:	89 ef                	mov    %ebp,%edi
    802d:	5d                   	pop    %rbp
    802e:	41 5c                	pop    %r12
    8030:	e9 0d de ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000008035 <z_unpend_first_thread>:
{
    8035:	f3 0f 1e fa          	endbr64 
    8039:	41 54                	push   %r12
    803b:	55                   	push   %rbp
    803c:	48 83 ec 18          	sub    $0x18,%rsp
    8040:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    8045:	e8 ea dd ff ff       	callq  5e34 <posix_irq_lock>
		thread = _priq_wait_best(&wait_q->waitq);
    804a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    804f:	89 c5                	mov    %eax,%ebp
    8051:	e8 d6 fa ff ff       	callq  7b2c <z_priq_dumb_best>
    8056:	49 89 c4             	mov    %rax,%r12
		if (thread != NULL) {
    8059:	48 85 c0             	test   %rax,%rax
    805c:	74 12                	je     8070 <z_unpend_first_thread+0x3b>
			unpend_thread_no_timeout(thread);
    805e:	48 89 c7             	mov    %rax,%rdi
    8061:	e8 a8 fa ff ff       	callq  7b0e <unpend_thread_no_timeout>
    8066:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
    806b:	e8 71 05 00 00       	callq  85e1 <z_abort_timeout>
	posix_irq_unlock(key);
    8070:	89 ef                	mov    %ebp,%edi
    8072:	e8 cb dd ff ff       	callq  5e42 <posix_irq_unlock>
}
    8077:	48 83 c4 18          	add    $0x18,%rsp
    807b:	4c 89 e0             	mov    %r12,%rax
    807e:	5d                   	pop    %rbp
    807f:	41 5c                	pop    %r12
    8081:	c3                   	retq   

0000000000008082 <z_sched_init>:
{
    8082:	f3 0f 1e fa          	endbr64 
	list->head = (sys_dnode_t *)list;
    8086:	48 8d 05 33 6c 00 00 	lea    0x6c33(%rip),%rax        # ecc0 <_kernel>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    808d:	31 f6                	xor    %esi,%esi
    808f:	31 ff                	xor    %edi,%edi
    8091:	48 8d 50 40          	lea    0x40(%rax),%rdx
    8095:	48 89 50 40          	mov    %rdx,0x40(%rax)
	list->tail = (sys_dnode_t *)list;
    8099:	48 89 50 48          	mov    %rdx,0x48(%rax)
    809d:	e9 60 f9 ff ff       	jmpq   7a02 <k_sched_time_slice_set>

00000000000080a2 <z_impl_k_yield>:
{
    80a2:	f3 0f 1e fa          	endbr64 
    80a6:	41 55                	push   %r13
    80a8:	41 54                	push   %r12
    80aa:	55                   	push   %rbp
    80ab:	53                   	push   %rbx
    80ac:	52                   	push   %rdx
	if (!z_is_idle_thread_object(_current)) {
    80ad:	48 8d 2d 0c 6c 00 00 	lea    0x6c0c(%rip),%rbp        # ecc0 <_kernel>
    80b4:	48 8d 05 c5 6a 00 00 	lea    0x6ac5(%rip),%rax        # eb80 <z_idle_threads>
    80bb:	48 39 45 10          	cmp    %rax,0x10(%rbp)
    80bf:	0f 84 8e 00 00 00    	je     8153 <z_impl_k_yield+0xb1>
	return posix_irq_lock();
    80c5:	e8 6a dd ff ff       	callq  5e34 <posix_irq_lock>
			dequeue_thread(&_kernel.ready_q.runq,
    80ca:	48 8b 75 10          	mov    0x10(%rbp),%rsi
		_priq_run_remove(pq, thread);
    80ce:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    80d2:	41 89 c5             	mov    %eax,%r13d
	thread->base.thread_state &= ~_THREAD_QUEUED;
    80d5:	80 66 19 7f          	andb   $0x7f,0x19(%rsi)
		_priq_run_remove(pq, thread);
    80d9:	e8 0e fa ff ff       	callq  7aec <z_priq_dumb_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    80de:	48 8b 5d 10          	mov    0x10(%rbp),%rbx
	thread->base.thread_state |= _THREAD_QUEUED;
    80e2:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    80e6:	4c 8b 65 40          	mov    0x40(%rbp),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80ea:	4d 85 e4             	test   %r12,%r12
    80ed:	74 09                	je     80f8 <z_impl_k_yield+0x56>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80ef:	48 8d 45 40          	lea    0x40(%rbp),%rax
    80f3:	49 39 c4             	cmp    %rax,%r12
    80f6:	75 18                	jne    8110 <z_impl_k_yield+0x6e>
	sys_dnode_t *const tail = list->tail;
    80f8:	48 8b 45 48          	mov    0x48(%rbp),%rax
	node->next = list;
    80fc:	48 8d 55 40          	lea    0x40(%rbp),%rdx
    8100:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    8103:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    8107:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    810a:	48 89 5d 48          	mov    %rbx,0x48(%rbp)
}
    810e:	eb 34                	jmp    8144 <z_impl_k_yield+0xa2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8110:	4c 89 e6             	mov    %r12,%rsi
    8113:	48 89 df             	mov    %rbx,%rdi
    8116:	e8 a2 f8 ff ff       	callq  79bd <z_sched_prio_cmp>
    811b:	85 c0                	test   %eax,%eax
    811d:	7e 16                	jle    8135 <z_impl_k_yield+0x93>
	sys_dnode_t *const prev = successor->prev;
    811f:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    8124:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    8127:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    812b:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    812e:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    8133:	eb 0f                	jmp    8144 <z_impl_k_yield+0xa2>
	return (node == list->tail) ? NULL : node->next;
    8135:	4c 39 65 48          	cmp    %r12,0x48(%rbp)
    8139:	74 bd                	je     80f8 <z_impl_k_yield+0x56>
    813b:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    813f:	4d 85 e4             	test   %r12,%r12
    8142:	eb b2                	jmp    80f6 <z_impl_k_yield+0x54>
		update_cache(1);
    8144:	bf 01 00 00 00       	mov    $0x1,%edi
    8149:	e8 f2 f9 ff ff       	callq  7b40 <update_cache>
    814e:	44 89 ef             	mov    %r13d,%edi
    8151:	eb 07                	jmp    815a <z_impl_k_yield+0xb8>
    8153:	e8 dc dc ff ff       	callq  5e34 <posix_irq_lock>
    8158:	89 c7                	mov    %eax,%edi
}
    815a:	58                   	pop    %rax
    815b:	5b                   	pop    %rbx
    815c:	5d                   	pop    %rbp
    815d:	41 5c                	pop    %r12
    815f:	41 5d                	pop    %r13
    8161:	e9 0c d1 ff ff       	jmpq   5272 <arch_swap>

0000000000008166 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    8166:	f3 0f 1e fa          	endbr64 
    816a:	51                   	push   %rcx

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    816b:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    816f:	75 15                	jne    8186 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    8171:	48 8d 05 48 6b 00 00 	lea    0x6b48(%rip),%rax        # ecc0 <_kernel>
    8178:	48 8b 78 10          	mov    0x10(%rax),%rdi
	z_impl_k_thread_suspend(thread);
    817c:	e8 a9 fb ff ff       	callq  7d2a <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8181:	83 c8 ff             	or     $0xffffffff,%eax
}
    8184:	eb 16                	jmp    819c <z_impl_k_sleep+0x36>
	if (ticks == 0) {
    8186:	48 85 ff             	test   %rdi,%rdi
    8189:	75 09                	jne    8194 <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
    818b:	e8 12 ff ff ff       	callq  80a2 <z_impl_k_yield>
		return 0;
    8190:	31 c0                	xor    %eax,%eax
}
    8192:	eb 05                	jmp    8199 <z_impl_k_sleep+0x33>
    8194:	e8 21 fb ff ff       	callq  7cba <z_tick_sleep.part.0>

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    8199:	6b c0 0a             	imul   $0xa,%eax,%eax
}
    819c:	5a                   	pop    %rdx
    819d:	c3                   	retq   

000000000000819e <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
    819e:	f3 0f 1e fa          	endbr64 
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    81a2:	48 8d 05 17 6b 00 00 	lea    0x6b17(%rip),%rax        # ecc0 <_kernel>

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    81a9:	48 8b 40 10          	mov    0x10(%rax),%rax
}
    81ad:	c3                   	retq   

00000000000081ae <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    81ae:	f3 0f 1e fa          	endbr64 
    81b2:	41 55                	push   %r13
    81b4:	41 54                	push   %r12
    81b6:	55                   	push   %rbp
    81b7:	53                   	push   %rbx
    81b8:	48 89 fb             	mov    %rdi,%rbx
    81bb:	52                   	push   %rdx
    81bc:	e8 73 dc ff ff       	callq  5e34 <posix_irq_lock>
    81c1:	41 89 c4             	mov    %eax,%r12d
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    81c4:	8a 43 19             	mov    0x19(%rbx),%al
    81c7:	a8 08                	test   $0x8,%al
    81c9:	0f 85 9b 00 00 00    	jne    826a <z_thread_abort+0xbc>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    81cf:	89 c2                	mov    %eax,%edx
    81d1:	83 e2 df             	and    $0xffffffdf,%edx
		if (z_is_thread_queued(thread)) {
    81d4:	80 ca 08             	or     $0x8,%dl
    81d7:	78 05                	js     81de <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    81d9:	88 53 19             	mov    %dl,0x19(%rbx)
    81dc:	eb 1c                	jmp    81fa <z_thread_abort+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81de:	83 e0 5f             	and    $0x5f,%eax
		_priq_run_remove(pq, thread);
    81e1:	48 89 de             	mov    %rbx,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    81e4:	83 c8 08             	or     $0x8,%eax
    81e7:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    81ea:	48 8d 05 cf 6a 00 00 	lea    0x6acf(%rip),%rax        # ecc0 <_kernel>
    81f1:	48 8d 78 40          	lea    0x40(%rax),%rdi
    81f5:	e8 f2 f8 ff ff       	callq  7aec <z_priq_dumb_remove>
		if (thread->base.pended_on != NULL) {
    81fa:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
    81ff:	74 08                	je     8209 <z_thread_abort+0x5b>
			unpend_thread_no_timeout(thread);
    8201:	48 89 df             	mov    %rbx,%rdi
    8204:	e8 05 f9 ff ff       	callq  7b0e <unpend_thread_no_timeout>
    8209:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    820d:	4c 8d 6b 60          	lea    0x60(%rbx),%r13
    8211:	e8 cb 03 00 00       	callq  85e1 <z_abort_timeout>
	return list->head == list;
    8216:	48 8b 6b 60          	mov    0x60(%rbx),%rbp
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    821a:	48 85 ed             	test   %rbp,%rbp
    821d:	74 27                	je     8246 <z_thread_abort+0x98>
    821f:	4c 39 ed             	cmp    %r13,%rbp
    8222:	74 22                	je     8246 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
    8224:	48 89 ef             	mov    %rbp,%rdi
    8227:	e8 e2 f8 ff ff       	callq  7b0e <unpend_thread_no_timeout>
    822c:	48 8d 7d 28          	lea    0x28(%rbp),%rdi
    8230:	e8 ac 03 00 00       	callq  85e1 <z_abort_timeout>
	thread->callee_saved.retval = value;
    8235:	c7 45 4c 00 00 00 00 	movl   $0x0,0x4c(%rbp)
		ready_thread(thread);
    823c:	48 89 ef             	mov    %rbp,%rdi
    823f:	e8 92 fc ff ff       	callq  7ed6 <ready_thread>
    8244:	eb d0                	jmp    8216 <z_thread_abort+0x68>
		update_cache(1);
    8246:	bf 01 00 00 00       	mov    $0x1,%edi
    824b:	e8 f0 f8 ff ff       	callq  7b40 <update_cache>
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
    8250:	48 8d 05 69 6a 00 00 	lea    0x6a69(%rip),%rax        # ecc0 <_kernel>
    8257:	48 39 58 10          	cmp    %rbx,0x10(%rax)
    825b:	75 0d                	jne    826a <z_thread_abort+0xbc>
    825d:	83 38 00             	cmpl   $0x0,(%rax)
    8260:	75 08                	jne    826a <z_thread_abort+0xbc>
    8262:	44 89 e7             	mov    %r12d,%edi
    8265:	e8 08 d0 ff ff       	callq  5272 <arch_swap>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    826a:	58                   	pop    %rax
	posix_irq_unlock(key);
    826b:	44 89 e7             	mov    %r12d,%edi
    826e:	5b                   	pop    %rbx
    826f:	5d                   	pop    %rbp
    8270:	41 5c                	pop    %r12
    8272:	41 5d                	pop    %r13
    8274:	e9 c9 db ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000008279 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    8279:	f3 0f 1e fa          	endbr64 
	z_sched_start(thread);
    827d:	e9 20 fd ff ff       	jmpq   7fa2 <z_sched_start>

0000000000008282 <z_init_thread_base>:
}
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    8282:	f3 0f 1e fa          	endbr64 
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    8286:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    828d:	00 
	thread_base->user_options = (uint8_t)options;
    828e:	88 4f 18             	mov    %cl,0x18(%rdi)
	thread_base->thread_state = (uint8_t)initial_state;
    8291:	88 57 19             	mov    %dl,0x19(%rdi)

	thread_base->prio = priority;
    8294:	40 88 77 1a          	mov    %sil,0x1a(%rdi)

	thread_base->sched_locked = 0U;
    8298:	c6 47 1b 00          	movb   $0x0,0x1b(%rdi)
	node->next = NULL;
    829c:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    82a3:	00 
	node->prev = NULL;
    82a4:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    82ab:	00 
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    82ac:	c3                   	retq   

00000000000082ad <z_setup_new_thread>:
{
    82ad:	f3 0f 1e fa          	endbr64 
    82b1:	41 55                	push   %r13
	sys_dlist_init(&w->waitq);
    82b3:	48 8d 47 60          	lea    0x60(%rdi),%rax
    82b7:	49 89 cd             	mov    %rcx,%r13
    82ba:	41 54                	push   %r12
    82bc:	49 89 d4             	mov    %rdx,%r12
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    82bf:	ba 04 00 00 00       	mov    $0x4,%edx
{
    82c4:	55                   	push   %rbp
    82c5:	48 89 f5             	mov    %rsi,%rbp
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    82c8:	49 83 c4 07          	add    $0x7,%r12
{
    82cc:	53                   	push   %rbx
    82cd:	48 89 fb             	mov    %rdi,%rbx
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    82d0:	49 83 e4 f8          	and    $0xfffffffffffffff8,%r12
	stack_ptr = (char *)stack + stack_obj_size;
    82d4:	49 01 ec             	add    %rbp,%r12
{
    82d7:	48 83 ec 18          	sub    $0x18,%rsp
	list->head = (sys_dnode_t *)list;
    82db:	48 89 47 60          	mov    %rax,0x60(%rdi)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    82df:	8b 4c 24 50          	mov    0x50(%rsp),%ecx
    82e3:	8b 74 24 48          	mov    0x48(%rsp),%esi
	list->tail = (sys_dnode_t *)list;
    82e7:	48 89 47 68          	mov    %rax,0x68(%rdi)
{
    82eb:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    82f0:	4c 89 0c 24          	mov    %r9,(%rsp)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    82f4:	e8 89 ff ff ff       	callq  8282 <z_init_thread_base>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    82f9:	4c 89 e9             	mov    %r13,%rcx
    82fc:	4c 89 e2             	mov    %r12,%rdx
    82ff:	48 89 ee             	mov    %rbp,%rsi
    8302:	50                   	push   %rax
    8303:	48 89 df             	mov    %rbx,%rdi
    8306:	ff 74 24 48          	pushq  0x48(%rsp)
    830a:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    830f:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    8314:	e8 c2 cf ff ff       	callq  52db <arch_new_thread>
	if (!_current) {
    8319:	48 8d 05 a0 69 00 00 	lea    0x69a0(%rip),%rax        # ecc0 <_kernel>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8320:	5a                   	pop    %rdx
	new_thread->init_data = NULL;
    8321:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
    8328:	00 
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8329:	59                   	pop    %rcx
	if (!_current) {
    832a:	48 8b 40 10          	mov    0x10(%rax),%rax
    832e:	48 85 c0             	test   %rax,%rax
    8331:	74 04                	je     8337 <z_setup_new_thread+0x8a>
	new_thread->resource_pool = _current->resource_pool;
    8333:	48 8b 40 78          	mov    0x78(%rax),%rax
	return stack_ptr;
    8337:	48 89 43 78          	mov    %rax,0x78(%rbx)
}
    833b:	48 83 c4 18          	add    $0x18,%rsp
    833f:	4c 89 e0             	mov    %r12,%rax
    8342:	5b                   	pop    %rbx
    8343:	5d                   	pop    %rbp
    8344:	41 5c                	pop    %r12
    8346:	41 5d                	pop    %r13
    8348:	c3                   	retq   

0000000000008349 <z_init_static_threads>:
{
    8349:	f3 0f 1e fa          	endbr64 
    834d:	55                   	push   %rbp
    834e:	53                   	push   %rbx
    834f:	52                   	push   %rdx
	_FOREACH_STATIC_THREAD(thread_data) {
    8350:	48 8d 1d 19 5f 00 00 	lea    0x5f19(%rip),%rbx        # e270 <_k_thread_data_processing_tid>
    8357:	48 89 dd             	mov    %rbx,%rbp
    835a:	48 3b 1d 57 3c 00 00 	cmp    0x3c57(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    8361:	73 3a                	jae    839d <z_init_static_threads+0x54>
		z_setup_new_thread(
    8363:	4c 8b 4b 28          	mov    0x28(%rbx),%r9
    8367:	4c 8b 43 20          	mov    0x20(%rbx),%r8
    836b:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    836f:	8b 53 10             	mov    0x10(%rbx),%edx
    8372:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    8376:	ff 73 50             	pushq  0x50(%rbx)
    8379:	8b 43 3c             	mov    0x3c(%rbx),%eax
    837c:	50                   	push   %rax
    837d:	8b 43 38             	mov    0x38(%rbx),%eax
    8380:	50                   	push   %rax
    8381:	ff 73 30             	pushq  0x30(%rbx)
    8384:	48 8b 3b             	mov    (%rbx),%rdi
    8387:	e8 21 ff ff ff       	callq  82ad <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    838c:	48 8b 03             	mov    (%rbx),%rax
		z_setup_new_thread(
    838f:	48 83 c4 20          	add    $0x20,%rsp
		thread_data->init_thread->init_data = thread_data;
    8393:	48 89 58 58          	mov    %rbx,0x58(%rax)
	_FOREACH_STATIC_THREAD(thread_data) {
    8397:	48 83 c3 58          	add    $0x58,%rbx
    839b:	eb bd                	jmp    835a <z_init_static_threads+0x11>
	k_sched_lock();
    839d:	e8 2a f7 ff ff       	callq  7acc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    83a2:	48 89 eb             	mov    %rbp,%rbx
					    K_MSEC(thread_data->init_delay));
    83a5:	31 ed                	xor    %ebp,%ebp
	_FOREACH_STATIC_THREAD(thread_data) {
    83a7:	48 3b 1d 0a 3c 00 00 	cmp    0x3c0a(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    83ae:	73 46                	jae    83f6 <z_init_static_threads+0xad>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    83b0:	8b 43 40             	mov    0x40(%rbx),%eax
    83b3:	83 f8 ff             	cmp    $0xffffffff,%eax
    83b6:	74 38                	je     83f0 <z_init_static_threads+0xa7>
					    K_MSEC(thread_data->init_delay));
    83b8:	85 c0                	test   %eax,%eax
			schedule_new_thread(thread_data->init_thread,
    83ba:	48 8b 3b             	mov    (%rbx),%rdi
					    K_MSEC(thread_data->init_delay));
    83bd:	0f 48 c5             	cmovs  %ebp,%eax
    83c0:	48 63 c8             	movslq %eax,%rcx
		t += off;
    83c3:	48 8d 41 09          	lea    0x9(%rcx),%rax
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    83c7:	48 85 c9             	test   %rcx,%rcx
    83ca:	75 07                	jne    83d3 <z_init_static_threads+0x8a>
	z_impl_k_thread_start(thread);
    83cc:	e8 a8 fe ff ff       	callq  8279 <z_impl_k_thread_start>
}
    83d1:	eb 1d                	jmp    83f0 <z_init_static_threads+0xa7>
			return t / (from_hz / to_hz);
    83d3:	b9 0a 00 00 00       	mov    $0xa,%ecx
    83d8:	31 d2                	xor    %edx,%edx
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    83da:	48 8d 35 12 fc ff ff 	lea    -0x3ee(%rip),%rsi        # 7ff3 <z_thread_timeout>
    83e1:	48 83 c7 28          	add    $0x28,%rdi
    83e5:	48 f7 f1             	div    %rcx
    83e8:	48 89 c2             	mov    %rax,%rdx
    83eb:	e8 d5 00 00 00       	callq  84c5 <z_add_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
    83f0:	48 83 c3 58          	add    $0x58,%rbx
    83f4:	eb b1                	jmp    83a7 <z_init_static_threads+0x5e>
}
    83f6:	58                   	pop    %rax
    83f7:	5b                   	pop    %rbx
    83f8:	5d                   	pop    %rbp
	k_sched_unlock();
    83f9:	e9 97 f9 ff ff       	jmpq   7d95 <k_sched_unlock>

00000000000083fe <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    83fe:	f3 0f 1e fa          	endbr64 
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8402:	48 8d 15 a8 1b 00 00 	lea    0x1ba8(%rip),%rdx        # 9fb1 <default_cmd+0xd51>
    8409:	48 8d 35 6c 1f 00 00 	lea    0x1f6c(%rip),%rsi        # a37c <default_cmd+0x111c>
    8410:	31 c0                	xor    %eax,%eax
    8412:	48 8d 3d 84 1f 00 00 	lea    0x1f84(%rip),%rdi        # a39d <default_cmd+0x113d>
    8419:	e9 e6 a6 ff ff       	jmpq   2b04 <printk>

000000000000841e <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    841e:	83 3d 13 6a 00 00 00 	cmpl   $0x0,0x6a13(%rip)        # ee38 <announce_remaining>
    8425:	75 05                	jne    842c <elapsed+0xe>
    8427:	e9 dc b5 ff ff       	jmpq   3a08 <sys_clock_elapsed>
}
    842c:	31 c0                	xor    %eax,%eax
    842e:	c3                   	retq   

000000000000842f <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    842f:	48 8b 07             	mov    (%rdi),%rax
    8432:	48 85 ff             	test   %rdi,%rdi
    8435:	74 16                	je     844d <remove_timeout+0x1e>
	return (node == list->tail) ? NULL : node->next;
    8437:	48 3b 3d fa 3f 00 00 	cmp    0x3ffa(%rip),%rdi        # c438 <timeout_list+0x8>
    843e:	74 0d                	je     844d <remove_timeout+0x1e>
	if (next(t) != NULL) {
    8440:	48 85 c0             	test   %rax,%rax
    8443:	74 08                	je     844d <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
    8445:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    8449:	48 01 50 18          	add    %rdx,0x18(%rax)
	sys_dnode_t *const prev = node->prev;
    844d:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	prev->next = next;
    8451:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    8454:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    8458:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
    845f:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    8466:	00 
}
    8467:	c3                   	retq   

0000000000008468 <next_timeout>:

static int32_t next_timeout(void)
{
    8468:	53                   	push   %rbx
	return list->head == list;
    8469:	48 8b 1d c0 3f 00 00 	mov    0x3fc0(%rip),%rbx        # c430 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8470:	48 8d 05 b9 3f 00 00 	lea    0x3fb9(%rip),%rax        # c430 <timeout_list>
    8477:	48 39 c3             	cmp    %rax,%rbx
    847a:	75 02                	jne    847e <next_timeout+0x16>
    847c:	31 db                	xor    %ebx,%ebx
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    847e:	e8 9b ff ff ff       	callq  841e <elapsed>
    8483:	89 c2                	mov    %eax,%edx
	int32_t ret = to == NULL ? MAX_WAIT
    8485:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    848a:	48 85 db             	test   %rbx,%rbx
    848d:	74 21                	je     84b0 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    848f:	48 63 c2             	movslq %edx,%rax
    8492:	48 8b 53 18          	mov    0x18(%rbx),%rdx
    8496:	48 29 c2             	sub    %rax,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    8499:	31 c0                	xor    %eax,%eax
    849b:	48 85 d2             	test   %rdx,%rdx
    849e:	7e 10                	jle    84b0 <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    84a0:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    84a7:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    84ac:	48 0f 4e c2          	cmovle %rdx,%rax

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    84b0:	48 8d 15 09 68 00 00 	lea    0x6809(%rip),%rdx        # ecc0 <_kernel>
    84b7:	8b 52 20             	mov    0x20(%rdx),%edx
    84ba:	85 d2                	test   %edx,%edx
    84bc:	74 05                	je     84c3 <next_timeout+0x5b>
    84be:	39 d0                	cmp    %edx,%eax
    84c0:	0f 4f c2             	cmovg  %edx,%eax
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    84c3:	5b                   	pop    %rbx
    84c4:	c3                   	retq   

00000000000084c5 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    84c5:	f3 0f 1e fa          	endbr64 
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    84c9:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    84cd:	0f 84 0d 01 00 00    	je     85e0 <z_add_timeout+0x11b>
{
    84d3:	41 56                	push   %r14
    84d5:	49 89 f6             	mov    %rsi,%r14
    84d8:	41 55                	push   %r13
    84da:	49 89 d5             	mov    %rdx,%r13
    84dd:	41 54                	push   %r12
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    84df:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
{
    84e6:	55                   	push   %rbp
	k_ticks_t ticks = timeout.ticks + 1;
    84e7:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
{
    84eb:	53                   	push   %rbx
    84ec:	48 89 fb             	mov    %rdi,%rbx
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    84ef:	49 39 ec             	cmp    %rbp,%r12
    84f2:	78 17                	js     850b <z_add_timeout+0x46>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    84f4:	e8 25 ff ff ff       	callq  841e <elapsed>
    84f9:	4c 89 e5             	mov    %r12,%rbp
    84fc:	48 2b 2d ed 68 00 00 	sub    0x68ed(%rip),%rbp        # edf0 <curr_tick>
    8503:	4c 29 ed             	sub    %r13,%rbp
    8506:	48 98                	cltq   
    8508:	48 29 c5             	sub    %rax,%rbp
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    850b:	4c 89 73 10          	mov    %r14,0x10(%rbx)
	return posix_irq_lock();
    850f:	e8 20 d9 ff ff       	callq  5e34 <posix_irq_lock>
    8514:	41 89 c4             	mov    %eax,%r12d
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    8517:	e8 02 ff ff ff       	callq  841e <elapsed>
	ticks = MAX(1, ticks);
    851c:	48 85 ed             	test   %rbp,%rbp
    851f:	ba 01 00 00 00       	mov    $0x1,%edx
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8524:	48 8b 3d 0d 3f 00 00 	mov    0x3f0d(%rip),%rdi        # c438 <timeout_list+0x8>
    852b:	48 0f 4e ea          	cmovle %rdx,%rbp
		to->dticks = ticks + elapsed();
    852f:	48 98                	cltq   
	return list->head == list;
    8531:	48 8d 15 f8 3e 00 00 	lea    0x3ef8(%rip),%rdx        # c430 <timeout_list>
    8538:	48 01 c5             	add    %rax,%rbp
    853b:	48 8b 05 ee 3e 00 00 	mov    0x3eee(%rip),%rax        # c430 <timeout_list>
    8542:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8546:	48 39 d0             	cmp    %rdx,%rax
    8549:	74 3e                	je     8589 <z_add_timeout+0xc4>
		for (t = first(); t != NULL; t = next(t)) {
    854b:	48 85 c0             	test   %rax,%rax
    854e:	74 39                	je     8589 <z_add_timeout+0xc4>
			if (t->dticks > to->dticks) {
    8550:	48 8b 70 18          	mov    0x18(%rax),%rsi
    8554:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    8558:	48 39 ce             	cmp    %rcx,%rsi
    855b:	7e 1b                	jle    8578 <z_add_timeout+0xb3>
				t->dticks -= to->dticks;
    855d:	48 29 ce             	sub    %rcx,%rsi
	sys_dnode_t *const prev = successor->prev;
    8560:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8564:	48 89 70 18          	mov    %rsi,0x18(%rax)
	node->prev = prev;
    8568:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
	node->next = successor;
    856c:	48 89 03             	mov    %rax,(%rbx)
	prev->next = node;
    856f:	48 89 19             	mov    %rbx,(%rcx)
	successor->prev = node;
    8572:	48 89 58 08          	mov    %rbx,0x8(%rax)
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8576:	eb 29                	jmp    85a1 <z_add_timeout+0xdc>
			to->dticks -= t->dticks;
    8578:	48 29 f1             	sub    %rsi,%rcx
    857b:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
	return (node == list->tail) ? NULL : node->next;
    857f:	48 39 f8             	cmp    %rdi,%rax
    8582:	74 05                	je     8589 <z_add_timeout+0xc4>
    8584:	48 8b 00             	mov    (%rax),%rax
    8587:	eb c2                	jmp    854b <z_add_timeout+0x86>
	sys_dnode_t *const tail = list->tail;
    8589:	48 8b 05 a8 3e 00 00 	mov    0x3ea8(%rip),%rax        # c438 <timeout_list+0x8>
	node->next = list;
    8590:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    8593:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    8597:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    859a:	48 89 1d 97 3e 00 00 	mov    %rbx,0x3e97(%rip)        # c438 <timeout_list+0x8>
	return list->head == list;
    85a1:	48 8b 05 88 3e 00 00 	mov    0x3e88(%rip),%rax        # c430 <timeout_list>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    85a8:	48 39 c3             	cmp    %rax,%rbx
    85ab:	75 23                	jne    85d0 <z_add_timeout+0x10b>
    85ad:	48 39 d0             	cmp    %rdx,%rax
    85b0:	74 1e                	je     85d0 <z_add_timeout+0x10b>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    85b2:	e8 b1 fe ff ff       	callq  8468 <next_timeout>
    85b7:	89 c7                	mov    %eax,%edi

			if (next_time == 0 ||
    85b9:	85 c0                	test   %eax,%eax
    85bb:	74 0c                	je     85c9 <z_add_timeout+0x104>
			    _current_cpu->slice_ticks != next_time) {
    85bd:	48 8d 05 fc 66 00 00 	lea    0x66fc(%rip),%rax        # ecc0 <_kernel>
			if (next_time == 0 ||
    85c4:	39 78 20             	cmp    %edi,0x20(%rax)
    85c7:	74 07                	je     85d0 <z_add_timeout+0x10b>
				sys_clock_set_timeout(next_time, false);
    85c9:	31 f6                	xor    %esi,%esi
    85cb:	e8 11 b4 ff ff       	callq  39e1 <sys_clock_set_timeout>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    85d0:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    85d1:	44 89 e7             	mov    %r12d,%edi
    85d4:	5d                   	pop    %rbp
    85d5:	41 5c                	pop    %r12
    85d7:	41 5d                	pop    %r13
    85d9:	41 5e                	pop    %r14
    85db:	e9 62 d8 ff ff       	jmpq   5e42 <posix_irq_unlock>
    85e0:	c3                   	retq   

00000000000085e1 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    85e1:	f3 0f 1e fa          	endbr64 
    85e5:	41 54                	push   %r12
    85e7:	41 bc ea ff ff ff    	mov    $0xffffffea,%r12d
    85ed:	48 83 ec 10          	sub    $0x10,%rsp
    85f1:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    85f6:	e8 39 d8 ff ff       	callq  5e34 <posix_irq_lock>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    85fb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8600:	41 89 c0             	mov    %eax,%r8d
    8603:	48 83 3f 00          	cmpq   $0x0,(%rdi)
    8607:	74 08                	je     8611 <z_abort_timeout+0x30>
			remove_timeout(to);
    8609:	e8 21 fe ff ff       	callq  842f <remove_timeout>
			ret = 0;
    860e:	45 31 e4             	xor    %r12d,%r12d
	posix_irq_unlock(key);
    8611:	44 89 c7             	mov    %r8d,%edi
    8614:	e8 29 d8 ff ff       	callq  5e42 <posix_irq_unlock>
		}
	}

	return ret;
}
    8619:	48 83 c4 10          	add    $0x10,%rsp
    861d:	44 89 e0             	mov    %r12d,%eax
    8620:	41 5c                	pop    %r12
    8622:	c3                   	retq   

0000000000008623 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8623:	f3 0f 1e fa          	endbr64 
    8627:	41 54                	push   %r12
    8629:	55                   	push   %rbp
    862a:	89 fd                	mov    %edi,%ebp
    862c:	53                   	push   %rbx
    862d:	89 f3                	mov    %esi,%ebx
	return posix_irq_lock();
    862f:	e8 00 d8 ff ff       	callq  5e34 <posix_irq_lock>
    8634:	41 89 c4             	mov    %eax,%r12d
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8637:	e8 2c fe ff ff       	callq  8468 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
    863c:	83 f8 ff             	cmp    $0xffffffff,%eax
    863f:	0f 94 c1             	sete   %cl
			      || (ticks <= next_to);
    8642:	39 e8                	cmp    %ebp,%eax
    8644:	0f 9d c2             	setge  %dl
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8647:	08 d1                	or     %dl,%cl
    8649:	74 14                	je     865f <z_set_timeout_expiry+0x3c>
    864b:	83 f8 01             	cmp    $0x1,%eax
    864e:	7e 0f                	jle    865f <z_set_timeout_expiry+0x3c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8650:	39 e8                	cmp    %ebp,%eax
    8652:	89 ef                	mov    %ebp,%edi
    8654:	0f b6 f3             	movzbl %bl,%esi
    8657:	0f 4e f8             	cmovle %eax,%edi
    865a:	e8 82 b3 ff ff       	callq  39e1 <sys_clock_set_timeout>
		}
	}
}
    865f:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    8660:	44 89 e7             	mov    %r12d,%edi
    8663:	5d                   	pop    %rbp
    8664:	41 5c                	pop    %r12
    8666:	e9 d7 d7 ff ff       	jmpq   5e42 <posix_irq_unlock>

000000000000866b <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    866b:	f3 0f 1e fa          	endbr64 
    866f:	41 54                	push   %r12
    8671:	4c 8d 25 b8 3d 00 00 	lea    0x3db8(%rip),%r12        # c430 <timeout_list>
    8678:	55                   	push   %rbp
    8679:	53                   	push   %rbx
    867a:	89 fb                	mov    %edi,%ebx
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    867c:	e8 e4 f7 ff ff       	callq  7e65 <z_time_slice>
	return posix_irq_lock();
    8681:	e8 ae d7 ff ff       	callq  5e34 <posix_irq_lock>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    8686:	89 1d ac 67 00 00    	mov    %ebx,0x67ac(%rip)        # ee38 <announce_remaining>
    868c:	89 c5                	mov    %eax,%ebp
    868e:	48 63 15 a3 67 00 00 	movslq 0x67a3(%rip),%rdx        # ee38 <announce_remaining>
    8695:	49 8b 1c 24          	mov    (%r12),%rbx
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    8699:	48 8b 35 50 67 00 00 	mov    0x6750(%rip),%rsi        # edf0 <curr_tick>
    86a0:	48 89 d1             	mov    %rdx,%rcx

	while (first() != NULL && first()->dticks <= announce_remaining) {
    86a3:	48 85 db             	test   %rbx,%rbx
    86a6:	74 50                	je     86f8 <sys_clock_announce+0x8d>
    86a8:	4c 39 e3             	cmp    %r12,%rbx
    86ab:	74 4b                	je     86f8 <sys_clock_announce+0x8d>
    86ad:	48 8b 43 18          	mov    0x18(%rbx),%rax
    86b1:	48 39 d0             	cmp    %rdx,%rax
    86b4:	7f 3b                	jg     86f1 <sys_clock_announce+0x86>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
    86b6:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    86bd:	00 
		curr_tick += dt;
    86be:	48 63 d0             	movslq %eax,%rdx
		announce_remaining -= dt;
    86c1:	29 c1                	sub    %eax,%ecx
		remove_timeout(t);
    86c3:	48 89 df             	mov    %rbx,%rdi
		curr_tick += dt;
    86c6:	48 01 f2             	add    %rsi,%rdx
		announce_remaining -= dt;
    86c9:	89 0d 69 67 00 00    	mov    %ecx,0x6769(%rip)        # ee38 <announce_remaining>
		curr_tick += dt;
    86cf:	48 89 15 1a 67 00 00 	mov    %rdx,0x671a(%rip)        # edf0 <curr_tick>
		remove_timeout(t);
    86d6:	e8 54 fd ff ff       	callq  842f <remove_timeout>
	posix_irq_unlock(key);
    86db:	89 ef                	mov    %ebp,%edi
    86dd:	e8 60 d7 ff ff       	callq  5e42 <posix_irq_unlock>

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    86e2:	48 89 df             	mov    %rbx,%rdi
    86e5:	ff 53 10             	callq  *0x10(%rbx)
	return posix_irq_lock();
    86e8:	e8 47 d7 ff ff       	callq  5e34 <posix_irq_lock>
    86ed:	89 c5                	mov    %eax,%ebp
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    86ef:	eb 9d                	jmp    868e <sys_clock_announce+0x23>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    86f1:	48 29 d0             	sub    %rdx,%rax
    86f4:	48 89 43 18          	mov    %rax,0x18(%rbx)
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    86f8:	c7 05 36 67 00 00 00 	movl   $0x0,0x6736(%rip)        # ee38 <announce_remaining>
    86ff:	00 00 00 
	curr_tick += announce_remaining;
    8702:	48 01 f2             	add    %rsi,%rdx
    8705:	48 89 15 e4 66 00 00 	mov    %rdx,0x66e4(%rip)        # edf0 <curr_tick>

	sys_clock_set_timeout(next_timeout(), false);
    870c:	e8 57 fd ff ff       	callq  8468 <next_timeout>
    8711:	31 f6                	xor    %esi,%esi
    8713:	89 c7                	mov    %eax,%edi
    8715:	e8 c7 b2 ff ff       	callq  39e1 <sys_clock_set_timeout>

	k_spin_unlock(&timeout_lock, key);
}
    871a:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    871b:	89 ef                	mov    %ebp,%edi
    871d:	5d                   	pop    %rbp
    871e:	41 5c                	pop    %r12
    8720:	e9 1d d7 ff ff       	jmpq   5e42 <posix_irq_unlock>

0000000000008725 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8725:	f3 0f 1e fa          	endbr64 
    8729:	41 54                	push   %r12
    872b:	55                   	push   %rbp
    872c:	50                   	push   %rax
	return posix_irq_lock();
    872d:	e8 02 d7 ff ff       	callq  5e34 <posix_irq_lock>
    8732:	89 c5                	mov    %eax,%ebp
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8734:	e8 cf b2 ff ff       	callq  3a08 <sys_clock_elapsed>
	posix_irq_unlock(key);
    8739:	89 ef                	mov    %ebp,%edi
    873b:	41 89 c4             	mov    %eax,%r12d
    873e:	4c 03 25 ab 66 00 00 	add    0x66ab(%rip),%r12        # edf0 <curr_tick>
    8745:	e8 f8 d6 ff ff       	callq  5e42 <posix_irq_unlock>
	}
	return t;
}
    874a:	4c 89 e0             	mov    %r12,%rax
    874d:	5a                   	pop    %rdx
    874e:	5d                   	pop    %rbp
    874f:	41 5c                	pop    %r12
    8751:	c3                   	retq   

0000000000008752 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8752:	f3 0f 1e fa          	endbr64 
    8756:	50                   	push   %rax
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8757:	e8 c9 ff ff ff       	callq  8725 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    875c:	5a                   	pop    %rdx
    875d:	c3                   	retq   

000000000000875e <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    875e:	f3 0f 1e fa          	endbr64 
    8762:	50                   	push   %rax
	return posix_irq_lock();
    8763:	e8 cc d6 ff ff       	callq  5e34 <posix_irq_lock>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    8768:	e8 60 c6 ff ff       	callq  4dcd <arch_cpu_idle>
    876d:	eb f4                	jmp    8763 <idle+0x5>

000000000000876f <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
    876f:	f3 0f 1e fa          	endbr64 
    8773:	48 8d 47 18          	lea    0x18(%rdi),%rax
	list->head = (sys_dnode_t *)list;
    8777:	48 89 47 18          	mov    %rax,0x18(%rdi)
	list->tail = (sys_dnode_t *)list;
    877b:	48 89 47 20          	mov    %rax,0x20(%rdi)
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    877f:	e9 07 a5 ff ff       	jmpq   2c8b <sys_heap_init>

0000000000008784 <statics_init>:
}

static int statics_init(const struct device *unused)
{
    8784:	f3 0f 1e fa          	endbr64 
    8788:	53                   	push   %rbx
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    8789:	48 8d 1d e8 5b 00 00 	lea    0x5be8(%rip),%rbx        # e378 <uart_msgq>
    8790:	48 3b 1d 29 38 00 00 	cmp    0x3829(%rip),%rbx        # bfc0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
    8797:	73 16                	jae    87af <statics_init+0x2b>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8799:	48 8b 53 10          	mov    0x10(%rbx),%rdx
    879d:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    87a1:	48 89 df             	mov    %rbx,%rdi
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    87a4:	48 83 c3 28          	add    $0x28,%rbx
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    87a8:	e8 c2 ff ff ff       	callq  876f <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    87ad:	eb e1                	jmp    8790 <statics_init+0xc>
	}
	return 0;
}
    87af:	31 c0                	xor    %eax,%eax
    87b1:	5b                   	pop    %rbx
    87b2:	c3                   	retq   

00000000000087b3 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    87b3:	f3 0f 1e fa          	endbr64 

#if defined(CONFIG_FPU_SHARING)
GEN_OFFSET_SYM(_thread_arch_t, excNestCount);
#endif

GEN_ABS_SYM_END
    87b7:	c3                   	retq   

Disassembly of section .fini:

00000000000087b8 <_fini>:
    87b8:	f3 0f 1e fa          	endbr64 
    87bc:	48 83 ec 08          	sub    $0x8,%rsp
    87c0:	48 83 c4 08          	add    $0x8,%rsp
    87c4:	c3                   	retq   
