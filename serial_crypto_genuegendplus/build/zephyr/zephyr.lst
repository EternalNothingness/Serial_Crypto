
zephyr.elf:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	f3 0f 1e fa          	endbr64 
    2004:	48 83 ec 08          	sub    $0x8,%rsp
    2008:	48 8b 05 c1 9f 00 00 	mov    0x9fc1(%rip),%rax        # bfd0 <__gmon_start__>
    200f:	48 85 c0             	test   %rax,%rax
    2012:	74 02                	je     2016 <_init+0x16>
    2014:	ff d0                	callq  *%rax
    2016:	48 83 c4 08          	add    $0x8,%rsp
    201a:	c3                   	retq   

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	ff 35 ba 9d 00 00    	pushq  0x9dba(%rip)        # bde0 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	f2 ff 25 bb 9d 00 00 	bnd jmpq *0x9dbb(%rip)        # bde8 <_GLOBAL_OFFSET_TABLE_+0x10>
    202d:	0f 1f 00             	nopl   (%rax)
    2030:	f3 0f 1e fa          	endbr64 
    2034:	68 00 00 00 00       	pushq  $0x0
    2039:	f2 e9 e1 ff ff ff    	bnd jmpq 2020 <.plt>
    203f:	90                   	nop
    2040:	f3 0f 1e fa          	endbr64 
    2044:	68 01 00 00 00       	pushq  $0x1
    2049:	f2 e9 d1 ff ff ff    	bnd jmpq 2020 <.plt>
    204f:	90                   	nop
    2050:	f3 0f 1e fa          	endbr64 
    2054:	68 02 00 00 00       	pushq  $0x2
    2059:	f2 e9 c1 ff ff ff    	bnd jmpq 2020 <.plt>
    205f:	90                   	nop
    2060:	f3 0f 1e fa          	endbr64 
    2064:	68 03 00 00 00       	pushq  $0x3
    2069:	f2 e9 b1 ff ff ff    	bnd jmpq 2020 <.plt>
    206f:	90                   	nop
    2070:	f3 0f 1e fa          	endbr64 
    2074:	68 04 00 00 00       	pushq  $0x4
    2079:	f2 e9 a1 ff ff ff    	bnd jmpq 2020 <.plt>
    207f:	90                   	nop
    2080:	f3 0f 1e fa          	endbr64 
    2084:	68 05 00 00 00       	pushq  $0x5
    2089:	f2 e9 91 ff ff ff    	bnd jmpq 2020 <.plt>
    208f:	90                   	nop
    2090:	f3 0f 1e fa          	endbr64 
    2094:	68 06 00 00 00       	pushq  $0x6
    2099:	f2 e9 81 ff ff ff    	bnd jmpq 2020 <.plt>
    209f:	90                   	nop
    20a0:	f3 0f 1e fa          	endbr64 
    20a4:	68 07 00 00 00       	pushq  $0x7
    20a9:	f2 e9 71 ff ff ff    	bnd jmpq 2020 <.plt>
    20af:	90                   	nop
    20b0:	f3 0f 1e fa          	endbr64 
    20b4:	68 08 00 00 00       	pushq  $0x8
    20b9:	f2 e9 61 ff ff ff    	bnd jmpq 2020 <.plt>
    20bf:	90                   	nop
    20c0:	f3 0f 1e fa          	endbr64 
    20c4:	68 09 00 00 00       	pushq  $0x9
    20c9:	f2 e9 51 ff ff ff    	bnd jmpq 2020 <.plt>
    20cf:	90                   	nop
    20d0:	f3 0f 1e fa          	endbr64 
    20d4:	68 0a 00 00 00       	pushq  $0xa
    20d9:	f2 e9 41 ff ff ff    	bnd jmpq 2020 <.plt>
    20df:	90                   	nop
    20e0:	f3 0f 1e fa          	endbr64 
    20e4:	68 0b 00 00 00       	pushq  $0xb
    20e9:	f2 e9 31 ff ff ff    	bnd jmpq 2020 <.plt>
    20ef:	90                   	nop
    20f0:	f3 0f 1e fa          	endbr64 
    20f4:	68 0c 00 00 00       	pushq  $0xc
    20f9:	f2 e9 21 ff ff ff    	bnd jmpq 2020 <.plt>
    20ff:	90                   	nop
    2100:	f3 0f 1e fa          	endbr64 
    2104:	68 0d 00 00 00       	pushq  $0xd
    2109:	f2 e9 11 ff ff ff    	bnd jmpq 2020 <.plt>
    210f:	90                   	nop
    2110:	f3 0f 1e fa          	endbr64 
    2114:	68 0e 00 00 00       	pushq  $0xe
    2119:	f2 e9 01 ff ff ff    	bnd jmpq 2020 <.plt>
    211f:	90                   	nop
    2120:	f3 0f 1e fa          	endbr64 
    2124:	68 0f 00 00 00       	pushq  $0xf
    2129:	f2 e9 f1 fe ff ff    	bnd jmpq 2020 <.plt>
    212f:	90                   	nop
    2130:	f3 0f 1e fa          	endbr64 
    2134:	68 10 00 00 00       	pushq  $0x10
    2139:	f2 e9 e1 fe ff ff    	bnd jmpq 2020 <.plt>
    213f:	90                   	nop
    2140:	f3 0f 1e fa          	endbr64 
    2144:	68 11 00 00 00       	pushq  $0x11
    2149:	f2 e9 d1 fe ff ff    	bnd jmpq 2020 <.plt>
    214f:	90                   	nop
    2150:	f3 0f 1e fa          	endbr64 
    2154:	68 12 00 00 00       	pushq  $0x12
    2159:	f2 e9 c1 fe ff ff    	bnd jmpq 2020 <.plt>
    215f:	90                   	nop
    2160:	f3 0f 1e fa          	endbr64 
    2164:	68 13 00 00 00       	pushq  $0x13
    2169:	f2 e9 b1 fe ff ff    	bnd jmpq 2020 <.plt>
    216f:	90                   	nop
    2170:	f3 0f 1e fa          	endbr64 
    2174:	68 14 00 00 00       	pushq  $0x14
    2179:	f2 e9 a1 fe ff ff    	bnd jmpq 2020 <.plt>
    217f:	90                   	nop
    2180:	f3 0f 1e fa          	endbr64 
    2184:	68 15 00 00 00       	pushq  $0x15
    2189:	f2 e9 91 fe ff ff    	bnd jmpq 2020 <.plt>
    218f:	90                   	nop
    2190:	f3 0f 1e fa          	endbr64 
    2194:	68 16 00 00 00       	pushq  $0x16
    2199:	f2 e9 81 fe ff ff    	bnd jmpq 2020 <.plt>
    219f:	90                   	nop
    21a0:	f3 0f 1e fa          	endbr64 
    21a4:	68 17 00 00 00       	pushq  $0x17
    21a9:	f2 e9 71 fe ff ff    	bnd jmpq 2020 <.plt>
    21af:	90                   	nop
    21b0:	f3 0f 1e fa          	endbr64 
    21b4:	68 18 00 00 00       	pushq  $0x18
    21b9:	f2 e9 61 fe ff ff    	bnd jmpq 2020 <.plt>
    21bf:	90                   	nop
    21c0:	f3 0f 1e fa          	endbr64 
    21c4:	68 19 00 00 00       	pushq  $0x19
    21c9:	f2 e9 51 fe ff ff    	bnd jmpq 2020 <.plt>
    21cf:	90                   	nop
    21d0:	f3 0f 1e fa          	endbr64 
    21d4:	68 1a 00 00 00       	pushq  $0x1a
    21d9:	f2 e9 41 fe ff ff    	bnd jmpq 2020 <.plt>
    21df:	90                   	nop
    21e0:	f3 0f 1e fa          	endbr64 
    21e4:	68 1b 00 00 00       	pushq  $0x1b
    21e9:	f2 e9 31 fe ff ff    	bnd jmpq 2020 <.plt>
    21ef:	90                   	nop
    21f0:	f3 0f 1e fa          	endbr64 
    21f4:	68 1c 00 00 00       	pushq  $0x1c
    21f9:	f2 e9 21 fe ff ff    	bnd jmpq 2020 <.plt>
    21ff:	90                   	nop
    2200:	f3 0f 1e fa          	endbr64 
    2204:	68 1d 00 00 00       	pushq  $0x1d
    2209:	f2 e9 11 fe ff ff    	bnd jmpq 2020 <.plt>
    220f:	90                   	nop
    2210:	f3 0f 1e fa          	endbr64 
    2214:	68 1e 00 00 00       	pushq  $0x1e
    2219:	f2 e9 01 fe ff ff    	bnd jmpq 2020 <.plt>
    221f:	90                   	nop
    2220:	f3 0f 1e fa          	endbr64 
    2224:	68 1f 00 00 00       	pushq  $0x1f
    2229:	f2 e9 f1 fd ff ff    	bnd jmpq 2020 <.plt>
    222f:	90                   	nop
    2230:	f3 0f 1e fa          	endbr64 
    2234:	68 20 00 00 00       	pushq  $0x20
    2239:	f2 e9 e1 fd ff ff    	bnd jmpq 2020 <.plt>
    223f:	90                   	nop
    2240:	f3 0f 1e fa          	endbr64 
    2244:	68 21 00 00 00       	pushq  $0x21
    2249:	f2 e9 d1 fd ff ff    	bnd jmpq 2020 <.plt>
    224f:	90                   	nop
    2250:	f3 0f 1e fa          	endbr64 
    2254:	68 22 00 00 00       	pushq  $0x22
    2259:	f2 e9 c1 fd ff ff    	bnd jmpq 2020 <.plt>
    225f:	90                   	nop
    2260:	f3 0f 1e fa          	endbr64 
    2264:	68 23 00 00 00       	pushq  $0x23
    2269:	f2 e9 b1 fd ff ff    	bnd jmpq 2020 <.plt>
    226f:	90                   	nop
    2270:	f3 0f 1e fa          	endbr64 
    2274:	68 24 00 00 00       	pushq  $0x24
    2279:	f2 e9 a1 fd ff ff    	bnd jmpq 2020 <.plt>
    227f:	90                   	nop
    2280:	f3 0f 1e fa          	endbr64 
    2284:	68 25 00 00 00       	pushq  $0x25
    2289:	f2 e9 91 fd ff ff    	bnd jmpq 2020 <.plt>
    228f:	90                   	nop
    2290:	f3 0f 1e fa          	endbr64 
    2294:	68 26 00 00 00       	pushq  $0x26
    2299:	f2 e9 81 fd ff ff    	bnd jmpq 2020 <.plt>
    229f:	90                   	nop
    22a0:	f3 0f 1e fa          	endbr64 
    22a4:	68 27 00 00 00       	pushq  $0x27
    22a9:	f2 e9 71 fd ff ff    	bnd jmpq 2020 <.plt>
    22af:	90                   	nop
    22b0:	f3 0f 1e fa          	endbr64 
    22b4:	68 28 00 00 00       	pushq  $0x28
    22b9:	f2 e9 61 fd ff ff    	bnd jmpq 2020 <.plt>
    22bf:	90                   	nop
    22c0:	f3 0f 1e fa          	endbr64 
    22c4:	68 29 00 00 00       	pushq  $0x29
    22c9:	f2 e9 51 fd ff ff    	bnd jmpq 2020 <.plt>
    22cf:	90                   	nop
    22d0:	f3 0f 1e fa          	endbr64 
    22d4:	68 2a 00 00 00       	pushq  $0x2a
    22d9:	f2 e9 41 fd ff ff    	bnd jmpq 2020 <.plt>
    22df:	90                   	nop
    22e0:	f3 0f 1e fa          	endbr64 
    22e4:	68 2b 00 00 00       	pushq  $0x2b
    22e9:	f2 e9 31 fd ff ff    	bnd jmpq 2020 <.plt>
    22ef:	90                   	nop
    22f0:	f3 0f 1e fa          	endbr64 
    22f4:	68 2c 00 00 00       	pushq  $0x2c
    22f9:	f2 e9 21 fd ff ff    	bnd jmpq 2020 <.plt>
    22ff:	90                   	nop
    2300:	f3 0f 1e fa          	endbr64 
    2304:	68 2d 00 00 00       	pushq  $0x2d
    2309:	f2 e9 11 fd ff ff    	bnd jmpq 2020 <.plt>
    230f:	90                   	nop
    2310:	f3 0f 1e fa          	endbr64 
    2314:	68 2e 00 00 00       	pushq  $0x2e
    2319:	f2 e9 01 fd ff ff    	bnd jmpq 2020 <.plt>
    231f:	90                   	nop
    2320:	f3 0f 1e fa          	endbr64 
    2324:	68 2f 00 00 00       	pushq  $0x2f
    2329:	f2 e9 f1 fc ff ff    	bnd jmpq 2020 <.plt>
    232f:	90                   	nop
    2330:	f3 0f 1e fa          	endbr64 
    2334:	68 30 00 00 00       	pushq  $0x30
    2339:	f2 e9 e1 fc ff ff    	bnd jmpq 2020 <.plt>
    233f:	90                   	nop
    2340:	f3 0f 1e fa          	endbr64 
    2344:	68 31 00 00 00       	pushq  $0x31
    2349:	f2 e9 d1 fc ff ff    	bnd jmpq 2020 <.plt>
    234f:	90                   	nop
    2350:	f3 0f 1e fa          	endbr64 
    2354:	68 32 00 00 00       	pushq  $0x32
    2359:	f2 e9 c1 fc ff ff    	bnd jmpq 2020 <.plt>
    235f:	90                   	nop
    2360:	f3 0f 1e fa          	endbr64 
    2364:	68 33 00 00 00       	pushq  $0x33
    2369:	f2 e9 b1 fc ff ff    	bnd jmpq 2020 <.plt>
    236f:	90                   	nop
    2370:	f3 0f 1e fa          	endbr64 
    2374:	68 34 00 00 00       	pushq  $0x34
    2379:	f2 e9 a1 fc ff ff    	bnd jmpq 2020 <.plt>
    237f:	90                   	nop

Disassembly of section .plt.got:

0000000000002380 <__cxa_finalize@plt>:
    2380:	f3 0f 1e fa          	endbr64 
    2384:	f2 ff 25 5d 9c 00 00 	bnd jmpq *0x9c5d(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    238b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000002390 <ptsname@plt>:
    2390:	f3 0f 1e fa          	endbr64 
    2394:	f2 ff 25 55 9a 00 00 	bnd jmpq *0x9a55(%rip)        # bdf0 <ptsname@GLIBC_2.2.5>
    239b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023a0 <__snprintf_chk@plt>:
    23a0:	f3 0f 1e fa          	endbr64 
    23a4:	f2 ff 25 4d 9a 00 00 	bnd jmpq *0x9a4d(%rip)        # bdf8 <__snprintf_chk@GLIBC_2.3.4>
    23ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023b0 <free@plt>:
    23b0:	f3 0f 1e fa          	endbr64 
    23b4:	f2 ff 25 45 9a 00 00 	bnd jmpq *0x9a45(%rip)        # be00 <free@GLIBC_2.2.5>
    23bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023c0 <pthread_create@plt>:
    23c0:	f3 0f 1e fa          	endbr64 
    23c4:	f2 ff 25 3d 9a 00 00 	bnd jmpq *0x9a3d(%rip)        # be08 <pthread_create@GLIBC_2.2.5>
    23cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023d0 <strcasecmp@plt>:
    23d0:	f3 0f 1e fa          	endbr64 
    23d4:	f2 ff 25 35 9a 00 00 	bnd jmpq *0x9a35(%rip)        # be10 <strcasecmp@GLIBC_2.2.5>
    23db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023e0 <pthread_detach@plt>:
    23e0:	f3 0f 1e fa          	endbr64 
    23e4:	f2 ff 25 2d 9a 00 00 	bnd jmpq *0x9a2d(%rip)        # be18 <pthread_detach@GLIBC_2.2.5>
    23eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000023f0 <__vfprintf_chk@plt>:
    23f0:	f3 0f 1e fa          	endbr64 
    23f4:	f2 ff 25 25 9a 00 00 	bnd jmpq *0x9a25(%rip)        # be20 <__vfprintf_chk@GLIBC_2.3.4>
    23fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002400 <__errno_location@plt>:
    2400:	f3 0f 1e fa          	endbr64 
    2404:	f2 ff 25 1d 9a 00 00 	bnd jmpq *0x9a1d(%rip)        # be28 <__errno_location@GLIBC_2.2.5>
    240b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002410 <pthread_cond_broadcast@plt>:
    2410:	f3 0f 1e fa          	endbr64 
    2414:	f2 ff 25 15 9a 00 00 	bnd jmpq *0x9a15(%rip)        # be30 <pthread_cond_broadcast@GLIBC_2.3.2>
    241b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002420 <pthread_cancel@plt>:
    2420:	f3 0f 1e fa          	endbr64 
    2424:	f2 ff 25 0d 9a 00 00 	bnd jmpq *0x9a0d(%rip)        # be38 <pthread_cancel@GLIBC_2.2.5>
    242b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002430 <isatty@plt>:
    2430:	f3 0f 1e fa          	endbr64 
    2434:	f2 ff 25 05 9a 00 00 	bnd jmpq *0x9a05(%rip)        # be40 <isatty@GLIBC_2.2.5>
    243b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002440 <sigaction@plt>:
    2440:	f3 0f 1e fa          	endbr64 
    2444:	f2 ff 25 fd 99 00 00 	bnd jmpq *0x99fd(%rip)        # be48 <sigaction@GLIBC_2.2.5>
    244b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002450 <__pthread_register_cancel@plt>:
    2450:	f3 0f 1e fa          	endbr64 
    2454:	f2 ff 25 f5 99 00 00 	bnd jmpq *0x99f5(%rip)        # be50 <__pthread_register_cancel@GLIBC_2.3.3>
    245b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002460 <strtod@plt>:
    2460:	f3 0f 1e fa          	endbr64 
    2464:	f2 ff 25 ed 99 00 00 	bnd jmpq *0x99ed(%rip)        # be58 <strtod@GLIBC_2.2.5>
    246b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002470 <fcntl@plt>:
    2470:	f3 0f 1e fa          	endbr64 
    2474:	f2 ff 25 e5 99 00 00 	bnd jmpq *0x99e5(%rip)        # be60 <fcntl@GLIBC_2.2.5>
    247b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002480 <clock_gettime@plt>:
    2480:	f3 0f 1e fa          	endbr64 
    2484:	f2 ff 25 dd 99 00 00 	bnd jmpq *0x99dd(%rip)        # be68 <clock_gettime@GLIBC_2.17>
    248b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002490 <write@plt>:
    2490:	f3 0f 1e fa          	endbr64 
    2494:	f2 ff 25 d5 99 00 00 	bnd jmpq *0x99d5(%rip)        # be70 <write@GLIBC_2.2.5>
    249b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024a0 <pthread_cond_wait@plt>:
    24a0:	f3 0f 1e fa          	endbr64 
    24a4:	f2 ff 25 cd 99 00 00 	bnd jmpq *0x99cd(%rip)        # be78 <pthread_cond_wait@GLIBC_2.3.2>
    24ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024b0 <__stack_chk_fail@plt>:
    24b0:	f3 0f 1e fa          	endbr64 
    24b4:	f2 ff 25 c5 99 00 00 	bnd jmpq *0x99c5(%rip)        # be80 <__stack_chk_fail@GLIBC_2.4>
    24bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024c0 <system@plt>:
    24c0:	f3 0f 1e fa          	endbr64 
    24c4:	f2 ff 25 bd 99 00 00 	bnd jmpq *0x99bd(%rip)        # be88 <system@GLIBC_2.2.5>
    24cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024d0 <snprintf@plt>:
    24d0:	f3 0f 1e fa          	endbr64 
    24d4:	f2 ff 25 b5 99 00 00 	bnd jmpq *0x99b5(%rip)        # be90 <snprintf@GLIBC_2.2.5>
    24db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024e0 <nanosleep@plt>:
    24e0:	f3 0f 1e fa          	endbr64 
    24e4:	f2 ff 25 ad 99 00 00 	bnd jmpq *0x99ad(%rip)        # be98 <nanosleep@GLIBC_2.2.5>
    24eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000024f0 <strnlen@plt>:
    24f0:	f3 0f 1e fa          	endbr64 
    24f4:	f2 ff 25 a5 99 00 00 	bnd jmpq *0x99a5(%rip)        # bea0 <strnlen@GLIBC_2.2.5>
    24fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002500 <close@plt>:
    2500:	f3 0f 1e fa          	endbr64 
    2504:	f2 ff 25 9d 99 00 00 	bnd jmpq *0x999d(%rip)        # bea8 <close@GLIBC_2.2.5>
    250b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002510 <read@plt>:
    2510:	f3 0f 1e fa          	endbr64 
    2514:	f2 ff 25 95 99 00 00 	bnd jmpq *0x9995(%rip)        # beb0 <read@GLIBC_2.2.5>
    251b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002520 <strtoull@plt>:
    2520:	f3 0f 1e fa          	endbr64 
    2524:	f2 ff 25 8d 99 00 00 	bnd jmpq *0x998d(%rip)        # beb8 <strtoull@GLIBC_2.2.5>
    252b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002530 <calloc@plt>:
    2530:	f3 0f 1e fa          	endbr64 
    2534:	f2 ff 25 85 99 00 00 	bnd jmpq *0x9985(%rip)        # bec0 <calloc@GLIBC_2.2.5>
    253b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002540 <strcmp@plt>:
    2540:	f3 0f 1e fa          	endbr64 
    2544:	f2 ff 25 7d 99 00 00 	bnd jmpq *0x997d(%rip)        # bec8 <strcmp@GLIBC_2.2.5>
    254b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002550 <strtoll@plt>:
    2550:	f3 0f 1e fa          	endbr64 
    2554:	f2 ff 25 75 99 00 00 	bnd jmpq *0x9975(%rip)        # bed0 <strtoll@GLIBC_2.2.5>
    255b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002560 <unlockpt@plt>:
    2560:	f3 0f 1e fa          	endbr64 
    2564:	f2 ff 25 6d 99 00 00 	bnd jmpq *0x996d(%rip)        # bed8 <unlockpt@GLIBC_2.2.5>
    256b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002570 <__memcpy_chk@plt>:
    2570:	f3 0f 1e fa          	endbr64 
    2574:	f2 ff 25 65 99 00 00 	bnd jmpq *0x9965(%rip)        # bee0 <__memcpy_chk@GLIBC_2.3.4>
    257b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002580 <sigemptyset@plt>:
    2580:	f3 0f 1e fa          	endbr64 
    2584:	f2 ff 25 5d 99 00 00 	bnd jmpq *0x995d(%rip)        # bee8 <sigemptyset@GLIBC_2.2.5>
    258b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002590 <strtol@plt>:
    2590:	f3 0f 1e fa          	endbr64 
    2594:	f2 ff 25 55 99 00 00 	bnd jmpq *0x9955(%rip)        # bef0 <strtol@GLIBC_2.2.5>
    259b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025a0 <pthread_mutex_unlock@plt>:
    25a0:	f3 0f 1e fa          	endbr64 
    25a4:	f2 ff 25 4d 99 00 00 	bnd jmpq *0x994d(%rip)        # bef8 <pthread_mutex_unlock@GLIBC_2.2.5>
    25ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025b0 <pthread_exit@plt>:
    25b0:	f3 0f 1e fa          	endbr64 
    25b4:	f2 ff 25 45 99 00 00 	bnd jmpq *0x9945(%rip)        # bf00 <pthread_exit@GLIBC_2.2.5>
    25bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025c0 <malloc@plt>:
    25c0:	f3 0f 1e fa          	endbr64 
    25c4:	f2 ff 25 3d 99 00 00 	bnd jmpq *0x993d(%rip)        # bf08 <malloc@GLIBC_2.2.5>
    25cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025d0 <realloc@plt>:
    25d0:	f3 0f 1e fa          	endbr64 
    25d4:	f2 ff 25 35 99 00 00 	bnd jmpq *0x9935(%rip)        # bf10 <realloc@GLIBC_2.2.5>
    25db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025e0 <setvbuf@plt>:
    25e0:	f3 0f 1e fa          	endbr64 
    25e4:	f2 ff 25 2d 99 00 00 	bnd jmpq *0x992d(%rip)        # bf18 <setvbuf@GLIBC_2.2.5>
    25eb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000025f0 <pthread_self@plt>:
    25f0:	f3 0f 1e fa          	endbr64 
    25f4:	f2 ff 25 25 99 00 00 	bnd jmpq *0x9925(%rip)        # bf20 <pthread_self@GLIBC_2.2.5>
    25fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002600 <tcgetattr@plt>:
    2600:	f3 0f 1e fa          	endbr64 
    2604:	f2 ff 25 1d 99 00 00 	bnd jmpq *0x991d(%rip)        # bf28 <tcgetattr@GLIBC_2.2.5>
    260b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002610 <tcsetattr@plt>:
    2610:	f3 0f 1e fa          	endbr64 
    2614:	f2 ff 25 15 99 00 00 	bnd jmpq *0x9915(%rip)        # bf30 <tcsetattr@GLIBC_2.2.5>
    261b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002620 <strtoul@plt>:
    2620:	f3 0f 1e fa          	endbr64 
    2624:	f2 ff 25 0d 99 00 00 	bnd jmpq *0x990d(%rip)        # bf38 <strtoul@GLIBC_2.2.5>
    262b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002630 <grantpt@plt>:
    2630:	f3 0f 1e fa          	endbr64 
    2634:	f2 ff 25 05 99 00 00 	bnd jmpq *0x9905(%rip)        # bf40 <grantpt@GLIBC_2.2.5>
    263b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002640 <__memset_chk@plt>:
    2640:	f3 0f 1e fa          	endbr64 
    2644:	f2 ff 25 fd 98 00 00 	bnd jmpq *0x98fd(%rip)        # bf48 <__memset_chk@GLIBC_2.3.4>
    264b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002650 <__pthread_unwind_next@plt>:
    2650:	f3 0f 1e fa          	endbr64 
    2654:	f2 ff 25 f5 98 00 00 	bnd jmpq *0x98f5(%rip)        # bf50 <__pthread_unwind_next@GLIBC_2.3.3>
    265b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002660 <exit@plt>:
    2660:	f3 0f 1e fa          	endbr64 
    2664:	f2 ff 25 ed 98 00 00 	bnd jmpq *0x98ed(%rip)        # bf58 <exit@GLIBC_2.2.5>
    266b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002670 <__fprintf_chk@plt>:
    2670:	f3 0f 1e fa          	endbr64 
    2674:	f2 ff 25 e5 98 00 00 	bnd jmpq *0x98e5(%rip)        # bf60 <__fprintf_chk@GLIBC_2.3.4>
    267b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002680 <__sigsetjmp@plt>:
    2680:	f3 0f 1e fa          	endbr64 
    2684:	f2 ff 25 dd 98 00 00 	bnd jmpq *0x98dd(%rip)        # bf68 <__sigsetjmp@GLIBC_2.2.5>
    268b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002690 <posix_openpt@plt>:
    2690:	f3 0f 1e fa          	endbr64 
    2694:	f2 ff 25 d5 98 00 00 	bnd jmpq *0x98d5(%rip)        # bf70 <posix_openpt@GLIBC_2.2.5>
    269b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026a0 <sleep@plt>:
    26a0:	f3 0f 1e fa          	endbr64 
    26a4:	f2 ff 25 cd 98 00 00 	bnd jmpq *0x98cd(%rip)        # bf78 <sleep@GLIBC_2.2.5>
    26ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026b0 <pthread_mutex_lock@plt>:
    26b0:	f3 0f 1e fa          	endbr64 
    26b4:	f2 ff 25 c5 98 00 00 	bnd jmpq *0x98c5(%rip)        # bf80 <pthread_mutex_lock@GLIBC_2.2.5>
    26bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026c0 <__ctype_b_loc@plt>:
    26c0:	f3 0f 1e fa          	endbr64 
    26c4:	f2 ff 25 bd 98 00 00 	bnd jmpq *0x98bd(%rip)        # bf88 <__ctype_b_loc@GLIBC_2.3>
    26cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000026d0 <__sprintf_chk@plt>:
    26d0:	f3 0f 1e fa          	endbr64 
    26d4:	f2 ff 25 b5 98 00 00 	bnd jmpq *0x98b5(%rip)        # bf90 <__sprintf_chk@GLIBC_2.3.4>
    26db:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000026e0 <_start>:
    26e0:	f3 0f 1e fa          	endbr64 
    26e4:	31 ed                	xor    %ebp,%ebp
    26e6:	49 89 d1             	mov    %rdx,%r9
    26e9:	5e                   	pop    %rsi
    26ea:	48 89 e2             	mov    %rsp,%rdx
    26ed:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    26f1:	50                   	push   %rax
    26f2:	54                   	push   %rsp
    26f3:	4c 8d 05 46 01 00 00 	lea    0x146(%rip),%r8        # 2840 <__libc_csu_fini>
    26fa:	48 8d 0d cf 00 00 00 	lea    0xcf(%rip),%rcx        # 27d0 <__libc_csu_init>
    2701:	48 8d 3d df 3b 00 00 	lea    0x3bdf(%rip),%rdi        # 62e7 <main>
    2708:	ff 15 ba 98 00 00    	callq  *0x98ba(%rip)        # bfc8 <__libc_start_main@GLIBC_2.2.5>
    270e:	f4                   	hlt    
    270f:	90                   	nop

0000000000002710 <deregister_tm_clones>:
    2710:	48 8d 3d 69 9d 00 00 	lea    0x9d69(%rip),%rdi        # c480 <__TMC_END__>
    2717:	48 8d 05 62 9d 00 00 	lea    0x9d62(%rip),%rax        # c480 <__TMC_END__>
    271e:	48 39 f8             	cmp    %rdi,%rax
    2721:	74 15                	je     2738 <deregister_tm_clones+0x28>
    2723:	48 8b 05 76 98 00 00 	mov    0x9876(%rip),%rax        # bfa0 <_ITM_deregisterTMCloneTable>
    272a:	48 85 c0             	test   %rax,%rax
    272d:	74 09                	je     2738 <deregister_tm_clones+0x28>
    272f:	ff e0                	jmpq   *%rax
    2731:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2738:	c3                   	retq   
    2739:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002740 <register_tm_clones>:
    2740:	48 8d 3d 39 9d 00 00 	lea    0x9d39(%rip),%rdi        # c480 <__TMC_END__>
    2747:	48 8d 35 32 9d 00 00 	lea    0x9d32(%rip),%rsi        # c480 <__TMC_END__>
    274e:	48 29 fe             	sub    %rdi,%rsi
    2751:	48 89 f0             	mov    %rsi,%rax
    2754:	48 c1 ee 3f          	shr    $0x3f,%rsi
    2758:	48 c1 f8 03          	sar    $0x3,%rax
    275c:	48 01 c6             	add    %rax,%rsi
    275f:	48 d1 fe             	sar    %rsi
    2762:	74 14                	je     2778 <register_tm_clones+0x38>
    2764:	48 8b 05 75 98 00 00 	mov    0x9875(%rip),%rax        # bfe0 <_ITM_registerTMCloneTable>
    276b:	48 85 c0             	test   %rax,%rax
    276e:	74 08                	je     2778 <register_tm_clones+0x38>
    2770:	ff e0                	jmpq   *%rax
    2772:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    2778:	c3                   	retq   
    2779:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000002780 <__do_global_dtors_aux>:
    2780:	f3 0f 1e fa          	endbr64 
    2784:	80 3d 15 ce 00 00 00 	cmpb   $0x0,0xce15(%rip)        # f5a0 <completed.8060>
    278b:	75 2b                	jne    27b8 <__do_global_dtors_aux+0x38>
    278d:	55                   	push   %rbp
    278e:	48 83 3d 52 98 00 00 	cmpq   $0x0,0x9852(%rip)        # bfe8 <__cxa_finalize@GLIBC_2.2.5>
    2795:	00 
    2796:	48 89 e5             	mov    %rsp,%rbp
    2799:	74 0c                	je     27a7 <__do_global_dtors_aux+0x27>
    279b:	48 8b 3d 9e 9c 00 00 	mov    0x9c9e(%rip),%rdi        # c440 <__dso_handle>
    27a2:	e8 d9 fb ff ff       	callq  2380 <__cxa_finalize@plt>
    27a7:	e8 64 ff ff ff       	callq  2710 <deregister_tm_clones>
    27ac:	c6 05 ed cd 00 00 01 	movb   $0x1,0xcded(%rip)        # f5a0 <completed.8060>
    27b3:	5d                   	pop    %rbp
    27b4:	c3                   	retq   
    27b5:	0f 1f 00             	nopl   (%rax)
    27b8:	c3                   	retq   
    27b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027c0 <frame_dummy>:
    27c0:	f3 0f 1e fa          	endbr64 
    27c4:	e9 77 ff ff ff       	jmpq   2740 <register_tm_clones>
    27c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000027d0 <__libc_csu_init>:
    27d0:	f3 0f 1e fa          	endbr64 
    27d4:	41 57                	push   %r15
    27d6:	4c 8d 3d 73 93 00 00 	lea    0x9373(%rip),%r15        # bb50 <__frame_dummy_init_array_entry>
    27dd:	41 56                	push   %r14
    27df:	49 89 d6             	mov    %rdx,%r14
    27e2:	41 55                	push   %r13
    27e4:	49 89 f5             	mov    %rsi,%r13
    27e7:	41 54                	push   %r12
    27e9:	41 89 fc             	mov    %edi,%r12d
    27ec:	55                   	push   %rbp
    27ed:	48 8d 2d 64 93 00 00 	lea    0x9364(%rip),%rbp        # bb58 <__do_global_dtors_aux_fini_array_entry>
    27f4:	53                   	push   %rbx
    27f5:	4c 29 fd             	sub    %r15,%rbp
    27f8:	48 83 ec 08          	sub    $0x8,%rsp
    27fc:	e8 ff f7 ff ff       	callq  2000 <_init>
    2801:	48 c1 fd 03          	sar    $0x3,%rbp
    2805:	74 1f                	je     2826 <__libc_csu_init+0x56>
    2807:	31 db                	xor    %ebx,%ebx
    2809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    2810:	4c 89 f2             	mov    %r14,%rdx
    2813:	4c 89 ee             	mov    %r13,%rsi
    2816:	44 89 e7             	mov    %r12d,%edi
    2819:	41 ff 14 df          	callq  *(%r15,%rbx,8)
    281d:	48 83 c3 01          	add    $0x1,%rbx
    2821:	48 39 dd             	cmp    %rbx,%rbp
    2824:	75 ea                	jne    2810 <__libc_csu_init+0x40>
    2826:	48 83 c4 08          	add    $0x8,%rsp
    282a:	5b                   	pop    %rbx
    282b:	5d                   	pop    %rbp
    282c:	41 5c                	pop    %r12
    282e:	41 5d                	pop    %r13
    2830:	41 5e                	pop    %r14
    2832:	41 5f                	pop    %r15
    2834:	c3                   	retq   
    2835:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    283c:	00 00 00 00 

0000000000002840 <__libc_csu_fini>:
    2840:	f3 0f 1e fa          	endbr64 
    2844:	c3                   	retq   

0000000000002845 <k_usleep.constprop.0>:
	if (z_syscall_trap()) {
		return (int32_t) arch_syscall_invoke1(*(uintptr_t *)&us, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    2845:	bf 01 00 00 00       	mov    $0x1,%edi
    284a:	e9 35 5b 00 00       	jmpq   8384 <z_impl_k_usleep>

000000000000284f <uart_out>:
	}

	return; // sollte nie geschehen
}

void uart_out(void *ptr1, void *ptr2, void *ptr3){
    284f:	f3 0f 1e fa          	endbr64 
    2853:	41 55                	push   %r13
	// ## setup area ##
	ARG_UNUSED(ptr1);
	ARG_UNUSED(ptr2);
	ARG_UNUSED(ptr3);

	char *output=malloc(DATA_SIZE_MAX*sizeof(char));
    2855:	bf ff 00 00 00       	mov    $0xff,%edi
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    285a:	41 54                	push   %r12

	// ## main loop ##
	for(;;){
		memset(output, 0, strlen(output)); // Inhalt resetten
    285c:	49 83 cc ff          	or     $0xffffffffffffffff,%r12
void uart_out(void *ptr1, void *ptr2, void *ptr3){
    2860:	55                   	push   %rbp
    2861:	53                   	push   %rbx
    2862:	50                   	push   %rax
	char *output=malloc(DATA_SIZE_MAX*sizeof(char));
    2863:	e8 58 fd ff ff       	callq  25c0 <malloc@plt>
    2868:	48 89 c5             	mov    %rax,%rbp
		memset(output, 0, strlen(output)); // Inhalt resetten
    286b:	31 c0                	xor    %eax,%eax
    286d:	48 89 ef             	mov    %rbp,%rdi
    2870:	4c 89 e1             	mov    %r12,%rcx
    {
      __warn_memset_zero_len ();
      return __dest;
    }
#endif
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    2873:	31 f6                	xor    %esi,%esi
    2875:	f2 ae                	repnz scas %es:(%rdi),%al
    2877:	48 89 ef             	mov    %rbp,%rdi
    287a:	48 89 c8             	mov    %rcx,%rax
    287d:	b9 ff 00 00 00       	mov    $0xff,%ecx
    2882:	48 f7 d0             	not    %rax
    2885:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
    2889:	e8 b2 fd ff ff       	callq  2640 <__memset_chk@plt>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&msgq, *(uintptr_t *)&data, *(uintptr_t *)&timeout, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    288e:	48 8d 3d 3b c2 00 00 	lea    0xc23b(%rip),%rdi        # ead0 <uart_msgq>
    2895:	31 d2                	xor    %edx,%edx
    2897:	48 89 ee             	mov    %rbp,%rsi
    289a:	e8 e9 51 00 00       	callq  7a88 <z_impl_k_msgq_get>
    289f:	89 c3                	mov    %eax,%ebx
		if(k_msgq_get(&uart_msgq, output, K_NO_WAIT)==0){ // Abfrage der uart message queue
    28a1:	85 c0                	test   %eax,%eax
    28a3:	74 07                	je     28ac <uart_out+0x5d>
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
				uart_poll_out(uart_dev, *(output+i));
				printk("Sent data: <0x%x>\n", *(output+i));
			}
		}
		k_usleep(1); // Abgeben des Prozessors
    28a5:	e8 9b ff ff ff       	callq  2845 <k_usleep.constprop.0>
		memset(output, 0, strlen(output)); // Inhalt resetten
    28aa:	eb bf                	jmp    286b <uart_out+0x1c>
			printk("Going to send data to the uart: <%s>\n", output);
    28ac:	48 89 ee             	mov    %rbp,%rsi
    28af:	48 8d 3d f6 6a 00 00 	lea    0x6af6(%rip),%rdi        # 93ac <default_cmd+0x14c>
    28b6:	31 c0                	xor    %eax,%eax
    28b8:	e8 2d 04 00 00       	callq  2cea <printk>
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    28bd:	31 c0                	xor    %eax,%eax
    28bf:	4c 89 e1             	mov    %r12,%rcx
    28c2:	48 89 ef             	mov    %rbp,%rdi
    28c5:	48 63 d3             	movslq %ebx,%rdx
    28c8:	f2 ae                	repnz scas %es:(%rdi),%al
    28ca:	48 89 c8             	mov    %rcx,%rax
    28cd:	48 f7 d0             	not    %rax
    28d0:	48 ff c8             	dec    %rax
    28d3:	48 39 c2             	cmp    %rax,%rdx
    28d6:	73 cd                	jae    28a5 <uart_out+0x56>
				uart_poll_out(uart_dev, *(output+i));
    28d8:	48 8d 05 99 cb 00 00 	lea    0xcb99(%rip),%rax        # f478 <uart_dev>
    28df:	4c 8d 6c 15 00       	lea    0x0(%rbp,%rdx,1),%r13
    28e4:	41 0f b6 75 00       	movzbl 0x0(%r13),%esi
    28e9:	48 8b 38             	mov    (%rax),%rdi
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    28ec:	48 8b 47 10          	mov    0x10(%rdi),%rax
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    28f0:	ff c3                	inc    %ebx
    28f2:	ff 50 08             	callq  *0x8(%rax)
				printk("Sent data: <0x%x>\n", *(output+i));
    28f5:	41 0f be 75 00       	movsbl 0x0(%r13),%esi
    28fa:	48 8d 3d d1 6a 00 00 	lea    0x6ad1(%rip),%rdi        # 93d2 <default_cmd+0x172>
    2901:	31 c0                	xor    %eax,%eax
    2903:	e8 e2 03 00 00       	callq  2cea <printk>
			for(int i=0; i<strlen(output); i++){ // Send data byte by byte
    2908:	eb b3                	jmp    28bd <uart_out+0x6e>

000000000000290a <uart_in>:
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    290a:	f3 0f 1e fa          	endbr64 
    290e:	41 57                	push   %r15
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    2910:	bf ff 00 00 00       	mov    $0xff,%edi
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    2915:	41 56                	push   %r14
    2917:	41 55                	push   %r13
    2919:	41 54                	push   %r12
    291b:	55                   	push   %rbp
    291c:	53                   	push   %rbx
	uint8_t len = 0;
    291d:	31 db                	xor    %ebx,%ebx
void uart_in(void *ptr1, void *ptr2, void *ptr3){
    291f:	48 83 ec 18          	sub    $0x18,%rsp
    2923:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    292a:	00 00 
    292c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2931:	31 c0                	xor    %eax,%eax
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    2933:	e8 88 fc ff ff       	callq  25c0 <malloc@plt>
		switch(state){
    2938:	48 8d 2d 1d cc 00 00 	lea    0xcc1d(%rip),%rbp        # f55c <state>
	uint8_t *data = malloc(DATA_SIZE_MAX*sizeof(uint8_t));
    293f:	49 89 c4             	mov    %rax,%r12
		switch(state){
    2942:	8b 45 00             	mov    0x0(%rbp),%eax
    2945:	83 f8 02             	cmp    $0x2,%eax
    2948:	0f 84 a3 00 00 00    	je     29f1 <uart_in+0xe7>
    294e:	83 f8 03             	cmp    $0x3,%eax
    2951:	0f 84 f3 00 00 00    	je     2a4a <uart_in+0x140>
    2957:	85 c0                	test   %eax,%eax
    2959:	0f 85 bf 01 00 00    	jne    2b1e <uart_in+0x214>
				if(!uart_poll_in(uart_dev, &input)){
    295f:	48 8d 05 12 cb 00 00 	lea    0xcb12(%rip),%rax        # f478 <uart_dev>
    2966:	48 8b 38             	mov    (%rax),%rdi
	return api->poll_in(dev, p_char);
    2969:	48 8b 47 10          	mov    0x10(%rdi),%rax
    296d:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    2972:	ff 10                	callq  *(%rax)
    2974:	85 c0                	test   %eax,%eax
    2976:	0f 85 a2 01 00 00    	jne    2b1e <uart_in+0x214>
					printk("received command: %c\n", (char)input);
    297c:	0f be 74 24 07       	movsbl 0x7(%rsp),%esi
    2981:	48 8d 3d 5d 6a 00 00 	lea    0x6a5d(%rip),%rdi        # 93e5 <default_cmd+0x185>
    2988:	e8 5d 03 00 00       	callq  2cea <printk>
					switch(input){
    298d:	8a 44 24 07          	mov    0x7(%rsp),%al
    2991:	3c 44                	cmp    $0x44,%al
    2993:	74 42                	je     29d7 <uart_in+0xcd>
    2995:	3c 50                	cmp    $0x50,%al
    2997:	74 24                	je     29bd <uart_in+0xb3>
    2999:	3c 2e                	cmp    $0x2e,%al
    299b:	0f 85 7d 01 00 00    	jne    2b1e <uart_in+0x214>
	return z_impl_k_msgq_put(msgq, data, timeout);
    29a1:	48 8d 3d 28 c1 00 00 	lea    0xc128(%rip),%rdi        # ead0 <uart_msgq>
    29a8:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    29ac:	48 8d 35 48 6a 00 00 	lea    0x6a48(%rip),%rsi        # 93fb <default_cmd+0x19b>
    29b3:	e8 d9 4f 00 00       	callq  7991 <z_impl_k_msgq_put>
							break;
    29b8:	e9 61 01 00 00       	jmpq   2b1e <uart_in+0x214>
							printk("Changing state to st_avail\n");
    29bd:	48 8d 3d 3a 6a 00 00 	lea    0x6a3a(%rip),%rdi        # 93fe <default_cmd+0x19e>
    29c4:	31 c0                	xor    %eax,%eax
    29c6:	e8 1f 03 00 00       	callq  2cea <printk>
							state = st_avail;
    29cb:	c7 45 00 01 00 00 00 	movl   $0x1,0x0(%rbp)
							break;
    29d2:	e9 47 01 00 00       	jmpq   2b1e <uart_in+0x214>
							printk("Changing state to st_decrypt\n");
    29d7:	48 8d 3d 3c 6a 00 00 	lea    0x6a3c(%rip),%rdi        # 941a <default_cmd+0x1ba>
    29de:	31 c0                	xor    %eax,%eax
    29e0:	e8 05 03 00 00       	callq  2cea <printk>
							state = st_decrypt;
    29e5:	c7 45 00 02 00 00 00 	movl   $0x2,0x0(%rbp)
							break;
    29ec:	e9 2d 01 00 00       	jmpq   2b1e <uart_in+0x214>
				if(!uart_poll_in(uart_dev, &input)){
    29f1:	48 8d 05 80 ca 00 00 	lea    0xca80(%rip),%rax        # f478 <uart_dev>
    29f8:	48 8b 38             	mov    (%rax),%rdi
    29fb:	48 8b 47 10          	mov    0x10(%rdi),%rax
    29ff:	48 8d 74 24 07       	lea    0x7(%rsp),%rsi
    2a04:	ff 10                	callq  *(%rax)
    2a06:	85 c0                	test   %eax,%eax
    2a08:	0f 85 10 01 00 00    	jne    2b1e <uart_in+0x214>
					op = op_decrypt;
    2a0e:	48 8d 05 43 cb 00 00 	lea    0xcb43(%rip),%rax        # f558 <op>
					len = input;
    2a15:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
					printk("Length of incoming ciphertext is %i\n", len);
    2a1a:	48 8d 3d 17 6a 00 00 	lea    0x6a17(%rip),%rdi        # 9438 <default_cmd+0x1d8>
					op = op_decrypt;
    2a21:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
					printk("Length of incoming ciphertext is %i\n", len);
    2a27:	31 c0                	xor    %eax,%eax
					len = input;
    2a29:	89 f3                	mov    %esi,%ebx
					printk("Length of incoming ciphertext is %i\n", len);
    2a2b:	e8 ba 02 00 00       	callq  2cea <printk>
					printk("Changing state to st_data\n");
    2a30:	48 8d 3d 26 6a 00 00 	lea    0x6a26(%rip),%rdi        # 945d <default_cmd+0x1fd>
    2a37:	31 c0                	xor    %eax,%eax
    2a39:	e8 ac 02 00 00       	callq  2cea <printk>
					state = st_data;
    2a3e:	c7 45 00 03 00 00 00 	movl   $0x3,0x0(%rbp)
    2a45:	e9 d4 00 00 00       	jmpq   2b1e <uart_in+0x214>
    2a4a:	4c 8d 35 27 ca 00 00 	lea    0xca27(%rip),%r14        # f478 <uart_dev>
				for(uint8_t i=0; len!=0; len--){
    2a51:	45 31 ed             	xor    %r13d,%r13d
    2a54:	84 db                	test   %bl,%bl
    2a56:	49 8b 3e             	mov    (%r14),%rdi
    2a59:	4c 8d 7c 24 07       	lea    0x7(%rsp),%r15
    2a5e:	74 3a                	je     2a9a <uart_in+0x190>
    2a60:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2a64:	4c 89 fe             	mov    %r15,%rsi
    2a67:	ff 10                	callq  *(%rax)
					if(!uart_poll_in(uart_dev, &input)){
    2a69:	85 c0                	test   %eax,%eax
    2a6b:	75 22                	jne    2a8f <uart_in+0x185>
						printk("received data: <0x%x>\n", input);
    2a6d:	0f b6 74 24 07       	movzbl 0x7(%rsp),%esi
    2a72:	48 8d 3d ff 69 00 00 	lea    0x69ff(%rip),%rdi        # 9478 <default_cmd+0x218>
    2a79:	e8 6c 02 00 00       	callq  2cea <printk>
						*(data+i) = input;
    2a7e:	8a 54 24 07          	mov    0x7(%rsp),%dl
    2a82:	41 0f b6 c5          	movzbl %r13b,%eax
						i++;
    2a86:	41 ff c5             	inc    %r13d
						*(data+i) = input;
    2a89:	41 88 14 04          	mov    %dl,(%r12,%rax,1)
						i++;
    2a8d:	eb 02                	jmp    2a91 <uart_in+0x187>
						len++;
    2a8f:	ff c3                	inc    %ebx
					k_usleep(1); //  Prozessor abgeben
    2a91:	e8 af fd ff ff       	callq  2845 <k_usleep.constprop.0>
				for(uint8_t i=0; len!=0; len--){
    2a96:	ff cb                	dec    %ebx
    2a98:	eb ba                	jmp    2a54 <uart_in+0x14a>
								printk("Error: unknwown operand!\n");
    2a9a:	48 8d 1d 37 6a 00 00 	lea    0x6a37(%rip),%rbx        # 94d8 <default_cmd+0x278>
					if(!uart_poll_in(uart_dev, &input)){
    2aa1:	49 8b 3e             	mov    (%r14),%rdi
    2aa4:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2aa8:	4c 89 fe             	mov    %r15,%rsi
    2aab:	ff 10                	callq  *(%rax)
    2aad:	85 c0                	test   %eax,%eax
    2aaf:	75 66                	jne    2b17 <uart_in+0x20d>
						switch(op){
    2ab1:	48 8d 05 a0 ca 00 00 	lea    0xcaa0(%rip),%rax        # f558 <op>
    2ab8:	83 38 00             	cmpl   $0x0,(%rax)
    2abb:	75 3b                	jne    2af8 <uart_in+0x1ee>
								printk("Sending data <%s> to processing thread\n", data);
    2abd:	4c 89 e6             	mov    %r12,%rsi
    2ac0:	48 8d 3d c8 69 00 00 	lea    0x69c8(%rip),%rdi        # 948f <default_cmd+0x22f>
    2ac7:	31 c0                	xor    %eax,%eax
    2ac9:	e8 1c 02 00 00       	callq  2cea <printk>
    2ace:	48 8d 3d b3 bf 00 00 	lea    0xbfb3(%rip),%rdi        # ea88 <processing_msgq>
    2ad5:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2ad9:	4c 89 e6             	mov    %r12,%rsi
    2adc:	e8 b0 4e 00 00       	callq  7991 <z_impl_k_msgq_put>
								printk("Changing state to st_op_decrypt\n");
    2ae1:	48 8d 3d cf 69 00 00 	lea    0x69cf(%rip),%rdi        # 94b7 <default_cmd+0x257>
    2ae8:	31 c0                	xor    %eax,%eax
    2aea:	e8 fb 01 00 00       	callq  2cea <printk>
								state = st_op_decrypt;
    2aef:	c7 45 00 04 00 00 00 	movl   $0x4,0x0(%rbp)
								break;
    2af6:	eb 1f                	jmp    2b17 <uart_in+0x20d>
								printk("Error: unknwown operand!\n");
    2af8:	48 89 df             	mov    %rbx,%rdi
    2afb:	31 c0                	xor    %eax,%eax
    2afd:	e8 e8 01 00 00       	callq  2cea <printk>
								printk("Changing state to st_init\n");
    2b02:	48 8d 3d e9 69 00 00 	lea    0x69e9(%rip),%rdi        # 94f2 <default_cmd+0x292>
    2b09:	31 c0                	xor    %eax,%eax
    2b0b:	e8 da 01 00 00       	callq  2cea <printk>
								state = st_init;
    2b10:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
					k_usleep(1); // Prozessor abgeben
    2b17:	e8 29 fd ff ff       	callq  2845 <k_usleep.constprop.0>
					if(!uart_poll_in(uart_dev, &input)){
    2b1c:	eb 83                	jmp    2aa1 <uart_in+0x197>
		k_usleep(1); // Prozessor abgeben
    2b1e:	e8 22 fd ff ff       	callq  2845 <k_usleep.constprop.0>
		switch(state){
    2b23:	e9 1a fe ff ff       	jmpq   2942 <uart_in+0x38>

0000000000002b28 <zephyr_app_main>:
void main(void){
    2b28:	f3 0f 1e fa          	endbr64 
    2b2c:	53                   	push   %rbx
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2b2d:	48 8d 3d d9 69 00 00 	lea    0x69d9(%rip),%rdi        # 950d <default_cmd+0x2ad>
    2b34:	e8 72 4c 00 00       	callq  77ab <z_impl_device_get_binding>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2b39:	48 8d 1d 38 c9 00 00 	lea    0xc938(%rip),%rbx        # f478 <uart_dev>
		printk("UART not found\n");
    2b40:	48 8d 3d cd 69 00 00 	lea    0x69cd(%rip),%rdi        # 9514 <default_cmd+0x2b4>
	uart_dev = device_get_binding(DT_LABEL(UART_DEVICE));
    2b47:	48 89 03             	mov    %rax,(%rbx)
	if(!uart_dev){
    2b4a:	48 85 c0             	test   %rax,%rax
    2b4d:	74 3f                	je     2b8e <zephyr_app_main+0x66>
	printk("UART found\n");
    2b4f:	31 c0                	xor    %eax,%eax
    2b51:	48 8d 3d cc 69 00 00 	lea    0x69cc(%rip),%rdi        # 9524 <default_cmd+0x2c4>
    2b58:	e8 8d 01 00 00       	callq  2cea <printk>
	uartconf.baudrate = 9600;
    2b5d:	48 8d 35 0c c9 00 00 	lea    0xc90c(%rip),%rsi        # f470 <uartconf>
	if(!uart_configure(uart_dev, &uartconf)){
    2b64:	48 8b 3b             	mov    (%rbx),%rdi
	uartconf.baudrate = 9600;
    2b67:	48 b8 80 25 00 00 00 	movabs $0x3010000002580,%rax
    2b6e:	01 03 00 
    2b71:	48 89 06             	mov    %rax,(%rsi)
					const struct uart_config *cfg)
{
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	if (api->configure == NULL) {
    2b74:	48 8b 47 10          	mov    0x10(%rdi),%rax
    2b78:	48 8b 40 18          	mov    0x18(%rax),%rax
    2b7c:	48 85 c0             	test   %rax,%rax
    2b7f:	74 13                	je     2b94 <zephyr_app_main+0x6c>
		return -ENOSYS;
	}
	return api->configure(dev, cfg);
    2b81:	ff d0                	callq  *%rax
	if(!uart_configure(uart_dev, &uartconf)){
    2b83:	85 c0                	test   %eax,%eax
    2b85:	75 0d                	jne    2b94 <zephyr_app_main+0x6c>
		printk("Configuration of UART failed\n");
    2b87:	48 8d 3d a2 69 00 00 	lea    0x69a2(%rip),%rdi        # 9530 <default_cmd+0x2d0>
}
    2b8e:	5b                   	pop    %rbx
		printk("Configuration of UART failed\n");
    2b8f:	e9 56 01 00 00       	jmpq   2cea <printk>
	printk("UART configured\n");
    2b94:	48 8d 3d b3 69 00 00 	lea    0x69b3(%rip),%rdi        # 954e <default_cmd+0x2ee>
    2b9b:	31 c0                	xor    %eax,%eax
		printk("\nmain is waiting for death\n"); // "main is alive" ist mir irgendwie zu langweilig...
    2b9d:	48 8d 1d bb 69 00 00 	lea    0x69bb(%rip),%rbx        # 955f <default_cmd+0x2ff>
	printk("UART configured\n");
    2ba4:	e8 41 01 00 00       	callq  2cea <printk>
		printk("\nmain is waiting for death\n"); // "main is alive" ist mir irgendwie zu langweilig...
    2ba9:	48 89 df             	mov    %rbx,%rdi
    2bac:	31 c0                	xor    %eax,%eax
    2bae:	e8 37 01 00 00       	callq  2cea <printk>
	return z_impl_k_sleep(timeout);
    2bb3:	bf e8 03 00 00       	mov    $0x3e8,%edi
    2bb8:	e8 8f 57 00 00       	callq  834c <z_impl_k_sleep>
    2bbd:	eb ea                	jmp    2ba9 <zephyr_app_main+0x81>

0000000000002bbf <decrypt_data>:
		k_usleep(1); // Abgeben des Prozessors
	}
	return;
}

char *decrypt_data(void){
    2bbf:	f3 0f 1e fa          	endbr64 
	char *plaintext=malloc(DATA_SIZE_MAX);
	plaintext = "XERROR\n";

	// ## main loop ##
	return plaintext;
}
    2bc3:	48 8d 05 b1 69 00 00 	lea    0x69b1(%rip),%rax        # 957b <default_cmd+0x31b>
    2bca:	c3                   	retq   

0000000000002bcb <processing>:
void processing(void *ptr1, void *ptr2, void *ptr3){
    2bcb:	f3 0f 1e fa          	endbr64 
    2bcf:	41 54                	push   %r12
	char *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2bd1:	bf ff 00 00 00       	mov    $0xff,%edi
void processing(void *ptr1, void *ptr2, void *ptr3){
    2bd6:	55                   	push   %rbp
    2bd7:	53                   	push   %rbx
	char *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2bd8:	e8 e3 f9 ff ff       	callq  25c0 <malloc@plt>
		switch(state){
    2bdd:	4c 8d 25 78 c9 00 00 	lea    0xc978(%rip),%r12        # f55c <state>
	char *ciphertext=malloc(DATA_SIZE_MAX*sizeof(char));
    2be4:	48 89 c3             	mov    %rax,%rbx
		switch(state){
    2be7:	41 8b 04 24          	mov    (%r12),%eax
    2beb:	83 f8 01             	cmp    $0x1,%eax
    2bee:	74 07                	je     2bf7 <processing+0x2c>
    2bf0:	83 f8 04             	cmp    $0x4,%eax
    2bf3:	74 0f                	je     2c04 <processing+0x39>
    2bf5:	eb 73                	jmp    2c6a <processing+0x9f>
	return z_impl_k_msgq_put(msgq, data, timeout);
    2bf7:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2bfb:	48 8d 35 81 69 00 00 	lea    0x6981(%rip),%rsi        # 9583 <default_cmd+0x323>
    2c02:	eb 44                	jmp    2c48 <processing+0x7d>
	return z_impl_k_msgq_get(msgq, data, timeout);
    2c04:	48 8d 3d 7d be 00 00 	lea    0xbe7d(%rip),%rdi        # ea88 <processing_msgq>
    2c0b:	31 d2                	xor    %edx,%edx
    2c0d:	48 89 de             	mov    %rbx,%rsi
    2c10:	e8 73 4e 00 00       	callq  7a88 <z_impl_k_msgq_get>
				if(k_msgq_get(&processing_msgq, ciphertext, K_NO_WAIT)==0){
    2c15:	85 c0                	test   %eax,%eax
    2c17:	75 51                	jne    2c6a <processing+0x9f>
					printk("Going to decrypt ciphertext: <%s>\n", ciphertext);
    2c19:	48 89 de             	mov    %rbx,%rsi
    2c1c:	48 8d 3d 76 69 00 00 	lea    0x6976(%rip),%rdi        # 9599 <default_cmd+0x339>
    2c23:	e8 c2 00 00 00       	callq  2cea <printk>
					plaintext = decrypt_data();
    2c28:	e8 92 ff ff ff       	callq  2bbf <decrypt_data>
					printk("Sending plaintext <%s> to uart_out\n", plaintext);
    2c2d:	48 8d 3d 88 69 00 00 	lea    0x6988(%rip),%rdi        # 95bc <default_cmd+0x35c>
    2c34:	48 89 c6             	mov    %rax,%rsi
					plaintext = decrypt_data();
    2c37:	48 89 c5             	mov    %rax,%rbp
					printk("Sending plaintext <%s> to uart_out\n", plaintext);
    2c3a:	31 c0                	xor    %eax,%eax
    2c3c:	e8 a9 00 00 00       	callq  2cea <printk>
	return z_impl_k_msgq_put(msgq, data, timeout);
    2c41:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    2c45:	48 89 ee             	mov    %rbp,%rsi
    2c48:	48 8d 3d 81 be 00 00 	lea    0xbe81(%rip),%rdi        # ead0 <uart_msgq>
    2c4f:	e8 3d 4d 00 00       	callq  7991 <z_impl_k_msgq_put>
					printk("Changing state to st_init\n");
    2c54:	48 8d 3d 97 68 00 00 	lea    0x6897(%rip),%rdi        # 94f2 <default_cmd+0x292>
    2c5b:	31 c0                	xor    %eax,%eax
    2c5d:	e8 88 00 00 00       	callq  2cea <printk>
					state = st_init;
    2c62:	41 c7 04 24 00 00 00 	movl   $0x0,(%r12)
    2c69:	00 
		k_usleep(1); // Abgeben des Prozessors
    2c6a:	e8 d6 fb ff ff       	callq  2845 <k_usleep.constprop.0>
		switch(state){
    2c6f:	e9 73 ff ff ff       	jmpq   2be7 <processing+0x1c>

0000000000002c74 <arch_printk_char_out>:
 *
 * @return 0
 */
/* LCOV_EXCL_START */
__attribute__((weak)) int arch_printk_char_out(int c)
{
    2c74:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2c78:	31 c0                	xor    %eax,%eax
    2c7a:	c3                   	retq   

0000000000002c7b <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2c7b:	f3 0f 1e fa          	endbr64 
	struct out_context *ctx = ctx_p;

	ctx->count++;
	return _char_out(c);
    2c7f:	48 8d 05 c2 97 00 00 	lea    0x97c2(%rip),%rax        # c448 <_char_out>
	ctx->count++;
    2c86:	ff 06                	incl   (%rsi)
	return _char_out(c);
    2c88:	ff 20                	jmpq   *(%rax)

0000000000002c8a <__printk_hook_install>:
{
    2c8a:	f3 0f 1e fa          	endbr64 
	_char_out = fn;
    2c8e:	48 8d 05 b3 97 00 00 	lea    0x97b3(%rip),%rax        # c448 <_char_out>
    2c95:	48 89 38             	mov    %rdi,(%rax)
}
    2c98:	c3                   	retq   

0000000000002c99 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2c99:	f3 0f 1e fa          	endbr64 
    2c9d:	48 83 ec 18          	sub    $0x18,%rsp
    2ca1:	48 89 fa             	mov    %rdi,%rdx
    2ca4:	48 89 f1             	mov    %rsi,%rcx
    2ca7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2cae:	00 00 
    2cb0:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2cb5:	31 c0                	xor    %eax,%eax
	struct out_context ctx = { 0 };
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2cb7:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
    2cbc:	48 8d 3d b8 ff ff ff 	lea    -0x48(%rip),%rdi        # 2c7b <char_out>
	struct out_context ctx = { 0 };
    2cc3:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%rsp)
    2cca:	00 
	cbvprintf(char_out, &ctx, fmt, ap);
    2ccb:	e8 84 03 00 00       	callq  3054 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    2cd0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    2cd5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2cdc:	00 00 
    2cde:	74 05                	je     2ce5 <vprintk+0x4c>
    2ce0:	e8 cb f7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2ce5:	48 83 c4 18          	add    $0x18,%rsp
    2ce9:	c3                   	retq   

0000000000002cea <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    2cea:	f3 0f 1e fa          	endbr64 
    2cee:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    2cf5:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    2cfa:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    2cff:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    2d04:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    2d09:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    2d0e:	84 c0                	test   %al,%al
    2d10:	74 37                	je     2d49 <printk+0x5f>
    2d12:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    2d17:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    2d1c:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    2d21:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    2d28:	00 
    2d29:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    2d30:	00 
    2d31:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    2d38:	00 
    2d39:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    2d40:	00 
    2d41:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    2d48:	00 
    2d49:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    2d50:	00 00 
    2d52:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    2d57:	31 c0                	xor    %eax,%eax
	va_list ap;

	va_start(ap, fmt);
    2d59:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    2d60:	00 

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    2d61:	48 89 e6             	mov    %rsp,%rsi
	va_start(ap, fmt);
    2d64:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    2d6b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    2d70:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    2d75:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    2d7a:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    2d81:	00 
		vprintk(fmt, ap);
    2d82:	e8 12 ff ff ff       	callq  2c99 <vprintk>
	}
	va_end(ap);
}
    2d87:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    2d8c:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    2d93:	00 00 
    2d95:	74 05                	je     2d9c <printk+0xb2>
    2d97:	e8 14 f7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    2d9c:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    2da3:	c3                   	retq   

0000000000002da4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    2da4:	f3 0f 1e fa          	endbr64 
    2da8:	50                   	push   %rax
    2da9:	58                   	pop    %rax
    2daa:	49 89 f8             	mov    %rdi,%r8
    2dad:	50                   	push   %rax
    2dae:	48 89 f7             	mov    %rsi,%rdi
    2db1:	48 89 d6             	mov    %rdx,%rsi
    2db4:	48 89 ca             	mov    %rcx,%rdx
	entry(p1, p2, p3);
    2db7:	41 ff d0             	callq  *%r8
	return z_impl_k_current_get();
    2dba:	e8 fe 55 00 00       	callq  83bd <z_impl_k_current_get>
    2dbf:	48 89 c7             	mov    %rax,%rdi
	z_impl_k_thread_abort(thread);
    2dc2:	e8 06 26 00 00       	callq  53cd <z_impl_k_thread_abort>
	/*
	 * Compiler can't tell that k_thread_abort() won't return and issues a
	 * warning unless we tell it that control never gets this far.
	 */

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2dc7:	ba 26 00 00 00       	mov    $0x26,%edx
    2dcc:	48 8d 35 35 68 00 00 	lea    0x6835(%rip),%rsi        # 9608 <default_cmd+0x3a8>
    2dd3:	31 c0                	xor    %eax,%eax
    2dd5:	48 8d 3d 55 68 00 00 	lea    0x6855(%rip),%rdi        # 9631 <default_cmd+0x3d1>
    2ddc:	e8 d0 35 00 00       	callq  63b1 <posix_print_error_and_exit>

0000000000002de1 <chunk_size>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2de1:	89 f6                	mov    %esi,%esi
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    2de3:	8b 44 f7 04          	mov    0x4(%rdi,%rsi,8),%eax
    2de7:	d1 e8                	shr    %eax
}
    2de9:	c3                   	retq   

0000000000002dea <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    2dea:	89 f6                	mov    %esi,%esi
{
    2dec:	41 89 d0             	mov    %edx,%r8d
	void *cmem = &buf[c];
    2def:	48 8d 04 f7          	lea    (%rdi,%rsi,8),%rax

	if (big_heap(h)) {
		if (used) {
    2df3:	8b 48 04             	mov    0x4(%rax),%ecx
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    2df6:	89 ca                	mov    %ecx,%edx
    2df8:	83 e2 fe             	and    $0xfffffffe,%edx
		if (used) {
    2dfb:	45 84 c0             	test   %r8b,%r8b
    2dfe:	74 05                	je     2e05 <set_chunk_used+0x1b>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    2e00:	83 c9 01             	or     $0x1,%ecx
    2e03:	89 ca                	mov    %ecx,%edx
    2e05:	89 50 04             	mov    %edx,0x4(%rax)
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
    2e08:	c3                   	retq   

0000000000002e09 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    2e09:	89 f2                	mov    %esi,%edx
	chunk_set(h, c, LEFT_SIZE, size);
}

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
	return big_heap(h) && chunk_size(h, c) == 1U;
    2e0b:	e8 d1 ff ff ff       	callq  2de1 <chunk_size>
	if (!solo_free_header(h, c)) {
    2e10:	83 f8 01             	cmp    $0x1,%eax
    2e13:	74 5b                	je     2e70 <free_list_add+0x67>
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    2e15:	ff c8                	dec    %eax
	return 31 - __builtin_clz(usable_sz);
    2e17:	b9 1f 00 00 00       	mov    $0x1f,%ecx
    2e1c:	0f bd c0             	bsr    %eax,%eax
    2e1f:	83 f0 1f             	xor    $0x1f,%eax
    2e22:	29 c1                	sub    %eax,%ecx
	if (b->next == 0U) {
    2e24:	48 63 c1             	movslq %ecx,%rax
    2e27:	4c 8d 14 87          	lea    (%rdi,%rax,4),%r10
    2e2b:	89 d0                	mov    %edx,%eax
    2e2d:	41 8b 72 10          	mov    0x10(%r10),%esi
    2e31:	48 8d 04 c5 08 00 00 	lea    0x8(,%rax,8),%rax
    2e38:	00 
    2e39:	4c 8d 0c 07          	lea    (%rdi,%rax,1),%r9
    2e3d:	4c 8d 44 07 04       	lea    0x4(%rdi,%rax,1),%r8
    2e42:	85 f6                	test   %esi,%esi
    2e44:	75 15                	jne    2e5b <free_list_add+0x52>
		h->avail_buckets |= (1 << bidx);
    2e46:	b8 01 00 00 00       	mov    $0x1,%eax
    2e4b:	d3 e0                	shl    %cl,%eax
    2e4d:	09 47 0c             	or     %eax,0xc(%rdi)
		b->next = c;
    2e50:	41 89 52 10          	mov    %edx,0x10(%r10)
		((uint32_t *)cmem)[f] = val;
    2e54:	41 89 11             	mov    %edx,(%r9)
    2e57:	41 89 10             	mov    %edx,(%r8)
}
    2e5a:	c3                   	retq   
	void *cmem = &buf[c];
    2e5b:	89 f0                	mov    %esi,%eax
		return ((uint32_t *)cmem)[f];
    2e5d:	48 8d 4c c7 08       	lea    0x8(%rdi,%rax,8),%rcx
    2e62:	8b 01                	mov    (%rcx),%eax
		((uint32_t *)cmem)[f] = val;
    2e64:	41 89 01             	mov    %eax,(%r9)
    2e67:	41 89 30             	mov    %esi,(%r8)
    2e6a:	89 54 c7 0c          	mov    %edx,0xc(%rdi,%rax,8)
    2e6e:	89 11                	mov    %edx,(%rcx)
		int bidx = bucket_idx(h, chunk_size(h, c));
		free_list_add_bidx(h, c, bidx);
	}
}
    2e70:	c3                   	retq   

0000000000002e71 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    2e71:	f3 0f 1e fa          	endbr64 
    2e75:	49 89 f8             	mov    %rdi,%r8
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2e78:	4c 8d 4c 16 f8       	lea    -0x8(%rsi,%rdx,1),%r9
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2e7d:	48 8d 7e 07          	lea    0x7(%rsi),%rdi
	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2e81:	ba 20 00 00 00       	mov    $0x20,%edx
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    2e86:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    2e8a:	49 83 e1 f8          	and    $0xfffffffffffffff8,%r9
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2e8e:	49 29 f9             	sub    %rdi,%r9
	heap->heap = h;
    2e91:	49 89 38             	mov    %rdi,(%r8)
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    2e94:	49 c1 e9 03          	shr    $0x3,%r9
	h->avail_buckets = 0;
    2e98:	c7 47 0c 00 00 00 00 	movl   $0x0,0xc(%rdi)
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    2e9f:	41 8d 41 ff          	lea    -0x1(%r9),%eax
	h->end_chunk = heap_sz;
    2ea3:	44 89 4f 08          	mov    %r9d,0x8(%rdi)
	return 31 - __builtin_clz(usable_sz);
    2ea7:	0f bd c0             	bsr    %eax,%eax
    2eaa:	83 f0 1f             	xor    $0x1f,%eax
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    2ead:	29 c2                	sub    %eax,%edx
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    2eaf:	48 63 c2             	movslq %edx,%rax
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    2eb2:	4c 8d 14 85 17 00 00 	lea    0x17(,%rax,4),%r10
    2eb9:	00 
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    2eba:	31 c0                	xor    %eax,%eax
    2ebc:	49 c1 ea 03          	shr    $0x3,%r10
    2ec0:	39 c2                	cmp    %eax,%edx
    2ec2:	7e 0d                	jle    2ed1 <sys_heap_init+0x60>
		h->buckets[i].next = 0;
    2ec4:	c7 44 87 10 00 00 00 	movl   $0x0,0x10(%rdi,%rax,4)
    2ecb:	00 
	for (int i = 0; i < nb_buckets; i++) {
    2ecc:	48 ff c0             	inc    %rax
    2ecf:	eb ef                	jmp    2ec0 <sys_heap_init+0x4f>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2ed1:	43 8d 04 12          	lea    (%r10,%r10,1),%eax
		((uint32_t *)cmem)[f] = val;
    2ed5:	c7 07 00 00 00 00    	movl   $0x0,(%rdi)
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);
    2edb:	ba 01 00 00 00       	mov    $0x1,%edx
    2ee0:	31 f6                	xor    %esi,%esi
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2ee2:	89 47 04             	mov    %eax,0x4(%rdi)
    2ee5:	e8 00 ff ff ff       	callq  2dea <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2eea:	44 89 ca             	mov    %r9d,%edx
		((uint32_t *)cmem)[f] = val;
    2eed:	46 89 14 d7          	mov    %r10d,(%rdi,%r10,8)
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    2ef1:	44 89 ce             	mov    %r9d,%esi
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    2ef4:	44 29 d2             	sub    %r10d,%edx
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    2ef7:	8d 04 12             	lea    (%rdx,%rdx,1),%eax
    2efa:	42 89 44 d7 04       	mov    %eax,0x4(%rdi,%r10,8)
	void *cmem = &buf[c];
    2eff:	44 89 c8             	mov    %r9d,%eax
		((uint32_t *)cmem)[f] = val;
    2f02:	89 14 c7             	mov    %edx,(%rdi,%rax,8)
	set_chunk_used(h, heap_sz, true);
    2f05:	ba 01 00 00 00       	mov    $0x1,%edx
    2f0a:	c7 44 c7 04 00 00 00 	movl   $0x0,0x4(%rdi,%rax,8)
    2f11:	00 
    2f12:	e8 d3 fe ff ff       	callq  2dea <set_chunk_used>

	free_list_add(h, chunk0_size);
    2f17:	44 89 d6             	mov    %r10d,%esi
    2f1a:	e9 ea fe ff ff       	jmpq   2e09 <free_list_add>

0000000000002f1f <outs>:
/* Outline function to emit all characters in [sp, ep). */
static int outs(cbprintf_cb out,
		void *ctx,
		const char *sp,
		const char *ep)
{
    2f1f:	41 56                	push   %r14
    2f21:	49 89 f6             	mov    %rsi,%r14
    2f24:	41 55                	push   %r13
    2f26:	49 89 fd             	mov    %rdi,%r13
    2f29:	41 54                	push   %r12
    2f2b:	49 89 cc             	mov    %rcx,%r12
    2f2e:	55                   	push   %rbp
    2f2f:	48 89 d5             	mov    %rdx,%rbp
    2f32:	53                   	push   %rbx
	size_t count = 0;
    2f33:	31 db                	xor    %ebx,%ebx

	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2f35:	48 8d 44 1d 00       	lea    0x0(%rbp,%rbx,1),%rax
    2f3a:	49 39 c4             	cmp    %rax,%r12
    2f3d:	76 16                	jbe    2f55 <outs+0x36>
		int rc = out((int)*sp++, ctx);
    2f3f:	31 c0                	xor    %eax,%eax
    2f41:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
    2f46:	4c 89 f6             	mov    %r14,%rsi
    2f49:	41 ff d5             	callq  *%r13

		if (rc < 0) {
    2f4c:	85 c0                	test   %eax,%eax
    2f4e:	78 17                	js     2f67 <outs+0x48>
			return rc;
		}
		++count;
    2f50:	48 ff c3             	inc    %rbx
    2f53:	eb e0                	jmp    2f35 <outs+0x16>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2f55:	4d 85 e4             	test   %r12,%r12
    2f58:	74 04                	je     2f5e <outs+0x3f>
	}

	return (int)count;
    2f5a:	89 d8                	mov    %ebx,%eax
    2f5c:	eb 09                	jmp    2f67 <outs+0x48>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    2f5e:	80 7c 1d 00 00       	cmpb   $0x0,0x0(%rbp,%rbx,1)
    2f63:	75 da                	jne    2f3f <outs+0x20>
    2f65:	eb f3                	jmp    2f5a <outs+0x3b>
}
    2f67:	5b                   	pop    %rbx
    2f68:	5d                   	pop    %rbp
    2f69:	41 5c                	pop    %r12
    2f6b:	41 5d                	pop    %r13
    2f6d:	41 5e                	pop    %r14
    2f6f:	c3                   	retq   

0000000000002f70 <extract_decimal>:
{
    2f70:	55                   	push   %rbp
    2f71:	53                   	push   %rbx
    2f72:	48 89 fb             	mov    %rdi,%rbx
    2f75:	51                   	push   %rcx
	const char *sp = *str;
    2f76:	48 8b 2f             	mov    (%rdi),%rbp
	while (isdigit((int)(unsigned char)*sp)) {
    2f79:	e8 42 f7 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    2f7e:	48 8b 08             	mov    (%rax),%rcx
	size_t val = 0;
    2f81:	31 c0                	xor    %eax,%eax
	while (isdigit((int)(unsigned char)*sp)) {
    2f83:	48 0f be 55 00       	movsbq 0x0(%rbp),%rdx
    2f88:	0f b6 f2             	movzbl %dl,%esi
    2f8b:	f6 44 71 01 08       	testb  $0x8,0x1(%rcx,%rsi,2)
    2f90:	74 0e                	je     2fa0 <extract_decimal+0x30>
		val = 10U * val + *sp++ - '0';
    2f92:	48 6b c0 0a          	imul   $0xa,%rax,%rax
    2f96:	48 ff c5             	inc    %rbp
    2f99:	48 8d 44 10 d0       	lea    -0x30(%rax,%rdx,1),%rax
    2f9e:	eb e3                	jmp    2f83 <extract_decimal+0x13>
	*str = sp;
    2fa0:	48 89 2b             	mov    %rbp,(%rbx)
}
    2fa3:	5a                   	pop    %rdx
    2fa4:	5b                   	pop    %rbx
    2fa5:	5d                   	pop    %rbp
    2fa6:	c3                   	retq   

0000000000002fa7 <encode_uint>:
{
    2fa7:	41 55                	push   %r13
    2fa9:	49 89 fd             	mov    %rdi,%r13
    2fac:	41 54                	push   %r12
    2fae:	49 89 cc             	mov    %rcx,%r12
    2fb1:	55                   	push   %rbp
    2fb2:	48 89 d5             	mov    %rdx,%rbp
    2fb5:	53                   	push   %rbx
    2fb6:	48 89 f3             	mov    %rsi,%rbx
    2fb9:	41 50                	push   %r8
	bool upcase = isupper((int)conv->specifier);
    2fbb:	e8 00 f7 ff ff       	callq  26c0 <__ctype_b_loc@plt>
    2fc0:	0f b6 4b 03          	movzbl 0x3(%rbx),%ecx
    2fc4:	49 89 c0             	mov    %rax,%r8
    2fc7:	49 8b 10             	mov    (%r8),%rdx
    2fca:	48 89 c8             	mov    %rcx,%rax
	switch (specifier) {
    2fcd:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    2fd3:	66 8b 0c 4a          	mov    (%rdx,%rcx,2),%cx
    2fd7:	66 81 e1 00 01       	and    $0x100,%cx
    2fdc:	3c 6f                	cmp    $0x6f,%al
    2fde:	74 3b                	je     301b <encode_uint+0x74>
    2fe0:	77 04                	ja     2fe6 <encode_uint+0x3f>
		return 16;
    2fe2:	3c 58                	cmp    $0x58,%al
    2fe4:	eb 05                	jmp    2feb <encode_uint+0x44>
	switch (specifier) {
    2fe6:	83 e0 f7             	and    $0xfffffff7,%eax
		return 16;
    2fe9:	3c 70                	cmp    $0x70,%al
    2feb:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
    2ff1:	b8 10 00 00 00       	mov    $0x10,%eax
    2ff6:	4c 0f 44 c0          	cmove  %rax,%r8
	char *bp = bps + (bpe - bps);
    2ffa:	eb 1f                	jmp    301b <encode_uint+0x74>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    2ffc:	8d 72 57             	lea    0x57(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2fff:	66 85 c9             	test   %cx,%cx
    3002:	74 03                	je     3007 <encode_uint+0x60>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3004:	8d 72 37             	lea    0x37(%rdx),%esi
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3007:	49 ff cc             	dec    %r12
    300a:	41 88 34 24          	mov    %sil,(%r12)
	} while ((value != 0) && (bps < bp));
    300e:	4d 39 c5             	cmp    %r8,%r13
    3011:	72 1b                	jb     302e <encode_uint+0x87>
    3013:	49 39 ec             	cmp    %rbp,%r12
    3016:	76 16                	jbe    302e <encode_uint+0x87>
		value /= radix;
    3018:	49 89 c5             	mov    %rax,%r13
		unsigned int lsv = (unsigned int)(value % radix);
    301b:	4c 89 e8             	mov    %r13,%rax
    301e:	31 d2                	xor    %edx,%edx
    3020:	49 f7 f0             	div    %r8
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3023:	8d 72 30             	lea    0x30(%rdx),%esi
    3026:	48 83 fa 09          	cmp    $0x9,%rdx
    302a:	76 db                	jbe    3007 <encode_uint+0x60>
    302c:	eb ce                	jmp    2ffc <encode_uint+0x55>
	if (conv->flag_hash) {
    302e:	f6 03 20             	testb  $0x20,(%rbx)
    3031:	74 16                	je     3049 <encode_uint+0xa2>
		if (radix == 8) {
    3033:	49 83 f8 08          	cmp    $0x8,%r8
    3037:	75 06                	jne    303f <encode_uint+0x98>
			conv->altform_0 = true;
    3039:	80 4b 02 08          	orb    $0x8,0x2(%rbx)
    303d:	eb 0a                	jmp    3049 <encode_uint+0xa2>
		} else if (radix == 16) {
    303f:	49 83 f8 10          	cmp    $0x10,%r8
    3043:	75 04                	jne    3049 <encode_uint+0xa2>
			conv->altform_0c = true;
    3045:	80 4b 02 10          	orb    $0x10,0x2(%rbx)
}
    3049:	5a                   	pop    %rdx
    304a:	4c 89 e0             	mov    %r12,%rax
    304d:	5b                   	pop    %rbx
    304e:	5d                   	pop    %rbp
    304f:	41 5c                	pop    %r12
    3051:	41 5d                	pop    %r13
    3053:	c3                   	retq   

0000000000003054 <cbvprintf>:

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3054:	f3 0f 1e fa          	endbr64 
    3058:	41 57                	push   %r15
    305a:	49 89 f7             	mov    %rsi,%r15
    305d:	41 56                	push   %r14
    305f:	49 89 fe             	mov    %rdi,%r14
    3062:	41 55                	push   %r13
    3064:	49 89 d5             	mov    %rdx,%r13
    3067:	41 54                	push   %r12
    3069:	49 89 cc             	mov    %rcx,%r12
    306c:	55                   	push   %rbp
    306d:	53                   	push   %rbx
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    306e:	31 db                	xor    %ebx,%ebx
{
    3070:	48 83 ec 78          	sub    $0x78,%rsp
    3074:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    307b:	00 00 
    307d:	48 89 44 24 68       	mov    %rax,0x68(%rsp)
    3082:	31 c0                	xor    %eax,%eax
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    3084:	41 0f be 7d 00       	movsbl 0x0(%r13),%edi
    3089:	40 84 ff             	test   %dil,%dil
    308c:	0f 84 d2 09 00 00    	je     3a64 <cbvprintf+0xa10>
		if (*fp != '%') {
    3092:	49 8d 6d 01          	lea    0x1(%r13),%rbp
			OUTC(*fp++);
    3096:	4c 89 fe             	mov    %r15,%rsi
		if (*fp != '%') {
    3099:	40 80 ff 25          	cmp    $0x25,%dil
    309d:	0f 85 89 06 00 00    	jne    372c <cbvprintf+0x6d8>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    30a3:	31 c0                	xor    %eax,%eax
    30a5:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    30aa:	b9 08 00 00 00       	mov    $0x8,%ecx
    30af:	f3 ab                	rep stos %eax,%es:(%rdi)
	if (*sp == '%') {
    30b1:	48 8d 74 24 40       	lea    0x40(%rsp),%rsi
    30b6:	41 80 7d 01 25       	cmpb   $0x25,0x1(%r13)
    30bb:	75 1c                	jne    30d9 <cbvprintf+0x85>
		conv->specifier = *sp++;
    30bd:	c6 44 24 43 25       	movb   $0x25,0x43(%rsp)
    30c2:	49 8d 6d 02          	lea    0x2(%r13),%rbp
		return sp;
    30c6:	e9 df 02 00 00       	jmpq   33aa <cbvprintf+0x356>
		switch (*sp) {
    30cb:	7e 15                	jle    30e2 <cbvprintf+0x8e>
    30cd:	3c 2d                	cmp    $0x2d,%al
    30cf:	75 1b                	jne    30ec <cbvprintf+0x98>
			conv->flag_dash = true;
    30d1:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
			++sp;
    30d6:	48 ff c5             	inc    %rbp
		switch (*sp) {
    30d9:	8a 45 00             	mov    0x0(%rbp),%al
    30dc:	3c 2b                	cmp    $0x2b,%al
    30de:	75 eb                	jne    30cb <cbvprintf+0x77>
    30e0:	eb 25                	jmp    3107 <cbvprintf+0xb3>
    30e2:	3c 20                	cmp    $0x20,%al
    30e4:	74 28                	je     310e <cbvprintf+0xba>
    30e6:	3c 23                	cmp    $0x23,%al
    30e8:	74 2b                	je     3115 <cbvprintf+0xc1>
    30ea:	eb 04                	jmp    30f0 <cbvprintf+0x9c>
    30ec:	3c 30                	cmp    $0x30,%al
    30ee:	74 2c                	je     311c <cbvprintf+0xc8>
	if (conv->flag_zero && conv->flag_dash) {
    30f0:	8a 44 24 40          	mov    0x40(%rsp),%al
    30f4:	89 c2                	mov    %eax,%edx
    30f6:	83 e2 44             	and    $0x44,%edx
    30f9:	80 fa 44             	cmp    $0x44,%dl
    30fc:	75 25                	jne    3123 <cbvprintf+0xcf>
		conv->flag_zero = false;
    30fe:	83 e0 bf             	and    $0xffffffbf,%eax
    3101:	88 44 24 40          	mov    %al,0x40(%rsp)
    3105:	eb 1c                	jmp    3123 <cbvprintf+0xcf>
			conv->flag_plus = true;
    3107:	80 4c 24 40 08       	orb    $0x8,0x40(%rsp)
			break;
    310c:	eb c8                	jmp    30d6 <cbvprintf+0x82>
			conv->flag_space = true;
    310e:	80 4c 24 40 10       	orb    $0x10,0x40(%rsp)
			break;
    3113:	eb c1                	jmp    30d6 <cbvprintf+0x82>
			conv->flag_hash = true;
    3115:	80 4c 24 40 20       	orb    $0x20,0x40(%rsp)
			break;
    311a:	eb ba                	jmp    30d6 <cbvprintf+0x82>
			conv->flag_zero = true;
    311c:	80 4c 24 40 40       	orb    $0x40,0x40(%rsp)
			break;
    3121:	eb b3                	jmp    30d6 <cbvprintf+0x82>
	conv->width_present = true;
    3123:	80 4c 24 40 80       	orb    $0x80,0x40(%rsp)
    3128:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	if (*sp == '*') {
    312d:	80 7d 00 2a          	cmpb   $0x2a,0x0(%rbp)
    3131:	75 0a                	jne    313d <cbvprintf+0xe9>
		conv->width_star = true;
    3133:	80 4c 24 41 01       	orb    $0x1,0x41(%rsp)
		return ++sp;
    3138:	48 ff c5             	inc    %rbp
    313b:	eb 5d                	jmp    319a <cbvprintf+0x146>
	size_t width = extract_decimal(&sp);
    313d:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    3142:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    3147:	e8 24 fe ff ff       	callq  2f70 <extract_decimal>
	if (sp != wp) {
    314c:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    3151:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    3156:	48 39 e9             	cmp    %rbp,%rcx
    3159:	74 3f                	je     319a <cbvprintf+0x146>
		conv->width_present = true;
    315b:	8a 54 24 40          	mov    0x40(%rsp),%dl
		conv->width_value = width;
    315f:	89 44 24 44          	mov    %eax,0x44(%rsp)
				      || (width != (size_t)conv->width_value));
    3163:	bf 01 00 00 00       	mov    $0x1,%edi
		conv->width_present = true;
    3168:	83 ca 80             	or     $0xffffff80,%edx
    316b:	88 54 24 40          	mov    %dl,0x40(%rsp)
		conv->unsupported |= ((conv->width_value < 0)
    316f:	d0 ea                	shr    %dl
    3171:	83 e2 01             	and    $0x1,%edx
				      || (width != (size_t)conv->width_value));
    3174:	85 c0                	test   %eax,%eax
    3176:	78 0e                	js     3186 <cbvprintf+0x132>
    3178:	48 63 f8             	movslq %eax,%rdi
    317b:	48 39 c7             	cmp    %rax,%rdi
    317e:	40 0f 95 c7          	setne  %dil
    3182:	40 0f b6 ff          	movzbl %dil,%edi
		conv->unsupported |= ((conv->width_value < 0)
    3186:	8a 44 24 40          	mov    0x40(%rsp),%al
    318a:	09 fa                	or     %edi,%edx
    318c:	48 89 cd             	mov    %rcx,%rbp
    318f:	01 d2                	add    %edx,%edx
    3191:	83 e0 fd             	and    $0xfffffffd,%eax
    3194:	09 c2                	or     %eax,%edx
    3196:	88 54 24 40          	mov    %dl,0x40(%rsp)
	sp = extract_prec(conv, sp);
    319a:	48 89 6c 24 28       	mov    %rbp,0x28(%rsp)
	conv->prec_present = (*sp == '.');
    319f:	8a 4d 00             	mov    0x0(%rbp),%cl
    31a2:	80 f9 2e             	cmp    $0x2e,%cl
    31a5:	0f 94 c0             	sete   %al
    31a8:	8d 14 00             	lea    (%rax,%rax,1),%edx
    31ab:	8a 44 24 41          	mov    0x41(%rsp),%al
    31af:	83 e0 fd             	and    $0xfffffffd,%eax
    31b2:	09 d0                	or     %edx,%eax
    31b4:	88 44 24 41          	mov    %al,0x41(%rsp)
	if (!conv->prec_present) {
    31b8:	80 f9 2e             	cmp    $0x2e,%cl
    31bb:	75 6b                	jne    3228 <cbvprintf+0x1d4>
	++sp;
    31bd:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    31c1:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
	if (*sp == '*') {
    31c6:	80 7d 01 2a          	cmpb   $0x2a,0x1(%rbp)
    31ca:	75 0d                	jne    31d9 <cbvprintf+0x185>
		conv->prec_star = true;
    31cc:	83 c8 04             	or     $0x4,%eax
		return ++sp;
    31cf:	48 83 c5 02          	add    $0x2,%rbp
		conv->prec_star = true;
    31d3:	88 44 24 41          	mov    %al,0x41(%rsp)
		return ++sp;
    31d7:	eb 4f                	jmp    3228 <cbvprintf+0x1d4>
	size_t prec = extract_decimal(&sp);
    31d9:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    31de:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    31e3:	e8 88 fd ff ff       	callq  2f70 <extract_decimal>
			      || (prec != (size_t)conv->prec_value));
    31e8:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    31ed:	b9 01 00 00 00       	mov    $0x1,%ecx
	size_t prec = extract_decimal(&sp);
    31f2:	48 89 c2             	mov    %rax,%rdx
	conv->prec_value = prec;
    31f5:	89 44 24 48          	mov    %eax,0x48(%rsp)
	conv->unsupported |= ((conv->prec_value < 0)
    31f9:	8a 44 24 40          	mov    0x40(%rsp),%al
    31fd:	d0 e8                	shr    %al
    31ff:	83 e0 01             	and    $0x1,%eax
			      || (prec != (size_t)conv->prec_value));
    3202:	85 d2                	test   %edx,%edx
    3204:	78 0c                	js     3212 <cbvprintf+0x1be>
    3206:	48 63 ca             	movslq %edx,%rcx
    3209:	48 39 d1             	cmp    %rdx,%rcx
    320c:	0f 95 c1             	setne  %cl
    320f:	0f b6 c9             	movzbl %cl,%ecx
	conv->unsupported |= ((conv->prec_value < 0)
    3212:	8a 54 24 40          	mov    0x40(%rsp),%dl
    3216:	09 c8                	or     %ecx,%eax
	return sp;
    3218:	48 8b 6c 24 28       	mov    0x28(%rsp),%rbp
	conv->unsupported |= ((conv->prec_value < 0)
    321d:	01 c0                	add    %eax,%eax
    321f:	83 e2 fd             	and    $0xfffffffd,%edx
    3222:	09 d0                	or     %edx,%eax
    3224:	88 44 24 40          	mov    %al,0x40(%rsp)
	switch (*sp) {
    3228:	8a 4d 00             	mov    0x0(%rbp),%cl
    322b:	48 8d 55 01          	lea    0x1(%rbp),%rdx
    322f:	80 f9 6c             	cmp    $0x6c,%cl
    3232:	74 54                	je     3288 <cbvprintf+0x234>
    3234:	7f 22                	jg     3258 <cbvprintf+0x204>
    3236:	80 f9 68             	cmp    $0x68,%cl
    3239:	74 33                	je     326e <cbvprintf+0x21a>
    323b:	80 f9 6a             	cmp    $0x6a,%cl
    323e:	74 6e                	je     32ae <cbvprintf+0x25a>
    3240:	80 f9 4c             	cmp    $0x4c,%cl
    3243:	75 7d                	jne    32c2 <cbvprintf+0x26e>
		conv->unsupported = true;
    3245:	8b 44 24 40          	mov    0x40(%rsp),%eax
    3249:	66 25 fd 87          	and    $0x87fd,%ax
    324d:	66 0d 02 40          	or     $0x4002,%ax
    3251:	66 89 44 24 40       	mov    %ax,0x40(%rsp)
		break;
    3256:	eb 72                	jmp    32ca <cbvprintf+0x276>
	switch (*sp) {
    3258:	80 f9 74             	cmp    $0x74,%cl
    325b:	8a 44 24 41          	mov    0x41(%rsp),%al
    325f:	74 59                	je     32ba <cbvprintf+0x266>
    3261:	80 f9 7a             	cmp    $0x7a,%cl
    3264:	75 5c                	jne    32c2 <cbvprintf+0x26e>
		conv->length_mod = LENGTH_Z;
    3266:	83 e0 87             	and    $0xffffff87,%eax
    3269:	83 c8 30             	or     $0x30,%eax
    326c:	eb 3a                	jmp    32a8 <cbvprintf+0x254>
		if (*++sp == 'h') {
    326e:	80 7d 01 68          	cmpb   $0x68,0x1(%rbp)
    3272:	8a 44 24 41          	mov    0x41(%rsp),%al
    3276:	75 08                	jne    3280 <cbvprintf+0x22c>
			conv->length_mod = LENGTH_HH;
    3278:	83 e0 87             	and    $0xffffff87,%eax
    327b:	83 c8 08             	or     $0x8,%eax
    327e:	eb 18                	jmp    3298 <cbvprintf+0x244>
			conv->length_mod = LENGTH_H;
    3280:	83 e0 87             	and    $0xffffff87,%eax
    3283:	83 c8 10             	or     $0x10,%eax
    3286:	eb 20                	jmp    32a8 <cbvprintf+0x254>
		if (*++sp == 'l') {
    3288:	80 7d 01 6c          	cmpb   $0x6c,0x1(%rbp)
    328c:	8a 44 24 41          	mov    0x41(%rsp),%al
    3290:	75 10                	jne    32a2 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    3292:	83 e0 87             	and    $0xffffff87,%eax
    3295:	83 c8 20             	or     $0x20,%eax
    3298:	88 44 24 41          	mov    %al,0x41(%rsp)
			++sp;
    329c:	48 8d 55 02          	lea    0x2(%rbp),%rdx
    32a0:	eb 28                	jmp    32ca <cbvprintf+0x276>
			conv->length_mod = LENGTH_L;
    32a2:	83 e0 87             	and    $0xffffff87,%eax
    32a5:	83 c8 18             	or     $0x18,%eax
    32a8:	88 44 24 41          	mov    %al,0x41(%rsp)
    32ac:	eb 1c                	jmp    32ca <cbvprintf+0x276>
		conv->length_mod = LENGTH_J;
    32ae:	8a 44 24 41          	mov    0x41(%rsp),%al
    32b2:	83 e0 87             	and    $0xffffff87,%eax
    32b5:	83 c8 28             	or     $0x28,%eax
    32b8:	eb ee                	jmp    32a8 <cbvprintf+0x254>
		conv->length_mod = LENGTH_T;
    32ba:	83 e0 87             	and    $0xffffff87,%eax
    32bd:	83 c8 38             	or     $0x38,%eax
    32c0:	eb e6                	jmp    32a8 <cbvprintf+0x254>
		conv->length_mod = LENGTH_NONE;
    32c2:	80 64 24 41 87       	andb   $0x87,0x41(%rsp)
		break;
    32c7:	48 89 ea             	mov    %rbp,%rdx
	conv->specifier = *sp++;
    32ca:	8a 02                	mov    (%rdx),%al
    32cc:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
    32d0:	8a 54 24 41          	mov    0x41(%rsp),%dl
    32d4:	88 44 24 43          	mov    %al,0x43(%rsp)
	switch (conv->specifier) {
    32d8:	3c 78                	cmp    $0x78,%al
    32da:	0f 8f ab 00 00 00    	jg     338b <cbvprintf+0x337>
    32e0:	3c 57                	cmp    $0x57,%al
    32e2:	7f 11                	jg     32f5 <cbvprintf+0x2a1>
    32e4:	3c 41                	cmp    $0x41,%al
    32e6:	74 62                	je     334a <cbvprintf+0x2f6>
    32e8:	83 e8 45             	sub    $0x45,%eax
    32eb:	3c 02                	cmp    $0x2,%al
    32ed:	0f 87 98 00 00 00    	ja     338b <cbvprintf+0x337>
    32f3:	eb 55                	jmp    334a <cbvprintf+0x2f6>
    32f5:	8d 48 a8             	lea    -0x58(%rax),%ecx
    32f8:	80 f9 20             	cmp    $0x20,%cl
    32fb:	0f 87 8a 00 00 00    	ja     338b <cbvprintf+0x337>
    3301:	48 8d 3d a0 5f 00 00 	lea    0x5fa0(%rip),%rdi        # 92a8 <default_cmd+0x48>
    3308:	0f b6 c9             	movzbl %cl,%ecx
    330b:	48 63 0c 8f          	movslq (%rdi,%rcx,4),%rcx
    330f:	48 01 f9             	add    %rdi,%rcx
    3312:	3e ff e1             	notrack jmpq *%rcx
		conv->specifier_cat = SPECIFIER_SINT;
    3315:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    3319:	83 e1 f8             	and    $0xfffffff8,%ecx
    331c:	83 c9 01             	or     $0x1,%ecx
    331f:	eb 0a                	jmp    332b <cbvprintf+0x2d7>
		conv->specifier_cat = SPECIFIER_UINT;
    3321:	8a 4c 24 42          	mov    0x42(%rsp),%cl
    3325:	83 e1 f8             	and    $0xfffffff8,%ecx
    3328:	83 c9 02             	or     $0x2,%ecx
    332b:	f3 0f 1e fa          	endbr64 
		if (conv->length_mod == LENGTH_UPPER_L) {
    332f:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_UINT;
    3332:	88 4c 24 42          	mov    %cl,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    3336:	80 fa 40             	cmp    $0x40,%dl
    3339:	75 05                	jne    3340 <cbvprintf+0x2ec>
			conv->invalid = true;
    333b:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    3340:	31 c9                	xor    %ecx,%ecx
		if (conv->specifier == 'c') {
    3342:	3c 63                	cmp    $0x63,%al
    3344:	75 4c                	jne    3392 <cbvprintf+0x33e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3346:	84 d2                	test   %dl,%dl
    3348:	eb 3c                	jmp    3386 <cbvprintf+0x332>
		conv->specifier_cat = SPECIFIER_FP;
    334a:	8a 44 24 42          	mov    0x42(%rsp),%al
			unsupported = true;
    334e:	b1 01                	mov    $0x1,%cl
		conv->specifier_cat = SPECIFIER_FP;
    3350:	83 e0 f8             	and    $0xfffffff8,%eax
    3353:	83 c8 04             	or     $0x4,%eax
    3356:	88 44 24 42          	mov    %al,0x42(%rsp)
			break;
    335a:	eb 36                	jmp    3392 <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    335c:	8a 44 24 42          	mov    0x42(%rsp),%al
		if (conv->length_mod == LENGTH_UPPER_L) {
    3360:	83 e2 78             	and    $0x78,%edx
		conv->specifier_cat = SPECIFIER_PTR;
    3363:	83 e0 f8             	and    $0xfffffff8,%eax
    3366:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod == LENGTH_UPPER_L) {
    3369:	80 fa 40             	cmp    $0x40,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    336c:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod == LENGTH_UPPER_L) {
    3370:	0f 94 c1             	sete   %cl
    3373:	eb 1d                	jmp    3392 <cbvprintf+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
    3375:	8a 44 24 42          	mov    0x42(%rsp),%al
    3379:	83 e0 f8             	and    $0xfffffff8,%eax
    337c:	83 c8 03             	or     $0x3,%eax
		if (conv->length_mod != LENGTH_NONE) {
    337f:	80 e2 78             	and    $0x78,%dl
		conv->specifier_cat = SPECIFIER_PTR;
    3382:	88 44 24 42          	mov    %al,0x42(%rsp)
		if (conv->length_mod != LENGTH_NONE) {
    3386:	0f 95 c1             	setne  %cl
    3389:	eb 07                	jmp    3392 <cbvprintf+0x33e>
		conv->invalid = true;
    338b:	80 4c 24 40 01       	orb    $0x1,0x40(%rsp)
	bool unsupported = false;
    3390:	31 c9                	xor    %ecx,%ecx
	conv->unsupported |= unsupported;
    3392:	8a 54 24 40          	mov    0x40(%rsp),%dl
    3396:	89 d0                	mov    %edx,%eax
    3398:	83 e2 fd             	and    $0xfffffffd,%edx
    339b:	d0 e8                	shr    %al
    339d:	83 e0 01             	and    $0x1,%eax
    33a0:	09 c8                	or     %ecx,%eax
    33a2:	01 c0                	add    %eax,%eax
    33a4:	09 d0                	or     %edx,%eax
    33a6:	88 44 24 40          	mov    %al,0x40(%rsp)
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set with if present.
		 */
		if (conv->width_star) {
    33aa:	8a 4c 24 41          	mov    0x41(%rsp),%cl
    33ae:	f6 c1 01             	test   $0x1,%cl
    33b1:	74 3c                	je     33ef <cbvprintf+0x39b>
			width = va_arg(ap, int);
    33b3:	41 8b 14 24          	mov    (%r12),%edx
    33b7:	83 fa 2f             	cmp    $0x2f,%edx
    33ba:	77 10                	ja     33cc <cbvprintf+0x378>
    33bc:	89 d0                	mov    %edx,%eax
    33be:	83 c2 08             	add    $0x8,%edx
    33c1:	49 03 44 24 10       	add    0x10(%r12),%rax
    33c6:	41 89 14 24          	mov    %edx,(%r12)
    33ca:	eb 0e                	jmp    33da <cbvprintf+0x386>
    33cc:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    33d1:	48 8d 50 08          	lea    0x8(%rax),%rdx
    33d5:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    33da:	8b 00                	mov    (%rax),%eax
    33dc:	89 44 24 08          	mov    %eax,0x8(%rsp)

			if (width < 0) {
    33e0:	85 c0                	test   %eax,%eax
    33e2:	79 22                	jns    3406 <cbvprintf+0x3b2>
				conv->flag_dash = true;
    33e4:	80 4c 24 40 04       	orb    $0x4,0x40(%rsp)
				width = -width;
    33e9:	f7 5c 24 08          	negl   0x8(%rsp)
    33ed:	eb 17                	jmp    3406 <cbvprintf+0x3b2>
			}
		} else if (conv->width_present) {
    33ef:	80 7c 24 40 00       	cmpb   $0x0,0x40(%rsp)
		int width = -1;
    33f4:	c7 44 24 08 ff ff ff 	movl   $0xffffffff,0x8(%rsp)
    33fb:	ff 
		} else if (conv->width_present) {
    33fc:	79 08                	jns    3406 <cbvprintf+0x3b2>
			width = conv->width_value;
    33fe:	8b 44 24 44          	mov    0x44(%rsp),%eax
    3402:	89 44 24 08          	mov    %eax,0x8(%rsp)

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    3406:	f6 c1 04             	test   $0x4,%cl
    3409:	74 3a                	je     3445 <cbvprintf+0x3f1>
			int arg = va_arg(ap, int);
    340b:	41 8b 14 24          	mov    (%r12),%edx
    340f:	83 fa 2f             	cmp    $0x2f,%edx
    3412:	77 10                	ja     3424 <cbvprintf+0x3d0>
    3414:	89 d0                	mov    %edx,%eax
    3416:	83 c2 08             	add    $0x8,%edx
    3419:	49 03 44 24 10       	add    0x10(%r12),%rax
    341e:	41 89 14 24          	mov    %edx,(%r12)
    3422:	eb 0e                	jmp    3432 <cbvprintf+0x3de>
    3424:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3429:	48 8d 50 08          	lea    0x8(%rax),%rdx
    342d:	49 89 54 24 08       	mov    %rdx,0x8(%r12)
    3432:	44 8b 10             	mov    (%rax),%r10d

			if (arg < 0) {
    3435:	45 85 d2             	test   %r10d,%r10d
    3438:	79 19                	jns    3453 <cbvprintf+0x3ff>
				conv->prec_present = false;
    343a:	80 64 24 41 fd       	andb   $0xfd,0x41(%rsp)
		int precision = -1;
    343f:	41 83 ca ff          	or     $0xffffffff,%r10d
    3443:	eb 0e                	jmp    3453 <cbvprintf+0x3ff>
    3445:	41 83 ca ff          	or     $0xffffffff,%r10d
			} else {
				precision = arg;
			}
		} else if (conv->prec_present) {
    3449:	80 e1 02             	and    $0x2,%cl
    344c:	74 05                	je     3453 <cbvprintf+0x3ff>
			precision = conv->prec_value;
    344e:	44 8b 54 24 48       	mov    0x48(%rsp),%r10d
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    3453:	8a 54 24 41          	mov    0x41(%rsp),%dl
			= (enum specifier_cat_enum)conv->specifier_cat;
    3457:	8a 44 24 42          	mov    0x42(%rsp),%al
		conv->pad0_value = 0;
    345b:	48 c7 44 24 44 00 00 	movq   $0x0,0x44(%rsp)
    3462:	00 00 
			= (enum length_mod_enum)conv->length_mod;
    3464:	c0 ea 03             	shr    $0x3,%dl
		enum specifier_cat_enum specifier_cat
    3467:	83 e0 07             	and    $0x7,%eax
			= (enum length_mod_enum)conv->length_mod;
    346a:	83 e2 0f             	and    $0xf,%edx
		enum length_mod_enum length_mod
    346d:	0f b6 ca             	movzbl %dl,%ecx
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    3470:	83 f8 01             	cmp    $0x1,%eax
    3473:	0f 85 d8 00 00 00    	jne    3551 <cbvprintf+0x4fd>
			switch (length_mod) {
    3479:	41 8b 04 24          	mov    (%r12),%eax
    347d:	80 fa 05             	cmp    $0x5,%dl
    3480:	0f 84 1e 01 00 00    	je     35a4 <cbvprintf+0x550>
    3486:	77 10                	ja     3498 <cbvprintf+0x444>
    3488:	80 fa 03             	cmp    $0x3,%dl
    348b:	74 3f                	je     34cc <cbvprintf+0x478>
    348d:	80 fa 04             	cmp    $0x4,%dl
    3490:	0f 84 0e 01 00 00    	je     35a4 <cbvprintf+0x550>
    3496:	eb 0c                	jmp    34a4 <cbvprintf+0x450>
    3498:	8d 7a 0a             	lea    0xa(%rdx),%edi
    349b:	83 e7 0f             	and    $0xf,%edi
    349e:	40 80 ff 01          	cmp    $0x1,%dil
    34a2:	76 5e                	jbe    3502 <cbvprintf+0x4ae>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
    34a4:	83 f8 2f             	cmp    $0x2f,%eax
    34a7:	77 10                	ja     34b9 <cbvprintf+0x465>
    34a9:	89 c7                	mov    %eax,%edi
    34ab:	83 c0 08             	add    $0x8,%eax
    34ae:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    34b3:	41 89 04 24          	mov    %eax,(%r12)
    34b7:	eb 0e                	jmp    34c7 <cbvprintf+0x473>
    34b9:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    34be:	48 8d 47 08          	lea    0x8(%rdi),%rax
    34c2:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    34c7:	48 63 07             	movslq (%rdi),%rax
    34ca:	eb 5c                	jmp    3528 <cbvprintf+0x4d4>
				break;
			case LENGTH_L:
				if (WCHAR_IS_SIGNED
    34cc:	80 7c 24 43 63       	cmpb   $0x63,0x43(%rsp)
    34d1:	0f 85 cd 00 00 00    	jne    35a4 <cbvprintf+0x550>
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
    34d7:	83 f8 2f             	cmp    $0x2f,%eax
    34da:	77 10                	ja     34ec <cbvprintf+0x498>
    34dc:	89 c1                	mov    %eax,%ecx
    34de:	83 c0 08             	add    $0x8,%eax
    34e1:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    34e6:	41 89 04 24          	mov    %eax,(%r12)
    34ea:	eb 0e                	jmp    34fa <cbvprintf+0x4a6>
    34ec:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    34f1:	48 8d 41 08          	lea    0x8(%rcx),%rax
    34f5:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    34fa:	48 63 01             	movslq (%rcx),%rax
    34fd:	e9 b1 01 00 00       	jmpq   36b3 <cbvprintf+0x65f>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
    3502:	83 f8 2f             	cmp    $0x2f,%eax
    3505:	77 10                	ja     3517 <cbvprintf+0x4c3>
    3507:	89 c7                	mov    %eax,%edi
    3509:	83 c0 08             	add    $0x8,%eax
    350c:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    3511:	41 89 04 24          	mov    %eax,(%r12)
    3515:	eb 0e                	jmp    3525 <cbvprintf+0x4d1>
    3517:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    351c:	48 8d 47 08          	lea    0x8(%rdi),%rax
    3520:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    3525:	48 8b 07             	mov    (%rdi),%rax
				value->sint =
    3528:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    352d:	83 f9 01             	cmp    $0x1,%ecx
    3530:	75 0b                	jne    353d <cbvprintf+0x4e9>
				value->sint = (char)value->sint;
    3532:	48 0f be 44 24 30    	movsbq 0x30(%rsp),%rax
    3538:	e9 76 01 00 00       	jmpq   36b3 <cbvprintf+0x65f>
			} else if (length_mod == LENGTH_H) {
    353d:	83 f9 02             	cmp    $0x2,%ecx
    3540:	0f 85 72 01 00 00    	jne    36b8 <cbvprintf+0x664>
				value->sint = (short)value->sint;
    3546:	48 0f bf 44 24 30    	movswq 0x30(%rsp),%rax
    354c:	e9 62 01 00 00       	jmpq   36b3 <cbvprintf+0x65f>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    3551:	83 f8 02             	cmp    $0x2,%eax
    3554:	0f 85 ca 00 00 00    	jne    3624 <cbvprintf+0x5d0>
			switch (length_mod) {
    355a:	41 8b 04 24          	mov    (%r12),%eax
    355e:	80 fa 05             	cmp    $0x5,%dl
    3561:	74 41                	je     35a4 <cbvprintf+0x550>
    3563:	77 0c                	ja     3571 <cbvprintf+0x51d>
    3565:	80 fa 03             	cmp    $0x3,%dl
    3568:	74 3a                	je     35a4 <cbvprintf+0x550>
    356a:	80 fa 04             	cmp    $0x4,%dl
    356d:	74 35                	je     35a4 <cbvprintf+0x550>
    356f:	eb 0c                	jmp    357d <cbvprintf+0x529>
    3571:	8d 7a 0a             	lea    0xa(%rdx),%edi
    3574:	83 e7 0f             	and    $0xf,%edi
    3577:	40 80 ff 01          	cmp    $0x1,%dil
    357b:	76 52                	jbe    35cf <cbvprintf+0x57b>
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
    357d:	83 f8 2f             	cmp    $0x2f,%eax
    3580:	77 10                	ja     3592 <cbvprintf+0x53e>
    3582:	89 c7                	mov    %eax,%edi
    3584:	83 c0 08             	add    $0x8,%eax
    3587:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    358c:	41 89 04 24          	mov    %eax,(%r12)
    3590:	eb 0e                	jmp    35a0 <cbvprintf+0x54c>
    3592:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    3597:	48 8d 47 08          	lea    0x8(%rdi),%rax
    359b:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    35a0:	8b 07                	mov    (%rdi),%eax
    35a2:	eb 51                	jmp    35f5 <cbvprintf+0x5a1>
					(uint_value_type)va_arg(ap,
						unsigned long long);
				break;
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
    35a4:	83 f8 2f             	cmp    $0x2f,%eax
    35a7:	77 10                	ja     35b9 <cbvprintf+0x565>
    35a9:	89 c1                	mov    %eax,%ecx
    35ab:	83 c0 08             	add    $0x8,%eax
    35ae:	49 03 4c 24 10       	add    0x10(%r12),%rcx
    35b3:	41 89 04 24          	mov    %eax,(%r12)
    35b7:	eb 0e                	jmp    35c7 <cbvprintf+0x573>
    35b9:	49 8b 4c 24 08       	mov    0x8(%r12),%rcx
    35be:	48 8d 41 08          	lea    0x8(%rcx),%rax
    35c2:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    35c7:	48 8b 01             	mov    (%rcx),%rax
    35ca:	e9 e4 00 00 00       	jmpq   36b3 <cbvprintf+0x65f>
								uintmax_t);
				break;
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
    35cf:	83 f8 2f             	cmp    $0x2f,%eax
    35d2:	77 10                	ja     35e4 <cbvprintf+0x590>
    35d4:	89 c7                	mov    %eax,%edi
    35d6:	83 c0 08             	add    $0x8,%eax
    35d9:	49 03 7c 24 10       	add    0x10(%r12),%rdi
    35de:	41 89 04 24          	mov    %eax,(%r12)
    35e2:	eb 0e                	jmp    35f2 <cbvprintf+0x59e>
    35e4:	49 8b 7c 24 08       	mov    0x8(%r12),%rdi
    35e9:	48 8d 47 08          	lea    0x8(%rdi),%rax
    35ed:	49 89 44 24 08       	mov    %rax,0x8(%r12)
    35f2:	48 8b 07             	mov    (%rdi),%rax
				value->uint =
    35f5:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
				break;
			}
			if (length_mod == LENGTH_HH) {
    35fa:	83 f9 01             	cmp    $0x1,%ecx
    35fd:	75 0e                	jne    360d <cbvprintf+0x5b9>
				value->uint = (unsigned char)value->uint;
    35ff:	48 81 64 24 30 ff 00 	andq   $0xff,0x30(%rsp)
    3606:	00 00 
    3608:	e9 ab 00 00 00       	jmpq   36b8 <cbvprintf+0x664>
			} else if (length_mod == LENGTH_H) {
    360d:	83 f9 02             	cmp    $0x2,%ecx
    3610:	0f 85 a2 00 00 00    	jne    36b8 <cbvprintf+0x664>
				value->uint = (unsigned short)value->uint;
    3616:	48 81 64 24 30 ff ff 	andq   $0xffff,0x30(%rsp)
    361d:	00 00 
    361f:	e9 94 00 00 00       	jmpq   36b8 <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    3624:	83 f8 04             	cmp    $0x4,%eax
    3627:	75 5b                	jne    3684 <cbvprintf+0x630>
			if (length_mod == LENGTH_UPPER_L) {
    3629:	83 f9 08             	cmp    $0x8,%ecx
    362c:	75 1e                	jne    364c <cbvprintf+0x5f8>
				value->ldbl = va_arg(ap, long double);
    362e:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    3633:	48 83 c0 0f          	add    $0xf,%rax
    3637:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    363b:	48 8d 48 10          	lea    0x10(%rax),%rcx
    363f:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    3644:	db 28                	fldt   (%rax)
    3646:	db 7c 24 30          	fstpt  0x30(%rsp)
    364a:	eb 6c                	jmp    36b8 <cbvprintf+0x664>
			} else {
				value->dbl = va_arg(ap, double);
    364c:	41 8b 4c 24 04       	mov    0x4(%r12),%ecx
    3651:	81 f9 af 00 00 00    	cmp    $0xaf,%ecx
    3657:	77 11                	ja     366a <cbvprintf+0x616>
    3659:	89 c8                	mov    %ecx,%eax
    365b:	83 c1 10             	add    $0x10,%ecx
    365e:	49 03 44 24 10       	add    0x10(%r12),%rax
    3663:	41 89 4c 24 04       	mov    %ecx,0x4(%r12)
    3668:	eb 0e                	jmp    3678 <cbvprintf+0x624>
    366a:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    366f:	48 8d 48 08          	lea    0x8(%rax),%rcx
    3673:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    3678:	f2 0f 10 00          	movsd  (%rax),%xmm0
    367c:	f2 0f 11 44 24 30    	movsd  %xmm0,0x30(%rsp)
    3682:	eb 34                	jmp    36b8 <cbvprintf+0x664>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    3684:	83 f8 03             	cmp    $0x3,%eax
    3687:	75 2f                	jne    36b8 <cbvprintf+0x664>
			value->ptr = va_arg(ap, void *);
    3689:	41 8b 0c 24          	mov    (%r12),%ecx
    368d:	83 f9 2f             	cmp    $0x2f,%ecx
    3690:	77 10                	ja     36a2 <cbvprintf+0x64e>
    3692:	89 c8                	mov    %ecx,%eax
    3694:	83 c1 08             	add    $0x8,%ecx
    3697:	49 03 44 24 10       	add    0x10(%r12),%rax
    369c:	41 89 0c 24          	mov    %ecx,(%r12)
    36a0:	eb 0e                	jmp    36b0 <cbvprintf+0x65c>
    36a2:	49 8b 44 24 08       	mov    0x8(%r12),%rax
    36a7:	48 8d 48 08          	lea    0x8(%rax),%rcx
    36ab:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
    36b0:	48 8b 00             	mov    (%rax),%rax
    36b3:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    36b8:	8a 4c 24 40          	mov    0x40(%rsp),%cl
    36bc:	f6 c1 03             	test   $0x3,%cl
    36bf:	74 23                	je     36e4 <cbvprintf+0x690>
			OUTS(sp, fp);
    36c1:	48 89 e9             	mov    %rbp,%rcx
    36c4:	4c 89 ea             	mov    %r13,%rdx
    36c7:	4c 89 fe             	mov    %r15,%rsi
    36ca:	4c 89 f7             	mov    %r14,%rdi
    36cd:	e8 4d f8 ff ff       	callq  2f1f <outs>
    36d2:	85 c0                	test   %eax,%eax
    36d4:	0f 88 8c 03 00 00    	js     3a66 <cbvprintf+0xa12>
    36da:	48 98                	cltq   
    36dc:	48 01 c3             	add    %rax,%rbx
			continue;
    36df:	e9 78 03 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    36e4:	8a 44 24 43          	mov    0x43(%rsp),%al
    36e8:	3c 78                	cmp    $0x78,%al
    36ea:	0f 87 6c 03 00 00    	ja     3a5c <cbvprintf+0xa08>
    36f0:	3c 62                	cmp    $0x62,%al
    36f2:	77 11                	ja     3705 <cbvprintf+0x6b1>
    36f4:	3c 25                	cmp    $0x25,%al
    36f6:	74 2c                	je     3724 <cbvprintf+0x6d0>
    36f8:	3c 58                	cmp    $0x58,%al
    36fa:	0f 84 c6 00 00 00    	je     37c6 <cbvprintf+0x772>
    3700:	e9 57 03 00 00       	jmpq   3a5c <cbvprintf+0xa08>
    3705:	83 e8 63             	sub    $0x63,%eax
    3708:	3c 15                	cmp    $0x15,%al
    370a:	0f 87 4c 03 00 00    	ja     3a5c <cbvprintf+0xa08>
    3710:	48 8d 3d 15 5c 00 00 	lea    0x5c15(%rip),%rdi        # 932c <default_cmd+0xcc>
    3717:	0f b6 c0             	movzbl %al,%eax
    371a:	48 63 04 87          	movslq (%rdi,%rax,4),%rax
    371e:	48 01 f8             	add    %rdi,%rax
    3721:	3e ff e0             	notrack jmpq *%rax
		case '%':
			OUTC('%');
    3724:	4c 89 fe             	mov    %r15,%rsi
    3727:	bf 25 00 00 00       	mov    $0x25,%edi
    372c:	31 c0                	xor    %eax,%eax
    372e:	41 ff d6             	callq  *%r14
    3731:	85 c0                	test   %eax,%eax
    3733:	0f 88 2d 03 00 00    	js     3a66 <cbvprintf+0xa12>
    3739:	48 ff c3             	inc    %rbx
			break;
    373c:	e9 1b 03 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		case 's': {
			bps = (const char *)value->ptr;
    3741:	4c 8b 6c 24 30       	mov    0x30(%rsp),%r13

			size_t len;

			if (precision >= 0) {
    3746:	45 85 d2             	test   %r10d,%r10d
    3749:	78 0d                	js     3758 <cbvprintf+0x704>
				len = strnlen(bps, precision);
    374b:	49 63 f2             	movslq %r10d,%rsi
    374e:	4c 89 ef             	mov    %r13,%rdi
    3751:	e8 9a ed ff ff       	callq  24f0 <strnlen@plt>
    3756:	eb 14                	jmp    376c <cbvprintf+0x718>
			} else {
				len = strlen(bps);
    3758:	31 c0                	xor    %eax,%eax
    375a:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    375e:	4c 89 ef             	mov    %r13,%rdi
    3761:	f2 ae                	repnz scas %es:(%rdi),%al
    3763:	48 89 c8             	mov    %rcx,%rax
    3766:	48 f7 d0             	not    %rax
    3769:	48 ff c8             	dec    %rax
			}

			bpe = bps + len;
    376c:	4c 01 e8             	add    %r13,%rax
		char sign = 0;
    376f:	45 31 c9             	xor    %r9d,%r9d
			bpe = bps + len;
    3772:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			precision = -1;

			break;
    3777:	e9 55 01 00 00       	jmpq   38d1 <cbvprintf+0x87d>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    377c:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			bpe = buf + 1;
			break;
    3781:	45 31 c9             	xor    %r9d,%r9d
			bps = buf;
    3784:	4c 8d 6c 24 52       	lea    0x52(%rsp),%r13
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    3789:	88 44 24 52          	mov    %al,0x52(%rsp)
			bpe = buf + 1;
    378d:	48 8d 44 24 53       	lea    0x53(%rsp),%rax
    3792:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			break;
    3797:	e9 3e 01 00 00       	jmpq   38da <cbvprintf+0x886>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
				sign = '+';
    379c:	41 b1 2b             	mov    $0x2b,%r9b
			if (conv->flag_plus) {
    379f:	f6 c1 08             	test   $0x8,%cl
    37a2:	75 0b                	jne    37af <cbvprintf+0x75b>
			} else if (conv->flag_space) {
				sign = ' ';
    37a4:	80 e1 10             	and    $0x10,%cl
    37a7:	41 0f 95 c1          	setne  %r9b
    37ab:	41 c1 e1 05          	shl    $0x5,%r9d

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    37af:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
			if (sint < 0) {
    37b4:	48 85 c0             	test   %rax,%rax
    37b7:	79 10                	jns    37c9 <cbvprintf+0x775>
				sign = '-';
				value->uint = (uint_value_type)-sint;
    37b9:	48 f7 d8             	neg    %rax
				sign = '-';
    37bc:	41 b1 2d             	mov    $0x2d,%r9b
				value->uint = (uint_value_type)-sint;
    37bf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    37c4:	eb 03                	jmp    37c9 <cbvprintf+0x775>
		switch (conv->specifier) {
    37c6:	45 31 c9             	xor    %r9d,%r9d
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    37c9:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi
    37ce:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    37d3:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    37d8:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    37dd:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    37e2:	e8 c0 f7 ff ff       	callq  2fa7 <encode_uint>
    37e7:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
    37ec:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    37f1:	49 89 c5             	mov    %rax,%r13
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    37f4:	45 85 d2             	test   %r10d,%r10d
    37f7:	48 8d 44 24 68       	lea    0x68(%rsp),%rax
    37fc:	0f 88 ca 00 00 00    	js     38cc <cbvprintf+0x878>
				size_t len = bpe - bps;
    3802:	48 89 c1             	mov    %rax,%rcx
				 * conversions with precision.
				 */
				conv->flag_zero = false;

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    3805:	49 63 d2             	movslq %r10d,%rdx
				conv->flag_zero = false;
    3808:	80 64 24 40 bf       	andb   $0xbf,0x40(%rsp)
				size_t len = bpe - bps;
    380d:	4c 29 e9             	sub    %r13,%rcx
		const char *bpe = buf + sizeof(buf);
    3810:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
				if (len < (size_t)precision) {
    3815:	48 39 ca             	cmp    %rcx,%rdx
    3818:	0f 86 b3 00 00 00    	jbe    38d1 <cbvprintf+0x87d>
					conv->pad0_value = precision - (int)len;
    381e:	41 29 ca             	sub    %ecx,%r10d
    3821:	44 89 54 24 44       	mov    %r10d,0x44(%rsp)
    3826:	e9 a6 00 00 00       	jmpq   38d1 <cbvprintf+0x87d>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    382b:	48 8b 7c 24 30       	mov    0x30(%rsp),%rdi

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    3830:	48 8d 05 24 5e 00 00 	lea    0x5e24(%rip),%rax        # 965b <default_cmd+0x3fb>
    3837:	45 31 c9             	xor    %r9d,%r9d
    383a:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			bps = "(nil)";
    383f:	4c 8d 68 fb          	lea    -0x5(%rax),%r13
			if (value->ptr != NULL) {
    3843:	48 85 ff             	test   %rdi,%rdi
    3846:	0f 84 8e 00 00 00    	je     38da <cbvprintf+0x886>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    384c:	48 8d 54 24 52       	lea    0x52(%rsp),%rdx
    3851:	48 8d 4c 24 68       	lea    0x68(%rsp),%rcx
    3856:	44 88 4c 24 18       	mov    %r9b,0x18(%rsp)
    385b:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
    3860:	e8 42 f7 ff ff       	callq  2fa7 <encode_uint>
				goto prec_int_pad0;
    3865:	44 8b 54 24 10       	mov    0x10(%rsp),%r10d
    386a:	44 8a 4c 24 18       	mov    0x18(%rsp),%r9b
				bps = encode_uint((uintptr_t)value->ptr, conv,
    386f:	49 89 c5             	mov    %rax,%r13
				conv->altform_0c = true;
    3872:	66 8b 44 24 42       	mov    0x42(%rsp),%ax
    3877:	66 25 ef 00          	and    $0xef,%ax
    387b:	66 0d 10 78          	or     $0x7810,%ax
    387f:	66 89 44 24 42       	mov    %ax,0x42(%rsp)
				goto prec_int_pad0;
    3884:	e9 6b ff ff ff       	jmpq   37f4 <cbvprintf+0x7a0>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    3889:	48 8b 4c 24 30       	mov    0x30(%rsp),%rcx
    388e:	48 63 c3             	movslq %ebx,%rax
    3891:	80 fa 07             	cmp    $0x7,%dl
    3894:	0f 87 c2 01 00 00    	ja     3a5c <cbvprintf+0xa08>
    389a:	48 8d 35 e3 5a 00 00 	lea    0x5ae3(%rip),%rsi        # 9384 <default_cmd+0x124>
    38a1:	0f b6 d2             	movzbl %dl,%edx
    38a4:	48 63 14 96          	movslq (%rsi,%rdx,4),%rdx
    38a8:	48 01 f2             	add    %rsi,%rdx
    38ab:	3e ff e2             	notrack jmpq *%rdx
		*(int *)dp = count;
    38ae:	89 01                	mov    %eax,(%rcx)
		break;
    38b0:	e9 a7 01 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		*(signed char *)dp = (signed char)count;
    38b5:	88 19                	mov    %bl,(%rcx)
		break;
    38b7:	e9 a0 01 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		*(short *)dp = (short)count;
    38bc:	66 89 19             	mov    %bx,(%rcx)
		break;
    38bf:	e9 98 01 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    38c4:	48 89 01             	mov    %rax,(%rcx)
		break;
    38c7:	e9 90 01 00 00       	jmpq   3a5c <cbvprintf+0xa08>
		const char *bpe = buf + sizeof(buf);
    38cc:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    38d1:	4d 85 ed             	test   %r13,%r13
    38d4:	0f 84 82 01 00 00    	je     3a5c <cbvprintf+0xa08>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    38da:	48 8b 44 24 10       	mov    0x10(%rsp),%rax

		if (sign != 0) {
			nj_len += 1U;
		}

		if (conv->altform_0c) {
    38df:	8a 4c 24 42          	mov    0x42(%rsp),%cl
		size_t nj_len = (bpe - bps);
    38e3:	4c 29 e8             	sub    %r13,%rax
			nj_len += 1U;
    38e6:	41 80 f9 01          	cmp    $0x1,%r9b
    38ea:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		if (conv->altform_0c) {
    38ee:	f6 c1 10             	test   $0x10,%cl
    38f1:	74 06                	je     38f9 <cbvprintf+0x8a5>
			nj_len += 2U;
    38f3:	48 83 c0 02          	add    $0x2,%rax
    38f7:	eb 0c                	jmp    3905 <cbvprintf+0x8b1>
		} else if (conv->altform_0) {
    38f9:	89 ca                	mov    %ecx,%edx
    38fb:	83 e2 08             	and    $0x8,%edx
			nj_len += 1U;
    38fe:	80 fa 01             	cmp    $0x1,%dl
    3901:	48 83 d8 ff          	sbb    $0xffffffffffffffff,%rax
		}

		nj_len += conv->pad0_value;
    3905:	48 63 54 24 44       	movslq 0x44(%rsp),%rdx
    390a:	48 01 d0             	add    %rdx,%rax
		if (conv->pad_fp) {
    390d:	80 e1 40             	and    $0x40,%cl
    3910:	74 08                	je     391a <cbvprintf+0x8c6>
			nj_len += conv->pad0_pre_exp;
    3912:	48 63 54 24 48       	movslq 0x48(%rsp),%rdx
    3917:	48 01 d0             	add    %rdx,%rax
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    391a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%rsp)
    391f:	7e 73                	jle    3994 <cbvprintf+0x940>
			width -= (int)nj_len;
    3921:	29 44 24 08          	sub    %eax,0x8(%rsp)

			if (!conv->flag_dash) {
    3925:	8a 44 24 40          	mov    0x40(%rsp),%al
    3929:	a8 04                	test   $0x4,%al
    392b:	75 67                	jne    3994 <cbvprintf+0x940>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    392d:	a8 40                	test   $0x40,%al
    392f:	74 21                	je     3952 <cbvprintf+0x8fe>
					if (sign != 0) {
    3931:	45 84 c9             	test   %r9b,%r9b
    3934:	74 20                	je     3956 <cbvprintf+0x902>
						OUTC(sign);
    3936:	31 c0                	xor    %eax,%eax
    3938:	41 0f be f9          	movsbl %r9b,%edi
    393c:	4c 89 fe             	mov    %r15,%rsi
    393f:	41 ff d6             	callq  *%r14
    3942:	85 c0                	test   %eax,%eax
    3944:	0f 88 1c 01 00 00    	js     3a66 <cbvprintf+0xa12>
    394a:	48 ff c3             	inc    %rbx
						sign = 0;
    394d:	45 31 c9             	xor    %r9d,%r9d
    3950:	eb 04                	jmp    3956 <cbvprintf+0x902>
				char pad = ' ';
    3952:	b0 20                	mov    $0x20,%al
    3954:	eb 02                	jmp    3958 <cbvprintf+0x904>
					}
					pad = '0';
    3956:	b0 30                	mov    $0x30,%al
    3958:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
				}

				while (width-- > 0) {
					OUTC(pad);
    395c:	0f be d0             	movsbl %al,%edx
				while (width-- > 0) {
    395f:	ff 4c 24 08          	decl   0x8(%rsp)
    3963:	85 c9                	test   %ecx,%ecx
    3965:	7e 2d                	jle    3994 <cbvprintf+0x940>
					OUTC(pad);
    3967:	31 c0                	xor    %eax,%eax
    3969:	44 88 4c 24 1f       	mov    %r9b,0x1f(%rsp)
    396e:	4c 89 fe             	mov    %r15,%rsi
    3971:	89 d7                	mov    %edx,%edi
    3973:	89 54 24 18          	mov    %edx,0x18(%rsp)
    3977:	41 ff d6             	callq  *%r14
    397a:	85 c0                	test   %eax,%eax
    397c:	0f 88 e4 00 00 00    	js     3a66 <cbvprintf+0xa12>
				while (width-- > 0) {
    3982:	8b 4c 24 08          	mov    0x8(%rsp),%ecx
    3986:	8b 54 24 18          	mov    0x18(%rsp),%edx
					OUTC(pad);
    398a:	48 ff c3             	inc    %rbx
    398d:	44 8a 4c 24 1f       	mov    0x1f(%rsp),%r9b
    3992:	eb cb                	jmp    395f <cbvprintf+0x90b>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    3994:	45 84 c9             	test   %r9b,%r9b
    3997:	74 17                	je     39b0 <cbvprintf+0x95c>
			OUTC(sign);
    3999:	31 c0                	xor    %eax,%eax
    399b:	41 0f be f9          	movsbl %r9b,%edi
    399f:	4c 89 fe             	mov    %r15,%rsi
    39a2:	41 ff d6             	callq  *%r14
    39a5:	85 c0                	test   %eax,%eax
    39a7:	0f 88 b9 00 00 00    	js     3a66 <cbvprintf+0xa12>
    39ad:	48 ff c3             	inc    %rbx
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    39b0:	8a 44 24 42          	mov    0x42(%rsp),%al
    39b4:	a8 10                	test   $0x10,%al
    39b6:	75 04                	jne    39bc <cbvprintf+0x968>
    39b8:	a8 08                	test   $0x8,%al
    39ba:	74 18                	je     39d4 <cbvprintf+0x980>
				OUTC('0');
    39bc:	31 c0                	xor    %eax,%eax
    39be:	4c 89 fe             	mov    %r15,%rsi
    39c1:	bf 30 00 00 00       	mov    $0x30,%edi
    39c6:	41 ff d6             	callq  *%r14
    39c9:	85 c0                	test   %eax,%eax
    39cb:	0f 88 95 00 00 00    	js     3a66 <cbvprintf+0xa12>
    39d1:	48 ff c3             	inc    %rbx
			}

			if (conv->altform_0c) {
    39d4:	f6 44 24 42 10       	testb  $0x10,0x42(%rsp)
    39d9:	74 14                	je     39ef <cbvprintf+0x99b>
				OUTC(conv->specifier);
    39db:	31 c0                	xor    %eax,%eax
    39dd:	0f b6 7c 24 43       	movzbl 0x43(%rsp),%edi
    39e2:	4c 89 fe             	mov    %r15,%rsi
    39e5:	41 ff d6             	callq  *%r14
    39e8:	85 c0                	test   %eax,%eax
    39ea:	78 7a                	js     3a66 <cbvprintf+0xa12>
    39ec:	48 ff c3             	inc    %rbx
			}

			pad_len = conv->pad0_value;
			while (pad_len-- > 0) {
    39ef:	8b 44 24 44          	mov    0x44(%rsp),%eax
    39f3:	01 d8                	add    %ebx,%eax
    39f5:	89 44 24 18          	mov    %eax,0x18(%rsp)
    39f9:	8b 44 24 18          	mov    0x18(%rsp),%eax
    39fd:	29 d8                	sub    %ebx,%eax
    39ff:	85 c0                	test   %eax,%eax
    3a01:	7e 16                	jle    3a19 <cbvprintf+0x9c5>
				OUTC('0');
    3a03:	31 c0                	xor    %eax,%eax
    3a05:	4c 89 fe             	mov    %r15,%rsi
    3a08:	bf 30 00 00 00       	mov    $0x30,%edi
    3a0d:	41 ff d6             	callq  *%r14
    3a10:	85 c0                	test   %eax,%eax
    3a12:	78 52                	js     3a66 <cbvprintf+0xa12>
    3a14:	48 ff c3             	inc    %rbx
    3a17:	eb e0                	jmp    39f9 <cbvprintf+0x9a5>
			}

			OUTS(bps, bpe);
    3a19:	48 8b 4c 24 10       	mov    0x10(%rsp),%rcx
    3a1e:	4c 89 ea             	mov    %r13,%rdx
    3a21:	4c 89 fe             	mov    %r15,%rsi
    3a24:	4c 89 f7             	mov    %r14,%rdi
    3a27:	e8 f3 f4 ff ff       	callq  2f1f <outs>
    3a2c:	85 c0                	test   %eax,%eax
    3a2e:	78 36                	js     3a66 <cbvprintf+0xa12>
    3a30:	44 8b 6c 24 08       	mov    0x8(%rsp),%r13d
    3a35:	48 98                	cltq   
    3a37:	48 01 c3             	add    %rax,%rbx
    3a3a:	41 01 dd             	add    %ebx,%r13d
		}

		/* Finish left justification */
		while (width > 0) {
    3a3d:	44 89 e8             	mov    %r13d,%eax
    3a40:	29 d8                	sub    %ebx,%eax
    3a42:	85 c0                	test   %eax,%eax
    3a44:	7e 16                	jle    3a5c <cbvprintf+0xa08>
			OUTC(' ');
    3a46:	31 c0                	xor    %eax,%eax
    3a48:	4c 89 fe             	mov    %r15,%rsi
    3a4b:	bf 20 00 00 00       	mov    $0x20,%edi
    3a50:	41 ff d6             	callq  *%r14
    3a53:	85 c0                	test   %eax,%eax
    3a55:	78 0f                	js     3a66 <cbvprintf+0xa12>
    3a57:	48 ff c3             	inc    %rbx
			--width;
    3a5a:	eb e1                	jmp    3a3d <cbvprintf+0x9e9>
			OUTS(bps, bpe);
    3a5c:	49 89 ed             	mov    %rbp,%r13
    3a5f:	e9 20 f6 ff ff       	jmpq   3084 <cbvprintf+0x30>
		}
	}

	return count;
    3a64:	89 d8                	mov    %ebx,%eax
#undef OUTS
#undef OUTC
}
    3a66:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
    3a6b:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
    3a72:	00 00 
    3a74:	74 05                	je     3a7b <cbvprintf+0xa27>
    3a76:	e8 35 ea ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3a7b:	48 83 c4 78          	add    $0x78,%rsp
    3a7f:	5b                   	pop    %rbx
    3a80:	5d                   	pop    %rbp
    3a81:	41 5c                	pop    %r12
    3a83:	41 5d                	pop    %r13
    3a85:	41 5e                	pop    %r14
    3a87:	41 5f                	pop    %r15
    3a89:	c3                   	retq   

0000000000003a8a <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    3a8a:	f3 0f 1e fa          	endbr64 
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_KERNEL_BIN_NAME, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3a8e:	c3                   	retq   

0000000000003a8f <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3a8f:	f3 0f 1e fa          	endbr64 
    3a93:	50                   	push   %rax
    3a94:	48 8d 3d 72 5a 00 00 	lea    0x5a72(%rip),%rdi        # 950d <default_cmd+0x2ad>
    3a9b:	e8 0b 3d 00 00       	callq  77ab <z_impl_device_get_binding>
	__printk_hook_install(console_out);
    3aa0:	48 8d 3d 10 00 00 00 	lea    0x10(%rip),%rdi        # 3ab7 <console_out>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3aa7:	48 89 05 d2 b9 00 00 	mov    %rax,0xb9d2(%rip)        # f480 <uart_console_dev>
	__printk_hook_install(console_out);
    3aae:	e8 d7 f1 ff ff       	callq  2c8a <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    3ab3:	31 c0                	xor    %eax,%eax
    3ab5:	5a                   	pop    %rdx
    3ab6:	c3                   	retq   

0000000000003ab7 <console_out>:
{
    3ab7:	f3 0f 1e fa          	endbr64 
    3abb:	41 54                	push   %r12
    3abd:	41 89 fc             	mov    %edi,%r12d
	if ('\n' == c) {
    3ac0:	83 ff 0a             	cmp    $0xa,%edi
    3ac3:	75 13                	jne    3ad8 <console_out+0x21>
    3ac5:	48 8b 3d b4 b9 00 00 	mov    0xb9b4(%rip),%rdi        # f480 <uart_console_dev>
	api->poll_out(dev, out_char);
    3acc:	48 8b 47 10          	mov    0x10(%rdi),%rax
    3ad0:	be 0d 00 00 00       	mov    $0xd,%esi
    3ad5:	ff 50 08             	callq  *0x8(%rax)
	uart_poll_out(uart_console_dev, c);
    3ad8:	48 8b 3d a1 b9 00 00 	mov    0xb9a1(%rip),%rdi        # f480 <uart_console_dev>
    3adf:	48 8b 47 10          	mov    0x10(%rdi),%rax
    3ae3:	41 0f b6 f4          	movzbl %r12b,%esi
    3ae7:	ff 50 08             	callq  *0x8(%rax)
}
    3aea:	44 89 e0             	mov    %r12d,%eax
    3aed:	41 5c                	pop    %r12
    3aef:	c3                   	retq   

0000000000003af0 <native_posix_console_init>:
	}
}
#endif /* CONFIG_NATIVE_POSIX_STDIN_CONSOLE */

static int native_posix_console_init(const struct device *arg)
{
    3af0:	f3 0f 1e fa          	endbr64 
    3af4:	50                   	push   %rax
	setvbuf(stdout, NULL, _IOLBF, 512);
    3af5:	48 8b 05 ac 84 00 00 	mov    0x84ac(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    3afc:	b9 00 02 00 00       	mov    $0x200,%ecx
    3b01:	31 f6                	xor    %esi,%esi
    3b03:	ba 01 00 00 00       	mov    $0x1,%edx
    3b08:	48 8b 38             	mov    (%rax),%rdi
    3b0b:	e8 d0 ea ff ff       	callq  25e0 <setvbuf@plt>
	setvbuf(stderr, NULL, _IOLBF, 512);
    3b10:	48 8b 05 d9 84 00 00 	mov    0x84d9(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    3b17:	ba 01 00 00 00       	mov    $0x1,%edx
    3b1c:	31 f6                	xor    %esi,%esi
    3b1e:	b9 00 02 00 00       	mov    $0x200,%ecx
    3b23:	48 8b 38             	mov    (%rax),%rdi
    3b26:	e8 b5 ea ff ff       	callq  25e0 <setvbuf@plt>
	__printk_hook_install(putchar);
    3b2b:	48 8b 3d 66 84 00 00 	mov    0x8466(%rip),%rdi        # bf98 <putchar@GLIBC_2.2.5>
    3b32:	e8 53 f1 ff ff       	callq  2c8a <__printk_hook_install>
#if defined(CONFIG_NATIVE_POSIX_STDOUT_CONSOLE)
	native_posix_stdout_init();
#endif

	return 0;
}
    3b37:	31 c0                	xor    %eax,%eax
    3b39:	5a                   	pop    %rdx
    3b3a:	c3                   	retq   

0000000000003b3b <np_timer_isr>:
/**
 * Interrupt handler for the timer interrupt
 * Announce to the kernel that a number of ticks have passed
 */
static void np_timer_isr(const void *arg)
{
    3b3b:	f3 0f 1e fa          	endbr64 
    3b3f:	50                   	push   %rax
	ARG_UNUSED(arg);

	uint64_t now = hwm_get_time();
    3b40:	e8 75 1e 00 00       	callq  59ba <hwm_get_time>
	int32_t elapsed_ticks = (now - last_tick_time)/tick_period;
    3b45:	48 8b 35 3c b9 00 00 	mov    0xb93c(%rip),%rsi        # f488 <last_tick_time>
    3b4c:	48 8b 0d 3d b9 00 00 	mov    0xb93d(%rip),%rcx        # f490 <tick_period>
    3b53:	31 d2                	xor    %edx,%edx
    3b55:	48 29 f0             	sub    %rsi,%rax
    3b58:	48 f7 f1             	div    %rcx

	last_tick_time += elapsed_ticks*tick_period;
    3b5b:	48 63 d0             	movslq %eax,%rdx
	sys_clock_announce(elapsed_ticks);
    3b5e:	89 c7                	mov    %eax,%edi
	last_tick_time += elapsed_ticks*tick_period;
    3b60:	48 0f af d1          	imul   %rcx,%rdx
    3b64:	48 01 f2             	add    %rsi,%rdx
    3b67:	48 89 15 1a b9 00 00 	mov    %rdx,0xb91a(%rip)        # f488 <last_tick_time>
}
    3b6e:	5a                   	pop    %rdx
	sys_clock_announce(elapsed_ticks);
    3b6f:	e9 16 4d 00 00       	jmpq   888a <sys_clock_announce>

0000000000003b74 <sys_clock_driver_init>:
 * @brief Initialize system timer driver
 *
 * Enable the hw timer, setting its tick period, and setup its interrupt
 */
int sys_clock_driver_init(const struct device *dev)
{
    3b74:	f3 0f 1e fa          	endbr64 
    3b78:	50                   	push   %rax
	ARG_UNUSED(dev);

	tick_period = 1000000ul / CONFIG_SYS_CLOCK_TICKS_PER_SEC;
    3b79:	48 c7 05 0c b9 00 00 	movq   $0x2710,0xb90c(%rip)        # f490 <tick_period>
    3b80:	10 27 00 00 

	last_tick_time = hwm_get_time();
    3b84:	e8 31 1e 00 00       	callq  59ba <hwm_get_time>
	hwtimer_enable(tick_period);
    3b89:	48 8b 3d 00 b9 00 00 	mov    0xb900(%rip),%rdi        # f490 <tick_period>
	last_tick_time = hwm_get_time();
    3b90:	48 89 05 f1 b8 00 00 	mov    %rax,0xb8f1(%rip)        # f488 <last_tick_time>
	hwtimer_enable(tick_period);
    3b97:	e8 bf 20 00 00       	callq  5c5b <hwtimer_enable>

	IRQ_CONNECT(TIMER_TICK_IRQ, 1, np_timer_isr, 0, 0);
    3b9c:	31 c9                	xor    %ecx,%ecx
    3b9e:	48 8d 15 96 ff ff ff 	lea    -0x6a(%rip),%rdx        # 3b3b <np_timer_isr>
    3ba5:	31 f6                	xor    %esi,%esi
    3ba7:	31 ff                	xor    %edi,%edi
    3ba9:	e8 97 24 00 00       	callq  6045 <posix_isr_declare>
    3bae:	31 d2                	xor    %edx,%edx
    3bb0:	be 01 00 00 00       	mov    $0x1,%esi
    3bb5:	31 ff                	xor    %edi,%edi
    3bb7:	e8 ae 24 00 00       	callq  606a <posix_irq_priority_set>
	irq_enable(TIMER_TICK_IRQ);
    3bbc:	31 ff                	xor    %edi,%edi
    3bbe:	e8 00 14 00 00       	callq  4fc3 <arch_irq_enable>

	return 0;
}
    3bc3:	31 c0                	xor    %eax,%eax
    3bc5:	5a                   	pop    %rdx
    3bc6:	c3                   	retq   

0000000000003bc7 <sys_clock_set_timeout>:
 * @param ticks Timeout in tick units
 * @param idle Hint to the driver that the system is about to enter
 *        the idle state immediately after setting the timeout
 */
void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    3bc7:	f3 0f 1e fa          	endbr64 

	/* Note that we treat INT_MAX literally as anyhow the maximum amount of
	 * ticks we can report with sys_clock_announce() is INT_MAX
	 */
	if (ticks == K_TICKS_FOREVER) {
		silent_ticks = INT64_MAX;
    3bcb:	49 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%r8
    3bd2:	ff ff 7f 
	if (ticks == K_TICKS_FOREVER) {
    3bd5:	83 ff ff             	cmp    $0xffffffff,%edi
    3bd8:	74 0c                	je     3be6 <sys_clock_set_timeout+0x1f>
	} else if (ticks > 0) {
		silent_ticks = ticks - 1;
	} else {
		silent_ticks = 0;
    3bda:	45 31 c0             	xor    %r8d,%r8d
	} else if (ticks > 0) {
    3bdd:	85 ff                	test   %edi,%edi
    3bdf:	7e 05                	jle    3be6 <sys_clock_set_timeout+0x1f>
		silent_ticks = ticks - 1;
    3be1:	ff cf                	dec    %edi
    3be3:	4c 63 c7             	movslq %edi,%r8
	}
	hwtimer_set_silent_ticks(silent_ticks);
    3be6:	4c 89 c7             	mov    %r8,%rdi
    3be9:	e9 1f 22 00 00       	jmpq   5e0d <hwtimer_set_silent_ticks>

0000000000003bee <sys_clock_elapsed>:
 * last call to sys_clock_announce() was made.  The kernel will call
 * this with appropriate locking, the driver needs only provide an
 * instantaneous answer.
 */
uint32_t sys_clock_elapsed(void)
{
    3bee:	f3 0f 1e fa          	endbr64 
    3bf2:	50                   	push   %rax
	return (hwm_get_time() - last_tick_time)/tick_period;
    3bf3:	e8 c2 1d 00 00       	callq  59ba <hwm_get_time>
    3bf8:	31 d2                	xor    %edx,%edx
    3bfa:	48 2b 05 87 b8 00 00 	sub    0xb887(%rip),%rax        # f488 <last_tick_time>
    3c01:	48 f7 35 88 b8 00 00 	divq   0xb888(%rip)        # f490 <tick_period>
}
    3c08:	5a                   	pop    %rdx
    3c09:	c3                   	retq   

0000000000003c0a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
    3c0a:	f3 0f 1e fa          	endbr64 
    3c0e:	41 89 f1             	mov    %esi,%r9d
    3c11:	89 c8                	mov    %ecx,%eax
    3c13:	48 89 d6             	mov    %rdx,%rsi
	if (from_len <= to_len) {
    3c16:	44 39 c9             	cmp    %r9d,%ecx
    3c19:	77 05                	ja     3c20 <_copy+0x16>
		(void)memcpy(to, from, from_len);
    3c1b:	89 c9                	mov    %ecx,%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    3c1d:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		return from_len;
    3c1f:	c3                   	retq   
	} else {
		return TC_CRYPTO_FAIL;
    3c20:	31 c0                	xor    %eax,%eax
	}
}
    3c22:	c3                   	retq   

0000000000003c23 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
    3c23:	f3 0f 1e fa          	endbr64 
	(void)memset(to, val, len);
    3c27:	89 d1                	mov    %edx,%ecx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    3c29:	89 f0                	mov    %esi,%eax
    3c2b:	f3 aa                	rep stos %al,%es:(%rdi)
}
    3c2d:	c3                   	retq   

0000000000003c2e <_double_byte>:

/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
    3c2e:	f3 0f 1e fa          	endbr64 
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    3c32:	89 f8                	mov    %edi,%eax
    3c34:	b2 1b                	mov    $0x1b,%dl
    3c36:	01 ff                	add    %edi,%edi
    3c38:	c0 e8 07             	shr    $0x7,%al
    3c3b:	0f af c2             	imul   %edx,%eax
    3c3e:	31 f8                	xor    %edi,%eax
}
    3c40:	c3                   	retq   

0000000000003c41 <_compare>:

int _compare(const uint8_t *a, const uint8_t *b, size_t size)
{
    3c41:	f3 0f 1e fa          	endbr64 
	const uint8_t *tempa = a;
	const uint8_t *tempb = b;
	uint8_t result = 0;

	for (unsigned int i = 0; i < size; i++) {
    3c45:	45 31 c0             	xor    %r8d,%r8d
	uint8_t result = 0;
    3c48:	31 c0                	xor    %eax,%eax
	for (unsigned int i = 0; i < size; i++) {
    3c4a:	44 89 c1             	mov    %r8d,%ecx
    3c4d:	48 39 d1             	cmp    %rdx,%rcx
    3c50:	73 12                	jae    3c64 <_compare+0x23>
		result |= tempa[i] ^ tempb[i];
    3c52:	44 8a 0c 0f          	mov    (%rdi,%rcx,1),%r9b
    3c56:	44 32 0c 0e          	xor    (%rsi,%rcx,1),%r9b
	for (unsigned int i = 0; i < size; i++) {
    3c5a:	41 ff c0             	inc    %r8d
		result |= tempa[i] ^ tempb[i];
    3c5d:	44 89 c9             	mov    %r9d,%ecx
    3c60:	09 c8                	or     %ecx,%eax
	for (unsigned int i = 0; i < size; i++) {
    3c62:	eb e6                	jmp    3c4a <_compare+0x9>
	}
	return result;
    3c64:	0f b6 c0             	movzbl %al,%eax
}
    3c67:	c3                   	retq   

0000000000003c68 <add_round_key>:
	(void)_copy(s, sizeof(t), t, sizeof(t));
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3c68:	8a 46 03             	mov    0x3(%rsi),%al
    3c6b:	30 07                	xor    %al,(%rdi)
    3c6d:	8a 46 02             	mov    0x2(%rsi),%al
    3c70:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    3c73:	8a 46 01             	mov    0x1(%rsi),%al
    3c76:	30 47 02             	xor    %al,0x2(%rdi)
    3c79:	8b 06                	mov    (%rsi),%eax
    3c7b:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3c7e:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    3c82:	30 47 04             	xor    %al,0x4(%rdi)
    3c85:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    3c89:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3c8c:	8a 46 05             	mov    0x5(%rsi),%al
    3c8f:	30 47 06             	xor    %al,0x6(%rdi)
    3c92:	8b 46 04             	mov    0x4(%rsi),%eax
    3c95:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3c98:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    3c9c:	30 47 08             	xor    %al,0x8(%rdi)
    3c9f:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    3ca3:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3ca6:	8a 46 09             	mov    0x9(%rsi),%al
    3ca9:	30 47 0a             	xor    %al,0xa(%rdi)
    3cac:	8b 46 08             	mov    0x8(%rsi),%eax
    3caf:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3cb2:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    3cb6:	30 47 0c             	xor    %al,0xc(%rdi)
    3cb9:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    3cbd:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3cc0:	8a 46 0d             	mov    0xd(%rsi),%al
    3cc3:	30 47 0e             	xor    %al,0xe(%rdi)
    3cc6:	8b 46 0c             	mov    0xc(%rsi),%eax
    3cc9:	30 47 0f             	xor    %al,0xf(%rdi)
}
    3ccc:	c3                   	retq   

0000000000003ccd <inv_shift_rows>:
 * This inv_shift_rows also implements the matrix flip required for
 * inv_mix_columns, but performs it here to reduce the number of memory
 * operations.
 */
static inline void inv_shift_rows(uint8_t *s)
{
    3ccd:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3cd1:	b9 10 00 00 00       	mov    $0x10,%ecx
    3cd6:	be 10 00 00 00       	mov    $0x10,%esi
{
    3cdb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    3ce2:	00 00 
    3ce4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    3ce9:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3ceb:	8a 07                	mov    (%rdi),%al
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3ced:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
    3cf2:	88 44 24 08          	mov    %al,0x8(%rsp)
    3cf6:	8a 47 0d             	mov    0xd(%rdi),%al
    3cf9:	88 44 24 09          	mov    %al,0x9(%rsp)
    3cfd:	8a 47 0a             	mov    0xa(%rdi),%al
    3d00:	88 44 24 0a          	mov    %al,0xa(%rsp)
    3d04:	8a 47 07             	mov    0x7(%rdi),%al
    3d07:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
    3d0b:	8a 47 04             	mov    0x4(%rdi),%al
    3d0e:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3d12:	8a 47 01             	mov    0x1(%rdi),%al
    3d15:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3d19:	8a 47 0e             	mov    0xe(%rdi),%al
    3d1c:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3d20:	8a 47 0b             	mov    0xb(%rdi),%al
    3d23:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
    3d27:	8a 47 08             	mov    0x8(%rdi),%al
    3d2a:	88 44 24 10          	mov    %al,0x10(%rsp)
    3d2e:	8a 47 05             	mov    0x5(%rdi),%al
    3d31:	88 44 24 11          	mov    %al,0x11(%rsp)
    3d35:	8a 47 02             	mov    0x2(%rdi),%al
    3d38:	88 44 24 12          	mov    %al,0x12(%rsp)
    3d3c:	8a 47 0f             	mov    0xf(%rdi),%al
    3d3f:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
    3d43:	8a 47 0c             	mov    0xc(%rdi),%al
    3d46:	88 44 24 14          	mov    %al,0x14(%rsp)
    3d4a:	8a 47 09             	mov    0x9(%rdi),%al
    3d4d:	88 44 24 15          	mov    %al,0x15(%rsp)
    3d51:	8a 47 06             	mov    0x6(%rdi),%al
    3d54:	88 44 24 16          	mov    %al,0x16(%rsp)
    3d58:	8a 47 03             	mov    0x3(%rdi),%al
    3d5b:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void)_copy(s, sizeof(t), t, sizeof(t));
    3d5f:	e8 a6 fe ff ff       	callq  3c0a <_copy>
}
    3d64:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    3d69:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    3d70:	00 00 
    3d72:	74 05                	je     3d79 <inv_shift_rows+0xac>
    3d74:	e8 37 e7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    3d79:	48 83 c4 28          	add    $0x28,%rsp
    3d7d:	c3                   	retq   

0000000000003d7e <mult_row_column>:
{
    3d7e:	41 57                	push   %r15
    3d80:	41 56                	push   %r14
    3d82:	41 55                	push   %r13
    3d84:	41 54                	push   %r12
    3d86:	55                   	push   %rbp
    3d87:	48 89 fd             	mov    %rdi,%rbp
    3d8a:	53                   	push   %rbx
    3d8b:	48 89 f3             	mov    %rsi,%rbx
    3d8e:	48 83 ec 18          	sub    $0x18,%rsp
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
    3d92:	0f b6 3e             	movzbl (%rsi),%edi
    3d95:	e8 94 fe ff ff       	callq  3c2e <_double_byte>
    3d9a:	0f b6 f8             	movzbl %al,%edi
    3d9d:	e8 8c fe ff ff       	callq  3c2e <_double_byte>
    3da2:	0f b6 f8             	movzbl %al,%edi
    3da5:	e8 84 fe ff ff       	callq  3c2e <_double_byte>
    3daa:	0f b6 3b             	movzbl (%rbx),%edi
    3dad:	41 89 c7             	mov    %eax,%r15d
    3db0:	e8 79 fe ff ff       	callq  3c2e <_double_byte>
    3db5:	0f b6 f8             	movzbl %al,%edi
    3db8:	e8 71 fe ff ff       	callq  3c2e <_double_byte>
    3dbd:	0f b6 3b             	movzbl (%rbx),%edi
    3dc0:	41 89 c6             	mov    %eax,%r14d
    3dc3:	e8 66 fe ff ff       	callq  3c2e <_double_byte>
    3dc8:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3dcc:	41 89 c5             	mov    %eax,%r13d
    3dcf:	e8 5a fe ff ff       	callq  3c2e <_double_byte>
    3dd4:	0f b6 f8             	movzbl %al,%edi
    3dd7:	e8 52 fe ff ff       	callq  3c2e <_double_byte>
    3ddc:	0f b6 f8             	movzbl %al,%edi
    3ddf:	e8 4a fe ff ff       	callq  3c2e <_double_byte>
    3de4:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3de8:	41 89 c4             	mov    %eax,%r12d
    3deb:	e8 3e fe ff ff       	callq  3c2e <_double_byte>
    3df0:	8a 53 01             	mov    0x1(%rbx),%dl
    3df3:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3df7:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3dfb:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3dff:	e8 2a fe ff ff       	callq  3c2e <_double_byte>
    3e04:	0f b6 f8             	movzbl %al,%edi
    3e07:	e8 22 fe ff ff       	callq  3c2e <_double_byte>
    3e0c:	0f b6 f8             	movzbl %al,%edi
    3e0f:	e8 1a fe ff ff       	callq  3c2e <_double_byte>
    3e14:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3e18:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3e1c:	e8 0d fe ff ff       	callq  3c2e <_double_byte>
    3e21:	0f b6 f8             	movzbl %al,%edi
    3e24:	e8 05 fe ff ff       	callq  3c2e <_double_byte>
    3e29:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3e2d:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3e31:	32 53 02             	xor    0x2(%rbx),%dl
    3e34:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3e38:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3e3c:	e8 ed fd ff ff       	callq  3c2e <_double_byte>
    3e41:	0f b6 f8             	movzbl %al,%edi
    3e44:	e8 e5 fd ff ff       	callq  3c2e <_double_byte>
    3e49:	0f b6 f8             	movzbl %al,%edi
    3e4c:	e8 dd fd ff ff       	callq  3c2e <_double_byte>
    3e51:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3e55:	41 89 c0             	mov    %eax,%r8d
    3e58:	8a 43 03             	mov    0x3(%rbx),%al
    3e5b:	31 d0                	xor    %edx,%eax
    3e5d:	44 31 f8             	xor    %r15d,%eax
    3e60:	44 31 f0             	xor    %r14d,%eax
    3e63:	44 31 e8             	xor    %r13d,%eax
    3e66:	44 31 e0             	xor    %r12d,%eax
    3e69:	33 44 24 0c          	xor    0xc(%rsp),%eax
    3e6d:	32 44 24 0d          	xor    0xd(%rsp),%al
    3e71:	32 44 24 0e          	xor    0xe(%rsp),%al
    3e75:	44 31 c0             	xor    %r8d,%eax
    3e78:	88 45 00             	mov    %al,0x0(%rbp)
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
    3e7b:	0f b6 3b             	movzbl (%rbx),%edi
    3e7e:	e8 ab fd ff ff       	callq  3c2e <_double_byte>
    3e83:	0f b6 f8             	movzbl %al,%edi
    3e86:	e8 a3 fd ff ff       	callq  3c2e <_double_byte>
    3e8b:	0f b6 f8             	movzbl %al,%edi
    3e8e:	e8 9b fd ff ff       	callq  3c2e <_double_byte>
    3e93:	8a 13                	mov    (%rbx),%dl
    3e95:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3e99:	41 89 c7             	mov    %eax,%r15d
    3e9c:	88 54 24 0e          	mov    %dl,0xe(%rsp)
    3ea0:	e8 89 fd ff ff       	callq  3c2e <_double_byte>
    3ea5:	0f b6 f8             	movzbl %al,%edi
    3ea8:	e8 81 fd ff ff       	callq  3c2e <_double_byte>
    3ead:	0f b6 f8             	movzbl %al,%edi
    3eb0:	e8 79 fd ff ff       	callq  3c2e <_double_byte>
    3eb5:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3eb9:	41 89 c6             	mov    %eax,%r14d
    3ebc:	e8 6d fd ff ff       	callq  3c2e <_double_byte>
    3ec1:	0f b6 f8             	movzbl %al,%edi
    3ec4:	e8 65 fd ff ff       	callq  3c2e <_double_byte>
    3ec9:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3ecd:	41 89 c5             	mov    %eax,%r13d
    3ed0:	e8 59 fd ff ff       	callq  3c2e <_double_byte>
    3ed5:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3ed9:	41 89 c4             	mov    %eax,%r12d
    3edc:	e8 4d fd ff ff       	callq  3c2e <_double_byte>
    3ee1:	0f b6 f8             	movzbl %al,%edi
    3ee4:	e8 45 fd ff ff       	callq  3c2e <_double_byte>
    3ee9:	0f b6 f8             	movzbl %al,%edi
    3eec:	e8 3d fd ff ff       	callq  3c2e <_double_byte>
    3ef1:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3ef5:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3ef9:	e8 30 fd ff ff       	callq  3c2e <_double_byte>
    3efe:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3f02:	8a 54 24 0e          	mov    0xe(%rsp),%dl
    3f06:	32 53 02             	xor    0x2(%rbx),%dl
    3f09:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3f0d:	88 54 24 0f          	mov    %dl,0xf(%rsp)
    3f11:	e8 18 fd ff ff       	callq  3c2e <_double_byte>
    3f16:	0f b6 f8             	movzbl %al,%edi
    3f19:	e8 10 fd ff ff       	callq  3c2e <_double_byte>
    3f1e:	0f b6 f8             	movzbl %al,%edi
    3f21:	e8 08 fd ff ff       	callq  3c2e <_double_byte>
    3f26:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3f2a:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3f2e:	e8 fb fc ff ff       	callq  3c2e <_double_byte>
    3f33:	0f b6 f8             	movzbl %al,%edi
    3f36:	e8 f3 fc ff ff       	callq  3c2e <_double_byte>
    3f3b:	8a 54 24 0f          	mov    0xf(%rsp),%dl
    3f3f:	41 89 c0             	mov    %eax,%r8d
    3f42:	8a 43 03             	mov    0x3(%rbx),%al
    3f45:	31 d0                	xor    %edx,%eax
    3f47:	44 31 f8             	xor    %r15d,%eax
    3f4a:	44 31 f0             	xor    %r14d,%eax
    3f4d:	44 31 e8             	xor    %r13d,%eax
    3f50:	44 31 e0             	xor    %r12d,%eax
    3f53:	33 44 24 0c          	xor    0xc(%rsp),%eax
    3f57:	32 44 24 0d          	xor    0xd(%rsp),%al
    3f5b:	32 44 24 0e          	xor    0xe(%rsp),%al
    3f5f:	44 31 c0             	xor    %r8d,%eax
    3f62:	88 45 01             	mov    %al,0x1(%rbp)
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
    3f65:	0f b6 3b             	movzbl (%rbx),%edi
    3f68:	e8 c1 fc ff ff       	callq  3c2e <_double_byte>
    3f6d:	0f b6 f8             	movzbl %al,%edi
    3f70:	e8 b9 fc ff ff       	callq  3c2e <_double_byte>
    3f75:	0f b6 f8             	movzbl %al,%edi
    3f78:	e8 b1 fc ff ff       	callq  3c2e <_double_byte>
    3f7d:	0f b6 3b             	movzbl (%rbx),%edi
    3f80:	41 89 c7             	mov    %eax,%r15d
    3f83:	e8 a6 fc ff ff       	callq  3c2e <_double_byte>
    3f88:	0f b6 f8             	movzbl %al,%edi
    3f8b:	e8 9e fc ff ff       	callq  3c2e <_double_byte>
    3f90:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    3f94:	44 8a 23             	mov    (%rbx),%r12b
    3f97:	41 89 c6             	mov    %eax,%r14d
    3f9a:	e8 8f fc ff ff       	callq  3c2e <_double_byte>
    3f9f:	0f b6 f8             	movzbl %al,%edi
    3fa2:	e8 87 fc ff ff       	callq  3c2e <_double_byte>
    3fa7:	0f b6 f8             	movzbl %al,%edi
    3faa:	e8 7f fc ff ff       	callq  3c2e <_double_byte>
    3faf:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3fb3:	44 32 63 01          	xor    0x1(%rbx),%r12b
    3fb7:	41 89 c5             	mov    %eax,%r13d
    3fba:	e8 6f fc ff ff       	callq  3c2e <_double_byte>
    3fbf:	0f b6 f8             	movzbl %al,%edi
    3fc2:	e8 67 fc ff ff       	callq  3c2e <_double_byte>
    3fc7:	0f b6 f8             	movzbl %al,%edi
    3fca:	e8 5f fc ff ff       	callq  3c2e <_double_byte>
    3fcf:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3fd3:	88 44 24 0c          	mov    %al,0xc(%rsp)
    3fd7:	e8 52 fc ff ff       	callq  3c2e <_double_byte>
    3fdc:	0f b6 f8             	movzbl %al,%edi
    3fdf:	e8 4a fc ff ff       	callq  3c2e <_double_byte>
    3fe4:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    3fe8:	88 44 24 0d          	mov    %al,0xd(%rsp)
    3fec:	e8 3d fc ff ff       	callq  3c2e <_double_byte>
    3ff1:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    3ff5:	88 44 24 0e          	mov    %al,0xe(%rsp)
    3ff9:	e8 30 fc ff ff       	callq  3c2e <_double_byte>
    3ffe:	0f b6 f8             	movzbl %al,%edi
    4001:	e8 28 fc ff ff       	callq  3c2e <_double_byte>
    4006:	0f b6 f8             	movzbl %al,%edi
    4009:	e8 20 fc ff ff       	callq  3c2e <_double_byte>
    400e:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4012:	88 44 24 0f          	mov    %al,0xf(%rsp)
    4016:	e8 13 fc ff ff       	callq  3c2e <_double_byte>
    401b:	41 89 c0             	mov    %eax,%r8d
    401e:	8a 43 03             	mov    0x3(%rbx),%al
    4021:	44 31 e0             	xor    %r12d,%eax
    4024:	44 31 f8             	xor    %r15d,%eax
    4027:	44 31 f0             	xor    %r14d,%eax
    402a:	44 31 e8             	xor    %r13d,%eax
    402d:	33 44 24 0c          	xor    0xc(%rsp),%eax
    4031:	32 44 24 0d          	xor    0xd(%rsp),%al
    4035:	32 44 24 0e          	xor    0xe(%rsp),%al
    4039:	32 44 24 0f          	xor    0xf(%rsp),%al
    403d:	44 31 c0             	xor    %r8d,%eax
    4040:	88 45 02             	mov    %al,0x2(%rbp)
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
    4043:	0f b6 3b             	movzbl (%rbx),%edi
    4046:	e8 e3 fb ff ff       	callq  3c2e <_double_byte>
    404b:	0f b6 f8             	movzbl %al,%edi
    404e:	e8 db fb ff ff       	callq  3c2e <_double_byte>
    4053:	0f b6 f8             	movzbl %al,%edi
    4056:	e8 d3 fb ff ff       	callq  3c2e <_double_byte>
    405b:	0f b6 3b             	movzbl (%rbx),%edi
    405e:	41 89 c4             	mov    %eax,%r12d
    4061:	e8 c8 fb ff ff       	callq  3c2e <_double_byte>
    4066:	8a 13                	mov    (%rbx),%dl
    4068:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    406c:	41 89 c7             	mov    %eax,%r15d
    406f:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    4073:	e8 b6 fb ff ff       	callq  3c2e <_double_byte>
    4078:	0f b6 f8             	movzbl %al,%edi
    407b:	e8 ae fb ff ff       	callq  3c2e <_double_byte>
    4080:	0f b6 f8             	movzbl %al,%edi
    4083:	e8 a6 fb ff ff       	callq  3c2e <_double_byte>
    4088:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    408c:	41 89 c6             	mov    %eax,%r14d
    408f:	e8 9a fb ff ff       	callq  3c2e <_double_byte>
    4094:	0f b6 f8             	movzbl %al,%edi
    4097:	e8 92 fb ff ff       	callq  3c2e <_double_byte>
    409c:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    40a0:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    40a4:	32 53 01             	xor    0x1(%rbx),%dl
    40a7:	41 89 c5             	mov    %eax,%r13d
    40aa:	88 54 24 0c          	mov    %dl,0xc(%rsp)
    40ae:	e8 7b fb ff ff       	callq  3c2e <_double_byte>
    40b3:	0f b6 f8             	movzbl %al,%edi
    40b6:	e8 73 fb ff ff       	callq  3c2e <_double_byte>
    40bb:	0f b6 f8             	movzbl %al,%edi
    40be:	e8 6b fb ff ff       	callq  3c2e <_double_byte>
    40c3:	8a 54 24 0c          	mov    0xc(%rsp),%dl
    40c7:	32 53 02             	xor    0x2(%rbx),%dl
    40ca:	41 31 d4             	xor    %edx,%r12d
    40cd:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    40d1:	45 31 fc             	xor    %r15d,%r12d
    40d4:	45 31 f4             	xor    %r14d,%r12d
    40d7:	45 31 ec             	xor    %r13d,%r12d
    40da:	41 31 c4             	xor    %eax,%r12d
    40dd:	e8 4c fb ff ff       	callq  3c2e <_double_byte>
    40e2:	0f b6 f8             	movzbl %al,%edi
    40e5:	e8 44 fb ff ff       	callq  3c2e <_double_byte>
    40ea:	0f b6 f8             	movzbl %al,%edi
    40ed:	e8 3c fb ff ff       	callq  3c2e <_double_byte>
    40f2:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    40f6:	41 89 c5             	mov    %eax,%r13d
    40f9:	e8 30 fb ff ff       	callq  3c2e <_double_byte>
    40fe:	45 31 ec             	xor    %r13d,%r12d
    4101:	0f b6 f8             	movzbl %al,%edi
    4104:	e8 25 fb ff ff       	callq  3c2e <_double_byte>
    4109:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    410d:	41 89 c6             	mov    %eax,%r14d
    4110:	e8 19 fb ff ff       	callq  3c2e <_double_byte>
    4115:	45 31 f4             	xor    %r14d,%r12d
    4118:	41 31 c4             	xor    %eax,%r12d
    411b:	44 88 65 03          	mov    %r12b,0x3(%rbp)
}
    411f:	48 83 c4 18          	add    $0x18,%rsp
    4123:	5b                   	pop    %rbx
    4124:	5d                   	pop    %rbp
    4125:	41 5c                	pop    %r12
    4127:	41 5d                	pop    %r13
    4129:	41 5e                	pop    %r14
    412b:	41 5f                	pop    %r15
    412d:	c3                   	retq   

000000000000412e <tc_aes_decrypt>:

int tc_aes_decrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    412e:	f3 0f 1e fa          	endbr64 
    4132:	41 57                	push   %r15
    4134:	41 56                	push   %r14
    4136:	41 55                	push   %r13
    4138:	41 54                	push   %r12
    413a:	49 89 d4             	mov    %rdx,%r12
    413d:	55                   	push   %rbp
    413e:	53                   	push   %rbx
    413f:	48 83 ec 48          	sub    $0x48,%rsp
    4143:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    4148:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    414f:	00 00 
    4151:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4156:	31 c0                	xor    %eax,%eax

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    4158:	48 85 d2             	test   %rdx,%rdx
    415b:	0f 94 c2             	sete   %dl
	} else if (in == (const uint8_t *) 0) {
    415e:	48 85 f6             	test   %rsi,%rsi
    4161:	0f 94 c0             	sete   %al
	} else if (s == (TCAesKeySched_t) 0) {
    4164:	08 c2                	or     %al,%dl
    4166:	0f 85 21 01 00 00    	jne    428d <tc_aes_decrypt+0x15f>
    416c:	48 85 ff             	test   %rdi,%rdi
    416f:	0f 84 18 01 00 00    	je     428d <tc_aes_decrypt+0x15f>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    4175:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
    417a:	48 89 f2             	mov    %rsi,%rdx
    417d:	b9 10 00 00 00       	mov    $0x10,%ecx
    4182:	be 10 00 00 00       	mov    $0x10,%esi
    4187:	48 89 ef             	mov    %rbp,%rdi
    418a:	4d 8d b4 24 90 00 00 	lea    0x90(%r12),%r14
    4191:	00 
		s[i] = inv_sbox[s[i]];
    4192:	4c 8d 3d 67 4e 00 00 	lea    0x4e67(%rip),%r15        # 9000 <inv_sbox>
	(void)_copy(state, sizeof(state), in, sizeof(state));
    4199:	e8 6c fa ff ff       	callq  3c0a <_copy>

	add_round_key(state, s->words + Nb*Nr);
    419e:	49 8d b4 24 a0 00 00 	lea    0xa0(%r12),%rsi
    41a5:	00 
    41a6:	48 89 ef             	mov    %rbp,%rdi
    41a9:	e8 ba fa ff ff       	callq  3c68 <add_round_key>

	for (i = Nr - 1; i > 0; --i) {
		inv_shift_rows(state);
    41ae:	48 89 ef             	mov    %rbp,%rdi
    41b1:	49 89 ed             	mov    %rbp,%r13
    41b4:	48 8d 5c 24 28       	lea    0x28(%rsp),%rbx
    41b9:	e8 0f fb ff ff       	callq  3ccd <inv_shift_rows>
    41be:	48 89 e8             	mov    %rbp,%rax
		s[i] = inv_sbox[s[i]];
    41c1:	0f b6 10             	movzbl (%rax),%edx
    41c4:	48 ff c0             	inc    %rax
    41c7:	41 8a 14 17          	mov    (%r15,%rdx,1),%dl
    41cb:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb*Nk); ++i) {
    41ce:	48 39 d8             	cmp    %rbx,%rax
    41d1:	75 ee                	jne    41c1 <tc_aes_decrypt+0x93>
		inv_sub_bytes(state);
		add_round_key(state, s->words + Nb*i);
    41d3:	4c 89 f6             	mov    %r14,%rsi
    41d6:	48 89 ef             	mov    %rbp,%rdi
    41d9:	49 83 ee 10          	sub    $0x10,%r14
    41dd:	e8 86 fa ff ff       	callq  3c68 <add_round_key>
	mult_row_column(t, s);
    41e2:	48 89 ee             	mov    %rbp,%rsi
    41e5:	48 89 df             	mov    %rbx,%rdi
    41e8:	e8 91 fb ff ff       	callq  3d7e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    41ed:	48 8d 74 24 1c       	lea    0x1c(%rsp),%rsi
    41f2:	48 8d 7c 24 2c       	lea    0x2c(%rsp),%rdi
    41f7:	e8 82 fb ff ff       	callq  3d7e <mult_row_column>
	mult_row_column(&t[2*Nb], s+(2*Nb));
    41fc:	48 8d 74 24 20       	lea    0x20(%rsp),%rsi
    4201:	48 8d 7c 24 30       	lea    0x30(%rsp),%rdi
    4206:	e8 73 fb ff ff       	callq  3d7e <mult_row_column>
	mult_row_column(&t[3*Nb], s+(3*Nb));
    420b:	48 8d 74 24 24       	lea    0x24(%rsp),%rsi
    4210:	48 8d 7c 24 34       	lea    0x34(%rsp),%rdi
    4215:	e8 64 fb ff ff       	callq  3d7e <mult_row_column>
	(void)_copy(s, sizeof(t), t, sizeof(t));
    421a:	b9 10 00 00 00       	mov    $0x10,%ecx
    421f:	48 89 da             	mov    %rbx,%rdx
    4222:	48 89 ef             	mov    %rbp,%rdi
    4225:	be 10 00 00 00       	mov    $0x10,%esi
    422a:	e8 db f9 ff ff       	callq  3c0a <_copy>
	for (i = Nr - 1; i > 0; --i) {
    422f:	4d 39 e6             	cmp    %r12,%r14
    4232:	0f 85 76 ff ff ff    	jne    41ae <tc_aes_decrypt+0x80>
		inv_mix_columns(state);
	}

	inv_shift_rows(state);
    4238:	48 89 ef             	mov    %rbp,%rdi
    423b:	e8 8d fa ff ff       	callq  3ccd <inv_shift_rows>
		s[i] = inv_sbox[s[i]];
    4240:	41 0f b6 45 00       	movzbl 0x0(%r13),%eax
    4245:	49 ff c5             	inc    %r13
    4248:	41 8a 04 07          	mov    (%r15,%rax,1),%al
    424c:	41 88 45 ff          	mov    %al,-0x1(%r13)
	for (i = 0; i < (Nb*Nk); ++i) {
    4250:	49 39 dd             	cmp    %rbx,%r13
    4253:	75 eb                	jne    4240 <tc_aes_decrypt+0x112>
	inv_sub_bytes(state);
	add_round_key(state, s->words);
    4255:	4c 89 e6             	mov    %r12,%rsi
    4258:	48 89 ef             	mov    %rbp,%rdi
    425b:	e8 08 fa ff ff       	callq  3c68 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4260:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    4265:	b9 10 00 00 00       	mov    $0x10,%ecx
    426a:	48 89 ea             	mov    %rbp,%rdx
    426d:	be 10 00 00 00       	mov    $0x10,%esi
    4272:	e8 93 f9 ff ff       	callq  3c0a <_copy>

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    4277:	ba 10 00 00 00       	mov    $0x10,%edx
    427c:	31 f6                	xor    %esi,%esi
    427e:	48 89 ef             	mov    %rbp,%rdi
    4281:	e8 9d f9 ff ff       	callq  3c23 <_set>


	return TC_CRYPTO_SUCCESS;
    4286:	b8 01 00 00 00       	mov    $0x1,%eax
    428b:	eb 02                	jmp    428f <tc_aes_decrypt+0x161>
		return TC_CRYPTO_FAIL;
    428d:	31 c0                	xor    %eax,%eax
}
    428f:	48 8b 4c 24 38       	mov    0x38(%rsp),%rcx
    4294:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    429b:	00 00 
    429d:	74 05                	je     42a4 <tc_aes_decrypt+0x176>
    429f:	e8 0c e2 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    42a4:	48 83 c4 48          	add    $0x48,%rsp
    42a8:	5b                   	pop    %rbx
    42a9:	5d                   	pop    %rbp
    42aa:	41 5c                	pop    %r12
    42ac:	41 5d                	pop    %r13
    42ae:	41 5e                	pop    %r14
    42b0:	41 5f                	pop    %r15
    42b2:	c3                   	retq   

00000000000042b3 <add_round_key>:
	return TC_CRYPTO_SUCCESS;
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    42b3:	8a 46 03             	mov    0x3(%rsi),%al
    42b6:	30 07                	xor    %al,(%rdi)
    42b8:	8a 46 02             	mov    0x2(%rsi),%al
    42bb:	30 47 01             	xor    %al,0x1(%rdi)
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    42be:	8a 46 01             	mov    0x1(%rsi),%al
    42c1:	30 47 02             	xor    %al,0x2(%rdi)
    42c4:	8b 06                	mov    (%rsi),%eax
    42c6:	30 47 03             	xor    %al,0x3(%rdi)
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    42c9:	0f b6 46 07          	movzbl 0x7(%rsi),%eax
    42cd:	30 47 04             	xor    %al,0x4(%rdi)
    42d0:	0f b7 46 06          	movzwl 0x6(%rsi),%eax
    42d4:	30 47 05             	xor    %al,0x5(%rdi)
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    42d7:	8a 46 05             	mov    0x5(%rsi),%al
    42da:	30 47 06             	xor    %al,0x6(%rdi)
    42dd:	8b 46 04             	mov    0x4(%rsi),%eax
    42e0:	30 47 07             	xor    %al,0x7(%rdi)
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    42e3:	0f b6 46 0b          	movzbl 0xb(%rsi),%eax
    42e7:	30 47 08             	xor    %al,0x8(%rdi)
    42ea:	0f b7 46 0a          	movzwl 0xa(%rsi),%eax
    42ee:	30 47 09             	xor    %al,0x9(%rdi)
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    42f1:	8a 46 09             	mov    0x9(%rsi),%al
    42f4:	30 47 0a             	xor    %al,0xa(%rdi)
    42f7:	8b 46 08             	mov    0x8(%rsi),%eax
    42fa:	30 47 0b             	xor    %al,0xb(%rdi)
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    42fd:	0f b6 46 0f          	movzbl 0xf(%rsi),%eax
    4301:	30 47 0c             	xor    %al,0xc(%rdi)
    4304:	0f b7 46 0e          	movzwl 0xe(%rsi),%eax
    4308:	30 47 0d             	xor    %al,0xd(%rdi)
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    430b:	8a 46 0d             	mov    0xd(%rsi),%al
    430e:	30 47 0e             	xor    %al,0xe(%rdi)
    4311:	8b 46 0c             	mov    0xc(%rsi),%eax
    4314:	30 47 0f             	xor    %al,0xf(%rdi)
}
    4317:	c3                   	retq   

0000000000004318 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
    4318:	48 83 ec 28          	sub    $0x28,%rsp

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
    431c:	b9 10 00 00 00       	mov    $0x10,%ecx
    4321:	be 10 00 00 00       	mov    $0x10,%esi
{
    4326:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    432d:	00 00 
    432f:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    4334:	31 c0                	xor    %eax,%eax
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    4336:	8a 07                	mov    (%rdi),%al
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4338:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    433d:	88 44 24 08          	mov    %al,0x8(%rsp)
    4341:	8a 47 05             	mov    0x5(%rdi),%al
    4344:	88 44 24 09          	mov    %al,0x9(%rsp)
    4348:	8a 47 0a             	mov    0xa(%rdi),%al
    434b:	88 44 24 0a          	mov    %al,0xa(%rsp)
    434f:	8a 47 0f             	mov    0xf(%rdi),%al
    4352:	88 44 24 0b          	mov    %al,0xb(%rsp)
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    4356:	8a 47 04             	mov    0x4(%rdi),%al
    4359:	88 44 24 0c          	mov    %al,0xc(%rsp)
    435d:	8a 47 09             	mov    0x9(%rdi),%al
    4360:	88 44 24 0d          	mov    %al,0xd(%rsp)
    4364:	8a 47 0e             	mov    0xe(%rdi),%al
    4367:	88 44 24 0e          	mov    %al,0xe(%rsp)
    436b:	8a 47 03             	mov    0x3(%rdi),%al
    436e:	88 44 24 0f          	mov    %al,0xf(%rsp)
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    4372:	8a 47 08             	mov    0x8(%rdi),%al
    4375:	88 44 24 10          	mov    %al,0x10(%rsp)
    4379:	8a 47 0d             	mov    0xd(%rdi),%al
    437c:	88 44 24 11          	mov    %al,0x11(%rsp)
    4380:	8a 47 02             	mov    0x2(%rdi),%al
    4383:	88 44 24 12          	mov    %al,0x12(%rsp)
    4387:	8a 47 07             	mov    0x7(%rdi),%al
    438a:	88 44 24 13          	mov    %al,0x13(%rsp)
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    438e:	8a 47 0c             	mov    0xc(%rdi),%al
    4391:	88 44 24 14          	mov    %al,0x14(%rsp)
    4395:	8a 47 01             	mov    0x1(%rdi),%al
    4398:	88 44 24 15          	mov    %al,0x15(%rsp)
    439c:	8a 47 06             	mov    0x6(%rdi),%al
    439f:	88 44 24 16          	mov    %al,0x16(%rsp)
    43a3:	8a 47 0b             	mov    0xb(%rdi),%al
    43a6:	88 44 24 17          	mov    %al,0x17(%rsp)
	(void) _copy(s, sizeof(t), t, sizeof(t));
    43aa:	e8 5b f8 ff ff       	callq  3c0a <_copy>
}
    43af:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    43b4:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    43bb:	00 00 
    43bd:	74 05                	je     43c4 <shift_rows+0xac>
    43bf:	e8 ec e0 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    43c4:	48 83 c4 28          	add    $0x28,%rsp
    43c8:	c3                   	retq   

00000000000043c9 <mult_row_column>:
{
    43c9:	41 55                	push   %r13
    43cb:	41 54                	push   %r12
    43cd:	49 89 fc             	mov    %rdi,%r12
    43d0:	55                   	push   %rbp
    43d1:	53                   	push   %rbx
    43d2:	48 89 f3             	mov    %rsi,%rbx
    43d5:	50                   	push   %rax
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    43d6:	0f b6 3e             	movzbl (%rsi),%edi
    43d9:	e8 50 f8 ff ff       	callq  3c2e <_double_byte>
    43de:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    43e2:	89 c5                	mov    %eax,%ebp
    43e4:	e8 45 f8 ff ff       	callq  3c2e <_double_byte>
    43e9:	41 89 c0             	mov    %eax,%r8d
    43ec:	8a 43 01             	mov    0x1(%rbx),%al
    43ef:	32 43 02             	xor    0x2(%rbx),%al
    43f2:	32 43 03             	xor    0x3(%rbx),%al
    43f5:	31 e8                	xor    %ebp,%eax
    43f7:	44 31 c0             	xor    %r8d,%eax
    43fa:	41 88 04 24          	mov    %al,(%r12)
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    43fe:	0f b6 7b 01          	movzbl 0x1(%rbx),%edi
    4402:	40 8a 2b             	mov    (%rbx),%bpl
    4405:	e8 24 f8 ff ff       	callq  3c2e <_double_byte>
    440a:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    440e:	41 89 c5             	mov    %eax,%r13d
    4411:	e8 18 f8 ff ff       	callq  3c2e <_double_byte>
    4416:	41 89 c0             	mov    %eax,%r8d
    4419:	8a 43 02             	mov    0x2(%rbx),%al
    441c:	31 e8                	xor    %ebp,%eax
    441e:	32 43 03             	xor    0x3(%rbx),%al
    4421:	44 31 e8             	xor    %r13d,%eax
    4424:	44 31 c0             	xor    %r8d,%eax
    4427:	41 88 44 24 01       	mov    %al,0x1(%r12)
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    442c:	0f b6 7b 02          	movzbl 0x2(%rbx),%edi
    4430:	40 8a 2b             	mov    (%rbx),%bpl
    4433:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    4437:	e8 f2 f7 ff ff       	callq  3c2e <_double_byte>
    443c:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4440:	41 89 c5             	mov    %eax,%r13d
    4443:	e8 e6 f7 ff ff       	callq  3c2e <_double_byte>
    4448:	40 32 6b 03          	xor    0x3(%rbx),%bpl
    444c:	44 31 ed             	xor    %r13d,%ebp
    444f:	31 c5                	xor    %eax,%ebp
    4451:	41 88 6c 24 02       	mov    %bpl,0x2(%r12)
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    4456:	0f b6 3b             	movzbl (%rbx),%edi
    4459:	e8 d0 f7 ff ff       	callq  3c2e <_double_byte>
    445e:	0f b6 7b 03          	movzbl 0x3(%rbx),%edi
    4462:	40 8a 2b             	mov    (%rbx),%bpl
    4465:	40 32 6b 01          	xor    0x1(%rbx),%bpl
    4469:	40 32 6b 02          	xor    0x2(%rbx),%bpl
    446d:	31 c5                	xor    %eax,%ebp
    446f:	e8 ba f7 ff ff       	callq  3c2e <_double_byte>
    4474:	31 c5                	xor    %eax,%ebp
    4476:	41 88 6c 24 03       	mov    %bpl,0x3(%r12)
}
    447b:	5a                   	pop    %rdx
    447c:	5b                   	pop    %rbx
    447d:	5d                   	pop    %rbp
    447e:	41 5c                	pop    %r12
    4480:	41 5d                	pop    %r13
    4482:	c3                   	retq   

0000000000004483 <tc_aes128_set_encrypt_key>:
{
    4483:	f3 0f 1e fa          	endbr64 
    4487:	48 83 ec 48          	sub    $0x48,%rsp
    448b:	49 89 f8             	mov    %rdi,%r8
    448e:	49 89 f1             	mov    %rsi,%r9
	const unsigned int rconst[11] = {
    4491:	b9 0b 00 00 00       	mov    $0xb,%ecx
{
    4496:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    449d:	00 00 
    449f:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    44a4:	31 c0                	xor    %eax,%eax
	const unsigned int rconst[11] = {
    44a6:	48 8d 7c 24 0c       	lea    0xc(%rsp),%rdi
    44ab:	48 8d 35 4e 4c 00 00 	lea    0x4c4e(%rip),%rsi        # 9100 <inv_sbox+0x100>
    44b2:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
	} else if (k == (const uint8_t *) 0) {
    44b4:	4d 85 c0             	test   %r8,%r8
    44b7:	0f 84 ad 00 00 00    	je     456a <tc_aes128_set_encrypt_key+0xe7>
    44bd:	4d 85 c9             	test   %r9,%r9
    44c0:	0f 84 a4 00 00 00    	je     456a <tc_aes128_set_encrypt_key+0xe7>
    44c6:	31 d2                	xor    %edx,%edx
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    44c8:	41 0f b6 04 11       	movzbl (%r9,%rdx,1),%eax
    44cd:	41 0f b6 4c 11 01    	movzbl 0x1(%r9,%rdx,1),%ecx
    44d3:	c1 e0 18             	shl    $0x18,%eax
    44d6:	c1 e1 10             	shl    $0x10,%ecx
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    44d9:	09 c8                	or     %ecx,%eax
    44db:	41 0f b6 4c 11 03    	movzbl 0x3(%r9,%rdx,1),%ecx
    44e1:	09 c8                	or     %ecx,%eax
    44e3:	41 0f b6 4c 11 02    	movzbl 0x2(%r9,%rdx,1),%ecx
    44e9:	c1 e1 08             	shl    $0x8,%ecx
    44ec:	09 c8                	or     %ecx,%eax
    44ee:	41 89 04 10          	mov    %eax,(%r8,%rdx,1)
	for (i = 0; i < Nk; ++i) {
    44f2:	48 83 c2 04          	add    $0x4,%rdx
    44f6:	48 83 fa 10          	cmp    $0x10,%rdx
    44fa:	75 cc                	jne    44c8 <tc_aes128_set_encrypt_key+0x45>
    44fc:	be 04 00 00 00       	mov    $0x4,%esi
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4501:	48 8d 3d 38 4c 00 00 	lea    0x4c38(%rip),%rdi        # 9140 <sbox>
		t = s->words[i-1];
    4508:	41 8b 44 b0 fc       	mov    -0x4(%r8,%rsi,4),%eax
		if ((i % Nk) == 0) {
    450d:	40 f6 c6 03          	test   $0x3,%sil
    4511:	75 3e                	jne    4551 <tc_aes128_set_encrypt_key+0xce>
	return (((a) >> 24)|((a) << 8));
    4513:	c1 c0 08             	rol    $0x8,%eax
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4516:	89 c2                	mov    %eax,%edx
    4518:	c1 ea 18             	shr    $0x18,%edx
    451b:	0f b6 0c 17          	movzbl (%rdi,%rdx,1),%ecx
    451f:	0f b6 d0             	movzbl %al,%edx
    4522:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    4526:	c1 e1 18             	shl    $0x18,%ecx
    4529:	09 d1                	or     %edx,%ecx
    452b:	89 c2                	mov    %eax,%edx
    452d:	c1 ea 10             	shr    $0x10,%edx
    4530:	0f b6 d2             	movzbl %dl,%edx
    4533:	0f b6 14 17          	movzbl (%rdi,%rdx,1),%edx
    4537:	c1 e2 10             	shl    $0x10,%edx
    453a:	09 d1                	or     %edx,%ecx
    453c:	0f b6 d4             	movzbl %ah,%edx
    453f:	0f b6 04 17          	movzbl (%rdi,%rdx,1),%eax
    4543:	89 f2                	mov    %esi,%edx
    4545:	c1 ea 02             	shr    $0x2,%edx
    4548:	c1 e0 08             	shl    $0x8,%eax
    454b:	09 c8                	or     %ecx,%eax
    454d:	33 44 94 0c          	xor    0xc(%rsp,%rdx,4),%eax
		s->words[i] = s->words[i-Nk] ^ t;
    4551:	41 33 44 b0 f0       	xor    -0x10(%r8,%rsi,4),%eax
    4556:	41 89 04 b0          	mov    %eax,(%r8,%rsi,4)
	for (; i < (Nb * (Nr + 1)); ++i) {
    455a:	48 ff c6             	inc    %rsi
    455d:	48 83 fe 2c          	cmp    $0x2c,%rsi
    4561:	75 a5                	jne    4508 <tc_aes128_set_encrypt_key+0x85>
	return TC_CRYPTO_SUCCESS;
    4563:	b8 01 00 00 00       	mov    $0x1,%eax
    4568:	eb 02                	jmp    456c <tc_aes128_set_encrypt_key+0xe9>
		return TC_CRYPTO_FAIL;
    456a:	31 c0                	xor    %eax,%eax
}
    456c:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    4571:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4578:	00 00 
    457a:	74 05                	je     4581 <tc_aes128_set_encrypt_key+0xfe>
    457c:	e8 2f df ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4581:	48 83 c4 48          	add    $0x48,%rsp
    4585:	c3                   	retq   

0000000000004586 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    4586:	f3 0f 1e fa          	endbr64 
    458a:	41 57                	push   %r15
    458c:	41 56                	push   %r14
    458e:	41 55                	push   %r13
    4590:	41 54                	push   %r12
    4592:	49 89 d4             	mov    %rdx,%r12
    4595:	55                   	push   %rbp
    4596:	53                   	push   %rbx
    4597:	48 83 ec 38          	sub    $0x38,%rsp
    459b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    45a2:	00 00 
    45a4:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    45a9:	31 c0                	xor    %eax,%eax
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    45ab:	48 85 f6             	test   %rsi,%rsi
    45ae:	0f 94 c2             	sete   %dl
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    45b1:	4d 85 e4             	test   %r12,%r12
    45b4:	0f 94 c0             	sete   %al
    45b7:	08 c2                	or     %al,%dl
    45b9:	0f 85 25 01 00 00    	jne    46e4 <tc_aes_encrypt+0x15e>
    45bf:	49 89 fd             	mov    %rdi,%r13
    45c2:	48 85 ff             	test   %rdi,%rdi
    45c5:	0f 84 19 01 00 00    	je     46e4 <tc_aes_encrypt+0x15e>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    45cb:	48 8d 6c 24 08       	lea    0x8(%rsp),%rbp
    45d0:	48 89 f2             	mov    %rsi,%rdx
    45d3:	b9 10 00 00 00       	mov    $0x10,%ecx
    45d8:	be 10 00 00 00       	mov    $0x10,%esi
    45dd:	48 89 ef             	mov    %rbp,%rdi
    45e0:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
    45e5:	e8 20 f6 ff ff       	callq  3c0a <_copy>
	add_round_key(state, s->words);
    45ea:	4c 89 e6             	mov    %r12,%rsi
    45ed:	48 89 ef             	mov    %rbp,%rdi
    45f0:	49 81 c4 a0 00 00 00 	add    $0xa0,%r12
    45f7:	e8 b7 fc ff ff       	callq  42b3 <add_round_key>
		s[i] = sbox[s[i]];
    45fc:	4c 8d 05 3d 4b 00 00 	lea    0x4b3d(%rip),%r8        # 9140 <sbox>
	for (i = 0; i < (Nb * Nk); ++i) {
    4603:	48 89 eb             	mov    %rbp,%rbx
    4606:	4c 8d 7c 24 18       	lea    0x18(%rsp),%r15
{
    460b:	48 89 e8             	mov    %rbp,%rax
		s[i] = sbox[s[i]];
    460e:	0f b6 10             	movzbl (%rax),%edx
    4611:	48 ff c0             	inc    %rax
    4614:	41 8a 14 10          	mov    (%r8,%rdx,1),%dl
    4618:	88 50 ff             	mov    %dl,-0x1(%rax)
	for (i = 0; i < (Nb * Nk); ++i) {
    461b:	4c 39 f8             	cmp    %r15,%rax
    461e:	75 ee                	jne    460e <tc_aes_encrypt+0x88>

	for (i = 0; i < (Nr - 1); ++i) {
		sub_bytes(state);
		shift_rows(state);
    4620:	48 89 ef             	mov    %rbp,%rdi
    4623:	e8 f0 fc ff ff       	callq  4318 <shift_rows>
	mult_row_column(t, s);
    4628:	48 89 ee             	mov    %rbp,%rsi
    462b:	4c 89 ff             	mov    %r15,%rdi
    462e:	e8 96 fd ff ff       	callq  43c9 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4633:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    4638:	48 8d 7c 24 1c       	lea    0x1c(%rsp),%rdi
    463d:	e8 87 fd ff ff       	callq  43c9 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    4642:	48 8d 74 24 10       	lea    0x10(%rsp),%rsi
    4647:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
    464c:	e8 78 fd ff ff       	callq  43c9 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    4651:	48 8d 74 24 14       	lea    0x14(%rsp),%rsi
    4656:	48 8d 7c 24 24       	lea    0x24(%rsp),%rdi
    465b:	e8 69 fd ff ff       	callq  43c9 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4660:	b9 10 00 00 00       	mov    $0x10,%ecx
    4665:	4c 89 fa             	mov    %r15,%rdx
    4668:	48 89 ef             	mov    %rbp,%rdi
    466b:	be 10 00 00 00       	mov    $0x10,%esi
    4670:	e8 95 f5 ff ff       	callq  3c0a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    4675:	4c 89 f6             	mov    %r14,%rsi
    4678:	48 89 ef             	mov    %rbp,%rdi
    467b:	49 83 c6 10          	add    $0x10,%r14
    467f:	e8 2f fc ff ff       	callq  42b3 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    4684:	4d 39 e6             	cmp    %r12,%r14
    4687:	4c 8d 05 b2 4a 00 00 	lea    0x4ab2(%rip),%r8        # 9140 <sbox>
    468e:	0f 85 6f ff ff ff    	jne    4603 <tc_aes_encrypt+0x7d>
		s[i] = sbox[s[i]];
    4694:	0f b6 03             	movzbl (%rbx),%eax
    4697:	48 ff c3             	inc    %rbx
    469a:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    469e:	88 43 ff             	mov    %al,-0x1(%rbx)
	for (i = 0; i < (Nb * Nk); ++i) {
    46a1:	4c 39 fb             	cmp    %r15,%rbx
    46a4:	75 ee                	jne    4694 <tc_aes_encrypt+0x10e>
	}

	sub_bytes(state);
	shift_rows(state);
    46a6:	48 89 ef             	mov    %rbp,%rdi
    46a9:	e8 6a fc ff ff       	callq  4318 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    46ae:	4c 89 e6             	mov    %r12,%rsi
    46b1:	48 89 ef             	mov    %rbp,%rdi
    46b4:	e8 fa fb ff ff       	callq  42b3 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    46b9:	b9 10 00 00 00       	mov    $0x10,%ecx
    46be:	48 89 ea             	mov    %rbp,%rdx
    46c1:	4c 89 ef             	mov    %r13,%rdi
    46c4:	be 10 00 00 00       	mov    $0x10,%esi
    46c9:	e8 3c f5 ff ff       	callq  3c0a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    46ce:	ba 10 00 00 00       	mov    $0x10,%edx
    46d3:	31 f6                	xor    %esi,%esi
    46d5:	48 89 ef             	mov    %rbp,%rdi
    46d8:	e8 46 f5 ff ff       	callq  3c23 <_set>

	return TC_CRYPTO_SUCCESS;
    46dd:	b8 01 00 00 00       	mov    $0x1,%eax
    46e2:	eb 02                	jmp    46e6 <tc_aes_encrypt+0x160>
		return TC_CRYPTO_FAIL;
    46e4:	31 c0                	xor    %eax,%eax
}
    46e6:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
    46eb:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    46f2:	00 00 
    46f4:	74 05                	je     46fb <tc_aes_encrypt+0x175>
    46f6:	e8 b5 dd ff ff       	callq  24b0 <__stack_chk_fail@plt>
    46fb:	48 83 c4 38          	add    $0x38,%rsp
    46ff:	5b                   	pop    %rbx
    4700:	5d                   	pop    %rbp
    4701:	41 5c                	pop    %r12
    4703:	41 5d                	pop    %r13
    4705:	41 5e                	pop    %r14
    4707:	41 5f                	pop    %r15
    4709:	c3                   	retq   

000000000000470a <tc_cbc_mode_encrypt>:
#include <tinycrypt/utils.h>

int tc_cbc_mode_encrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    470a:	f3 0f 1e fa          	endbr64 
    470e:	41 57                	push   %r15
    4710:	41 56                	push   %r14
    4712:	41 55                	push   %r13
    4714:	41 54                	push   %r12
    4716:	55                   	push   %rbp
    4717:	53                   	push   %rbx
    4718:	48 83 ec 28          	sub    $0x28,%rsp
    471c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4723:	00 00 
    4725:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    472a:	31 c0                	xor    %eax,%eax

	uint8_t buffer[TC_AES_BLOCK_SIZE];
	unsigned int n, m;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    472c:	48 85 ff             	test   %rdi,%rdi
    472f:	0f 84 d8 00 00 00    	je     480d <tc_cbc_mode_encrypt+0x103>
    4735:	49 89 d6             	mov    %rdx,%r14
    4738:	48 85 d2             	test   %rdx,%rdx
    473b:	0f 84 cc 00 00 00    	je     480d <tc_cbc_mode_encrypt+0x103>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    4741:	4d 85 c9             	test   %r9,%r9
    4744:	89 cb                	mov    %ecx,%ebx
    4746:	4d 89 cc             	mov    %r9,%r12
    4749:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    474c:	85 db                	test   %ebx,%ebx
    474e:	0f 94 c0             	sete   %al
    4751:	08 c2                	or     %al,%dl
    4753:	0f 85 b4 00 00 00    	jne    480d <tc_cbc_mode_encrypt+0x103>
    4759:	85 f6                	test   %esi,%esi
    475b:	0f 84 ac 00 00 00    	je     480d <tc_cbc_mode_encrypt+0x103>
    4761:	89 da                	mov    %ebx,%edx
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
		return TC_CRYPTO_FAIL;
    4763:	31 c0                	xor    %eax,%eax
    4765:	09 f2                	or     %esi,%edx
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    4767:	83 e2 0f             	and    $0xf,%edx
    476a:	0f 85 9f 00 00 00    	jne    480f <tc_cbc_mode_encrypt+0x105>
	    outlen != inlen + TC_AES_BLOCK_SIZE) {
    4770:	8d 4b 10             	lea    0x10(%rbx),%ecx
		return TC_CRYPTO_FAIL;
    4773:	89 d0                	mov    %edx,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    4775:	39 f1                	cmp    %esi,%ecx
    4777:	0f 85 92 00 00 00    	jne    480f <tc_cbc_mode_encrypt+0x105>
	}

	/* copy iv to the buffer */
	(void)_copy(buffer, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    477d:	4c 8d 6c 24 08       	lea    0x8(%rsp),%r13
    4782:	48 89 fd             	mov    %rdi,%rbp
    4785:	4d 89 c7             	mov    %r8,%r15
    4788:	4c 89 c2             	mov    %r8,%rdx
    478b:	b9 10 00 00 00       	mov    $0x10,%ecx
    4790:	be 10 00 00 00       	mov    $0x10,%esi
    4795:	4c 89 ef             	mov    %r13,%rdi
    4798:	4c 01 f3             	add    %r14,%rbx
    479b:	e8 6a f4 ff ff       	callq  3c0a <_copy>
	/* copy iv to the output buffer */
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    47a0:	48 89 ef             	mov    %rbp,%rdi
    47a3:	b9 10 00 00 00       	mov    $0x10,%ecx
    47a8:	4c 89 fa             	mov    %r15,%rdx
    47ab:	be 10 00 00 00       	mov    $0x10,%esi
	out += TC_AES_BLOCK_SIZE;
    47b0:	48 83 c5 10          	add    $0x10,%rbp
	(void)_copy(out, TC_AES_BLOCK_SIZE, iv, TC_AES_BLOCK_SIZE);
    47b4:	e8 51 f4 ff ff       	callq  3c0a <_copy>

	for (n = m = 0; n < inlen; ++n) {
    47b9:	31 c0                	xor    %eax,%eax
    47bb:	4c 39 f3             	cmp    %r14,%rbx
    47be:	74 46                	je     4806 <tc_cbc_mode_encrypt+0xfc>
		buffer[m++] ^= *in++;
    47c0:	89 c6                	mov    %eax,%esi
    47c2:	49 ff c6             	inc    %r14
    47c5:	8d 48 01             	lea    0x1(%rax),%ecx
    47c8:	8a 54 34 08          	mov    0x8(%rsp,%rsi,1),%dl
    47cc:	41 32 56 ff          	xor    -0x1(%r14),%dl
    47d0:	88 54 34 08          	mov    %dl,0x8(%rsp,%rsi,1)
		if (m == TC_AES_BLOCK_SIZE) {
    47d4:	83 f8 0f             	cmp    $0xf,%eax
    47d7:	75 29                	jne    4802 <tc_cbc_mode_encrypt+0xf8>
			(void)tc_aes_encrypt(buffer, buffer, sched);
    47d9:	4c 89 e2             	mov    %r12,%rdx
    47dc:	4c 89 ee             	mov    %r13,%rsi
    47df:	4c 89 ef             	mov    %r13,%rdi
    47e2:	e8 9f fd ff ff       	callq  4586 <tc_aes_encrypt>
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    47e7:	b9 10 00 00 00       	mov    $0x10,%ecx
    47ec:	48 89 ef             	mov    %rbp,%rdi
    47ef:	4c 89 ea             	mov    %r13,%rdx
    47f2:	be 10 00 00 00       	mov    $0x10,%esi
				    buffer, TC_AES_BLOCK_SIZE);
			out += TC_AES_BLOCK_SIZE;
    47f7:	48 83 c5 10          	add    $0x10,%rbp
			(void)_copy(out, TC_AES_BLOCK_SIZE,
    47fb:	e8 0a f4 ff ff       	callq  3c0a <_copy>
			m = 0;
    4800:	31 c9                	xor    %ecx,%ecx
	for (n = m = 0; n < inlen; ++n) {
    4802:	89 c8                	mov    %ecx,%eax
    4804:	eb b5                	jmp    47bb <tc_cbc_mode_encrypt+0xb1>
		}
	}

	return TC_CRYPTO_SUCCESS;
    4806:	b8 01 00 00 00       	mov    $0x1,%eax
    480b:	eb 02                	jmp    480f <tc_cbc_mode_encrypt+0x105>
		return TC_CRYPTO_FAIL;
    480d:	31 c0                	xor    %eax,%eax
}
    480f:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    4814:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    481b:	00 00 
    481d:	74 05                	je     4824 <tc_cbc_mode_encrypt+0x11a>
    481f:	e8 8c dc ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4824:	48 83 c4 28          	add    $0x28,%rsp
    4828:	5b                   	pop    %rbx
    4829:	5d                   	pop    %rbp
    482a:	41 5c                	pop    %r12
    482c:	41 5d                	pop    %r13
    482e:	41 5e                	pop    %r14
    4830:	41 5f                	pop    %r15
    4832:	c3                   	retq   

0000000000004833 <tc_cbc_mode_decrypt>:

int tc_cbc_mode_decrypt(uint8_t *out, unsigned int outlen, const uint8_t *in,
			    unsigned int inlen, const uint8_t *iv,
			    const TCAesKeySched_t sched)
{
    4833:	f3 0f 1e fa          	endbr64 
    4837:	41 57                	push   %r15
    4839:	41 56                	push   %r14
    483b:	41 55                	push   %r13
    483d:	41 54                	push   %r12
    483f:	55                   	push   %rbp
    4840:	53                   	push   %rbx
    4841:	48 83 ec 38          	sub    $0x38,%rsp
    4845:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    484c:	00 00 
    484e:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    4853:	31 c0                	xor    %eax,%eax
	uint8_t buffer[TC_AES_BLOCK_SIZE];
	const uint8_t *p;
	unsigned int n, m;

	/* sanity check the inputs */
	if (out == (uint8_t *) 0 ||
    4855:	48 85 ff             	test   %rdi,%rdi
    4858:	74 7d                	je     48d7 <tc_cbc_mode_decrypt+0xa4>
    485a:	49 89 d4             	mov    %rdx,%r12
    485d:	48 85 d2             	test   %rdx,%rdx
    4860:	74 75                	je     48d7 <tc_cbc_mode_decrypt+0xa4>
	    in == (const uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
    4862:	4d 85 c9             	test   %r9,%r9
    4865:	4d 89 ce             	mov    %r9,%r14
    4868:	0f 94 c2             	sete   %dl
	    inlen == 0 ||
    486b:	85 c9                	test   %ecx,%ecx
    486d:	0f 94 c0             	sete   %al
    4870:	08 c2                	or     %al,%dl
    4872:	75 63                	jne    48d7 <tc_cbc_mode_decrypt+0xa4>
    4874:	85 f6                	test   %esi,%esi
    4876:	74 5f                	je     48d7 <tc_cbc_mode_decrypt+0xa4>
	    outlen == 0 ||
	    (inlen % TC_AES_BLOCK_SIZE) != 0 ||
    4878:	89 c8                	mov    %ecx,%eax
    487a:	09 f0                	or     %esi,%eax
	    (outlen % TC_AES_BLOCK_SIZE) != 0 ||
    487c:	a8 0f                	test   $0xf,%al
    487e:	75 57                	jne    48d7 <tc_cbc_mode_decrypt+0xa4>
    4880:	39 f1                	cmp    %esi,%ecx
    4882:	75 53                	jne    48d7 <tc_cbc_mode_decrypt+0xa4>
    4884:	89 f0                	mov    %esi,%eax
    4886:	49 89 fd             	mov    %rdi,%r13
    4889:	4d 89 c7             	mov    %r8,%r15
    488c:	31 db                	xor    %ebx,%ebx
    488e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
	 * that would not otherwise be possible.
	 */
	p = iv;
	for (n = m = 0; n < outlen; ++n) {
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
			(void)tc_aes_decrypt(buffer, in, sched);
    4893:	48 8d 6c 24 18       	lea    0x18(%rsp),%rbp
	for (n = m = 0; n < outlen; ++n) {
    4898:	31 c0                	xor    %eax,%eax
    489a:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    489f:	74 2f                	je     48d0 <tc_cbc_mode_decrypt+0x9d>
		if ((n % TC_AES_BLOCK_SIZE) == 0) {
    48a1:	f6 c3 0f             	test   $0xf,%bl
    48a4:	75 14                	jne    48ba <tc_cbc_mode_decrypt+0x87>
			(void)tc_aes_decrypt(buffer, in, sched);
    48a6:	4c 89 e6             	mov    %r12,%rsi
    48a9:	4c 89 f2             	mov    %r14,%rdx
    48ac:	48 89 ef             	mov    %rbp,%rdi
			in += TC_AES_BLOCK_SIZE;
    48af:	49 83 c4 10          	add    $0x10,%r12
			(void)tc_aes_decrypt(buffer, in, sched);
    48b3:	e8 76 f8 ff ff       	callq  412e <tc_aes_decrypt>
			m = 0;
    48b8:	31 c0                	xor    %eax,%eax
		}
		*out++ = buffer[m++] ^ *p++;
    48ba:	89 c2                	mov    %eax,%edx
    48bc:	ff c0                	inc    %eax
    48be:	8a 54 14 18          	mov    0x18(%rsp,%rdx,1),%dl
    48c2:	41 32 14 1f          	xor    (%r15,%rbx,1),%dl
    48c6:	41 88 54 1d 00       	mov    %dl,0x0(%r13,%rbx,1)
	for (n = m = 0; n < outlen; ++n) {
    48cb:	48 ff c3             	inc    %rbx
    48ce:	eb ca                	jmp    489a <tc_cbc_mode_decrypt+0x67>
	}

	return TC_CRYPTO_SUCCESS;
    48d0:	b8 01 00 00 00       	mov    $0x1,%eax
    48d5:	eb 02                	jmp    48d9 <tc_cbc_mode_decrypt+0xa6>
		return TC_CRYPTO_FAIL;
    48d7:	31 c0                	xor    %eax,%eax
}
    48d9:	48 8b 7c 24 28       	mov    0x28(%rsp),%rdi
    48de:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    48e5:	00 00 
    48e7:	74 05                	je     48ee <tc_cbc_mode_decrypt+0xbb>
    48e9:	e8 c2 db ff ff       	callq  24b0 <__stack_chk_fail@plt>
    48ee:	48 83 c4 38          	add    $0x38,%rsp
    48f2:	5b                   	pop    %rbx
    48f3:	5d                   	pop    %rbp
    48f4:	41 5c                	pop    %r12
    48f6:	41 5d                	pop    %r13
    48f8:	41 5e                	pop    %r14
    48fa:	41 5f                	pop    %r15
    48fc:	c3                   	retq   

00000000000048fd <tc_ctr_mode>:
#include <tinycrypt/ctr_mode.h>
#include <tinycrypt/utils.h>

int tc_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
		unsigned int inlen, uint8_t *ctr, const TCAesKeySched_t sched)
{
    48fd:	f3 0f 1e fa          	endbr64 
    4901:	41 57                	push   %r15
    4903:	41 56                	push   %r14
    4905:	41 55                	push   %r13
    4907:	41 54                	push   %r12
    4909:	55                   	push   %rbp
    490a:	53                   	push   %rbx
    490b:	48 83 ec 58          	sub    $0x58,%rsp
    490f:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4916:	00 00 
    4918:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    491d:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	unsigned int block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    491f:	48 85 ff             	test   %rdi,%rdi
    4922:	74 08                	je     492c <tc_ctr_mode+0x2f>
    4924:	49 89 d4             	mov    %rdx,%r12
    4927:	48 85 d2             	test   %rdx,%rdx
    492a:	75 07                	jne    4933 <tc_ctr_mode+0x36>
	    ctr == (uint8_t *) 0 ||
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
	    outlen == 0 ||
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
    492c:	31 c0                	xor    %eax,%eax
    492e:	e9 cb 00 00 00       	jmpq   49fe <tc_ctr_mode+0x101>
	    ctr == (uint8_t *) 0 ||
    4933:	4d 85 c0             	test   %r8,%r8
    4936:	74 f4                	je     492c <tc_ctr_mode+0x2f>
    4938:	4d 89 cd             	mov    %r9,%r13
    493b:	4d 85 c9             	test   %r9,%r9
    493e:	74 ec                	je     492c <tc_ctr_mode+0x2f>
	    inlen == 0 ||
    4940:	85 c9                	test   %ecx,%ecx
    4942:	89 cb                	mov    %ecx,%ebx
    4944:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    4947:	85 f6                	test   %esi,%esi
    4949:	0f 94 c0             	sete   %al
    494c:	08 c2                	or     %al,%dl
    494e:	75 dc                	jne    492c <tc_ctr_mode+0x2f>
    4950:	39 f1                	cmp    %esi,%ecx
    4952:	75 d8                	jne    492c <tc_ctr_mode+0x2f>
	}

	/* copy the ctr to the nonce */
	(void)_copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    4954:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4959:	4c 89 c2             	mov    %r8,%rdx
    495c:	48 89 fd             	mov    %rdi,%rbp
    495f:	b9 10 00 00 00       	mov    $0x10,%ecx
    4964:	4c 89 ff             	mov    %r15,%rdi
    4967:	be 10 00 00 00       	mov    $0x10,%esi
    496c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    4971:	e8 94 f2 ff ff       	callq  3c0a <_copy>

	/* select the last 4 bytes of the nonce to be incremented */
	block_num = (nonce[12] << 24) | (nonce[13] << 16) |
    4976:	89 d8                	mov    %ebx,%eax
    4978:	44 8b 4c 24 44       	mov    0x44(%rsp),%r9d
		    (nonce[14] << 8) | (nonce[15]);
	for (i = 0; i < inlen; ++i) {
    497d:	31 db                	xor    %ebx,%ebx
    497f:	48 89 04 24          	mov    %rax,(%rsp)
    4983:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			/* encrypt data using the current nonce */
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    4988:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
    498d:	41 0f c9             	bswap  %r9d
	for (i = 0; i < inlen; ++i) {
    4990:	48 3b 1c 24          	cmp    (%rsp),%rbx
    4994:	74 5b                	je     49f1 <tc_ctr_mode+0xf4>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    4996:	41 89 de             	mov    %ebx,%r14d
    4999:	41 83 e6 0f          	and    $0xf,%r14d
    499d:	75 3d                	jne    49dc <tc_ctr_mode+0xdf>
			if (tc_aes_encrypt(buffer, nonce, sched)) {
    499f:	4c 89 ea             	mov    %r13,%rdx
    49a2:	4c 89 fe             	mov    %r15,%rsi
    49a5:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
    49aa:	44 89 4c 24 14       	mov    %r9d,0x14(%rsp)
    49af:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
    49b4:	e8 cd fb ff ff       	callq  4586 <tc_aes_encrypt>
    49b9:	85 c0                	test   %eax,%eax
    49bb:	0f 84 6b ff ff ff    	je     492c <tc_ctr_mode+0x2f>
				block_num++;
    49c1:	44 8b 4c 24 14       	mov    0x14(%rsp),%r9d
				nonce[12] = (uint8_t)(block_num >> 24);
    49c6:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    49cb:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
				block_num++;
    49d0:	41 ff c1             	inc    %r9d
				nonce[13] = (uint8_t)(block_num >> 16);
				nonce[14] = (uint8_t)(block_num >> 8);
				nonce[15] = (uint8_t)(block_num);
    49d3:	44 89 c8             	mov    %r9d,%eax
    49d6:	0f c8                	bswap  %eax
				nonce[12] = (uint8_t)(block_num >> 24);
    49d8:	89 44 24 44          	mov    %eax,0x44(%rsp)
			} else {
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i%(TC_AES_BLOCK_SIZE)] ^ *in++;
    49dc:	45 89 f6             	mov    %r14d,%r14d
    49df:	42 8a 44 34 28       	mov    0x28(%rsp,%r14,1),%al
    49e4:	41 32 04 1c          	xor    (%r12,%rbx,1),%al
    49e8:	88 44 1d 00          	mov    %al,0x0(%rbp,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    49ec:	48 ff c3             	inc    %rbx
    49ef:	eb 9f                	jmp    4990 <tc_ctr_mode+0x93>
	}

	/* update the counter */
	ctr[12] = nonce[12]; ctr[13] = nonce[13];
    49f1:	8b 44 24 44          	mov    0x44(%rsp),%eax
    49f5:	41 89 40 0c          	mov    %eax,0xc(%r8)
	ctr[14] = nonce[14]; ctr[15] = nonce[15];

	return TC_CRYPTO_SUCCESS;
    49f9:	b8 01 00 00 00       	mov    $0x1,%eax
}
    49fe:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    4a03:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4a0a:	00 00 
    4a0c:	74 05                	je     4a13 <tc_ctr_mode+0x116>
    4a0e:	e8 9d da ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4a13:	48 83 c4 58          	add    $0x58,%rsp
    4a17:	5b                   	pop    %rbx
    4a18:	5d                   	pop    %rbp
    4a19:	41 5c                	pop    %r12
    4a1b:	41 5d                	pop    %r13
    4a1d:	41 5e                	pop    %r14
    4a1f:	41 5f                	pop    %r15
    4a21:	c3                   	retq   

0000000000004a22 <ccm_cbc_mac>:
/**
 * Variation of CBC-MAC mode used in CCM.
 */
static void ccm_cbc_mac(uint8_t *T, const uint8_t *data, unsigned int dlen,
			unsigned int flag, TCAesKeySched_t sched)
{
    4a22:	41 56                	push   %r14
    4a24:	41 55                	push   %r13
    4a26:	4d 89 c5             	mov    %r8,%r13
    4a29:	41 54                	push   %r12
    4a2b:	49 89 f4             	mov    %rsi,%r12
    4a2e:	55                   	push   %rbp
    4a2f:	89 d5                	mov    %edx,%ebp
    4a31:	53                   	push   %rbx
    4a32:	48 89 fb             	mov    %rdi,%rbx

	unsigned int i;

	if (flag > 0) {
    4a35:	85 c9                	test   %ecx,%ecx
    4a37:	74 34                	je     4a6d <ccm_cbc_mac+0x4b>
		T[0] ^= (uint8_t)(dlen >> 8);
    4a39:	89 d0                	mov    %edx,%eax
		T[1] ^= (uint8_t)(dlen);
    4a3b:	30 57 01             	xor    %dl,0x1(%rdi)
		dlen += 2; i = 2;
    4a3e:	83 c5 02             	add    $0x2,%ebp
    4a41:	b9 02 00 00 00       	mov    $0x2,%ecx
		T[0] ^= (uint8_t)(dlen >> 8);
    4a46:	c1 e8 08             	shr    $0x8,%eax
    4a49:	30 07                	xor    %al,(%rdi)
		dlen += 2; i = 2;
    4a4b:	eb 20                	jmp    4a6d <ccm_cbc_mac+0x4b>
	} else {
		i = 0;
	}

	while (i < dlen) {
		T[i++ % (Nb * Nk)] ^= *data++;
    4a4d:	44 8d 71 01          	lea    0x1(%rcx),%r14d
    4a51:	83 e1 0f             	and    $0xf,%ecx
    4a54:	49 ff c4             	inc    %r12
    4a57:	41 8a 44 24 ff       	mov    -0x1(%r12),%al
    4a5c:	30 04 0b             	xor    %al,(%rbx,%rcx,1)
		if (((i % (Nb * Nk)) == 0) || dlen == i) {
    4a5f:	41 f6 c6 0f          	test   $0xf,%r14b
    4a63:	74 0e                	je     4a73 <ccm_cbc_mac+0x51>
    4a65:	41 39 ee             	cmp    %ebp,%r14d
    4a68:	74 09                	je     4a73 <ccm_cbc_mac+0x51>
		T[i++ % (Nb * Nk)] ^= *data++;
    4a6a:	44 89 f1             	mov    %r14d,%ecx
	while (i < dlen) {
    4a6d:	39 e9                	cmp    %ebp,%ecx
    4a6f:	72 dc                	jb     4a4d <ccm_cbc_mac+0x2b>
    4a71:	eb 10                	jmp    4a83 <ccm_cbc_mac+0x61>
			(void) tc_aes_encrypt(T, T, sched);
    4a73:	4c 89 ea             	mov    %r13,%rdx
    4a76:	48 89 de             	mov    %rbx,%rsi
    4a79:	48 89 df             	mov    %rbx,%rdi
    4a7c:	e8 05 fb ff ff       	callq  4586 <tc_aes_encrypt>
    4a81:	eb e7                	jmp    4a6a <ccm_cbc_mac+0x48>
		}
	}
}
    4a83:	5b                   	pop    %rbx
    4a84:	5d                   	pop    %rbp
    4a85:	41 5c                	pop    %r12
    4a87:	41 5d                	pop    %r13
    4a89:	41 5e                	pop    %r14
    4a8b:	c3                   	retq   

0000000000004a8c <ccm_ctr_mode.constprop.0>:
 * The CTR mode used by CCM is slightly different than the conventional CTR
 * mode (the counter is increased before encryption, instead of after
 * encryption). Besides, it is assumed that the counter is stored in the last
 * 2 bytes of the nonce.
 */
static int ccm_ctr_mode(uint8_t *out, unsigned int outlen, const uint8_t *in,
    4a8c:	41 57                	push   %r15
    4a8e:	41 56                	push   %r14
    4a90:	41 55                	push   %r13
    4a92:	41 54                	push   %r12
    4a94:	55                   	push   %rbp
    4a95:	53                   	push   %rbx
    4a96:	48 83 ec 58          	sub    $0x58,%rsp
    4a9a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4aa1:	00 00 
    4aa3:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    4aa8:	31 c0                	xor    %eax,%eax
	uint8_t nonce[TC_AES_BLOCK_SIZE];
	uint16_t block_num;
	unsigned int i;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
    4aaa:	48 85 ff             	test   %rdi,%rdi
    4aad:	0f 84 dc 00 00 00    	je     4b8f <ccm_ctr_mode.constprop.0+0x103>
    4ab3:	49 89 d5             	mov    %rdx,%r13
    4ab6:	48 85 d2             	test   %rdx,%rdx
    4ab9:	0f 84 d0 00 00 00    	je     4b8f <ccm_ctr_mode.constprop.0+0x103>
    4abf:	4d 89 ce             	mov    %r9,%r14
	    in == (uint8_t *) 0 ||
	    ctr == (uint8_t *) 0 ||
    4ac2:	4d 85 c9             	test   %r9,%r9
    4ac5:	0f 84 c6 00 00 00    	je     4b91 <ccm_ctr_mode.constprop.0+0x105>
	    sched == (TCAesKeySched_t) 0 ||
	    inlen == 0 ||
    4acb:	85 c9                	test   %ecx,%ecx
    4acd:	89 cb                	mov    %ecx,%ebx
    4acf:	0f 94 c2             	sete   %dl
	    outlen == 0 ||
    4ad2:	85 f6                	test   %esi,%esi
    4ad4:	0f 94 c0             	sete   %al
    4ad7:	08 c2                	or     %al,%dl
    4ad9:	0f 85 b0 00 00 00    	jne    4b8f <ccm_ctr_mode.constprop.0+0x103>
    4adf:	39 f1                	cmp    %esi,%ecx
    4ae1:	0f 85 a8 00 00 00    	jne    4b8f <ccm_ctr_mode.constprop.0+0x103>
	    outlen != inlen) {
		return TC_CRYPTO_FAIL;
	}

	/* copy the counter to the nonce */
	(void) _copy(nonce, sizeof(nonce), ctr, sizeof(nonce));
    4ae7:	4c 8d 7c 24 38       	lea    0x38(%rsp),%r15
    4aec:	4c 89 c2             	mov    %r8,%rdx
    4aef:	49 89 fc             	mov    %rdi,%r12
    4af2:	b9 10 00 00 00       	mov    $0x10,%ecx
    4af7:	4c 89 ff             	mov    %r15,%rdi
    4afa:	be 10 00 00 00       	mov    $0x10,%esi
    4aff:	4c 89 c5             	mov    %r8,%rbp
    4b02:	e8 03 f1 ff ff       	callq  3c0a <_copy>

	/* select the last 2 bytes of the nonce to be incremented */
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4b07:	44 0f b6 44 24 46    	movzbl 0x46(%rsp),%r8d
    4b0d:	0f b6 44 24 47       	movzbl 0x47(%rsp),%eax
	for (i = 0; i < inlen; ++i) {
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
			block_num++;
			nonce[14] = (uint8_t)(block_num >> 8);
			nonce[15] = (uint8_t)(block_num);
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4b12:	48 8d 7c 24 28       	lea    0x28(%rsp),%rdi
	block_num = (uint16_t) ((nonce[14] << 8)|(nonce[15]));
    4b17:	41 c1 e0 08          	shl    $0x8,%r8d
    4b1b:	41 09 c0             	or     %eax,%r8d
	for (i = 0; i < inlen; ++i) {
    4b1e:	89 d8                	mov    %ebx,%eax
    4b20:	31 db                	xor    %ebx,%ebx
    4b22:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    4b27:	48 39 5c 24 08       	cmp    %rbx,0x8(%rsp)
    4b2c:	74 51                	je     4b7f <ccm_ctr_mode.constprop.0+0xf3>
		if ((i % (TC_AES_BLOCK_SIZE)) == 0) {
    4b2e:	89 d8                	mov    %ebx,%eax
    4b30:	83 e0 0f             	and    $0xf,%eax
    4b33:	89 44 24 18          	mov    %eax,0x18(%rsp)
    4b37:	75 30                	jne    4b69 <ccm_ctr_mode.constprop.0+0xdd>
			block_num++;
    4b39:	41 ff c0             	inc    %r8d
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4b3c:	4c 89 f2             	mov    %r14,%rdx
    4b3f:	4c 89 fe             	mov    %r15,%rsi
    4b42:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
			nonce[14] = (uint8_t)(block_num >> 8);
    4b47:	44 89 c0             	mov    %r8d,%eax
    4b4a:	44 89 44 24 1c       	mov    %r8d,0x1c(%rsp)
    4b4f:	86 e0                	xchg   %ah,%al
    4b51:	66 89 44 24 46       	mov    %ax,0x46(%rsp)
			if (!tc_aes_encrypt(buffer, nonce, sched)) {
    4b56:	e8 2b fa ff ff       	callq  4586 <tc_aes_encrypt>
    4b5b:	48 8b 7c 24 10       	mov    0x10(%rsp),%rdi
    4b60:	44 8b 44 24 1c       	mov    0x1c(%rsp),%r8d
    4b65:	85 c0                	test   %eax,%eax
    4b67:	74 28                	je     4b91 <ccm_ctr_mode.constprop.0+0x105>
				return TC_CRYPTO_FAIL;
			}
		}
		/* update the output */
		*out++ = buffer[i % (TC_AES_BLOCK_SIZE)] ^ *in++;
    4b69:	8b 44 24 18          	mov    0x18(%rsp),%eax
    4b6d:	8a 44 04 28          	mov    0x28(%rsp,%rax,1),%al
    4b71:	41 32 44 1d 00       	xor    0x0(%r13,%rbx,1),%al
    4b76:	41 88 04 1c          	mov    %al,(%r12,%rbx,1)
	for (i = 0; i < inlen; ++i) {
    4b7a:	48 ff c3             	inc    %rbx
    4b7d:	eb a8                	jmp    4b27 <ccm_ctr_mode.constprop.0+0x9b>
	}

	/* update the counter */
	ctr[14] = nonce[14]; ctr[15] = nonce[15];
    4b7f:	66 8b 44 24 46       	mov    0x46(%rsp),%ax
    4b84:	66 89 45 0e          	mov    %ax,0xe(%rbp)

	return TC_CRYPTO_SUCCESS;
    4b88:	b8 01 00 00 00       	mov    $0x1,%eax
    4b8d:	eb 02                	jmp    4b91 <ccm_ctr_mode.constprop.0+0x105>
		return TC_CRYPTO_FAIL;
    4b8f:	31 c0                	xor    %eax,%eax
}
    4b91:	48 8b 4c 24 48       	mov    0x48(%rsp),%rcx
    4b96:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    4b9d:	00 00 
    4b9f:	74 05                	je     4ba6 <ccm_ctr_mode.constprop.0+0x11a>
    4ba1:	e8 0a d9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4ba6:	48 83 c4 58          	add    $0x58,%rsp
    4baa:	5b                   	pop    %rbx
    4bab:	5d                   	pop    %rbp
    4bac:	41 5c                	pop    %r12
    4bae:	41 5d                	pop    %r13
    4bb0:	41 5e                	pop    %r14
    4bb2:	41 5f                	pop    %r15
    4bb4:	c3                   	retq   

0000000000004bb5 <tc_ccm_config>:
{
    4bb5:	f3 0f 1e fa          	endbr64 
	if (c == (TCCcmMode_t) 0 ||
    4bb9:	48 85 ff             	test   %rdi,%rdi
    4bbc:	0f 94 c0             	sete   %al
	    sched == (TCAesKeySched_t) 0 ||
    4bbf:	48 85 f6             	test   %rsi,%rsi
    4bc2:	41 0f 94 c1          	sete   %r9b
	if (c == (TCCcmMode_t) 0 ||
    4bc6:	44 09 c8             	or     %r9d,%eax
	    sched == (TCAesKeySched_t) 0 ||
    4bc9:	48 85 d2             	test   %rdx,%rdx
    4bcc:	41 0f 94 c1          	sete   %r9b
	} else if (nlen != 13) {
    4bd0:	44 08 c8             	or     %r9b,%al
    4bd3:	75 27                	jne    4bfc <tc_ccm_config+0x47>
    4bd5:	83 f9 0d             	cmp    $0xd,%ecx
    4bd8:	75 22                	jne    4bfc <tc_ccm_config+0x47>
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    4bda:	41 8d 48 fc          	lea    -0x4(%r8),%ecx
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    4bde:	31 c0                	xor    %eax,%eax
	} else if ((mlen < 4) || (mlen > 16) || (mlen & 1)) {
    4be0:	83 f9 0c             	cmp    $0xc,%ecx
    4be3:	77 19                	ja     4bfe <tc_ccm_config+0x49>
    4be5:	41 f6 c0 01          	test   $0x1,%r8b
    4be9:	75 13                	jne    4bfe <tc_ccm_config+0x49>
	c->mlen = mlen;
    4beb:	44 89 47 10          	mov    %r8d,0x10(%rdi)
	return TC_CRYPTO_SUCCESS;
    4bef:	b8 01 00 00 00       	mov    $0x1,%eax
	c->sched = sched;
    4bf4:	48 89 37             	mov    %rsi,(%rdi)
	c->nonce = nonce;
    4bf7:	48 89 57 08          	mov    %rdx,0x8(%rdi)
	return TC_CRYPTO_SUCCESS;
    4bfb:	c3                   	retq   
		return TC_CRYPTO_FAIL; /* The allowed nonce size is: 13. See documentation.*/
    4bfc:	31 c0                	xor    %eax,%eax
}
    4bfe:	c3                   	retq   

0000000000004bff <tc_ccm_generation_encryption>:

int tc_ccm_generation_encryption(uint8_t *out, unsigned int olen,
				 const uint8_t *associated_data,
				 unsigned int alen, const uint8_t *payload,
				 unsigned int plen, TCCcmMode_t c)
{
    4bff:	f3 0f 1e fa          	endbr64 
    4c03:	41 57                	push   %r15
    4c05:	41 56                	push   %r14
    4c07:	41 55                	push   %r13
    4c09:	41 54                	push   %r12
    4c0b:	55                   	push   %rbp
    4c0c:	53                   	push   %rbx
    4c0d:	48 83 ec 48          	sub    $0x48,%rsp
    4c11:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4c18:	00 00 
    4c1a:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4c1f:	31 c0                	xor    %eax,%eax
    4c21:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4c28:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4c29:	48 85 ff             	test   %rdi,%rdi
    4c2c:	0f 84 59 01 00 00    	je     4d8b <tc_ccm_generation_encryption+0x18c>
    4c32:	48 85 ed             	test   %rbp,%rbp
    4c35:	0f 84 50 01 00 00    	je     4d8b <tc_ccm_generation_encryption+0x18c>
    4c3b:	44 89 cb             	mov    %r9d,%ebx
    4c3e:	49 89 fc             	mov    %rdi,%r12
    4c41:	49 89 d3             	mov    %rdx,%r11
    4c44:	41 89 ca             	mov    %ecx,%r10d
    4c47:	4d 89 c6             	mov    %r8,%r14
		(c == (TCCcmMode_t) 0) ||
    4c4a:	85 db                	test   %ebx,%ebx
    4c4c:	74 0c                	je     4c5a <tc_ccm_generation_encryption+0x5b>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
		((alen > 0) && (associated_data == (uint8_t *) 0)) ||
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4c4e:	45 31 c0             	xor    %r8d,%r8d
		(c == (TCCcmMode_t) 0) ||
    4c51:	4d 85 f6             	test   %r14,%r14
    4c54:	0f 84 34 01 00 00    	je     4d8e <tc_ccm_generation_encryption+0x18f>
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4c5a:	45 85 d2             	test   %r10d,%r10d
    4c5d:	74 0c                	je     4c6b <tc_ccm_generation_encryption+0x6c>
		return TC_CRYPTO_FAIL;
    4c5f:	45 31 c0             	xor    %r8d,%r8d
		((plen > 0) && (payload == (uint8_t *) 0)) ||
    4c62:	4d 85 db             	test   %r11,%r11
    4c65:	0f 84 23 01 00 00    	je     4d8e <tc_ccm_generation_encryption+0x18f>
		(alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    4c6b:	41 81 fa ff fe 00 00 	cmp    $0xfeff,%r10d
    4c72:	0f 87 13 01 00 00    	ja     4d8b <tc_ccm_generation_encryption+0x18c>
    4c78:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    4c7e:	0f 87 07 01 00 00    	ja     4d8b <tc_ccm_generation_encryption+0x18c>
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4c84:	8b 45 10             	mov    0x10(%rbp),%eax
		return TC_CRYPTO_FAIL;
    4c87:	45 31 c0             	xor    %r8d,%r8d
		(olen < (plen + c->mlen))) {  /* invalid output buffer size */
    4c8a:	8d 14 18             	lea    (%rax,%rbx,1),%edx
		(plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    4c8d:	39 f2                	cmp    %esi,%edx
    4c8f:	0f 87 f9 00 00 00    	ja     4d8e <tc_ccm_generation_encryption+0x18f>
	unsigned int i;

	/* GENERATING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4c95:	45 85 d2             	test   %r10d,%r10d
	for (i = 1; i <= 13; ++i) {
		b[i] = c->nonce[i - 1];
    4c98:	48 8b 75 08          	mov    0x8(%rbp),%rsi
    4c9c:	4c 8d 6c 24 18       	lea    0x18(%rsp),%r13
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4ca1:	0f 95 c2             	setne  %dl
    4ca4:	83 e8 02             	sub    $0x2,%eax
    4ca7:	d1 e8                	shr    %eax
    4ca9:	c1 e2 06             	shl    $0x6,%edx
    4cac:	c1 e0 03             	shl    $0x3,%eax
    4caf:	09 d0                	or     %edx,%eax
		b[i] = c->nonce[i - 1];
    4cb1:	48 8d 54 24 19       	lea    0x19(%rsp),%rdx
	b[0] = ((alen > 0) ? 0x40:0) | (((c->mlen - 2) / 2 << 3)) | (1);
    4cb6:	83 c8 01             	or     $0x1,%eax
    4cb9:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    4cbd:	31 c0                	xor    %eax,%eax
    4cbf:	8a 0c 06             	mov    (%rsi,%rax,1),%cl
    4cc2:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
	for (i = 1; i <= 13; ++i) {
    4cc5:	48 ff c0             	inc    %rax
    4cc8:	48 83 f8 0d          	cmp    $0xd,%rax
    4ccc:	75 f1                	jne    4cbf <tc_ccm_generation_encryption+0xc0>
	}
	b[14] = (uint8_t)(plen >> 8);
    4cce:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(tag, b, c->sched);
    4cd0:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4cd4:	4c 8d 7c 24 28       	lea    0x28(%rsp),%r15
    4cd9:	4c 89 ee             	mov    %r13,%rsi
	b[14] = (uint8_t)(plen >> 8);
    4cdc:	86 e0                	xchg   %ah,%al
	(void) tc_aes_encrypt(tag, b, c->sched);
    4cde:	4c 89 ff             	mov    %r15,%rdi
    4ce1:	44 89 54 24 0c       	mov    %r10d,0xc(%rsp)
    4ce6:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = (uint8_t)(plen >> 8);
    4cea:	66 89 44 24 26       	mov    %ax,0x26(%rsp)
	(void) tc_aes_encrypt(tag, b, c->sched);
    4cef:	e8 92 f8 ff ff       	callq  4586 <tc_aes_encrypt>
	if (alen > 0) {
    4cf4:	44 8b 54 24 0c       	mov    0xc(%rsp),%r10d
    4cf9:	4c 8b 1c 24          	mov    (%rsp),%r11
    4cfd:	45 85 d2             	test   %r10d,%r10d
    4d00:	74 17                	je     4d19 <tc_ccm_generation_encryption+0x11a>
		ccm_cbc_mac(tag, associated_data, alen, 1, c->sched);
    4d02:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4d06:	b9 01 00 00 00       	mov    $0x1,%ecx
    4d0b:	44 89 d2             	mov    %r10d,%edx
    4d0e:	4c 89 de             	mov    %r11,%rsi
    4d11:	4c 89 ff             	mov    %r15,%rdi
    4d14:	e8 09 fd ff ff       	callq  4a22 <ccm_cbc_mac>
	}
	if (plen > 0) {
    4d19:	85 db                	test   %ebx,%ebx
    4d1b:	74 13                	je     4d30 <tc_ccm_generation_encryption+0x131>
		ccm_cbc_mac(tag, payload, plen, 0, c->sched);
    4d1d:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4d21:	31 c9                	xor    %ecx,%ecx
    4d23:	89 da                	mov    %ebx,%edx
    4d25:	4c 89 f6             	mov    %r14,%rsi
    4d28:	4c 89 ff             	mov    %r15,%rdi
    4d2b:	e8 f2 fc ff ff       	callq  4a22 <ccm_cbc_mac>
	/* formatting the sequence b for encryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
	b[14] = b[15] = TC_ZERO_BYTE;

	/* encrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4d30:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    4d34:	89 d9                	mov    %ebx,%ecx
    4d36:	89 de                	mov    %ebx,%esi
    4d38:	4d 89 e8             	mov    %r13,%r8
    4d3b:	4c 89 f2             	mov    %r14,%rdx
    4d3e:	4c 89 e7             	mov    %r12,%rdi
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    4d41:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/

	/* encrypting b and adding the tag to the output: */
	(void) tc_aes_encrypt(b, b, c->sched);
	out += plen;
    4d46:	4c 01 e3             	add    %r12,%rbx
	b[14] = b[15] = TC_ZERO_BYTE;
    4d49:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen, payload, plen, b, c->sched);
    4d50:	e8 37 fd ff ff       	callq  4a8c <ccm_ctr_mode.constprop.0>
	(void) tc_aes_encrypt(b, b, c->sched);
    4d55:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4d59:	4c 89 ee             	mov    %r13,%rsi
    4d5c:	4c 89 ef             	mov    %r13,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter for ctr_mode (0):*/
    4d5f:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4d66:	e8 1b f8 ff ff       	callq  4586 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    4d6b:	31 c0                	xor    %eax,%eax
    4d6d:	39 45 10             	cmp    %eax,0x10(%rbp)
    4d70:	76 11                	jbe    4d83 <tc_ccm_generation_encryption+0x184>
		*out++ = tag[i] ^ b[i];
    4d72:	41 8a 14 07          	mov    (%r15,%rax,1),%dl
    4d76:	41 32 54 05 00       	xor    0x0(%r13,%rax,1),%dl
    4d7b:	88 14 03             	mov    %dl,(%rbx,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    4d7e:	48 ff c0             	inc    %rax
    4d81:	eb ea                	jmp    4d6d <tc_ccm_generation_encryption+0x16e>
	}

	return TC_CRYPTO_SUCCESS;
    4d83:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    4d89:	eb 03                	jmp    4d8e <tc_ccm_generation_encryption+0x18f>
		return TC_CRYPTO_FAIL;
    4d8b:	45 31 c0             	xor    %r8d,%r8d
}
    4d8e:	48 8b 44 24 38       	mov    0x38(%rsp),%rax
    4d93:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    4d9a:	00 00 
    4d9c:	74 05                	je     4da3 <tc_ccm_generation_encryption+0x1a4>
    4d9e:	e8 0d d7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4da3:	48 83 c4 48          	add    $0x48,%rsp
    4da7:	44 89 c0             	mov    %r8d,%eax
    4daa:	5b                   	pop    %rbx
    4dab:	5d                   	pop    %rbp
    4dac:	41 5c                	pop    %r12
    4dae:	41 5d                	pop    %r13
    4db0:	41 5e                	pop    %r14
    4db2:	41 5f                	pop    %r15
    4db4:	c3                   	retq   

0000000000004db5 <tc_ccm_decryption_verification>:

int tc_ccm_decryption_verification(uint8_t *out, unsigned int olen,
				   const uint8_t *associated_data,
				   unsigned int alen, const uint8_t *payload,
				   unsigned int plen, TCCcmMode_t c)
{
    4db5:	f3 0f 1e fa          	endbr64 
    4db9:	41 57                	push   %r15
    4dbb:	41 56                	push   %r14
    4dbd:	41 55                	push   %r13
    4dbf:	49 89 fd             	mov    %rdi,%r13
    4dc2:	41 54                	push   %r12
    4dc4:	55                   	push   %rbp
    4dc5:	53                   	push   %rbx
    4dc6:	48 83 ec 48          	sub    $0x48,%rsp
    4dca:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    4dd1:	00 00 
    4dd3:	48 89 44 24 38       	mov    %rax,0x38(%rsp)
    4dd8:	31 c0                	xor    %eax,%eax
    4dda:	48 8b ac 24 80 00 00 	mov    0x80(%rsp),%rbp
    4de1:	00 

	/* input sanity check: */
	if ((out == (uint8_t *) 0) ||
    4de2:	48 85 ff             	test   %rdi,%rdi
    4de5:	0f 84 a2 01 00 00    	je     4f8d <tc_ccm_decryption_verification+0x1d8>
    4deb:	48 85 ed             	test   %rbp,%rbp
    4dee:	0f 84 99 01 00 00    	je     4f8d <tc_ccm_decryption_verification+0x1d8>
    4df4:	89 f7                	mov    %esi,%edi
    4df6:	49 89 d6             	mov    %rdx,%r14
    4df9:	41 89 cf             	mov    %ecx,%r15d
    4dfc:	4d 89 c3             	mov    %r8,%r11
    4dff:	44 89 cb             	mov    %r9d,%ebx
	    (c == (TCCcmMode_t) 0) ||
    4e02:	45 85 c9             	test   %r9d,%r9d
    4e05:	74 09                	je     4e10 <tc_ccm_decryption_verification+0x5b>
    4e07:	4d 85 c0             	test   %r8,%r8
    4e0a:	0f 84 7f 01 00 00    	je     4f8f <tc_ccm_decryption_verification+0x1da>
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4e10:	45 85 ff             	test   %r15d,%r15d
    4e13:	74 0b                	je     4e20 <tc_ccm_decryption_verification+0x6b>
	    ((alen > 0) && (associated_data == (uint8_t *) 0)) ||
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
		return TC_CRYPTO_FAIL;
    4e15:	31 c0                	xor    %eax,%eax
	    ((plen > 0) && (payload == (uint8_t *) 0)) ||
    4e17:	4d 85 f6             	test   %r14,%r14
    4e1a:	0f 84 6f 01 00 00    	je     4f8f <tc_ccm_decryption_verification+0x1da>
	    (alen >= TC_CCM_AAD_MAX_BYTES) || /* associated data size unsupported */
    4e20:	41 81 ff ff fe 00 00 	cmp    $0xfeff,%r15d
    4e27:	0f 87 60 01 00 00    	ja     4f8d <tc_ccm_decryption_verification+0x1d8>
    4e2d:	81 fb ff ff 00 00    	cmp    $0xffff,%ebx
    4e33:	0f 87 54 01 00 00    	ja     4f8d <tc_ccm_decryption_verification+0x1d8>
	    (olen < plen - c->mlen)) { /* invalid output buffer size */
    4e39:	89 de                	mov    %ebx,%esi
    4e3b:	2b 75 10             	sub    0x10(%rbp),%esi
		return TC_CRYPTO_FAIL;
    4e3e:	31 c0                	xor    %eax,%eax
	    (plen >= TC_CCM_PAYLOAD_MAX_BYTES) || /* payload size unsupported */
    4e40:	39 fe                	cmp    %edi,%esi
    4e42:	0f 87 47 01 00 00    	ja     4f8f <tc_ccm_decryption_verification+0x1da>
	unsigned int i;

	/* DECRYPTION: */

	/* formatting the sequence b for decryption: */
	b[0] = 1; /* q - 1 = 2 - 1 = 1 */
    4e48:	c6 44 24 18 01       	movb   $0x1,0x18(%rsp)
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    4e4d:	48 8b 4d 08          	mov    0x8(%rbp),%rcx
    4e51:	31 c0                	xor    %eax,%eax
    4e53:	4c 8d 64 24 18       	lea    0x18(%rsp),%r12
    4e58:	4c 8d 54 24 19       	lea    0x19(%rsp),%r10
    4e5d:	8a 14 01             	mov    (%rcx,%rax,1),%dl
    4e60:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    4e64:	48 ff c0             	inc    %rax
    4e67:	48 83 f8 0d          	cmp    $0xd,%rax
    4e6b:	75 f0                	jne    4e5d <tc_ccm_decryption_verification+0xa8>
	}
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */

	/* decrypting payload using ctr mode: */
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    4e6d:	4c 8b 4d 00          	mov    0x0(%rbp),%r9
    4e71:	89 f1                	mov    %esi,%ecx
    4e73:	4c 89 da             	mov    %r11,%rdx
    4e76:	4d 89 e0             	mov    %r12,%r8
    4e79:	4c 89 ef             	mov    %r13,%rdi
    4e7c:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
    4e81:	4c 89 1c 24          	mov    %r11,(%rsp)
	b[14] = b[15] = TC_ZERO_BYTE; /* initial counter value is 0 */
    4e85:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	ccm_ctr_mode(out, plen - c->mlen, payload, plen - c->mlen, b, c->sched);
    4e8c:	e8 fb fb ff ff       	callq  4a8c <ccm_ctr_mode.constprop.0>

	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */

	/* encrypting b and restoring the tag from input: */
	(void) tc_aes_encrypt(b, b, c->sched);
    4e91:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4e95:	4c 89 e6             	mov    %r12,%rsi
    4e98:	4c 89 e7             	mov    %r12,%rdi
	b[14] = b[15] = TC_ZERO_BYTE; /* restoring initial counter value (0) */
    4e9b:	66 c7 44 24 26 00 00 	movw   $0x0,0x26(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4ea2:	e8 df f6 ff ff       	callq  4586 <tc_aes_encrypt>
	for (i = 0; i < c->mlen; ++i) {
    4ea7:	8b 45 10             	mov    0x10(%rbp),%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4eaa:	4c 8b 1c 24          	mov    (%rsp),%r11
    4eae:	41 89 d8             	mov    %ebx,%r8d
	for (i = 0; i < c->mlen; ++i) {
    4eb1:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4eb6:	49 29 c0             	sub    %rax,%r8
	for (i = 0; i < c->mlen; ++i) {
    4eb9:	48 89 c1             	mov    %rax,%rcx
    4ebc:	31 c0                	xor    %eax,%eax
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4ebe:	4d 01 c3             	add    %r8,%r11
	for (i = 0; i < c->mlen; ++i) {
    4ec1:	39 c1                	cmp    %eax,%ecx
    4ec3:	76 11                	jbe    4ed6 <tc_ccm_decryption_verification+0x121>
		tag[i] = *(payload + plen - c->mlen + i) ^ b[i];
    4ec5:	41 8a 14 03          	mov    (%r11,%rax,1),%dl
    4ec9:	41 32 14 04          	xor    (%r12,%rax,1),%dl
    4ecd:	88 54 04 28          	mov    %dl,0x28(%rsp,%rax,1)
	for (i = 0; i < c->mlen; ++i) {
    4ed1:	48 ff c0             	inc    %rax
    4ed4:	eb eb                	jmp    4ec1 <tc_ccm_decryption_verification+0x10c>
	}

	/* VERIFYING THE AUTHENTICATION TAG: */

	/* formatting the sequence b for authentication: */
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    4ed6:	45 85 ff             	test   %r15d,%r15d
    4ed9:	0f 95 c0             	setne  %al
    4edc:	c1 e0 06             	shl    $0x6,%eax
    4edf:	89 c6                	mov    %eax,%esi
    4ee1:	8d 41 fe             	lea    -0x2(%rcx),%eax
    4ee4:	d1 e8                	shr    %eax
    4ee6:	8d 04 c5 00 00 00 00 	lea    0x0(,%rax,8),%eax
    4eed:	09 f0                	or     %esi,%eax
	for (i = 1; i < 14; ++i) {
		b[i] = c->nonce[i - 1];
    4eef:	48 8b 75 08          	mov    0x8(%rbp),%rsi
	b[0] = ((alen > 0) ? 0x40:0)|(((c->mlen - 2) / 2 << 3)) | (1);
    4ef3:	83 c8 01             	or     $0x1,%eax
    4ef6:	88 44 24 18          	mov    %al,0x18(%rsp)
		b[i] = c->nonce[i - 1];
    4efa:	31 c0                	xor    %eax,%eax
    4efc:	8a 14 06             	mov    (%rsi,%rax,1),%dl
    4eff:	41 88 14 02          	mov    %dl,(%r10,%rax,1)
	for (i = 1; i < 14; ++i) {
    4f03:	48 ff c0             	inc    %rax
    4f06:	48 83 f8 0d          	cmp    $0xd,%rax
    4f0a:	75 f0                	jne    4efc <tc_ccm_decryption_verification+0x147>
	}
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    4f0c:	89 d8                	mov    %ebx,%eax
	b[15] = (uint8_t)(plen - c->mlen);

	/* computing the authentication tag using cbc-mac: */
	(void) tc_aes_encrypt(b, b, c->sched);
    4f0e:	48 8b 55 00          	mov    0x0(%rbp),%rdx
    4f12:	4c 89 e6             	mov    %r12,%rsi
    4f15:	4c 89 e7             	mov    %r12,%rdi
	b[14] = (uint8_t)((plen - c->mlen) >> 8);
    4f18:	29 c8                	sub    %ecx,%eax
    4f1a:	88 64 24 26          	mov    %ah,0x26(%rsp)
	b[15] = (uint8_t)(plen - c->mlen);
    4f1e:	89 d8                	mov    %ebx,%eax
    4f20:	29 c8                	sub    %ecx,%eax
    4f22:	88 44 24 27          	mov    %al,0x27(%rsp)
	(void) tc_aes_encrypt(b, b, c->sched);
    4f26:	e8 5b f6 ff ff       	callq  4586 <tc_aes_encrypt>
	if (alen > 0) {
    4f2b:	45 85 ff             	test   %r15d,%r15d
    4f2e:	74 17                	je     4f47 <tc_ccm_decryption_verification+0x192>
		ccm_cbc_mac(b, associated_data, alen, 1, c->sched);
    4f30:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4f34:	b9 01 00 00 00       	mov    $0x1,%ecx
    4f39:	44 89 fa             	mov    %r15d,%edx
    4f3c:	4c 89 f6             	mov    %r14,%rsi
    4f3f:	4c 89 e7             	mov    %r12,%rdi
    4f42:	e8 db fa ff ff       	callq  4a22 <ccm_cbc_mac>
	}
	if (plen > 0) {
    4f47:	85 db                	test   %ebx,%ebx
    4f49:	74 16                	je     4f61 <tc_ccm_decryption_verification+0x1ac>
		ccm_cbc_mac(b, out, plen - c->mlen, 0, c->sched);
    4f4b:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    4f4f:	89 da                	mov    %ebx,%edx
    4f51:	31 c9                	xor    %ecx,%ecx
    4f53:	2b 55 10             	sub    0x10(%rbp),%edx
    4f56:	4c 89 ee             	mov    %r13,%rsi
    4f59:	4c 89 e7             	mov    %r12,%rdi
    4f5c:	e8 c1 fa ff ff       	callq  4a22 <ccm_cbc_mac>
	}

	/* comparing the received tag and the computed one: */
	if (_compare(b, tag, c->mlen) == 0) {
    4f61:	8b 55 10             	mov    0x10(%rbp),%edx
    4f64:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
    4f69:	4c 89 e7             	mov    %r12,%rdi
    4f6c:	e8 d0 ec ff ff       	callq  3c41 <_compare>
    4f71:	41 89 c0             	mov    %eax,%r8d
		return TC_CRYPTO_SUCCESS;
    4f74:	b8 01 00 00 00       	mov    $0x1,%eax
	if (_compare(b, tag, c->mlen) == 0) {
    4f79:	45 85 c0             	test   %r8d,%r8d
    4f7c:	74 11                	je     4f8f <tc_ccm_decryption_verification+0x1da>
  	} else {
		/* erase the decrypted buffer in case of mac validation failure: */
		_set(out, 0, plen - c->mlen);
    4f7e:	2b 5d 10             	sub    0x10(%rbp),%ebx
    4f81:	31 f6                	xor    %esi,%esi
    4f83:	4c 89 ef             	mov    %r13,%rdi
    4f86:	89 da                	mov    %ebx,%edx
    4f88:	e8 96 ec ff ff       	callq  3c23 <_set>
		return TC_CRYPTO_FAIL;
    4f8d:	31 c0                	xor    %eax,%eax
		return TC_CRYPTO_FAIL;
	}
}
    4f8f:	48 8b 7c 24 38       	mov    0x38(%rsp),%rdi
    4f94:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    4f9b:	00 00 
    4f9d:	74 05                	je     4fa4 <tc_ccm_decryption_verification+0x1ef>
    4f9f:	e8 0c d5 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    4fa4:	48 83 c4 48          	add    $0x48,%rsp
    4fa8:	5b                   	pop    %rbx
    4fa9:	5d                   	pop    %rbp
    4faa:	41 5c                	pop    %r12
    4fac:	41 5d                	pop    %r13
    4fae:	41 5e                	pop    %r14
    4fb0:	41 5f                	pop    %r15
    4fb2:	c3                   	retq   

0000000000004fb3 <arch_cpu_idle>:
 * arch_busy_wait()
 */
#endif

void arch_cpu_idle(void)
{
    4fb3:	f3 0f 1e fa          	endbr64 
    4fb7:	50                   	push   %rax
	sys_trace_idle();
	posix_irq_full_unlock();
    4fb8:	e8 74 10 00 00       	callq  6031 <posix_irq_full_unlock>
	posix_halt_cpu();
}
    4fbd:	5a                   	pop    %rdx
	posix_halt_cpu();
    4fbe:	e9 42 06 00 00       	jmpq   5605 <posix_halt_cpu>

0000000000004fc3 <arch_irq_enable>:
	posix_irq_offload(routine, parameter);
}
#endif

void arch_irq_enable(unsigned int irq)
{
    4fc3:	f3 0f 1e fa          	endbr64 
	posix_irq_enable(irq);
    4fc7:	e9 70 10 00 00       	jmpq   603c <posix_irq_enable>

0000000000004fcc <pc_safe_call>:
#endif

static inline void pc_safe_call(int test, const char *test_str)
{
	/* LCOV_EXCL_START */ /* See Note1 */
	if (unlikely(test)) {
    4fcc:	85 ff                	test   %edi,%edi
    4fce:	74 0e                	je     4fde <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    4fd0:	48 8d 3d 8f 46 00 00 	lea    0x468f(%rip),%rdi        # 9666 <default_cmd+0x406>
    4fd7:	31 c0                	xor    %eax,%eax
    4fd9:	e9 d3 13 00 00       	jmpq   63b1 <posix_print_error_and_exit>
					   test_str);
	}
	/* LCOV_EXCL_STOP */
}
    4fde:	c3                   	retq   

0000000000004fdf <posix_preexit_cleanup>:
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
}


static void posix_preexit_cleanup(void)
{
    4fdf:	50                   	push   %rax
	/*
	 * Release the mutex so the next allowed thread can run
	 */
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    4fe0:	48 8d 3d 39 9d 00 00 	lea    0x9d39(%rip),%rdi        # ed20 <mtx_threads>
    4fe7:	e8 b4 d5 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    4fec:	48 8d 35 8d 46 00 00 	lea    0x468d(%rip),%rsi        # 9680 <default_cmd+0x420>
    4ff3:	89 c7                	mov    %eax,%edi
    4ff5:	e8 d2 ff ff ff       	callq  4fcc <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    4ffa:	e8 f1 d5 ff ff       	callq  25f0 <pthread_self@plt>
}
    4fff:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    5000:	48 89 c7             	mov    %rax,%rdi
    5003:	e9 d8 d3 ff ff       	jmpq   23e0 <pthread_detach@plt>

0000000000005008 <abort_tail>:
{
    5008:	50                   	push   %rax
    5009:	58                   	pop    %rax
	threads_table[this_th_nbr].running = false;
    500a:	48 63 ff             	movslq %edi,%rdi
{
    500d:	50                   	push   %rax
	threads_table[this_th_nbr].running = false;
    500e:	48 c1 e7 05          	shl    $0x5,%rdi
    5012:	48 03 3d 7f a4 00 00 	add    0xa47f(%rip),%rdi        # f498 <threads_table>
    5019:	c6 47 04 00          	movb   $0x0,0x4(%rdi)
	threads_table[this_th_nbr].state = ABORTED;
    501d:	c7 07 03 00 00 00    	movl   $0x3,(%rdi)
	posix_preexit_cleanup();
    5023:	e8 b7 ff ff ff       	callq  4fdf <posix_preexit_cleanup>
	pthread_exit(NULL);
    5028:	31 ff                	xor    %edi,%edi
    502a:	e8 81 d5 ff ff       	callq  25b0 <pthread_exit@plt>

000000000000502f <posix_wait_until_allowed>:
{
    502f:	41 54                	push   %r12
	threads_table[this_th_nbr].running = false;
    5031:	48 8b 05 60 a4 00 00 	mov    0xa460(%rip),%rax        # f498 <threads_table>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    5038:	4c 8d 25 e1 9c 00 00 	lea    0x9ce1(%rip),%r12        # ed20 <mtx_threads>
{
    503f:	55                   	push   %rbp
    5040:	53                   	push   %rbx
    5041:	48 63 df             	movslq %edi,%rbx
    5044:	48 89 dd             	mov    %rbx,%rbp
	threads_table[this_th_nbr].running = false;
    5047:	48 c1 e3 05          	shl    $0x5,%rbx
    504b:	c6 44 18 04 00       	movb   $0x0,0x4(%rax,%rbx,1)
	while (this_th_nbr != currently_allowed_thread) {
    5050:	39 2d 0e a5 00 00    	cmp    %ebp,0xa50e(%rip)        # f564 <currently_allowed_thread>
    5056:	74 28                	je     5080 <posix_wait_until_allowed+0x51>
		pthread_cond_wait(&cond_threads, &mtx_threads);
    5058:	4c 89 e6             	mov    %r12,%rsi
    505b:	48 8d 3d fe 9c 00 00 	lea    0x9cfe(%rip),%rdi        # ed60 <cond_threads>
    5062:	e8 39 d4 ff ff       	callq  24a0 <pthread_cond_wait@plt>
		if (threads_table &&
    5067:	48 8b 05 2a a4 00 00 	mov    0xa42a(%rip),%rax        # f498 <threads_table>
    506e:	48 85 c0             	test   %rax,%rax
    5071:	74 dd                	je     5050 <posix_wait_until_allowed+0x21>
    5073:	83 3c 18 02          	cmpl   $0x2,(%rax,%rbx,1)
    5077:	75 d7                	jne    5050 <posix_wait_until_allowed+0x21>
			abort_tail(this_th_nbr);
    5079:	89 ef                	mov    %ebp,%edi
    507b:	e8 88 ff ff ff       	callq  5008 <abort_tail>
	threads_table[this_th_nbr].running = true;
    5080:	48 8b 05 11 a4 00 00 	mov    0xa411(%rip),%rax        # f498 <threads_table>
    5087:	c6 44 18 04 01       	movb   $0x1,0x4(%rax,%rbx,1)
}
    508c:	5b                   	pop    %rbx
    508d:	5d                   	pop    %rbp
    508e:	41 5c                	pop    %r12
    5090:	c3                   	retq   

0000000000005091 <posix_cleanup_handler>:

/**
 * Handler called when any thread is cancelled or exits
 */
static void posix_cleanup_handler(void *arg)
{
    5091:	f3 0f 1e fa          	endbr64 
	 * and the mutex was already released
	 * Otherwise, release the mutex so other threads which may be
	 * caught waiting for it could terminate
	 */

	if (!terminate) {
    5095:	80 3d 05 a5 00 00 00 	cmpb   $0x0,0xa505(%rip)        # f5a1 <terminate>
    509c:	74 29                	je     50c7 <posix_cleanup_handler+0x36>
{
    509e:	50                   	push   %rax
		ptr->thread_idx,
		__func__);
#endif


	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_threads));
    509f:	48 8d 3d 7a 9c 00 00 	lea    0x9c7a(%rip),%rdi        # ed20 <mtx_threads>
    50a6:	e8 f5 d4 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    50ab:	48 8d 35 ce 45 00 00 	lea    0x45ce(%rip),%rsi        # 9680 <default_cmd+0x420>
    50b2:	89 c7                	mov    %eax,%edi
    50b4:	e8 13 ff ff ff       	callq  4fcc <pc_safe_call>

	/* We detach ourselves so nobody needs to join to us */
	pthread_detach(pthread_self());
    50b9:	e8 32 d5 ff ff       	callq  25f0 <pthread_self@plt>
}
    50be:	5a                   	pop    %rdx
	pthread_detach(pthread_self());
    50bf:	48 89 c7             	mov    %rax,%rdi
    50c2:	e9 19 d3 ff ff       	jmpq   23e0 <pthread_detach@plt>
    50c7:	c3                   	retq   

00000000000050c8 <posix_thread_starter>:
 *  It will block the thread until a arch_swap() is called for it
 *
 * Spawned from posix_new_thread() below
 */
static void *posix_thread_starter(void *arg)
{
    50c8:	f3 0f 1e fa          	endbr64 
    50cc:	50                   	push   %rax
    50cd:	58                   	pop    %rax
    50ce:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
    50d5:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)

	/*
	 * We block until all other running threads reach the while loop
	 * in posix_wait_until_allowed() and they release the mutex
	 */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    50da:	48 8d 3d 3f 9c 00 00 	lea    0x9c3f(%rip),%rdi        # ed20 <mtx_threads>
{
    50e1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    50e8:	00 00 
    50ea:	48 89 44 24 78       	mov    %rax,0x78(%rsp)
    50ef:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    50f1:	e8 ba d5 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    50f6:	48 8d 35 a6 45 00 00 	lea    0x45a6(%rip),%rsi        # 96a3 <default_cmd+0x443>
    50fd:	89 c7                	mov    %eax,%edi
    50ff:	e8 c8 fe ff ff       	callq  4fcc <pc_safe_call>

	/*
	 * The program may have been finished before this thread ever got to run
	 */
	/* LCOV_EXCL_START */ /* See Note1 */
	if (!threads_table) {
    5104:	48 83 3d 8c a3 00 00 	cmpq   $0x0,0xa38c(%rip)        # f498 <threads_table>
    510b:	00 
    510c:	75 11                	jne    511f <posix_thread_starter+0x57>
		posix_cleanup_handler(arg);
    510e:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5113:	e8 79 ff ff ff       	callq  5091 <posix_cleanup_handler>
		pthread_exit(NULL);
    5118:	31 ff                	xor    %edi,%edi
    511a:	e8 91 d4 ff ff       	callq  25b0 <pthread_exit@plt>
	}
	/* LCOV_EXCL_STOP */

	pthread_cleanup_push(posix_cleanup_handler, arg);
    511f:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5124:	31 f6                	xor    %esi,%esi
    5126:	e8 55 d5 ff ff       	callq  2680 <__sigsetjmp@plt>
    512b:	f3 0f 1e fa          	endbr64 
    512f:	85 c0                	test   %eax,%eax
    5131:	74 14                	je     5147 <posix_thread_starter+0x7f>
    5133:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    5138:	e8 54 ff ff ff       	callq  5091 <posix_cleanup_handler>
    513d:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5142:	e8 09 d5 ff ff       	callq  2650 <__pthread_unwind_next@plt>
    5147:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    514c:	e8 ff d2 ff ff       	callq  2450 <__pthread_register_cancel@plt>

	/*
	 * The thread would try to execute immediately, so we block it
	 * until allowed
	 */
	posix_wait_until_allowed(thread_idx);
    5151:	8b 7c 24 08          	mov    0x8(%rsp),%edi
    5155:	e8 d5 fe ff ff       	callq  502f <posix_wait_until_allowed>

	posix_new_thread_pre_start();
    515a:	e8 92 03 00 00       	callq  54f1 <posix_new_thread_pre_start>

	posix_thread_status_t *ptr = threads_table[thread_idx].t_status;
    515f:	48 63 44 24 08       	movslq 0x8(%rsp),%rax
    5164:	48 c1 e0 05          	shl    $0x5,%rax
    5168:	48 03 05 29 a3 00 00 	add    0xa329(%rip),%rax        # f498 <threads_table>
    516f:	48 8b 40 18          	mov    0x18(%rax),%rax

	z_thread_entry(ptr->entry_point, ptr->arg1, ptr->arg2, ptr->arg3);
    5173:	48 8b 48 18          	mov    0x18(%rax),%rcx
    5177:	48 8b 50 10          	mov    0x10(%rax),%rdx
    517b:	48 8b 70 08          	mov    0x8(%rax),%rsi
    517f:	48 8b 38             	mov    (%rax),%rdi
    5182:	e8 1d dc ff ff       	callq  2da4 <z_thread_entry>

0000000000005187 <posix_swap>:
{
    5187:	f3 0f 1e fa          	endbr64 
    518b:	55                   	push   %rbp
    518c:	89 f5                	mov    %esi,%ebp
	currently_allowed_thread = next_allowed_th;
    518e:	89 3d d0 a3 00 00    	mov    %edi,0xa3d0(%rip)        # f564 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    5194:	48 8d 3d c5 9b 00 00 	lea    0x9bc5(%rip),%rdi        # ed60 <cond_threads>
    519b:	e8 70 d2 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    51a0:	48 8d 35 1d 45 00 00 	lea    0x451d(%rip),%rsi        # 96c4 <default_cmd+0x464>
    51a7:	89 c7                	mov    %eax,%edi
    51a9:	e8 1e fe ff ff       	callq  4fcc <pc_safe_call>
	if (threads_table[this_th_nbr].state == ABORTING) {
    51ae:	48 63 c5             	movslq %ebp,%rax
		abort_tail(this_th_nbr);
    51b1:	89 ef                	mov    %ebp,%edi
	if (threads_table[this_th_nbr].state == ABORTING) {
    51b3:	48 c1 e0 05          	shl    $0x5,%rax
    51b7:	48 03 05 da a2 00 00 	add    0xa2da(%rip),%rax        # f498 <threads_table>
    51be:	83 38 02             	cmpl   $0x2,(%rax)
    51c1:	75 05                	jne    51c8 <posix_swap+0x41>
		abort_tail(this_th_nbr);
    51c3:	e8 40 fe ff ff       	callq  5008 <abort_tail>
}
    51c8:	5d                   	pop    %rbp
		posix_wait_until_allowed(this_th_nbr);
    51c9:	e9 61 fe ff ff       	jmpq   502f <posix_wait_until_allowed>

00000000000051ce <posix_main_thread_start>:
{
    51ce:	f3 0f 1e fa          	endbr64 
    51d2:	50                   	push   %rax
	currently_allowed_thread = next_allowed_th;
    51d3:	89 3d 8b a3 00 00    	mov    %edi,0xa38b(%rip)        # f564 <currently_allowed_thread>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_threads));
    51d9:	48 8d 3d 80 9b 00 00 	lea    0x9b80(%rip),%rdi        # ed60 <cond_threads>
    51e0:	e8 2b d2 ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    51e5:	48 8d 35 d8 44 00 00 	lea    0x44d8(%rip),%rsi        # 96c4 <default_cmd+0x464>
    51ec:	89 c7                	mov    %eax,%edi
    51ee:	e8 d9 fd ff ff       	callq  4fcc <pc_safe_call>
	posix_preexit_cleanup();
    51f3:	e8 e7 fd ff ff       	callq  4fdf <posix_preexit_cleanup>
	pthread_exit(NULL);
    51f8:	31 ff                	xor    %edi,%edi
    51fa:	e8 b1 d3 ff ff       	callq  25b0 <pthread_exit@plt>

00000000000051ff <posix_new_thread>:
 * Create a new POSIX thread for the new Zephyr thread.
 * arch_new_thread() picks from the kernel structures what it is that we need
 * to call with what parameters
 */
void posix_new_thread(posix_thread_status_t *ptr)
{
    51ff:	f3 0f 1e fa          	endbr64 
    5203:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    5204:	8b 35 62 a3 00 00    	mov    0xa362(%rip),%esi        # f56c <threads_table_size>
{
    520a:	48 89 fb             	mov    %rdi,%rbx
	for (int i = 0; i < threads_table_size; i++) {
    520d:	31 c0                	xor    %eax,%eax
		if ((threads_table[i].state == NOTUSED)
    520f:	48 8b 3d 82 a2 00 00 	mov    0xa282(%rip),%rdi        # f498 <threads_table>
    5216:	41 89 c0             	mov    %eax,%r8d
	for (int i = 0; i < threads_table_size; i++) {
    5219:	39 c6                	cmp    %eax,%esi
    521b:	7e 13                	jle    5230 <posix_new_thread+0x31>
		if ((threads_table[i].state == NOTUSED)
    521d:	48 ff c0             	inc    %rax
    5220:	48 89 c2             	mov    %rax,%rdx
    5223:	48 c1 e2 05          	shl    $0x5,%rdx
    5227:	83 7c 17 e0 00       	cmpl   $0x0,-0x20(%rdi,%rdx,1)
    522c:	75 e8                	jne    5216 <posix_new_thread+0x17>
    522e:	eb 52                	jmp    5282 <posix_new_thread+0x83>
				(threads_table_size + PC_ALLOC_CHUNK_SIZE)
    5230:	83 c6 40             	add    $0x40,%esi
    5233:	48 63 f6             	movslq %esi,%rsi
	threads_table = realloc(threads_table,
    5236:	48 c1 e6 05          	shl    $0x5,%rsi
    523a:	e8 91 d3 ff ff       	callq  25d0 <realloc@plt>
    523f:	48 89 05 52 a2 00 00 	mov    %rax,0xa252(%rip)        # f498 <threads_table>
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    5246:	48 85 c0             	test   %rax,%rax
    5249:	75 0c                	jne    5257 <posix_new_thread+0x58>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    524b:	48 8d 3d 98 44 00 00 	lea    0x4498(%rip),%rdi        # 96ea <default_cmd+0x48a>
    5252:	e8 5a 11 00 00       	callq  63b1 <posix_print_error_and_exit>
	(void)memset(&threads_table[threads_table_size], 0,
    5257:	48 63 15 0e a3 00 00 	movslq 0xa30e(%rip),%rdx        # f56c <threads_table_size>
    525e:	31 c0                	xor    %eax,%eax
    5260:	b9 00 02 00 00       	mov    $0x200,%ecx
    5265:	49 89 d0             	mov    %rdx,%r8
    5268:	48 c1 e2 05          	shl    $0x5,%rdx
    526c:	48 03 15 25 a2 00 00 	add    0xa225(%rip),%rdx        # f498 <threads_table>
    5273:	48 89 d7             	mov    %rdx,%rdi
    5276:	f3 ab                	rep stos %eax,%es:(%rdi)
	threads_table_size += PC_ALLOC_CHUNK_SIZE;
    5278:	41 8d 40 40          	lea    0x40(%r8),%eax
    527c:	89 05 ea a2 00 00    	mov    %eax,0xa2ea(%rip)        # f56c <threads_table_size>
	int t_slot;

	t_slot = ttable_get_empty_slot();
	threads_table[t_slot].state = USED;
    5282:	49 63 c8             	movslq %r8d,%rcx
	threads_table[t_slot].running = false;
	threads_table[t_slot].thead_cnt = thread_create_count++;
    5285:	8b 05 dd a2 00 00    	mov    0xa2dd(%rip),%eax        # f568 <thread_create_count>
	threads_table[t_slot].t_status = ptr;
	ptr->thread_idx = t_slot;

	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    528b:	31 f6                	xor    %esi,%esi
	threads_table[t_slot].state = USED;
    528d:	48 89 cf             	mov    %rcx,%rdi
    5290:	48 c1 e7 05          	shl    $0x5,%rdi
    5294:	48 03 3d fd a1 00 00 	add    0xa1fd(%rip),%rdi        # f498 <threads_table>
	threads_table[t_slot].thead_cnt = thread_create_count++;
    529b:	8d 50 01             	lea    0x1(%rax),%edx
	threads_table[t_slot].t_status = ptr;
    529e:	48 89 5f 18          	mov    %rbx,0x18(%rdi)
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    52a2:	48 83 c7 08          	add    $0x8,%rdi
	threads_table[t_slot].state = USED;
    52a6:	c7 47 f8 01 00 00 00 	movl   $0x1,-0x8(%rdi)
	threads_table[t_slot].running = false;
    52ad:	c6 47 fc 00          	movb   $0x0,-0x4(%rdi)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    52b1:	89 47 08             	mov    %eax,0x8(%rdi)
	ptr->thread_idx = t_slot;
    52b4:	44 89 43 20          	mov    %r8d,0x20(%rbx)
	threads_table[t_slot].thead_cnt = thread_create_count++;
    52b8:	89 15 aa a2 00 00    	mov    %edx,0xa2aa(%rip)        # f568 <thread_create_count>
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    52be:	48 8d 15 03 fe ff ff 	lea    -0x1fd(%rip),%rdx        # 50c8 <posix_thread_starter>
    52c5:	e8 f6 d0 ff ff       	callq  23c0 <pthread_create@plt>
    52ca:	48 8d 35 41 44 00 00 	lea    0x4441(%rip),%rsi        # 9712 <default_cmd+0x4b2>
		__func__,
		threads_table[t_slot].thead_cnt,
		t_slot,
		threads_table[t_slot].thread);

}
    52d1:	5b                   	pop    %rbx
	PC_SAFE_CALL(pthread_create(&threads_table[t_slot].thread,
    52d2:	89 c7                	mov    %eax,%edi
    52d4:	e9 f3 fc ff ff       	jmpq   4fcc <pc_safe_call>

00000000000052d9 <posix_init_multithreading>:
/**
 * Called from zephyr_wrapper()
 * prepare whatever needs to be prepared to be able to start threads
 */
void posix_init_multithreading(void)
{
    52d9:	f3 0f 1e fa          	endbr64 
    52dd:	52                   	push   %rdx
	thread_create_count = 0;

	currently_allowed_thread = -1;

	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    52de:	be 20 00 00 00       	mov    $0x20,%esi
    52e3:	bf 40 00 00 00       	mov    $0x40,%edi
	thread_create_count = 0;
    52e8:	c7 05 76 a2 00 00 00 	movl   $0x0,0xa276(%rip)        # f568 <thread_create_count>
    52ef:	00 00 00 
	currently_allowed_thread = -1;
    52f2:	c7 05 68 a2 00 00 ff 	movl   $0xffffffff,0xa268(%rip)        # f564 <currently_allowed_thread>
    52f9:	ff ff ff 
	threads_table = calloc(PC_ALLOC_CHUNK_SIZE,
    52fc:	e8 2f d2 ff ff       	callq  2530 <calloc@plt>
    5301:	48 89 05 90 a1 00 00 	mov    %rax,0xa190(%rip)        # f498 <threads_table>
				sizeof(struct threads_table_el));
	if (threads_table == NULL) { /* LCOV_EXCL_BR_LINE */
    5308:	48 85 c0             	test   %rax,%rax
    530b:	75 0c                	jne    5319 <posix_init_multithreading+0x40>
		posix_print_error_and_exit(NO_MEM_ERR); /* LCOV_EXCL_LINE */
    530d:	48 8d 3d d6 43 00 00 	lea    0x43d6(%rip),%rdi        # 96ea <default_cmd+0x48a>
    5314:	e8 98 10 00 00       	callq  63b1 <posix_print_error_and_exit>
	}

	threads_table_size = PC_ALLOC_CHUNK_SIZE;


	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    5319:	48 8d 3d 00 9a 00 00 	lea    0x9a00(%rip),%rdi        # ed20 <mtx_threads>
	threads_table_size = PC_ALLOC_CHUNK_SIZE;
    5320:	c7 05 42 a2 00 00 40 	movl   $0x40,0xa242(%rip)        # f56c <threads_table_size>
    5327:	00 00 00 
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    532a:	e8 81 d3 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    532f:	48 8d 35 6d 43 00 00 	lea    0x436d(%rip),%rsi        # 96a3 <default_cmd+0x443>
    5336:	89 c7                	mov    %eax,%edi
}
    5338:	58                   	pop    %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_threads));
    5339:	e9 8e fc ff ff       	jmpq   4fcc <pc_safe_call>

000000000000533e <posix_core_clean_up>:
 * => we prefer the supposed memory leak report from valgrind, and ensure we
 * will not hang
 *
 */
void posix_core_clean_up(void)
{
    533e:	f3 0f 1e fa          	endbr64 

	if (!threads_table) { /* LCOV_EXCL_BR_LINE */
    5342:	48 83 3d 4e a1 00 00 	cmpq   $0x0,0xa14e(%rip)        # f498 <threads_table>
    5349:	00 
    534a:	74 62                	je     53ae <posix_core_clean_up+0x70>
{
    534c:	55                   	push   %rbp
			continue;
		}

		/* LCOV_EXCL_START */
		if (pthread_cancel(threads_table[i].thread)) {
			posix_print_warning(
    534d:	48 8d 2d 22 44 00 00 	lea    0x4422(%rip),%rbp        # 9776 <default_cmd+0x516>
{
    5354:	53                   	push   %rbx
	for (int i = 0; i < threads_table_size; i++) {
    5355:	31 db                	xor    %ebx,%ebx
{
    5357:	52                   	push   %rdx
	terminate = true;
    5358:	c6 05 42 a2 00 00 01 	movb   $0x1,0xa242(%rip)        # f5a1 <terminate>
	for (int i = 0; i < threads_table_size; i++) {
    535f:	39 1d 07 a2 00 00    	cmp    %ebx,0xa207(%rip)        # f56c <threads_table_size>
    5365:	48 8b 3d 2c a1 00 00 	mov    0xa12c(%rip),%rdi        # f498 <threads_table>
    536c:	7e 2c                	jle    539a <posix_core_clean_up+0x5c>
		if (threads_table[i].state != USED) {
    536e:	48 63 c3             	movslq %ebx,%rax
    5371:	48 c1 e0 05          	shl    $0x5,%rax
    5375:	48 01 c7             	add    %rax,%rdi
    5378:	83 3f 01             	cmpl   $0x1,(%rdi)
    537b:	75 19                	jne    5396 <posix_core_clean_up+0x58>
		if (pthread_cancel(threads_table[i].thread)) {
    537d:	48 8b 7f 08          	mov    0x8(%rdi),%rdi
    5381:	e8 9a d0 ff ff       	callq  2420 <pthread_cancel@plt>
    5386:	85 c0                	test   %eax,%eax
    5388:	74 0c                	je     5396 <posix_core_clean_up+0x58>
			posix_print_warning(
    538a:	89 de                	mov    %ebx,%esi
    538c:	48 89 ef             	mov    %rbp,%rdi
    538f:	31 c0                	xor    %eax,%eax
    5391:	e8 f4 10 00 00       	callq  648a <posix_print_warning>
	for (int i = 0; i < threads_table_size; i++) {
    5396:	ff c3                	inc    %ebx
    5398:	eb c5                	jmp    535f <posix_core_clean_up+0x21>
				i);
		}
		/* LCOV_EXCL_STOP */
	}

	free(threads_table);
    539a:	e8 11 d0 ff ff       	callq  23b0 <free@plt>
	threads_table = NULL;
    539f:	48 c7 05 ee a0 00 00 	movq   $0x0,0xa0ee(%rip)        # f498 <threads_table>
    53a6:	00 00 00 00 
}
    53aa:	58                   	pop    %rax
    53ab:	5b                   	pop    %rbx
    53ac:	5d                   	pop    %rbp
    53ad:	c3                   	retq   
    53ae:	c3                   	retq   

00000000000053af <posix_abort_thread>:


void posix_abort_thread(int thread_idx)
{
    53af:	f3 0f 1e fa          	endbr64 
	if (threads_table[thread_idx].state != USED) { /* LCOV_EXCL_BR_LINE */
    53b3:	48 63 ff             	movslq %edi,%rdi
    53b6:	48 c1 e7 05          	shl    $0x5,%rdi
    53ba:	48 03 3d d7 a0 00 00 	add    0xa0d7(%rip),%rdi        # f498 <threads_table>
    53c1:	83 3f 01             	cmpl   $0x1,(%rdi)
    53c4:	75 06                	jne    53cc <posix_abort_thread+0x1d>

	PC_DEBUG("Aborting not scheduled thread [%i] %i\n",
		threads_table[thread_idx].thead_cnt,
		thread_idx);

	threads_table[thread_idx].state = ABORTING;
    53c6:	c7 07 02 00 00 00    	movl   $0x2,(%rdi)
	 * mutex or awakes on the condition.
	 * Note that even if we would pthread_cancel() the thread here, that
	 * would be the case, but with a pthread_cancel() the mutex state would
	 * be uncontrolled
	 */
}
    53cc:	c3                   	retq   

00000000000053cd <z_impl_k_thread_abort>:


#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
void z_impl_k_thread_abort(k_tid_t thread)
{
    53cd:	f3 0f 1e fa          	endbr64 
    53d1:	41 55                	push   %r13
    53d3:	41 54                	push   %r12
    53d5:	55                   	push   %rbp
    53d6:	48 89 fd             	mov    %rdi,%rbp
    53d9:	53                   	push   %rbx
    53da:	52                   	push   %rdx
	unsigned int key;
	int thread_idx;

	posix_thread_status_t *tstatus =
    53db:	48 8b 5f 50          	mov    0x50(%rdi),%rbx
					(posix_thread_status_t *)
					thread->callee_saved.thread_status;

	thread_idx = tstatus->thread_idx;
    53df:	44 8b 6b 20          	mov    0x20(%rbx),%r13d
	return key == false;
}

static ALWAYS_INLINE unsigned int arch_irq_lock(void)
{
	return posix_irq_lock();
    53e3:	e8 32 0c 00 00       	callq  601a <posix_irq_lock>
    53e8:	41 89 c4             	mov    %eax,%r12d

	key = irq_lock();

	if (_current == thread) {
    53eb:	48 8d 05 2e a0 00 00 	lea    0xa02e(%rip),%rax        # f420 <_kernel>
    53f2:	48 39 68 10          	cmp    %rbp,0x10(%rax)
    53f6:	75 34                	jne    542c <z_impl_k_thread_abort+0x5f>
		if (tstatus->aborted == 0) { /* LCOV_EXCL_BR_LINE */
    53f8:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    53fc:	75 09                	jne    5407 <z_impl_k_thread_abort+0x3a>
			tstatus->aborted = 1;
    53fe:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
    5405:	eb 11                	jmp    5418 <z_impl_k_thread_abort+0x4b>
		} else {
			posix_print_warning(/* LCOV_EXCL_LINE */
    5407:	44 89 ee             	mov    %r13d,%esi
    540a:	48 8d 3d 99 43 00 00 	lea    0x4399(%rip),%rdi        # 97aa <default_cmd+0x54a>
    5411:	31 c0                	xor    %eax,%eax
    5413:	e8 72 10 00 00       	callq  648a <posix_print_warning>
				PREFIX"The kernel is trying to abort and swap "
				"out of an already aborted thread %i. This "
				"should NOT have happened\n",
				thread_idx);
		}
		threads_table[thread_idx].state = ABORTING;
    5418:	49 63 c5             	movslq %r13d,%rax
    541b:	48 c1 e0 05          	shl    $0x5,%rax
    541f:	48 03 05 72 a0 00 00 	add    0xa072(%rip),%rax        # f498 <threads_table>
    5426:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
			threads_table[thread_idx].thead_cnt,
			thread_idx,
			__func__);
	}

	z_thread_abort(thread);
    542c:	48 89 ef             	mov    %rbp,%rdi
    542f:	e8 99 2f 00 00       	callq  83cd <z_thread_abort>

	if (tstatus->aborted == 0) {
    5434:	83 7b 24 00          	cmpl   $0x0,0x24(%rbx)
    5438:	75 0f                	jne    5449 <z_impl_k_thread_abort+0x7c>
		PC_DEBUG("%s aborting now [%i] %i\n",
			__func__,
			threads_table[thread_idx].thead_cnt,
			thread_idx);

		tstatus->aborted = 1;
    543a:	c7 43 24 01 00 00 00 	movl   $0x1,0x24(%rbx)
		posix_abort_thread(thread_idx);
    5441:	44 89 ef             	mov    %r13d,%edi
    5444:	e8 66 ff ff ff       	callq  53af <posix_abort_thread>
			thread_idx);
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
}
    5449:	58                   	pop    %rax
	z_reschedule_irqlock(key);
    544a:	44 89 e7             	mov    %r12d,%edi
}
    544d:	5b                   	pop    %rbx
    544e:	5d                   	pop    %rbp
    544f:	41 5c                	pop    %r12
    5451:	41 5d                	pop    %r13
	z_reschedule_irqlock(key);
    5453:	e9 2f 28 00 00       	jmpq   7c87 <z_reschedule_irqlock>

0000000000005458 <arch_swap>:
#include "irq.h"
#include "kswap.h"
#include <power/power.h>

int arch_swap(unsigned int key)
{
    5458:	f3 0f 1e fa          	endbr64 
    545c:	53                   	push   %rbx
	 * threads => those are all nicely kept by the native OS kernel
	 */
#if CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif
	_current->callee_saved.key = key;
    545d:	48 8d 1d bc 9f 00 00 	lea    0x9fbc(%rip),%rbx        # f420 <_kernel>
    5464:	48 8b 43 10          	mov    0x10(%rbx),%rax
	 * arch_thread_return_value_set()
	 */

	posix_thread_status_t *ready_thread_ptr =
		(posix_thread_status_t *)
		_kernel.ready_q.cache->callee_saved.thread_status;
    5468:	48 8b 53 38          	mov    0x38(%rbx),%rdx
	_current->callee_saved.key = key;
    546c:	89 78 48             	mov    %edi,0x48(%rax)
	posix_thread_status_t *ready_thread_ptr =
    546f:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
	_current->callee_saved.retval = -EAGAIN;
    5473:	c7 40 4c f5 ff ff ff 	movl   $0xfffffff5,0x4c(%rax)

	posix_thread_status_t *this_thread_ptr  =
    547a:	48 8b 40 50          	mov    0x50(%rax),%rax
		(posix_thread_status_t *)
		_current->callee_saved.thread_status;


	_current = _kernel.ready_q.cache;
    547e:	48 89 53 10          	mov    %rdx,0x10(%rbx)
	 * Here a "real" arch would load all processor registers for the thread
	 * to run. In this arch case, we just block this thread until allowed
	 * to run later, and signal to whomever is allowed to run to
	 * continue.
	 */
	posix_swap(ready_thread_ptr->thread_idx,
    5482:	8b 79 20             	mov    0x20(%rcx),%edi
    5485:	8b 70 20             	mov    0x20(%rax),%esi
    5488:	e8 fa fc ff ff       	callq  5187 <posix_swap>
		this_thread_ptr->thread_idx);

	/* When we continue, _kernel->current points back to this thread */

	irq_unlock(_current->callee_saved.key);
    548d:	48 8b 43 10          	mov    0x10(%rbx),%rax
}


static ALWAYS_INLINE void arch_irq_unlock(unsigned int key)
{
	posix_irq_unlock(key);
    5491:	8b 78 48             	mov    0x48(%rax),%edi
    5494:	e8 8f 0b 00 00       	callq  6028 <posix_irq_unlock>

	return _current->callee_saved.retval;
    5499:	48 8b 43 10          	mov    0x10(%rbx),%rax
}
    549d:	5b                   	pop    %rbx
	return _current->callee_saved.retval;
    549e:	8b 40 4c             	mov    0x4c(%rax),%eax
}
    54a1:	c3                   	retq   

00000000000054a2 <arch_switch_to_main_thread>:
 * Note that we will never come back to this thread: posix_main_thread_start()
 * does never return.
 */
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    54a2:	f3 0f 1e fa          	endbr64 
	ARG_UNUSED(stack_ptr);
	ARG_UNUSED(_main);

	posix_thread_status_t *ready_thread_ptr =
			(posix_thread_status_t *)
			_kernel.ready_q.cache->callee_saved.thread_status;
    54a6:	48 8d 05 73 9f 00 00 	lea    0x9f73(%rip),%rax        # f420 <_kernel>
    54ad:	48 8b 50 38          	mov    0x38(%rax),%rdx
	posix_thread_status_t *ready_thread_ptr =
    54b1:	48 8b 4a 50          	mov    0x50(%rdx),%rcx

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_out();
#endif

	_current = _kernel.ready_q.cache;
    54b5:	48 89 50 10          	mov    %rdx,0x10(%rax)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
#endif

	posix_main_thread_start(ready_thread_ptr->thread_idx);
    54b9:	8b 79 20             	mov    0x20(%rcx),%edi
    54bc:	e9 0d fd ff ff       	jmpq   51ce <posix_main_thread_start>

00000000000054c1 <arch_new_thread>:
 * pthreads stack and therefore we ignore the stack size
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    54c1:	f3 0f 1e fa          	endbr64 

	/* z_thread_entry() arguments */
	thread_status->entry_point = entry;
	thread_status->arg1 = p1;
	thread_status->arg2 = p2;
	thread_status->arg3 = p3;
    54c5:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
{
    54ca:	49 89 fa             	mov    %rdi,%r10
	thread_status = Z_STACK_PTR_TO_FRAME(posix_thread_status_t, stack_ptr);
    54cd:	48 8d 7a d8          	lea    -0x28(%rdx),%rdi
	thread_status->entry_point = entry;
    54d1:	48 89 4a d8          	mov    %rcx,-0x28(%rdx)
	thread_status->arg1 = p1;
    54d5:	4c 89 42 e0          	mov    %r8,-0x20(%rdx)
	thread_status->arg2 = p2;
    54d9:	4c 89 4a e8          	mov    %r9,-0x18(%rdx)
	thread_status->arg3 = p3;
    54dd:	48 89 42 f0          	mov    %rax,-0x10(%rdx)
#if defined(CONFIG_ARCH_HAS_THREAD_ABORT)
	thread_status->aborted = 0;
    54e1:	c7 42 fc 00 00 00 00 	movl   $0x0,-0x4(%rdx)
#endif

	thread->callee_saved.thread_status = thread_status;
    54e8:	49 89 7a 50          	mov    %rdi,0x50(%r10)

	posix_new_thread(thread_status);
    54ec:	e9 0e fd ff ff       	jmpq   51ff <posix_new_thread>

00000000000054f1 <posix_new_thread_pre_start>:
}

void posix_new_thread_pre_start(void)
{
    54f1:	f3 0f 1e fa          	endbr64 
	posix_irq_full_unlock();
    54f5:	e9 37 0b 00 00       	jmpq   6031 <posix_irq_full_unlock>

00000000000054fa <pc_safe_call>:
	if (unlikely(test)) {
    54fa:	85 ff                	test   %edi,%edi
    54fc:	74 0e                	je     550c <pc_safe_call+0x12>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    54fe:	48 8d 3d 61 41 00 00 	lea    0x4161(%rip),%rdi        # 9666 <default_cmd+0x406>
    5505:	31 c0                	xor    %eax,%eax
    5507:	e9 a5 0e 00 00       	jmpq   63b1 <posix_print_error_and_exit>
}
    550c:	c3                   	retq   

000000000000550d <zephyr_wrapper>:
/**
 * Just a wrapper function to call Zephyr's z_cstart()
 * called from posix_boot_cpu()
 */
static void *zephyr_wrapper(void *a)
{
    550d:	f3 0f 1e fa          	endbr64 
    5511:	50                   	push   %rax
    5512:	58                   	pop    %rax
	/* Ensure posix_boot_cpu has reached the cond loop */
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5513:	48 8d 3d 86 98 00 00 	lea    0x9886(%rip),%rdi        # eda0 <mtx_cpu>
{
    551a:	50                   	push   %rax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    551b:	e8 90 d1 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5520:	48 8d 35 ff 42 00 00 	lea    0x42ff(%rip),%rsi        # 9826 <default_cmd+0x5c6>
    5527:	89 c7                	mov    %eax,%edi
    5529:	e8 cc ff ff ff       	callq  54fa <pc_safe_call>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    552e:	48 8d 3d 6b 98 00 00 	lea    0x986b(%rip),%rdi        # eda0 <mtx_cpu>
    5535:	e8 66 d0 ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    553a:	48 8d 35 02 43 00 00 	lea    0x4302(%rip),%rsi        # 9843 <default_cmd+0x5e3>
    5541:	89 c7                	mov    %eax,%edi
    5543:	e8 b2 ff ff ff       	callq  54fa <pc_safe_call>

		PS_DEBUG("Zephyr init started (%lu)\n",
			zephyr_thread);
#endif

	posix_init_multithreading();
    5548:	e8 8c fd ff ff       	callq  52d9 <posix_init_multithreading>

	/* Start Zephyr: */
	z_cstart();
    554d:	e8 13 23 00 00       	callq  7865 <z_cstart>

0000000000005552 <posix_is_cpu_running>:
{
    5552:	f3 0f 1e fa          	endbr64 
	return !cpu_halted;
    5556:	8a 05 20 6f 00 00    	mov    0x6f20(%rip),%al        # c47c <cpu_halted>
    555c:	83 f0 01             	xor    $0x1,%eax
    555f:	0f b6 c0             	movzbl %al,%eax
}
    5562:	c3                   	retq   

0000000000005563 <posix_change_cpu_state_and_wait>:
{
    5563:	f3 0f 1e fa          	endbr64 
    5567:	55                   	push   %rbp
    5568:	89 fd                	mov    %edi,%ebp
    556a:	53                   	push   %rbx
    556b:	89 fb                	mov    %edi,%ebx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    556d:	48 8d 3d 2c 98 00 00 	lea    0x982c(%rip),%rdi        # eda0 <mtx_cpu>
{
    5574:	52                   	push   %rdx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5575:	e8 36 d1 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    557a:	48 8d 35 a5 42 00 00 	lea    0x42a5(%rip),%rsi        # 9826 <default_cmd+0x5c6>
    5581:	89 c7                	mov    %eax,%edi
    5583:	e8 72 ff ff ff       	callq  54fa <pc_safe_call>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    5588:	48 8d 3d 51 98 00 00 	lea    0x9851(%rip),%rdi        # ede0 <cond_cpu>
	cpu_halted = halted;
    558f:	88 1d e7 6e 00 00    	mov    %bl,0x6ee7(%rip)        # c47c <cpu_halted>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5595:	48 8d 1d 04 98 00 00 	lea    0x9804(%rip),%rbx        # eda0 <mtx_cpu>
	PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    559c:	e8 6f ce ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    55a1:	48 8d 35 ba 42 00 00 	lea    0x42ba(%rip),%rsi        # 9862 <default_cmd+0x602>
    55a8:	89 c7                	mov    %eax,%edi
    55aa:	e8 4b ff ff ff       	callq  54fa <pc_safe_call>
	while (cpu_halted == halted) {
    55af:	40 38 2d c6 6e 00 00 	cmp    %bpl,0x6ec6(%rip)        # c47c <cpu_halted>
    55b6:	75 11                	jne    55c9 <posix_change_cpu_state_and_wait+0x66>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    55b8:	48 89 de             	mov    %rbx,%rsi
    55bb:	48 8d 3d 1e 98 00 00 	lea    0x981e(%rip),%rdi        # ede0 <cond_cpu>
    55c2:	e8 d9 ce ff ff       	callq  24a0 <pthread_cond_wait@plt>
    55c7:	eb e6                	jmp    55af <posix_change_cpu_state_and_wait+0x4c>
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    55c9:	48 8d 3d d0 97 00 00 	lea    0x97d0(%rip),%rdi        # eda0 <mtx_cpu>
    55d0:	e8 cb cf ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    55d5:	48 8d 35 67 42 00 00 	lea    0x4267(%rip),%rsi        # 9843 <default_cmd+0x5e3>
    55dc:	89 c7                	mov    %eax,%edi
}
    55de:	58                   	pop    %rax
    55df:	5b                   	pop    %rbx
    55e0:	5d                   	pop    %rbp
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    55e1:	e9 14 ff ff ff       	jmpq   54fa <pc_safe_call>

00000000000055e6 <posix_interrupt_raised>:
{
    55e6:	f3 0f 1e fa          	endbr64 
    55ea:	51                   	push   %rcx
	posix_change_cpu_state_and_wait(false);
    55eb:	31 ff                	xor    %edi,%edi
    55ed:	e8 71 ff ff ff       	callq  5563 <posix_change_cpu_state_and_wait>
	if (soc_terminate) {
    55f2:	80 3d a9 9f 00 00 00 	cmpb   $0x0,0x9fa9(%rip)        # f5a2 <soc_terminate>
    55f9:	74 08                	je     5603 <posix_interrupt_raised+0x1d>
		posix_exit(0);
    55fb:	31 ff                	xor    %edi,%edi
}
    55fd:	5a                   	pop    %rdx
		posix_exit(0);
    55fe:	e9 b2 0c 00 00       	jmpq   62b5 <posix_exit>
}
    5603:	58                   	pop    %rax
    5604:	c3                   	retq   

0000000000005605 <posix_halt_cpu>:
{
    5605:	f3 0f 1e fa          	endbr64 
    5609:	50                   	push   %rax
	posix_change_cpu_state_and_wait(true);
    560a:	bf 01 00 00 00       	mov    $0x1,%edi
    560f:	e8 4f ff ff ff       	callq  5563 <posix_change_cpu_state_and_wait>
}
    5614:	5a                   	pop    %rdx
	posix_irq_handler();
    5615:	e9 c6 08 00 00       	jmpq   5ee0 <posix_irq_handler>

000000000000561a <posix_boot_cpu>:
 * The HW models will call this function to "boot" the CPU
 * == spawn the Zephyr init thread, which will then spawn
 * anything it wants, and run until the CPU is set back to idle again
 */
void posix_boot_cpu(void)
{
    561a:	f3 0f 1e fa          	endbr64 
    561e:	53                   	push   %rbx
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    561f:	48 8d 3d 7a 97 00 00 	lea    0x977a(%rip),%rdi        # eda0 <mtx_cpu>
	/* Create a thread for Zephyr init: */
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));

	/* And we wait until Zephyr has run til completion (has gone to idle) */
	while (cpu_halted == false) {
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5626:	48 8d 1d 73 97 00 00 	lea    0x9773(%rip),%rbx        # eda0 <mtx_cpu>
{
    562d:	48 83 ec 10          	sub    $0x10,%rsp
    5631:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5638:	00 00 
    563a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    563f:	31 c0                	xor    %eax,%eax
	PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    5641:	e8 6a d0 ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    5646:	48 8d 35 d9 41 00 00 	lea    0x41d9(%rip),%rsi        # 9826 <default_cmd+0x5c6>
    564d:	89 c7                	mov    %eax,%edi
    564f:	e8 a6 fe ff ff       	callq  54fa <pc_safe_call>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    5654:	48 89 e7             	mov    %rsp,%rdi
    5657:	31 c9                	xor    %ecx,%ecx
    5659:	31 f6                	xor    %esi,%esi
    565b:	48 8d 15 ab fe ff ff 	lea    -0x155(%rip),%rdx        # 550d <zephyr_wrapper>
	cpu_halted = false;
    5662:	c6 05 13 6e 00 00 00 	movb   $0x0,0x6e13(%rip)        # c47c <cpu_halted>
	PC_SAFE_CALL(pthread_create(&zephyr_thread, NULL, zephyr_wrapper, NULL));
    5669:	e8 52 cd ff ff       	callq  23c0 <pthread_create@plt>
    566e:	48 8d 35 0f 42 00 00 	lea    0x420f(%rip),%rsi        # 9884 <default_cmd+0x624>
    5675:	89 c7                	mov    %eax,%edi
    5677:	e8 7e fe ff ff       	callq  54fa <pc_safe_call>
	while (cpu_halted == false) {
    567c:	80 3d f9 6d 00 00 00 	cmpb   $0x0,0x6df9(%rip)        # c47c <cpu_halted>
    5683:	75 11                	jne    5696 <posix_boot_cpu+0x7c>
		pthread_cond_wait(&cond_cpu, &mtx_cpu);
    5685:	48 89 de             	mov    %rbx,%rsi
    5688:	48 8d 3d 51 97 00 00 	lea    0x9751(%rip),%rdi        # ede0 <cond_cpu>
    568f:	e8 0c ce ff ff       	callq  24a0 <pthread_cond_wait@plt>
    5694:	eb e6                	jmp    567c <posix_boot_cpu+0x62>
	}
	PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    5696:	48 8d 3d 03 97 00 00 	lea    0x9703(%rip),%rdi        # eda0 <mtx_cpu>
    569d:	e8 fe ce ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    56a2:	48 8d 35 9a 41 00 00 	lea    0x419a(%rip),%rsi        # 9843 <default_cmd+0x5e3>
    56a9:	89 c7                	mov    %eax,%edi
    56ab:	e8 4a fe ff ff       	callq  54fa <pc_safe_call>

	if (soc_terminate) {
    56b0:	80 3d eb 9e 00 00 00 	cmpb   $0x0,0x9eeb(%rip)        # f5a2 <soc_terminate>
    56b7:	74 07                	je     56c0 <posix_boot_cpu+0xa6>
		posix_exit(0);
    56b9:	31 ff                	xor    %edi,%edi
    56bb:	e8 f5 0b 00 00       	callq  62b5 <posix_exit>
	}
}
    56c0:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    56c5:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    56cc:	00 00 
    56ce:	74 05                	je     56d5 <posix_boot_cpu+0xbb>
    56d0:	e8 db cd ff ff       	callq  24b0 <__stack_chk_fail@plt>
    56d5:	48 83 c4 10          	add    $0x10,%rsp
    56d9:	5b                   	pop    %rbx
    56da:	c3                   	retq   

00000000000056db <run_native_tasks>:
 * @brief Run the set of special native tasks corresponding to the given level
 *
 * @param level One of _NATIVE_*_LEVEL as defined in soc.h
 */
void run_native_tasks(int level)
{
    56db:	f3 0f 1e fa          	endbr64 
		__native_tasks_end
	};

	void (**fptr)(void);

	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    56df:	48 8d 05 7a 64 00 00 	lea    0x647a(%rip),%rax        # bb60 <native_pre_tasks.6323>
    56e6:	48 63 d7             	movslq %edi,%rdx
{
    56e9:	41 54                	push   %r12
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    56eb:	ff c7                	inc    %edi
{
    56ed:	55                   	push   %rbp
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    56ee:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    56f2:	49 89 c4             	mov    %rax,%r12
{
    56f5:	53                   	push   %rbx
	for (fptr = native_pre_tasks[level]; fptr < native_pre_tasks[level+1];
    56f6:	48 63 df             	movslq %edi,%rbx
    56f9:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    56fd:	76 11                	jbe    5710 <run_native_tasks+0x35>
		fptr++) {
		if (*fptr) { /* LCOV_EXCL_BR_LINE */
    56ff:	48 8b 45 00          	mov    0x0(%rbp),%rax
    5703:	48 85 c0             	test   %rax,%rax
    5706:	74 02                	je     570a <run_native_tasks+0x2f>
			(*fptr)();
    5708:	ff d0                	callq  *%rax
		fptr++) {
    570a:	48 83 c5 08          	add    $0x8,%rbp
    570e:	eb e9                	jmp    56f9 <run_native_tasks+0x1e>
		}
	}
}
    5710:	5b                   	pop    %rbx
    5711:	5d                   	pop    %rbp
    5712:	41 5c                	pop    %r12
    5714:	c3                   	retq   

0000000000005715 <posix_soc_clean_up>:
 * Clean up all memory allocated by the SOC and POSIX core
 *
 * This function can be called from both HW and SW threads
 */
void posix_soc_clean_up(void)
{
    5715:	f3 0f 1e fa          	endbr64 
    5719:	51                   	push   %rcx
	 * If we are being called from a HW thread we can cleanup
	 *
	 * Otherwise (!cpu_halted) we give back control to the HW thread and
	 * tell it to terminate ASAP
	 */
	if (cpu_halted) {
    571a:	80 3d 5b 6d 00 00 00 	cmpb   $0x0,0x6d5b(%rip)        # c47c <cpu_halted>
    5721:	74 10                	je     5733 <posix_soc_clean_up+0x1e>

		posix_core_clean_up();
    5723:	e8 16 fc ff ff       	callq  533e <posix_core_clean_up>
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    5728:	bf 04 00 00 00       	mov    $0x4,%edi
			 * won't really wait 1 second
			 */
		}
	}
	/* LCOV_EXCL_STOP */
}
    572d:	5a                   	pop    %rdx
		run_native_tasks(_NATIVE_ON_EXIT_LEVEL);
    572e:	e9 a8 ff ff ff       	jmpq   56db <run_native_tasks>
	} else if (soc_terminate == false) {
    5733:	80 3d 68 9e 00 00 00 	cmpb   $0x0,0x9e68(%rip)        # f5a2 <soc_terminate>
    573a:	75 68                	jne    57a4 <posix_soc_clean_up+0x8f>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    573c:	48 8d 3d 5d 96 00 00 	lea    0x965d(%rip),%rdi        # eda0 <mtx_cpu>
		soc_terminate = true;
    5743:	c6 05 58 9e 00 00 01 	movb   $0x1,0x9e58(%rip)        # f5a2 <soc_terminate>
		PC_SAFE_CALL(pthread_mutex_lock(&mtx_cpu));
    574a:	e8 61 cf ff ff       	callq  26b0 <pthread_mutex_lock@plt>
    574f:	48 8d 35 d0 40 00 00 	lea    0x40d0(%rip),%rsi        # 9826 <default_cmd+0x5c6>
    5756:	89 c7                	mov    %eax,%edi
    5758:	e8 9d fd ff ff       	callq  54fa <pc_safe_call>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    575d:	48 8d 3d 7c 96 00 00 	lea    0x967c(%rip),%rdi        # ede0 <cond_cpu>
		cpu_halted = true;
    5764:	c6 05 11 6d 00 00 01 	movb   $0x1,0x6d11(%rip)        # c47c <cpu_halted>
		PC_SAFE_CALL(pthread_cond_broadcast(&cond_cpu));
    576b:	e8 a0 cc ff ff       	callq  2410 <pthread_cond_broadcast@plt>
    5770:	48 8d 35 eb 40 00 00 	lea    0x40eb(%rip),%rsi        # 9862 <default_cmd+0x602>
    5777:	89 c7                	mov    %eax,%edi
    5779:	e8 7c fd ff ff       	callq  54fa <pc_safe_call>
		PC_SAFE_CALL(pthread_mutex_unlock(&mtx_cpu));
    577e:	48 8d 3d 1b 96 00 00 	lea    0x961b(%rip),%rdi        # eda0 <mtx_cpu>
    5785:	e8 16 ce ff ff       	callq  25a0 <pthread_mutex_unlock@plt>
    578a:	48 8d 35 b2 40 00 00 	lea    0x40b2(%rip),%rsi        # 9843 <default_cmd+0x5e3>
    5791:	89 c7                	mov    %eax,%edi
    5793:	e8 62 fd ff ff       	callq  54fa <pc_safe_call>
			sleep(1);
    5798:	bf 01 00 00 00       	mov    $0x1,%edi
    579d:	e8 fe ce ff ff       	callq  26a0 <sleep@plt>
		while (1) {
    57a2:	eb f4                	jmp    5798 <posix_soc_clean_up+0x83>
}
    57a4:	58                   	pop    %rax
    57a5:	c3                   	retq   

00000000000057a6 <hwm_signal_end_handler>:

/**
 * Handler for SIGTERM and SIGINT
 */
void hwm_signal_end_handler(int sig)
{
    57a6:	f3 0f 1e fa          	endbr64 
	signaled_end = 1;
    57aa:	c7 05 bc 9d 00 00 01 	movl   $0x1,0x9dbc(%rip)        # f570 <signaled_end>
    57b1:	00 00 00 
}
    57b4:	c3                   	retq   

00000000000057b5 <hwm_set_sig_handler>:
 *
 * Note that SA_RESETHAND requires either _POSIX_C_SOURCE>=200809 or
 * _XOPEN_SOURCE>=500
 */
void hwm_set_sig_handler(void)
{
    57b5:	f3 0f 1e fa          	endbr64 
    57b9:	55                   	push   %rbp
    57ba:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
    57c1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    57c8:	00 00 
    57ca:	48 89 84 24 98 00 00 	mov    %rax,0x98(%rsp)
    57d1:	00 
    57d2:	31 c0                	xor    %eax,%eax
	struct sigaction act;

	act.sa_handler = hwm_signal_end_handler;
    57d4:	48 8d 05 cb ff ff ff 	lea    -0x35(%rip),%rax        # 57a6 <hwm_signal_end_handler>
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    57db:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
	act.sa_handler = hwm_signal_end_handler;
    57e0:	48 89 04 24          	mov    %rax,(%rsp)
	PC_SAFE_CALL(sigemptyset(&act.sa_mask));
    57e4:	e8 97 cd ff ff       	callq  2580 <sigemptyset@plt>
	if (unlikely(test)) {
    57e9:	85 c0                	test   %eax,%eax
    57eb:	74 15                	je     5802 <hwm_set_sig_handler+0x4d>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    57ed:	48 8d 35 cb 40 00 00 	lea    0x40cb(%rip),%rsi        # 98bf <default_cmd+0x65f>
    57f4:	48 8d 3d 6b 3e 00 00 	lea    0x3e6b(%rip),%rdi        # 9666 <default_cmd+0x406>
    57fb:	31 c0                	xor    %eax,%eax
    57fd:	e8 af 0b 00 00       	callq  63b1 <posix_print_error_and_exit>

	act.sa_flags = SA_RESETHAND;

	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    5802:	48 89 e5             	mov    %rsp,%rbp
    5805:	31 d2                	xor    %edx,%edx
    5807:	bf 0f 00 00 00       	mov    $0xf,%edi
	act.sa_flags = SA_RESETHAND;
    580c:	c7 84 24 88 00 00 00 	movl   $0x80000000,0x88(%rsp)
    5813:	00 00 00 80 
	PC_SAFE_CALL(sigaction(SIGTERM, &act, NULL));
    5817:	48 89 ee             	mov    %rbp,%rsi
    581a:	e8 21 cc ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    581f:	85 c0                	test   %eax,%eax
    5821:	74 15                	je     5838 <hwm_set_sig_handler+0x83>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    5823:	48 8d 35 af 40 00 00 	lea    0x40af(%rip),%rsi        # 98d9 <default_cmd+0x679>
    582a:	48 8d 3d 35 3e 00 00 	lea    0x3e35(%rip),%rdi        # 9666 <default_cmd+0x406>
    5831:	31 c0                	xor    %eax,%eax
    5833:	e8 79 0b 00 00       	callq  63b1 <posix_print_error_and_exit>
	PC_SAFE_CALL(sigaction(SIGINT, &act, NULL));
    5838:	31 d2                	xor    %edx,%edx
    583a:	48 89 ee             	mov    %rbp,%rsi
    583d:	bf 02 00 00 00       	mov    $0x2,%edi
    5842:	e8 f9 cb ff ff       	callq  2440 <sigaction@plt>
	if (unlikely(test)) {
    5847:	85 c0                	test   %eax,%eax
    5849:	74 15                	je     5860 <hwm_set_sig_handler+0xab>
		posix_print_error_and_exit("POSIX arch: Error on: %s\n",
    584b:	48 8d 35 a6 40 00 00 	lea    0x40a6(%rip),%rsi        # 98f8 <default_cmd+0x698>
    5852:	48 8d 3d 0d 3e 00 00 	lea    0x3e0d(%rip),%rdi        # 9666 <default_cmd+0x406>
    5859:	31 c0                	xor    %eax,%eax
    585b:	e8 51 0b 00 00       	callq  63b1 <posix_print_error_and_exit>
}
    5860:	48 8b 84 24 98 00 00 	mov    0x98(%rsp),%rax
    5867:	00 
    5868:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    586f:	00 00 
    5871:	74 05                	je     5878 <hwm_set_sig_handler+0xc3>
    5873:	e8 38 cc ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5878:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    587f:	5d                   	pop    %rbp
    5880:	c3                   	retq   

0000000000005881 <hwm_find_next_timer>:
/**
 * Find in between all timers which is the next one
 * and update  next_timer_* accordingly
 */
void hwm_find_next_timer(void)
{
    5881:	f3 0f 1e fa          	endbr64 
	next_timer_index = 0;
	next_timer_time  = *Timer_list[0];
    5885:	48 8d 05 5c 9c 00 00 	lea    0x9c5c(%rip),%rax        # f4e8 <hw_timer_timer>
	next_timer_index = 0;
    588c:	c7 05 da 6b 00 00 00 	movl   $0x0,0x6bda(%rip)        # c470 <next_timer_index>
    5893:	00 00 00 
	next_timer_time  = *Timer_list[0];
    5896:	48 8b 10             	mov    (%rax),%rdx

	for (unsigned int i = 1; i < NUMBER_OF_TIMERS ; i++) {
		if (next_timer_time > *Timer_list[i]) {
    5899:	48 8d 05 c0 6b 00 00 	lea    0x6bc0(%rip),%rax        # c460 <irq_ctrl_timer>
    58a0:	48 8b 00             	mov    (%rax),%rax
	next_timer_time  = *Timer_list[0];
    58a3:	48 89 15 f6 9b 00 00 	mov    %rdx,0x9bf6(%rip)        # f4a0 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    58aa:	48 39 c2             	cmp    %rax,%rdx
    58ad:	76 11                	jbe    58c0 <hwm_find_next_timer+0x3f>
			next_timer_index = i;
    58af:	c7 05 b7 6b 00 00 01 	movl   $0x1,0x6bb7(%rip)        # c470 <next_timer_index>
    58b6:	00 00 00 
			next_timer_time = *Timer_list[i];
    58b9:	48 89 05 e0 9b 00 00 	mov    %rax,0x9be0(%rip)        # f4a0 <next_timer_time>
		if (next_timer_time > *Timer_list[i]) {
    58c0:	48 8d 05 71 9c 00 00 	lea    0x9c71(%rip),%rax        # f538 <hw_counter_timer>
    58c7:	48 8b 00             	mov    (%rax),%rax
    58ca:	48 3b 05 cf 9b 00 00 	cmp    0x9bcf(%rip),%rax        # f4a0 <next_timer_time>
    58d1:	73 11                	jae    58e4 <hwm_find_next_timer+0x63>
			next_timer_index = i;
    58d3:	c7 05 93 6b 00 00 02 	movl   $0x2,0x6b93(%rip)        # c470 <next_timer_index>
    58da:	00 00 00 
			next_timer_time = *Timer_list[i];
    58dd:	48 89 05 bc 9b 00 00 	mov    %rax,0x9bbc(%rip)        # f4a0 <next_timer_time>
		}
	}
}
    58e4:	c3                   	retq   

00000000000058e5 <hwm_main_loop>:
/**
 * Entry point for the HW models
 * The HW models execute in an infinite loop until terminated
 */
void hwm_main_loop(void)
{
    58e5:	f3 0f 1e fa          	endbr64 
    58e9:	48 83 ec 18          	sub    $0x18,%rsp
	if (next_timer_time >= simu_time) { /* LCOV_EXCL_BR_LINE */
    58ed:	48 8b 35 ac 9b 00 00 	mov    0x9bac(%rip),%rsi        # f4a0 <next_timer_time>
    58f4:	48 8b 15 ad 9b 00 00 	mov    0x9bad(%rip),%rdx        # f4a8 <simu_time>
    58fb:	48 39 d6             	cmp    %rdx,%rsi
    58fe:	72 09                	jb     5909 <hwm_main_loop+0x24>
		simu_time = next_timer_time;
    5900:	48 89 35 a1 9b 00 00 	mov    %rsi,0x9ba1(%rip)        # f4a8 <simu_time>
    5907:	eb 14                	jmp    591d <hwm_main_loop+0x38>
		posix_print_warning("next_timer_time corrupted (%"PRIu64"<= %"
    5909:	8b 0d 61 6b 00 00    	mov    0x6b61(%rip),%ecx        # c470 <next_timer_index>
    590f:	48 8d 3d 00 40 00 00 	lea    0x4000(%rip),%rdi        # 9916 <default_cmd+0x6b6>
    5916:	31 c0                	xor    %eax,%eax
    5918:	e8 6d 0b 00 00       	callq  648a <posix_print_warning>
	if (signaled_end || (simu_time > end_of_time)) {
    591d:	8b 15 4d 9c 00 00    	mov    0x9c4d(%rip),%edx        # f570 <signaled_end>
    5923:	48 8b 05 7e 9b 00 00 	mov    0x9b7e(%rip),%rax        # f4a8 <simu_time>
    592a:	85 d2                	test   %edx,%edx
    592c:	75 09                	jne    5937 <hwm_main_loop+0x52>
    592e:	48 39 05 1b 6b 00 00 	cmp    %rax,0x6b1b(%rip)        # c450 <end_of_time>
    5935:	73 36                	jae    596d <hwm_main_loop+0x88>
				((long double)simu_time)/1.0e6);
    5937:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    593c:	df 6c 24 08          	fildll 0x8(%rsp)
    5940:	48 85 c0             	test   %rax,%rax
    5943:	79 06                	jns    594b <hwm_main_loop+0x66>
    5945:	d8 05 59 3a 00 00    	fadds  0x3a59(%rip)        # 93a4 <default_cmd+0x144>
		posix_print_trace("\nStopped at %.3Lfs\n",
    594b:	d8 35 57 3a 00 00    	fdivs  0x3a57(%rip)        # 93a8 <default_cmd+0x148>
    5951:	50                   	push   %rax
    5952:	48 8d 3d f2 3f 00 00 	lea    0x3ff2(%rip),%rdi        # 994b <default_cmd+0x6eb>
    5959:	50                   	push   %rax
    595a:	31 c0                	xor    %eax,%eax
    595c:	db 3c 24             	fstpt  (%rsp)
    595f:	e8 f5 0b 00 00       	callq  6559 <posix_print_trace>
    5964:	5a                   	pop    %rdx
		posix_exit(0);
    5965:	31 ff                	xor    %edi,%edi
		posix_print_trace("\nStopped at %.3Lfs\n",
    5967:	59                   	pop    %rcx
		posix_exit(0);
    5968:	e8 48 09 00 00       	callq  62b5 <posix_exit>
	while (1) {
		hwm_sleep_until_next_timer();

		switch (next_timer_index) { /* LCOV_EXCL_BR_LINE */
    596d:	8b 05 fd 6a 00 00    	mov    0x6afd(%rip),%eax        # c470 <next_timer_index>
    5973:	83 f8 01             	cmp    $0x1,%eax
    5976:	74 10                	je     5988 <hwm_main_loop+0xa3>
    5978:	83 f8 02             	cmp    $0x2,%eax
    597b:	74 12                	je     598f <hwm_main_loop+0xaa>
    597d:	85 c0                	test   %eax,%eax
    597f:	75 15                	jne    5996 <hwm_main_loop+0xb1>
		case HWTIMER:
			hwtimer_timer_reached();
    5981:	e8 02 03 00 00       	callq  5c88 <hwtimer_timer_reached>
			break;
    5986:	eb 1c                	jmp    59a4 <hwm_main_loop+0xbf>
		case IRQCNT:
			hw_irq_ctrl_timer_triggered();
    5988:	e8 11 09 00 00       	callq  629e <hw_irq_ctrl_timer_triggered>
			break;
    598d:	eb 15                	jmp    59a4 <hwm_main_loop+0xbf>
		case HW_COUNTER:
			hw_counter_triggered();
    598f:	e8 29 16 00 00       	callq  6fbd <hw_counter_triggered>
			break;
    5994:	eb 0e                	jmp    59a4 <hwm_main_loop+0xbf>
			sdl_handle_events();
			break;
#endif
		default:
			/* LCOV_EXCL_START */
			posix_print_error_and_exit(
    5996:	48 8d 3d c2 3f 00 00 	lea    0x3fc2(%rip),%rdi        # 995f <default_cmd+0x6ff>
    599d:	31 c0                	xor    %eax,%eax
    599f:	e8 0d 0a 00 00       	callq  63b1 <posix_print_error_and_exit>
					"next_timer_index corrupted\n");
			break;
			/* LCOV_EXCL_STOP */
		}

		hwm_find_next_timer();
    59a4:	e8 d8 fe ff ff       	callq  5881 <hwm_find_next_timer>
		hwm_sleep_until_next_timer();
    59a9:	e9 3f ff ff ff       	jmpq   58ed <hwm_main_loop+0x8>

00000000000059ae <hwm_set_end_of_time>:

/**
 * Set the simulated time when the process will stop
 */
void hwm_set_end_of_time(uint64_t new_end_of_time)
{
    59ae:	f3 0f 1e fa          	endbr64 
	end_of_time = new_end_of_time;
    59b2:	48 89 3d 97 6a 00 00 	mov    %rdi,0x6a97(%rip)        # c450 <end_of_time>
}
    59b9:	c3                   	retq   

00000000000059ba <hwm_get_time>:

/**
 * Return the current time as known by the device
 */
uint64_t hwm_get_time(void)
{
    59ba:	f3 0f 1e fa          	endbr64 
	return simu_time;
}
    59be:	48 8b 05 e3 9a 00 00 	mov    0x9ae3(%rip),%rax        # f4a8 <simu_time>
    59c5:	c3                   	retq   

00000000000059c6 <hwm_init>:

/**
 * Function to initialize the HW models
 */
void hwm_init(void)
{
    59c6:	f3 0f 1e fa          	endbr64 
    59ca:	50                   	push   %rax
	hwm_set_sig_handler();
    59cb:	e8 e5 fd ff ff       	callq  57b5 <hwm_set_sig_handler>
	hwtimer_init();
    59d0:	e8 7e 01 00 00       	callq  5b53 <hwtimer_init>
	hw_counter_init();
    59d5:	e8 a8 15 00 00       	callq  6f82 <hw_counter_init>
	hw_irq_ctrl_init();
    59da:	e8 f3 06 00 00       	callq  60d2 <hw_irq_ctrl_init>

	hwm_find_next_timer();
}
    59df:	5a                   	pop    %rdx
	hwm_find_next_timer();
    59e0:	e9 9c fe ff ff       	jmpq   5881 <hwm_find_next_timer>

00000000000059e5 <hwm_cleanup>:
 * Function to free any resources allocated by the HW models
 * Note that this function needs to be designed so it is possible
 * to call it more than once during cleanup
 */
void hwm_cleanup(void)
{
    59e5:	f3 0f 1e fa          	endbr64 
    59e9:	50                   	push   %rax
	hwtimer_cleanup();
    59ea:	e8 67 02 00 00       	callq  5c56 <hwtimer_cleanup>
	hw_irq_ctrl_cleanup();
}
    59ef:	5a                   	pop    %rdx
	hw_irq_ctrl_cleanup();
    59f0:	e9 1c 07 00 00       	jmpq   6111 <hw_irq_ctrl_cleanup>

00000000000059f5 <hwtimer_update_timer>:
	real_time_mode = new_rt;
}

static void hwtimer_update_timer(void)
{
	hw_timer_timer = MIN(hw_timer_tick_timer, hw_timer_awake_timer);
    59f5:	48 8d 15 dc 9a 00 00 	lea    0x9adc(%rip),%rdx        # f4d8 <hw_timer_awake_timer>
    59fc:	48 8d 05 dd 9a 00 00 	lea    0x9add(%rip),%rax        # f4e0 <hw_timer_tick_timer>
    5a03:	48 8b 00             	mov    (%rax),%rax
    5a06:	48 39 02             	cmp    %rax,(%rdx)
    5a09:	48 0f 46 02          	cmovbe (%rdx),%rax
    5a0d:	48 8d 15 d4 9a 00 00 	lea    0x9ad4(%rip),%rdx        # f4e8 <hw_timer_timer>
    5a14:	48 89 02             	mov    %rax,(%rdx)
}
    5a17:	c3                   	retq   

0000000000005a18 <native_add_time_options>:
	ARG_UNUSED(offset);
	hwtimer_reset_rtc();
}

static void native_add_time_options(void)
{
    5a18:	f3 0f 1e fa          	endbr64 
		(void *)&args.stop_at, cmd_stop_at_found,
		"In simulated seconds, when to stop automatically"},

		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(timer_options);
    5a1c:	48 8d 3d dd 65 00 00 	lea    0x65dd(%rip),%rdi        # c000 <timer_options.3187>
    5a23:	e9 e8 13 00 00       	jmpq   6e10 <native_add_command_line_opts>

0000000000005a28 <cmd_stop_at_found>:
{
    5a28:	f3 0f 1e fa          	endbr64 
	if (args.stop_at < 0) {
    5a2c:	0f 57 c0             	xorps  %xmm0,%xmm0
{
    5a2f:	52                   	push   %rdx
	if (args.stop_at < 0) {
    5a30:	66 0f 2f 05 e8 93 00 	comisd 0x93e8(%rip),%xmm0        # ee20 <args>
    5a37:	00 
    5a38:	76 11                	jbe    5a4b <cmd_stop_at_found+0x23>
    5a3a:	48 89 fe             	mov    %rdi,%rsi
		posix_print_error_and_exit("Error: stop-at must be positive "
    5a3d:	31 c0                	xor    %eax,%eax
    5a3f:	48 8d 3d 35 3f 00 00 	lea    0x3f35(%rip),%rdi        # 997b <default_cmd+0x71b>
    5a46:	e8 66 09 00 00       	callq  63b1 <posix_print_error_and_exit>
	hwm_set_end_of_time(args.stop_at*1e6);
    5a4b:	f2 0f 10 05 25 38 00 	movsd  0x3825(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5a52:	00 
    5a53:	f2 0f 59 05 c5 93 00 	mulsd  0x93c5(%rip),%xmm0        # ee20 <args>
    5a5a:	00 
    5a5b:	f2 0f 10 0d 1d 38 00 	movsd  0x381d(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5a62:	00 
    5a63:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5a67:	73 07                	jae    5a70 <cmd_stop_at_found+0x48>
    5a69:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5a6e:	eb 0e                	jmp    5a7e <cmd_stop_at_found+0x56>
    5a70:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5a74:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5a79:	48 0f ba ff 3f       	btc    $0x3f,%rdi
}
    5a7e:	58                   	pop    %rax
	hwm_set_end_of_time(args.stop_at*1e6);
    5a7f:	e9 2a ff ff ff       	jmpq   59ae <hwm_set_end_of_time>

0000000000005a84 <hwtimer_set_real_time_mode>:
{
    5a84:	f3 0f 1e fa          	endbr64 
	real_time_mode = new_rt;
    5a88:	40 88 3d ee 69 00 00 	mov    %dil,0x69ee(%rip)        # c47d <real_time_mode>
}
    5a8f:	c3                   	retq   

0000000000005a90 <cmd_no_realtime_found>:
{
    5a90:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(false);
    5a94:	31 ff                	xor    %edi,%edi
    5a96:	e9 e9 ff ff ff       	jmpq   5a84 <hwtimer_set_real_time_mode>

0000000000005a9b <cmd_realtime_found>:
{
    5a9b:	f3 0f 1e fa          	endbr64 
	hwtimer_set_real_time_mode(true);
    5a9f:	bf 01 00 00 00       	mov    $0x1,%edi
    5aa4:	e9 db ff ff ff       	jmpq   5a84 <hwtimer_set_real_time_mode>

0000000000005aa9 <get_host_us_time>:
{
    5aa9:	f3 0f 1e fa          	endbr64 
    5aad:	48 83 ec 28          	sub    $0x28,%rsp
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    5ab1:	bf 04 00 00 00       	mov    $0x4,%edi
{
    5ab6:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5abd:	00 00 
    5abf:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5ac4:	31 c0                	xor    %eax,%eax
	clock_gettime(CLOCK_MONOTONIC_RAW, tv);
    5ac6:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    5acb:	e8 b0 c9 ff ff       	callq  2480 <clock_gettime@plt>
	return (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    5ad0:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5ad5:	48 85 d2             	test   %rdx,%rdx
    5ad8:	78 07                	js     5ae1 <get_host_us_time+0x38>
    5ada:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    5adf:	eb 15                	jmp    5af6 <get_host_us_time+0x4d>
    5ae1:	48 89 d0             	mov    %rdx,%rax
    5ae4:	83 e2 01             	and    $0x1,%edx
    5ae7:	48 d1 e8             	shr    %rax
    5aea:	48 09 d0             	or     %rdx,%rax
    5aed:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5af2:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5af6:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5afb:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    5b00:	f2 0f 59 05 70 37 00 	mulsd  0x3770(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5b07:	00 
    5b08:	48 99                	cqto   
    5b0a:	48 f7 f9             	idiv   %rcx
    5b0d:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5b12:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5b16:	f2 0f 10 0d 62 37 00 	movsd  0x3762(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5b1d:	00 
    5b1e:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5b22:	73 07                	jae    5b2b <get_host_us_time+0x82>
    5b24:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5b29:	eb 0e                	jmp    5b39 <get_host_us_time+0x90>
    5b2b:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5b2f:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5b34:	48 0f ba f8 3f       	btc    $0x3f,%rax
}
    5b39:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
    5b3e:	64 48 33 3c 25 28 00 	xor    %fs:0x28,%rdi
    5b45:	00 00 
    5b47:	74 05                	je     5b4e <get_host_us_time+0xa5>
    5b49:	e8 62 c9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5b4e:	48 83 c4 28          	add    $0x28,%rsp
    5b52:	c3                   	retq   

0000000000005b53 <hwtimer_init>:
{
    5b53:	f3 0f 1e fa          	endbr64 
    5b57:	48 83 ec 28          	sub    $0x28,%rsp
    5b5b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5b62:	00 00 
    5b64:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    5b69:	31 c0                	xor    %eax,%eax
	hw_timer_tick_timer = NEVER;
    5b6b:	48 8d 05 6e 99 00 00 	lea    0x996e(%rip),%rax        # f4e0 <hw_timer_tick_timer>
	silent_ticks = 0;
    5b72:	48 c7 05 4b 99 00 00 	movq   $0x0,0x994b(%rip)        # f4c8 <silent_ticks>
    5b79:	00 00 00 00 
	hw_timer_tick_timer = NEVER;
    5b7d:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hw_timer_awake_timer = NEVER;
    5b84:	48 8d 05 4d 99 00 00 	lea    0x994d(%rip),%rax        # f4d8 <hw_timer_awake_timer>
    5b8b:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    5b92:	e8 5e fe ff ff       	callq  59f5 <hwtimer_update_timer>
	if (real_time_mode) {
    5b97:	80 3d df 68 00 00 00 	cmpb   $0x0,0x68df(%rip)        # c47d <real_time_mode>
    5b9e:	74 17                	je     5bb7 <hwtimer_init+0x64>
		boot_time = get_host_us_time();
    5ba0:	e8 04 ff ff ff       	callq  5aa9 <get_host_us_time>
		last_radj_stime = 0U;
    5ba5:	48 c7 05 00 99 00 00 	movq   $0x0,0x9900(%rip)        # f4b0 <last_radj_stime>
    5bac:	00 00 00 00 
		last_radj_rtime = boot_time;
    5bb0:	48 89 05 01 99 00 00 	mov    %rax,0x9901(%rip)        # f4b8 <last_radj_rtime>
	if (!reset_rtc) {
    5bb7:	80 3d e5 99 00 00 00 	cmpb   $0x0,0x99e5(%rip)        # f5a3 <reset_rtc>
    5bbe:	75 7c                	jne    5c3c <hwtimer_init+0xe9>
		clock_gettime(CLOCK_REALTIME, &tv);
    5bc0:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    5bc5:	31 ff                	xor    %edi,%edi
    5bc7:	e8 b4 c8 ff ff       	callq  2480 <clock_gettime@plt>
		realhosttime = (uint64_t)tv.tv_sec * 1e6 + tv.tv_nsec / 1000;
    5bcc:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
    5bd1:	48 85 d2             	test   %rdx,%rdx
    5bd4:	78 07                	js     5bdd <hwtimer_init+0x8a>
    5bd6:	f2 48 0f 2a c2       	cvtsi2sd %rdx,%xmm0
    5bdb:	eb 15                	jmp    5bf2 <hwtimer_init+0x9f>
    5bdd:	48 89 d0             	mov    %rdx,%rax
    5be0:	83 e2 01             	and    $0x1,%edx
    5be3:	48 d1 e8             	shr    %rax
    5be6:	48 09 d0             	or     %rdx,%rax
    5be9:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5bee:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
    5bf2:	48 8b 44 24 10       	mov    0x10(%rsp),%rax
    5bf7:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
    5bfc:	f2 0f 59 05 74 36 00 	mulsd  0x3674(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5c03:	00 
    5c04:	48 99                	cqto   
    5c06:	48 f7 f9             	idiv   %rcx
    5c09:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5c0e:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
    5c12:	f2 0f 10 0d 66 36 00 	movsd  0x3666(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5c19:	00 
    5c1a:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5c1e:	73 07                	jae    5c27 <hwtimer_init+0xd4>
    5c20:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5c25:	eb 0e                	jmp    5c35 <hwtimer_init+0xe2>
    5c27:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5c2b:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5c30:	48 0f ba f8 3f       	btc    $0x3f,%rax
		rtc_offset += realhosttime;
    5c35:	48 01 05 84 98 00 00 	add    %rax,0x9884(%rip)        # f4c0 <rtc_offset>
}
    5c3c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    5c41:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5c48:	00 00 
    5c4a:	74 05                	je     5c51 <hwtimer_init+0xfe>
    5c4c:	e8 5f c8 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5c51:	48 83 c4 28          	add    $0x28,%rsp
    5c55:	c3                   	retq   

0000000000005c56 <hwtimer_cleanup>:
{
    5c56:	f3 0f 1e fa          	endbr64 
}
    5c5a:	c3                   	retq   

0000000000005c5b <hwtimer_enable>:
{
    5c5b:	f3 0f 1e fa          	endbr64 
    5c5f:	50                   	push   %rax
	tick_p = period;
    5c60:	48 89 3d 69 98 00 00 	mov    %rdi,0x9869(%rip)        # f4d0 <tick_p>
	hw_timer_tick_timer = hwm_get_time() + tick_p;
    5c67:	e8 4e fd ff ff       	callq  59ba <hwm_get_time>
    5c6c:	48 8d 15 6d 98 00 00 	lea    0x986d(%rip),%rdx        # f4e0 <hw_timer_tick_timer>
    5c73:	48 03 05 56 98 00 00 	add    0x9856(%rip),%rax        # f4d0 <tick_p>
    5c7a:	48 89 02             	mov    %rax,(%rdx)
	hwtimer_update_timer();
    5c7d:	e8 73 fd ff ff       	callq  59f5 <hwtimer_update_timer>
}
    5c82:	5a                   	pop    %rdx
	hwm_find_next_timer();
    5c83:	e9 f9 fb ff ff       	jmpq   5881 <hwm_find_next_timer>

0000000000005c88 <hwtimer_timer_reached>:
{
    5c88:	f3 0f 1e fa          	endbr64 
    5c8c:	55                   	push   %rbp
    5c8d:	53                   	push   %rbx
    5c8e:	48 83 ec 38          	sub    $0x38,%rsp
    5c92:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    5c99:	00 00 
    5c9b:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
    5ca0:	31 c0                	xor    %eax,%eax
	uint64_t Now = hw_timer_timer;
    5ca2:	48 8d 05 3f 98 00 00 	lea    0x983f(%rip),%rax        # f4e8 <hw_timer_timer>
    5ca9:	48 8b 18             	mov    (%rax),%rbx
	if (hw_timer_awake_timer == Now) {
    5cac:	48 8d 05 25 98 00 00 	lea    0x9825(%rip),%rax        # f4d8 <hw_timer_awake_timer>
    5cb3:	48 39 18             	cmp    %rbx,(%rax)
    5cb6:	75 16                	jne    5cce <hwtimer_timer_reached+0x46>
	hw_timer_awake_timer = NEVER;
    5cb8:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	hwtimer_update_timer();
    5cbf:	e8 31 fd ff ff       	callq  59f5 <hwtimer_update_timer>
	hw_irq_ctrl_set_irq(PHONY_HARD_IRQ);
    5cc4:	bf ff ff 00 00       	mov    $0xffff,%edi
    5cc9:	e8 5a 05 00 00       	callq  6228 <hw_irq_ctrl_set_irq>
	if (hw_timer_tick_timer == Now) {
    5cce:	48 8d 2d 0b 98 00 00 	lea    0x980b(%rip),%rbp        # f4e0 <hw_timer_tick_timer>
    5cd5:	48 39 5d 00          	cmp    %rbx,0x0(%rbp)
    5cd9:	0f 85 12 01 00 00    	jne    5df1 <hwtimer_timer_reached+0x169>
	if (real_time_mode) {
    5cdf:	80 3d 97 67 00 00 00 	cmpb   $0x0,0x6797(%rip)        # c47d <real_time_mode>
    5ce6:	0f 84 d6 00 00 00    	je     5dc2 <hwtimer_timer_reached+0x13a>
				    / clock_ratio
    5cec:	48 2b 1d bd 97 00 00 	sub    0x97bd(%rip),%rbx        # f4b0 <last_radj_stime>
    5cf3:	78 07                	js     5cfc <hwtimer_timer_reached+0x74>
    5cf5:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5cfa:	eb 15                	jmp    5d11 <hwtimer_timer_reached+0x89>
    5cfc:	48 89 d8             	mov    %rbx,%rax
    5cff:	83 e3 01             	and    $0x1,%ebx
    5d02:	48 d1 e8             	shr    %rax
    5d05:	48 09 d8             	or     %rbx,%rax
    5d08:	f2 48 0f 2a c0       	cvtsi2sd %rax,%xmm0
    5d0d:	f2 0f 58 c0          	addsd  %xmm0,%xmm0
				    + last_radj_rtime;
    5d11:	48 8b 15 a0 97 00 00 	mov    0x97a0(%rip),%rdx        # f4b8 <last_radj_rtime>
				    / clock_ratio
    5d18:	f2 0f 5e 05 38 67 00 	divsd  0x6738(%rip),%xmm0        # c458 <clock_ratio>
    5d1f:	00 
				    + last_radj_rtime;
    5d20:	48 85 d2             	test   %rdx,%rdx
    5d23:	78 07                	js     5d2c <hwtimer_timer_reached+0xa4>
    5d25:	f2 48 0f 2a ca       	cvtsi2sd %rdx,%xmm1
    5d2a:	eb 15                	jmp    5d41 <hwtimer_timer_reached+0xb9>
    5d2c:	48 89 d0             	mov    %rdx,%rax
    5d2f:	83 e2 01             	and    $0x1,%edx
    5d32:	48 d1 e8             	shr    %rax
    5d35:	48 09 d0             	or     %rdx,%rax
    5d38:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
    5d3d:	f2 0f 58 c9          	addsd  %xmm1,%xmm1
    5d41:	f2 0f 58 c1          	addsd  %xmm1,%xmm0
		uint64_t expected_rt = (hw_timer_tick_timer - last_radj_stime)
    5d45:	f2 0f 10 0d 33 35 00 	movsd  0x3533(%rip),%xmm1        # 9280 <default_cmd+0x20>
    5d4c:	00 
    5d4d:	66 0f 2f c1          	comisd %xmm1,%xmm0
    5d51:	73 07                	jae    5d5a <hwtimer_timer_reached+0xd2>
    5d53:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5d58:	eb 0e                	jmp    5d68 <hwtimer_timer_reached+0xe0>
    5d5a:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
    5d5e:	f2 48 0f 2c d8       	cvttsd2si %xmm0,%rbx
    5d63:	48 0f ba fb 3f       	btc    $0x3f,%rbx
		uint64_t real_time = get_host_us_time();
    5d68:	e8 3c fd ff ff       	callq  5aa9 <get_host_us_time>
		int64_t diff = expected_rt - real_time;
    5d6d:	48 29 c3             	sub    %rax,%rbx
		if (diff > 0) { /* we need to slow down */
    5d70:	48 85 db             	test   %rbx,%rbx
    5d73:	7e 4d                	jle    5dc2 <hwtimer_timer_reached+0x13a>
			requested_time.tv_sec  = diff / 1e6;
    5d75:	f2 48 0f 2a c3       	cvtsi2sd %rbx,%xmm0
    5d7a:	f2 0f 10 1d f6 34 00 	movsd  0x34f6(%rip),%xmm3        # 9278 <default_cmd+0x18>
    5d81:	00 
			(void) nanosleep(&requested_time, &remaining);
    5d82:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
    5d87:	48 8d 7c 24 08       	lea    0x8(%rsp),%rdi
			requested_time.tv_sec  = diff / 1e6;
    5d8c:	66 0f 28 d0          	movapd %xmm0,%xmm2
    5d90:	f2 0f 5e d3          	divsd  %xmm3,%xmm2
    5d94:	f2 48 0f 2c c2       	cvttsd2si %xmm2,%rax
						 requested_time.tv_sec*1e6)*1e3;
    5d99:	f2 48 0f 2a c8       	cvtsi2sd %rax,%xmm1
			requested_time.tv_sec  = diff / 1e6;
    5d9e:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
						 requested_time.tv_sec*1e6)*1e3;
    5da3:	f2 0f 59 cb          	mulsd  %xmm3,%xmm1
			requested_time.tv_nsec = (diff -
    5da7:	f2 0f 5c c1          	subsd  %xmm1,%xmm0
						 requested_time.tv_sec*1e6)*1e3;
    5dab:	f2 0f 59 05 d5 34 00 	mulsd  0x34d5(%rip),%xmm0        # 9288 <default_cmd+0x28>
    5db2:	00 
			requested_time.tv_nsec = (diff -
    5db3:	f2 48 0f 2c c0       	cvttsd2si %xmm0,%rax
    5db8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
			(void) nanosleep(&requested_time, &remaining);
    5dbd:	e8 1e c7 ff ff       	callq  24e0 <nanosleep@plt>
	hw_timer_tick_timer += tick_p;
    5dc2:	48 8b 05 07 97 00 00 	mov    0x9707(%rip),%rax        # f4d0 <tick_p>
    5dc9:	48 01 45 00          	add    %rax,0x0(%rbp)
	hwtimer_update_timer();
    5dcd:	e8 23 fc ff ff       	callq  59f5 <hwtimer_update_timer>
	if (silent_ticks > 0) {
    5dd2:	48 8b 05 ef 96 00 00 	mov    0x96ef(%rip),%rax        # f4c8 <silent_ticks>
    5dd9:	48 85 c0             	test   %rax,%rax
    5ddc:	7e 0c                	jle    5dea <hwtimer_timer_reached+0x162>
		silent_ticks -= 1;
    5dde:	48 ff c8             	dec    %rax
    5de1:	48 89 05 e0 96 00 00 	mov    %rax,0x96e0(%rip)        # f4c8 <silent_ticks>
    5de8:	eb 07                	jmp    5df1 <hwtimer_timer_reached+0x169>
		hw_irq_ctrl_set_irq(TIMER_TICK_IRQ);
    5dea:	31 ff                	xor    %edi,%edi
    5dec:	e8 37 04 00 00       	callq  6228 <hw_irq_ctrl_set_irq>
}
    5df1:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
    5df6:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    5dfd:	00 00 
    5dff:	74 05                	je     5e06 <hwtimer_timer_reached+0x17e>
    5e01:	e8 aa c6 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    5e06:	48 83 c4 38          	add    $0x38,%rsp
    5e0a:	5b                   	pop    %rbx
    5e0b:	5d                   	pop    %rbp
    5e0c:	c3                   	retq   

0000000000005e0d <hwtimer_set_silent_ticks>:
{
    5e0d:	f3 0f 1e fa          	endbr64 
	silent_ticks = sys_ticks;
    5e11:	48 89 3d b0 96 00 00 	mov    %rdi,0x96b0(%rip)        # f4c8 <silent_ticks>
}
    5e18:	c3                   	retq   

0000000000005e19 <hwtimer_reset_rtc>:
{
    5e19:	f3 0f 1e fa          	endbr64 
	reset_rtc = true;
    5e1d:	c6 05 7f 97 00 00 01 	movb   $0x1,0x977f(%rip)        # f5a3 <reset_rtc>
}
    5e24:	c3                   	retq   

0000000000005e25 <cmd_rtcreset_found>:
{
    5e25:	f3 0f 1e fa          	endbr64 
	hwtimer_reset_rtc();
    5e29:	e9 eb ff ff ff       	jmpq   5e19 <hwtimer_reset_rtc>

0000000000005e2e <hwtimer_set_rtc_offset>:
{
    5e2e:	f3 0f 1e fa          	endbr64 
	rtc_offset = offset;
    5e32:	48 89 3d 87 96 00 00 	mov    %rdi,0x9687(%rip)        # f4c0 <rtc_offset>
}
    5e39:	c3                   	retq   

0000000000005e3a <cmd_rtcoffset_found>:
{
    5e3a:	f3 0f 1e fa          	endbr64 
	hwtimer_set_rtc_offset(args.rtc_offset*1e6);
    5e3e:	f2 0f 10 05 32 34 00 	movsd  0x3432(%rip),%xmm0        # 9278 <default_cmd+0x18>
    5e45:	00 
    5e46:	f2 0f 59 05 da 8f 00 	mulsd  0x8fda(%rip),%xmm0        # ee28 <args+0x8>
    5e4d:	00 
    5e4e:	f2 48 0f 2c f8       	cvttsd2si %xmm0,%rdi
    5e53:	e9 d6 ff ff ff       	jmpq   5e2e <hwtimer_set_rtc_offset>

0000000000005e58 <hwtimer_set_rt_ratio>:
{
    5e58:	f3 0f 1e fa          	endbr64 
	clock_ratio = ratio;
    5e5c:	f2 0f 11 05 f4 65 00 	movsd  %xmm0,0x65f4(%rip)        # c458 <clock_ratio>
    5e63:	00 
}
    5e64:	c3                   	retq   

0000000000005e65 <cmd_rt_ratio_found>:
{
    5e65:	f3 0f 1e fa          	endbr64 
	if ((args.rt_ratio <= 0)) {
    5e69:	0f 57 c0             	xorps  %xmm0,%xmm0
    5e6c:	66 0f 2f 05 c4 8f 00 	comisd 0x8fc4(%rip),%xmm0        # ee38 <args+0x18>
    5e73:	00 
    5e74:	72 1a                	jb     5e90 <cmd_rt_ratio_found+0x2b>
{
    5e76:	50                   	push   %rax
		posix_print_error_and_exit("The ratio needs to be > 0. "
    5e77:	48 8d 3d 23 3b 00 00 	lea    0x3b23(%rip),%rdi        # 99a1 <default_cmd+0x741>
    5e7e:	31 c0                	xor    %eax,%eax
    5e80:	e8 2c 05 00 00       	callq  63b1 <posix_print_error_and_exit>
	hwtimer_set_rt_ratio(args.rt_ratio);
    5e85:	f2 0f 10 05 ab 8f 00 	movsd  0x8fab(%rip),%xmm0        # ee38 <args+0x18>
    5e8c:	00 
}
    5e8d:	5a                   	pop    %rdx
    5e8e:	eb 08                	jmp    5e98 <cmd_rt_ratio_found+0x33>
	hwtimer_set_rt_ratio(args.rt_ratio);
    5e90:	f2 0f 10 05 a0 8f 00 	movsd  0x8fa0(%rip),%xmm0        # ee38 <args+0x18>
    5e97:	00 
    5e98:	e9 bb ff ff ff       	jmpq   5e58 <hwtimer_set_rt_ratio>

0000000000005e9d <cmd_rt_drift_found>:
{
    5e9d:	f3 0f 1e fa          	endbr64 
    5ea1:	52                   	push   %rdx
	if (!(args.rt_drift > -1)) {
    5ea2:	f2 0f 10 05 86 8f 00 	movsd  0x8f86(%rip),%xmm0        # ee30 <args+0x10>
    5ea9:	00 
    5eaa:	66 0f 2f 05 de 33 00 	comisd 0x33de(%rip),%xmm0        # 9290 <default_cmd+0x30>
    5eb1:	00 
    5eb2:	77 0e                	ja     5ec2 <cmd_rt_drift_found+0x25>
		posix_print_error_and_exit("The drift needs to be > -1. "
    5eb4:	48 8d 3d 22 3b 00 00 	lea    0x3b22(%rip),%rdi        # 99dd <default_cmd+0x77d>
    5ebb:	31 c0                	xor    %eax,%eax
    5ebd:	e8 ef 04 00 00       	callq  63b1 <posix_print_error_and_exit>
	args.rt_ratio = args.rt_drift + 1;
    5ec2:	f2 0f 10 05 ce 33 00 	movsd  0x33ce(%rip),%xmm0        # 9298 <default_cmd+0x38>
    5ec9:	00 
    5eca:	f2 0f 58 05 5e 8f 00 	addsd  0x8f5e(%rip),%xmm0        # ee30 <args+0x10>
    5ed1:	00 
    5ed2:	f2 0f 11 05 5e 8f 00 	movsd  %xmm0,0x8f5e(%rip)        # ee38 <args+0x18>
    5ed9:	00 
}
    5eda:	58                   	pop    %rax
	hwtimer_set_rt_ratio(args.rt_ratio);
    5edb:	e9 78 ff ff ff       	jmpq   5e58 <hwtimer_set_rt_ratio>

0000000000005ee0 <posix_irq_handler>:
 * Note that even that this function is executing in a Zephyr thread,  it is
 * effectively the model of the interrupt controller passing context to the IRQ
 * handler and therefore its priority handling
 */
void posix_irq_handler(void)
{
    5ee0:	f3 0f 1e fa          	endbr64 
    5ee4:	41 56                	push   %r14
    5ee6:	41 55                	push   %r13
    5ee8:	41 54                	push   %r12
    5eea:	55                   	push   %rbp
    5eeb:	53                   	push   %rbx
	uint64_t irq_lock;
	int irq_nbr;
	static int may_swap;

	irq_lock = hw_irq_ctrl_get_current_lock();
    5eec:	e8 5e 02 00 00       	callq  614f <hw_irq_ctrl_get_current_lock>

	if (irq_lock) {
    5ef1:	85 c0                	test   %eax,%eax
    5ef3:	0f 85 e6 00 00 00    	jne    5fdf <posix_irq_handler+0xff>
		/* "spurious" wakes can happen with interrupts locked */
		return;
	}

	if (_kernel.cpus[0].nested == 0) {
    5ef9:	48 8d 1d 20 95 00 00 	lea    0x9520(%rip),%rbx        # f420 <_kernel>
    5f00:	8b 03                	mov    (%rbx),%eax
    5f02:	85 c0                	test   %eax,%eax
    5f04:	75 0a                	jne    5f10 <posix_irq_handler+0x30>
		may_swap = 0;
    5f06:	c7 05 64 96 00 00 00 	movl   $0x0,0x9664(%rip)        # f574 <may_swap.5208>
    5f0d:	00 00 00 
	}

	_kernel.cpus[0].nested++;
    5f10:	ff c0                	inc    %eax
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5f12:	4c 8d 2d 27 8f 00 00 	lea    0x8f27(%rip),%r13        # ee40 <irq_vector_table>
	_kernel.cpus[0].nested++;
    5f19:	89 03                	mov    %eax,(%rbx)

	while ((irq_nbr = hw_irq_ctrl_get_highest_prio_irq()) != -1) {
    5f1b:	e8 7a 02 00 00       	callq  619a <hw_irq_ctrl_get_highest_prio_irq>
    5f20:	89 c5                	mov    %eax,%ebp
    5f22:	83 f8 ff             	cmp    $0xffffffff,%eax
    5f25:	0f 84 84 00 00 00    	je     5faf <posix_irq_handler+0xcf>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    5f2b:	e8 f1 01 00 00       	callq  6121 <hw_irq_ctrl_get_cur_prio>
		int last_running_irq = currently_running_irq;

		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    5f30:	89 ef                	mov    %ebp,%edi
		int last_running_irq = currently_running_irq;
    5f32:	44 8b 35 3b 65 00 00 	mov    0x653b(%rip),%r14d        # c474 <currently_running_irq>
		int last_current_running_prio = hw_irq_ctrl_get_cur_prio();
    5f39:	41 89 c4             	mov    %eax,%r12d
		hw_irq_ctrl_set_cur_prio(hw_irq_ctrl_get_prio(irq_nbr));
    5f3c:	e8 fd 01 00 00       	callq  613e <hw_irq_ctrl_get_prio>
    5f41:	0f b6 f8             	movzbl %al,%edi
    5f44:	e8 cd 01 00 00       	callq  6116 <hw_irq_ctrl_set_cur_prio>
		hw_irq_ctrl_clear_irq(irq_nbr);
    5f49:	89 ef                	mov    %ebp,%edi
    5f4b:	e8 b9 02 00 00       	callq  6209 <hw_irq_ctrl_clear_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5f50:	48 63 c5             	movslq %ebp,%rax

		currently_running_irq = irq_nbr;
    5f53:	89 2d 1b 65 00 00    	mov    %ebp,0x651b(%rip)        # c474 <currently_running_irq>
	if (irq_vector_table[irq_nbr].func == NULL) { /* LCOV_EXCL_BR_LINE */
    5f59:	48 6b c0 18          	imul   $0x18,%rax,%rax
    5f5d:	4c 01 e8             	add    %r13,%rax
    5f60:	48 8b 50 08          	mov    0x8(%rax),%rdx
    5f64:	48 85 d2             	test   %rdx,%rdx
    5f67:	75 12                	jne    5f7b <posix_irq_handler+0x9b>
		posix_print_error_and_exit("Received irq %i without a "
    5f69:	89 ee                	mov    %ebp,%esi
    5f6b:	48 8d 3d 81 3e 00 00 	lea    0x3e81(%rip),%rdi        # 9df3 <default_cmd+0xb93>
    5f72:	31 c0                	xor    %eax,%eax
    5f74:	e8 38 04 00 00       	callq  63b1 <posix_print_error_and_exit>
    5f79:	eb 20                	jmp    5f9b <posix_irq_handler+0xbb>
		if (irq_vector_table[irq_nbr].flags & ISR_FLAG_DIRECT) {
    5f7b:	f6 40 04 01          	testb  $0x1,0x4(%rax)
    5f7f:	74 0a                	je     5f8b <posix_irq_handler+0xab>
			*may_swap |= ((direct_irq_f_ptr)
    5f81:	ff d2                	callq  *%rdx
    5f83:	09 05 eb 95 00 00    	or     %eax,0x95eb(%rip)        # f574 <may_swap.5208>
    5f89:	eb 10                	jmp    5f9b <posix_irq_handler+0xbb>
			((normal_irq_f_ptr)irq_vector_table[irq_nbr].func)
    5f8b:	48 8b 78 10          	mov    0x10(%rax),%rdi
    5f8f:	ff d2                	callq  *%rdx
			*may_swap = 1;
    5f91:	c7 05 d9 95 00 00 01 	movl   $0x1,0x95d9(%rip)        # f574 <may_swap.5208>
    5f98:	00 00 00 
		vector_to_irq(irq_nbr, &may_swap);
		currently_running_irq = last_running_irq;

		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    5f9b:	44 89 e7             	mov    %r12d,%edi
		currently_running_irq = last_running_irq;
    5f9e:	44 89 35 cf 64 00 00 	mov    %r14d,0x64cf(%rip)        # c474 <currently_running_irq>
		hw_irq_ctrl_set_cur_prio(last_current_running_prio);
    5fa5:	e8 6c 01 00 00       	callq  6116 <hw_irq_ctrl_set_cur_prio>
    5faa:	e9 6c ff ff ff       	jmpq   5f1b <posix_irq_handler+0x3b>
	}

	_kernel.cpus[0].nested--;
    5faf:	ff 0b                	decl   (%rbx)
	/* Call swap if all the following is true:
	 * 1) may_swap was enabled
	 * 2) We are not nesting irq_handler calls (interrupts)
	 * 3) Next thread to run in the ready queue is not this thread
	 */
	if (may_swap
    5fb1:	83 3d bc 95 00 00 00 	cmpl   $0x0,0x95bc(%rip)        # f574 <may_swap.5208>
    5fb8:	74 25                	je     5fdf <posix_irq_handler+0xff>
		&& (hw_irq_ctrl_get_cur_prio() == 256)
    5fba:	e8 62 01 00 00       	callq  6121 <hw_irq_ctrl_get_cur_prio>
    5fbf:	3d 00 01 00 00       	cmp    $0x100,%eax
    5fc4:	75 19                	jne    5fdf <posix_irq_handler+0xff>
		&& (_kernel.ready_q.cache != _current)) {
    5fc6:	48 8b 43 10          	mov    0x10(%rbx),%rax
    5fca:	48 39 43 38          	cmp    %rax,0x38(%rbx)
    5fce:	74 0f                	je     5fdf <posix_irq_handler+0xff>

		(void)z_swap_irqlock(irq_lock);
	}
}
    5fd0:	5b                   	pop    %rbx

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    5fd1:	31 ff                	xor    %edi,%edi
    5fd3:	5d                   	pop    %rbp
    5fd4:	41 5c                	pop    %r12
    5fd6:	41 5d                	pop    %r13
    5fd8:	41 5e                	pop    %r14
    5fda:	e9 79 f4 ff ff       	jmpq   5458 <arch_swap>
    5fdf:	5b                   	pop    %rbx
    5fe0:	5d                   	pop    %rbp
    5fe1:	41 5c                	pop    %r12
    5fe3:	41 5d                	pop    %r13
    5fe5:	41 5e                	pop    %r14
    5fe7:	c3                   	retq   

0000000000005fe8 <posix_irq_handler_im_from_sw>:
 * Thru this function the IRQ controller can raise an immediate  interrupt which
 * will interrupt the SW itself
 * (this function should only be called from the HW model code, from SW threads)
 */
void posix_irq_handler_im_from_sw(void)
{
    5fe8:	f3 0f 1e fa          	endbr64 
    5fec:	51                   	push   %rcx
	/*
	 * if a higher priority interrupt than the possibly currently running is
	 * pending we go immediately into irq_handler() to vector into its
	 * handler
	 */
	if (hw_irq_ctrl_get_highest_prio_irq() != -1) {
    5fed:	e8 a8 01 00 00       	callq  619a <hw_irq_ctrl_get_highest_prio_irq>
    5ff2:	ff c0                	inc    %eax
    5ff4:	74 22                	je     6018 <posix_irq_handler_im_from_sw+0x30>
		if (!posix_is_cpu_running()) { /* LCOV_EXCL_BR_LINE */
    5ff6:	e8 57 f5 ff ff       	callq  5552 <posix_is_cpu_running>
    5ffb:	85 c0                	test   %eax,%eax
    5ffd:	75 13                	jne    6012 <posix_irq_handler_im_from_sw+0x2a>
			/* LCOV_EXCL_START */
			posix_print_error_and_exit("programming error: %s "
    5fff:	48 8d 35 3a 32 00 00 	lea    0x323a(%rip),%rsi        # 9240 <__func__.5217>
    6006:	48 8d 3d 14 3e 00 00 	lea    0x3e14(%rip),%rdi        # 9e21 <default_cmd+0xbc1>
    600d:	e8 9f 03 00 00       	callq  63b1 <posix_print_error_and_exit>
					__func__);
			/* LCOV_EXCL_STOP */
		}
		posix_irq_handler();
	}
}
    6012:	5a                   	pop    %rdx
		posix_irq_handler();
    6013:	e9 c8 fe ff ff       	jmpq   5ee0 <posix_irq_handler>
}
    6018:	58                   	pop    %rax
    6019:	c3                   	retq   

000000000000601a <posix_irq_lock>:
 * @return An architecture-dependent lock-out key representing the
 * "interrupt disable state" prior to the call.
 *
 */
unsigned int posix_irq_lock(void)
{
    601a:	f3 0f 1e fa          	endbr64 
	return hw_irq_ctrl_change_lock(true);
    601e:	bf 01 00 00 00       	mov    $0x1,%edi
    6023:	e9 33 01 00 00       	jmpq   615b <hw_irq_ctrl_change_lock>

0000000000006028 <posix_irq_unlock>:
 *
 * @return N/A
 *
 */
void posix_irq_unlock(unsigned int key)
{
    6028:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(key);
    602c:	e9 2a 01 00 00       	jmpq   615b <hw_irq_ctrl_change_lock>

0000000000006031 <posix_irq_full_unlock>:
}

void posix_irq_full_unlock(void)
{
    6031:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_change_lock(false);
    6035:	31 ff                	xor    %edi,%edi
    6037:	e9 1f 01 00 00       	jmpq   615b <hw_irq_ctrl_change_lock>

000000000000603c <posix_irq_enable>:
}

void posix_irq_enable(unsigned int irq)
{
    603c:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_enable_irq(irq);
    6040:	e9 31 02 00 00       	jmpq   6276 <hw_irq_ctrl_enable_irq>

0000000000006045 <posix_isr_declare>:
 * @param isr_param_p ISR parameter
 * @param flags_p IRQ options
 */
void posix_isr_declare(unsigned int irq_p, int flags, void isr_p(const void *),
		       const void *isr_param_p)
{
    6045:	f3 0f 1e fa          	endbr64 
	irq_vector_table[irq_p].irq   = irq_p;
    6049:	89 f8                	mov    %edi,%eax
{
    604b:	49 89 d0             	mov    %rdx,%r8
	irq_vector_table[irq_p].irq   = irq_p;
    604e:	48 6b d0 18          	imul   $0x18,%rax,%rdx
    6052:	48 8d 05 e7 8d 00 00 	lea    0x8de7(%rip),%rax        # ee40 <irq_vector_table>
    6059:	48 01 d0             	add    %rdx,%rax
    605c:	89 38                	mov    %edi,(%rax)
	irq_vector_table[irq_p].func  = isr_p;
    605e:	4c 89 40 08          	mov    %r8,0x8(%rax)
	irq_vector_table[irq_p].param = isr_param_p;
    6062:	48 89 48 10          	mov    %rcx,0x10(%rax)
	irq_vector_table[irq_p].flags = flags;
    6066:	89 70 04             	mov    %esi,0x4(%rax)
}
    6069:	c3                   	retq   

000000000000606a <posix_irq_priority_set>:
 * Lower values take priority over higher values.
 *
 * @return N/A
 */
void posix_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    606a:	f3 0f 1e fa          	endbr64 
	hw_irq_ctrl_prio_set(irq, prio);
    606e:	e9 b9 00 00 00       	jmpq   612c <hw_irq_ctrl_prio_set>

0000000000006073 <irq_raising_from_hw_now>:
	/*
	 * We always awake the CPU even if the IRQ was masked,
	 * but not if irqs are locked unless this is due to a
	 * PHONY_HARD_IRQ
	 */
	if ((irqs_locked == false) || (lock_ignore)) {
    6073:	80 3d 2b 95 00 00 00 	cmpb   $0x0,0x952b(%rip)        # f5a5 <irqs_locked>
    607a:	74 09                	je     6085 <irq_raising_from_hw_now+0x12>
    607c:	80 3d 21 95 00 00 00 	cmpb   $0x0,0x9521(%rip)        # f5a4 <lock_ignore>
    6083:	74 0c                	je     6091 <irq_raising_from_hw_now+0x1e>
		lock_ignore = false;
    6085:	c6 05 18 95 00 00 00 	movb   $0x0,0x9518(%rip)        # f5a4 <lock_ignore>
		posix_interrupt_raised();
    608c:	e9 55 f5 ff ff       	jmpq   55e6 <posix_interrupt_raised>
	}
}
    6091:	c3                   	retq   

0000000000006092 <hw_irq_ctrl_irq_raise_prefix>:
{
    6092:	89 f9                	mov    %edi,%ecx
	if (irq < N_IRQS) {
    6094:	83 ff 1f             	cmp    $0x1f,%edi
    6097:	77 29                	ja     60c2 <hw_irq_ctrl_irq_raise_prefix+0x30>
		if (irq_mask & (1 << irq)) {
    6099:	b8 01 00 00 00       	mov    $0x1,%eax
		irq_premask |= ((uint64_t)1<<irq);
    609e:	ba 01 00 00 00       	mov    $0x1,%edx
		if (irq_mask & (1 << irq)) {
    60a3:	d3 e0                	shl    %cl,%eax
		irq_premask |= ((uint64_t)1<<irq);
    60a5:	48 d3 e2             	shl    %cl,%rdx
    60a8:	48 09 15 49 94 00 00 	or     %rdx,0x9449(%rip)        # f4f8 <irq_premask>
		if (irq_mask & (1 << irq)) {
    60af:	48 98                	cltq   
    60b1:	48 85 05 38 94 00 00 	test   %rax,0x9438(%rip)        # f4f0 <irq_mask>
    60b8:	74 17                	je     60d1 <hw_irq_ctrl_irq_raise_prefix+0x3f>
			irq_status |= ((uint64_t)1<<irq);
    60ba:	48 09 15 3f 94 00 00 	or     %rdx,0x943f(%rip)        # f500 <irq_status>
    60c1:	c3                   	retq   
	} else if (irq == PHONY_HARD_IRQ) {
    60c2:	81 ff ff ff 00 00    	cmp    $0xffff,%edi
    60c8:	75 07                	jne    60d1 <hw_irq_ctrl_irq_raise_prefix+0x3f>
		lock_ignore = true;
    60ca:	c6 05 d3 94 00 00 01 	movb   $0x1,0x94d3(%rip)        # f5a4 <lock_ignore>
}
    60d1:	c3                   	retq   

00000000000060d2 <hw_irq_ctrl_init>:
{
    60d2:	f3 0f 1e fa          	endbr64 
	irqs_locked = false;
    60d6:	c6 05 c8 94 00 00 00 	movb   $0x0,0x94c8(%rip)        # f5a5 <irqs_locked>
    60dd:	48 8d 05 5c 90 00 00 	lea    0x905c(%rip),%rax        # f140 <irq_prio>
	irq_mask = 0U; /* Let's assume all interrupts are disable at boot */
    60e4:	48 c7 05 01 94 00 00 	movq   $0x0,0x9401(%rip)        # f4f0 <irq_mask>
    60eb:	00 00 00 00 
	irq_premask = 0U;
    60ef:	48 8d 50 20          	lea    0x20(%rax),%rdx
    60f3:	48 c7 05 fa 93 00 00 	movq   $0x0,0x93fa(%rip)        # f4f8 <irq_premask>
    60fa:	00 00 00 00 
	lock_ignore = false;
    60fe:	c6 05 9f 94 00 00 00 	movb   $0x0,0x949f(%rip)        # f5a4 <lock_ignore>
		irq_prio[i] = 255U;
    6105:	c6 00 ff             	movb   $0xff,(%rax)
	for (int i = 0 ; i < N_IRQS; i++) {
    6108:	48 ff c0             	inc    %rax
    610b:	48 39 d0             	cmp    %rdx,%rax
    610e:	75 f5                	jne    6105 <hw_irq_ctrl_init+0x33>
}
    6110:	c3                   	retq   

0000000000006111 <hw_irq_ctrl_cleanup>:
{
    6111:	f3 0f 1e fa          	endbr64 
}
    6115:	c3                   	retq   

0000000000006116 <hw_irq_ctrl_set_cur_prio>:
{
    6116:	f3 0f 1e fa          	endbr64 
	currently_running_prio = new;
    611a:	89 3d 58 63 00 00    	mov    %edi,0x6358(%rip)        # c478 <currently_running_prio>
}
    6120:	c3                   	retq   

0000000000006121 <hw_irq_ctrl_get_cur_prio>:
{
    6121:	f3 0f 1e fa          	endbr64 
}
    6125:	8b 05 4d 63 00 00    	mov    0x634d(%rip),%eax        # c478 <currently_running_prio>
    612b:	c3                   	retq   

000000000000612c <hw_irq_ctrl_prio_set>:
{
    612c:	f3 0f 1e fa          	endbr64 
	irq_prio[irq] = prio;
    6130:	89 ff                	mov    %edi,%edi
    6132:	48 8d 05 07 90 00 00 	lea    0x9007(%rip),%rax        # f140 <irq_prio>
    6139:	40 88 34 38          	mov    %sil,(%rax,%rdi,1)
}
    613d:	c3                   	retq   

000000000000613e <hw_irq_ctrl_get_prio>:
{
    613e:	f3 0f 1e fa          	endbr64 
	return irq_prio[irq];
    6142:	89 ff                	mov    %edi,%edi
    6144:	48 8d 05 f5 8f 00 00 	lea    0x8ff5(%rip),%rax        # f140 <irq_prio>
    614b:	8a 04 38             	mov    (%rax,%rdi,1),%al
}
    614e:	c3                   	retq   

000000000000614f <hw_irq_ctrl_get_current_lock>:
{
    614f:	f3 0f 1e fa          	endbr64 
	return irqs_locked;
    6153:	0f b6 05 4b 94 00 00 	movzbl 0x944b(%rip),%eax        # f5a5 <irqs_locked>
}
    615a:	c3                   	retq   

000000000000615b <hw_irq_ctrl_change_lock>:
{
    615b:	f3 0f 1e fa          	endbr64 
	irqs_locked = new_lock;
    615f:	85 ff                	test   %edi,%edi
{
    6161:	41 54                	push   %r12
	uint32_t previous_lock = irqs_locked;
    6163:	44 0f b6 25 3a 94 00 	movzbl 0x943a(%rip),%r12d        # f5a5 <irqs_locked>
    616a:	00 
	irqs_locked = new_lock;
    616b:	0f 95 05 33 94 00 00 	setne  0x9433(%rip)        # f5a5 <irqs_locked>
	if ((previous_lock == true) && (new_lock == false)) {
    6172:	75 14                	jne    6188 <hw_irq_ctrl_change_lock+0x2d>
    6174:	45 84 e4             	test   %r12b,%r12b
    6177:	74 0f                	je     6188 <hw_irq_ctrl_change_lock+0x2d>
		if (irq_status != 0U) {
    6179:	48 83 3d 7f 93 00 00 	cmpq   $0x0,0x937f(%rip)        # f500 <irq_status>
    6180:	00 
    6181:	74 05                	je     6188 <hw_irq_ctrl_change_lock+0x2d>
			posix_irq_handler_im_from_sw();
    6183:	e8 60 fe ff ff       	callq  5fe8 <posix_irq_handler_im_from_sw>
}
    6188:	44 89 e0             	mov    %r12d,%eax
    618b:	41 5c                	pop    %r12
    618d:	c3                   	retq   

000000000000618e <hw_irq_ctrl_get_irq_status>:
{
    618e:	f3 0f 1e fa          	endbr64 
}
    6192:	48 8b 05 67 93 00 00 	mov    0x9367(%rip),%rax        # f500 <irq_status>
    6199:	c3                   	retq   

000000000000619a <hw_irq_ctrl_get_highest_prio_irq>:
{
    619a:	f3 0f 1e fa          	endbr64 
	if (irqs_locked) {
    619e:	80 3d 00 94 00 00 00 	cmpb   $0x0,0x9400(%rip)        # f5a5 <irqs_locked>
    61a5:	75 55                	jne    61fc <hw_irq_ctrl_get_highest_prio_irq+0x62>
{
    61a7:	51                   	push   %rcx
	uint64_t irq_status = hw_irq_ctrl_get_irq_status();
    61a8:	e8 e1 ff ff ff       	callq  618e <hw_irq_ctrl_get_irq_status>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    61ad:	8b 3d c5 62 00 00    	mov    0x62c5(%rip),%edi        # c478 <currently_running_prio>
	int winner_prio = 256;
    61b3:	be 00 01 00 00       	mov    $0x100,%esi
	int winner = -1;
    61b8:	41 83 c8 ff          	or     $0xffffffff,%r8d
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    61bc:	41 83 c9 ff          	or     $0xffffffff,%r9d
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    61c0:	41 ba 01 00 00 00    	mov    $0x1,%r10d
		if ((winner_prio > (int)irq_prio[irq_nbr])
    61c6:	4c 8d 1d 73 8f 00 00 	lea    0x8f73(%rip),%r11        # f140 <irq_prio>
	while (irq_status != 0U) {
    61cd:	48 85 c0             	test   %rax,%rax
    61d0:	74 32                	je     6204 <hw_irq_ctrl_get_highest_prio_irq+0x6a>
    61d2:	0f bc c8             	bsf    %eax,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    61d5:	4c 89 d2             	mov    %r10,%rdx
		int irq_nbr = find_lsb_set(irq_status) - 1;
    61d8:	41 0f 44 c9          	cmove  %r9d,%ecx
		irq_status &= ~((uint64_t) 1 << irq_nbr);
    61dc:	48 d3 e2             	shl    %cl,%rdx
    61df:	48 f7 d2             	not    %rdx
    61e2:	48 21 d0             	and    %rdx,%rax
		if ((winner_prio > (int)irq_prio[irq_nbr])
    61e5:	48 63 d1             	movslq %ecx,%rdx
    61e8:	41 0f b6 14 13       	movzbl (%r11,%rdx,1),%edx
    61ed:	39 f2                	cmp    %esi,%edx
    61ef:	7d dc                	jge    61cd <hw_irq_ctrl_get_highest_prio_irq+0x33>
		   && (currently_running_prio > (int)irq_prio[irq_nbr])) {
    61f1:	39 fa                	cmp    %edi,%edx
    61f3:	0f 4c f2             	cmovl  %edx,%esi
    61f6:	44 0f 4c c1          	cmovl  %ecx,%r8d
    61fa:	eb d1                	jmp    61cd <hw_irq_ctrl_get_highest_prio_irq+0x33>
    61fc:	41 83 c8 ff          	or     $0xffffffff,%r8d
}
    6200:	44 89 c0             	mov    %r8d,%eax
    6203:	c3                   	retq   
    6204:	44 89 c0             	mov    %r8d,%eax
    6207:	5a                   	pop    %rdx
    6208:	c3                   	retq   

0000000000006209 <hw_irq_ctrl_clear_irq>:
{
    6209:	f3 0f 1e fa          	endbr64 
	irq_status  &= ~((uint64_t)1<<irq);
    620d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    6214:	89 f9                	mov    %edi,%ecx
    6216:	48 d3 c0             	rol    %cl,%rax
    6219:	48 21 05 e0 92 00 00 	and    %rax,0x92e0(%rip)        # f500 <irq_status>
	irq_premask &= ~((uint64_t)1<<irq);
    6220:	48 21 05 d1 92 00 00 	and    %rax,0x92d1(%rip)        # f4f8 <irq_premask>
}
    6227:	c3                   	retq   

0000000000006228 <hw_irq_ctrl_set_irq>:
{
    6228:	f3 0f 1e fa          	endbr64 
    622c:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    622d:	e8 60 fe ff ff       	callq  6092 <hw_irq_ctrl_irq_raise_prefix>
	if ((irqs_locked == false) || (lock_ignore)) {
    6232:	80 3d 6c 93 00 00 00 	cmpb   $0x0,0x936c(%rip)        # f5a5 <irqs_locked>
    6239:	74 09                	je     6244 <hw_irq_ctrl_set_irq+0x1c>
    623b:	80 3d 62 93 00 00 00 	cmpb   $0x0,0x9362(%rip)        # f5a4 <lock_ignore>
    6242:	74 15                	je     6259 <hw_irq_ctrl_set_irq+0x31>
		irq_ctrl_timer = hwm_get_time();
    6244:	e8 71 f7 ff ff       	callq  59ba <hwm_get_time>
    6249:	48 8d 15 10 62 00 00 	lea    0x6210(%rip),%rdx        # c460 <irq_ctrl_timer>
    6250:	48 89 02             	mov    %rax,(%rdx)
}
    6253:	5a                   	pop    %rdx
		hwm_find_next_timer();
    6254:	e9 28 f6 ff ff       	jmpq   5881 <hwm_find_next_timer>
}
    6259:	58                   	pop    %rax
    625a:	c3                   	retq   

000000000000625b <hw_irq_ctrl_raise_im_from_sw>:
 * Like hw_irq_ctrl_raise_im() but for SW threads
 *
 * Call only from SW threads
 */
void hw_irq_ctrl_raise_im_from_sw(unsigned int irq)
{
    625b:	f3 0f 1e fa          	endbr64 
    625f:	51                   	push   %rcx
	hw_irq_ctrl_irq_raise_prefix(irq);
    6260:	e8 2d fe ff ff       	callq  6092 <hw_irq_ctrl_irq_raise_prefix>

	if (irqs_locked == false) {
    6265:	80 3d 39 93 00 00 00 	cmpb   $0x0,0x9339(%rip)        # f5a5 <irqs_locked>
    626c:	75 06                	jne    6274 <hw_irq_ctrl_raise_im_from_sw+0x19>
		posix_irq_handler_im_from_sw();
	}
}
    626e:	5a                   	pop    %rdx
		posix_irq_handler_im_from_sw();
    626f:	e9 74 fd ff ff       	jmpq   5fe8 <posix_irq_handler_im_from_sw>
}
    6274:	58                   	pop    %rax
    6275:	c3                   	retq   

0000000000006276 <hw_irq_ctrl_enable_irq>:
{
    6276:	f3 0f 1e fa          	endbr64 
	irq_mask |= ((uint64_t)1<<irq);
    627a:	b8 01 00 00 00       	mov    $0x1,%eax
    627f:	89 f9                	mov    %edi,%ecx
    6281:	48 d3 e0             	shl    %cl,%rax
    6284:	48 09 05 65 92 00 00 	or     %rax,0x9265(%rip)        # f4f0 <irq_mask>
	if (irq_premask & ((uint64_t)1<<irq)) { /* if IRQ is pending */
    628b:	48 8b 05 66 92 00 00 	mov    0x9266(%rip),%rax        # f4f8 <irq_premask>
    6292:	48 0f a3 f8          	bt     %rdi,%rax
    6296:	73 05                	jae    629d <hw_irq_ctrl_enable_irq+0x27>
		hw_irq_ctrl_raise_im_from_sw(irq);
    6298:	e9 be ff ff ff       	jmpq   625b <hw_irq_ctrl_raise_im_from_sw>
}
    629d:	c3                   	retq   

000000000000629e <hw_irq_ctrl_timer_triggered>:

void hw_irq_ctrl_timer_triggered(void)
{
    629e:	f3 0f 1e fa          	endbr64 
	irq_ctrl_timer = NEVER;
    62a2:	48 8d 05 b7 61 00 00 	lea    0x61b7(%rip),%rax        # c460 <irq_ctrl_timer>
    62a9:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	irq_raising_from_hw_now();
    62b0:	e9 be fd ff ff       	jmpq   6073 <irq_raising_from_hw_now>

00000000000062b5 <posix_exit>:
#include <stdlib.h>
#include <sys/util.h>
#include "cmdline.h"

void posix_exit(int exit_code)
{
    62b5:	f3 0f 1e fa          	endbr64 
    62b9:	50                   	push   %rax
	static int max_exit_code;

	max_exit_code = MAX(exit_code, max_exit_code);
    62ba:	39 3d b8 92 00 00    	cmp    %edi,0x92b8(%rip)        # f578 <max_exit_code.2396>
    62c0:	0f 4d 3d b1 92 00 00 	cmovge 0x92b1(%rip),%edi        # f578 <max_exit_code.2396>
    62c7:	89 3d ab 92 00 00    	mov    %edi,0x92ab(%rip)        # f578 <max_exit_code.2396>
	/*
	 * posix_soc_clean_up may not return if this is called from a SW thread,
	 * but instead it would get posix_exit() recalled again
	 * ASAP from the HW thread
	 */
	posix_soc_clean_up();
    62cd:	e8 43 f4 ff ff       	callq  5715 <posix_soc_clean_up>
	hwm_cleanup();
    62d2:	e8 0e f7 ff ff       	callq  59e5 <hwm_cleanup>
	native_cleanup_cmd_line();
    62d7:	e8 10 0b 00 00       	callq  6dec <native_cleanup_cmd_line>
	exit(max_exit_code);
    62dc:	8b 3d 96 92 00 00    	mov    0x9296(%rip),%edi        # f578 <max_exit_code.2396>
    62e2:	e8 79 c3 ff ff       	callq  2660 <exit@plt>

00000000000062e7 <main>:
/**
 * This is the actual main for the Linux process,
 * the Zephyr application main is renamed something else thru a define.
 */
int main(int argc, char *argv[])
{
    62e7:	f3 0f 1e fa          	endbr64 
    62eb:	55                   	push   %rbp
    62ec:	89 fd                	mov    %edi,%ebp
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    62ee:	31 ff                	xor    %edi,%edi
{
    62f0:	48 83 ec 10          	sub    $0x10,%rsp
    62f4:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	run_native_tasks(_NATIVE_PRE_BOOT_1_LEVEL);
    62f9:	e8 dd f3 ff ff       	callq  56db <run_native_tasks>

	native_handle_cmd_line(argc, argv);
    62fe:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    6303:	89 ef                	mov    %ebp,%edi
    6305:	e8 bd 0b 00 00       	callq  6ec7 <native_handle_cmd_line>

	run_native_tasks(_NATIVE_PRE_BOOT_2_LEVEL);
    630a:	bf 01 00 00 00       	mov    $0x1,%edi
    630f:	e8 c7 f3 ff ff       	callq  56db <run_native_tasks>

	hwm_init();
    6314:	e8 ad f6 ff ff       	callq  59c6 <hwm_init>

	run_native_tasks(_NATIVE_PRE_BOOT_3_LEVEL);
    6319:	bf 02 00 00 00       	mov    $0x2,%edi
    631e:	e8 b8 f3 ff ff       	callq  56db <run_native_tasks>

	posix_boot_cpu();
    6323:	e8 f2 f2 ff ff       	callq  561a <posix_boot_cpu>

	run_native_tasks(_NATIVE_FIRST_SLEEP_LEVEL);
    6328:	bf 03 00 00 00       	mov    $0x3,%edi
    632d:	e8 a9 f3 ff ff       	callq  56db <run_native_tasks>

	hwm_main_loop();
    6332:	e8 ae f5 ff ff       	callq  58e5 <hwm_main_loop>

	/* This line should be unreachable */
	return 1; /* LCOV_EXCL_LINE */
}
    6337:	48 83 c4 10          	add    $0x10,%rsp
    633b:	b8 01 00 00 00       	mov    $0x1,%eax
    6340:	5d                   	pop    %rbp
    6341:	c3                   	retq   

0000000000006342 <trace_disable_color>:
 * Indexed 0:stdout, 1:stderr
 */
static int is_a_tty[2] = {-1, -1};

void trace_disable_color(char *argv, int offset)
{
    6342:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 0;
    6346:	48 c7 05 17 61 00 00 	movq   $0x0,0x6117(%rip)        # c468 <is_a_tty>
    634d:	00 00 00 00 
	is_a_tty[1] = 0;
}
    6351:	c3                   	retq   

0000000000006352 <trace_enable_color>:

void trace_enable_color(char *argv, int offset)
{
    6352:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = -1;
    6356:	48 c7 05 07 61 00 00 	movq   $0xffffffffffffffff,0x6107(%rip)        # c468 <is_a_tty>
    635d:	ff ff ff ff 
	is_a_tty[1] = -1;

}
    6361:	c3                   	retq   

0000000000006362 <trace_force_color>:

void trace_force_color(char *argv, int offset)
{
    6362:	f3 0f 1e fa          	endbr64 
	is_a_tty[0] = 1;
    6366:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
    636d:	00 00 00 
    6370:	48 89 05 f1 60 00 00 	mov    %rax,0x60f1(%rip)        # c468 <is_a_tty>
	is_a_tty[1] = 1;
}
    6377:	c3                   	retq   

0000000000006378 <decide_about_color>:
{
	return is_a_tty[file_number];
}

static void decide_about_color(void)
{
    6378:	f3 0f 1e fa          	endbr64 
    637c:	52                   	push   %rdx
	if (is_a_tty[0] == -1) {
    637d:	83 3d e4 60 00 00 ff 	cmpl   $0xffffffff,0x60e4(%rip)        # c468 <is_a_tty>
    6384:	75 10                	jne    6396 <decide_about_color+0x1e>
		is_a_tty[0] = isatty(STDOUT_FILENO);
    6386:	bf 01 00 00 00       	mov    $0x1,%edi
    638b:	e8 a0 c0 ff ff       	callq  2430 <isatty@plt>
    6390:	89 05 d2 60 00 00    	mov    %eax,0x60d2(%rip)        # c468 <is_a_tty>
	}
	if (is_a_tty[1] == -1) {
    6396:	83 3d cf 60 00 00 ff 	cmpl   $0xffffffff,0x60cf(%rip)        # c46c <is_a_tty+0x4>
    639d:	75 10                	jne    63af <decide_about_color+0x37>
		is_a_tty[1] = isatty(STDERR_FILENO);
    639f:	bf 02 00 00 00       	mov    $0x2,%edi
    63a4:	e8 87 c0 ff ff       	callq  2430 <isatty@plt>
    63a9:	89 05 bd 60 00 00    	mov    %eax,0x60bd(%rip)        # c46c <is_a_tty+0x4>
	}
}
    63af:	58                   	pop    %rax
    63b0:	c3                   	retq   

00000000000063b1 <posix_print_error_and_exit>:
{
    63b1:	f3 0f 1e fa          	endbr64 
    63b5:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    63bc:	49 89 fa             	mov    %rdi,%r10
    63bf:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    63c4:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    63c9:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    63ce:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    63d3:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    63d8:	84 c0                	test   %al,%al
    63da:	74 37                	je     6413 <posix_print_error_and_exit+0x62>
    63dc:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    63e1:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    63e6:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    63eb:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    63f2:	00 
    63f3:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    63fa:	00 
    63fb:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    6402:	00 
    6403:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    640a:	00 
    640b:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    6412:	00 
    6413:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    641a:	00 00 
    641c:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    6421:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    6423:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    642a:	00 

__fortify_function int
vfprintf (FILE *__restrict __stream,
	  const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt, __ap);
    642b:	48 89 e1             	mov    %rsp,%rcx
    642e:	4c 89 d2             	mov    %r10,%rdx
    6431:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    6436:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    643b:	be 01 00 00 00       	mov    $0x1,%esi
    6440:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    6445:	48 8b 05 a4 5b 00 00 	mov    0x5ba4(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    644c:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    6453:	48 8b 38             	mov    (%rax),%rdi
    6456:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    645d:	00 
    645e:	e8 8d bf ff ff       	callq  23f0 <__vfprintf_chk@plt>
	posix_exit(1);
    6463:	bf 01 00 00 00       	mov    $0x1,%edi
    6468:	e8 48 fe ff ff       	callq  62b5 <posix_exit>
}
    646d:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    6472:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6479:	00 00 
    647b:	74 05                	je     6482 <posix_print_error_and_exit+0xd1>
    647d:	e8 2e c0 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6482:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    6489:	c3                   	retq   

000000000000648a <posix_print_warning>:
{
    648a:	f3 0f 1e fa          	endbr64 
    648e:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    6495:	49 89 fa             	mov    %rdi,%r10
    6498:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    649d:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    64a2:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    64a7:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    64ac:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    64b1:	84 c0                	test   %al,%al
    64b3:	74 37                	je     64ec <posix_print_warning+0x62>
    64b5:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    64ba:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    64bf:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    64c4:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    64cb:	00 
    64cc:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    64d3:	00 
    64d4:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    64db:	00 
    64dc:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    64e3:	00 
    64e4:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    64eb:	00 
    64ec:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    64f3:	00 00 
    64f5:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    64fa:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    64fc:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    6503:	00 
    6504:	48 89 e1             	mov    %rsp,%rcx
    6507:	4c 89 d2             	mov    %r10,%rdx
    650a:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    650f:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    6514:	be 01 00 00 00       	mov    $0x1,%esi
    6519:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    651e:	48 8b 05 cb 5a 00 00 	mov    0x5acb(%rip),%rax        # bff0 <stderr@GLIBC_2.2.5>
    6525:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    652c:	48 8b 38             	mov    (%rax),%rdi
    652f:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6536:	00 
    6537:	e8 b4 be ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    653c:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    6541:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6548:	00 00 
    654a:	74 05                	je     6551 <posix_print_warning+0xc7>
    654c:	e8 5f bf ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6551:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    6558:	c3                   	retq   

0000000000006559 <posix_print_trace>:
{
    6559:	f3 0f 1e fa          	endbr64 
    655d:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
    6564:	49 89 fa             	mov    %rdi,%r10
    6567:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
    656c:	48 89 54 24 30       	mov    %rdx,0x30(%rsp)
    6571:	48 89 4c 24 38       	mov    %rcx,0x38(%rsp)
    6576:	4c 89 44 24 40       	mov    %r8,0x40(%rsp)
    657b:	4c 89 4c 24 48       	mov    %r9,0x48(%rsp)
    6580:	84 c0                	test   %al,%al
    6582:	74 37                	je     65bb <posix_print_trace+0x62>
    6584:	0f 29 44 24 50       	movaps %xmm0,0x50(%rsp)
    6589:	0f 29 4c 24 60       	movaps %xmm1,0x60(%rsp)
    658e:	0f 29 54 24 70       	movaps %xmm2,0x70(%rsp)
    6593:	0f 29 9c 24 80 00 00 	movaps %xmm3,0x80(%rsp)
    659a:	00 
    659b:	0f 29 a4 24 90 00 00 	movaps %xmm4,0x90(%rsp)
    65a2:	00 
    65a3:	0f 29 ac 24 a0 00 00 	movaps %xmm5,0xa0(%rsp)
    65aa:	00 
    65ab:	0f 29 b4 24 b0 00 00 	movaps %xmm6,0xb0(%rsp)
    65b2:	00 
    65b3:	0f 29 bc 24 c0 00 00 	movaps %xmm7,0xc0(%rsp)
    65ba:	00 
    65bb:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    65c2:	00 00 
    65c4:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    65c9:	31 c0                	xor    %eax,%eax
	va_start(variable_args, format);
    65cb:	48 8d 84 24 e0 00 00 	lea    0xe0(%rsp),%rax
    65d2:	00 
    65d3:	48 89 e1             	mov    %rsp,%rcx
    65d6:	4c 89 d2             	mov    %r10,%rdx
    65d9:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    65de:	48 8d 44 24 20       	lea    0x20(%rsp),%rax
    65e3:	be 01 00 00 00       	mov    $0x1,%esi
    65e8:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    65ed:	48 8b 05 b4 59 00 00 	mov    0x59b4(%rip),%rax        # bfa8 <stdout@GLIBC_2.2.5>
    65f4:	c7 04 24 08 00 00 00 	movl   $0x8,(%rsp)
    65fb:	48 8b 38             	mov    (%rax),%rdi
    65fe:	c7 44 24 04 30 00 00 	movl   $0x30,0x4(%rsp)
    6605:	00 
    6606:	e8 e5 bd ff ff       	callq  23f0 <__vfprintf_chk@plt>
}
    660b:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    6610:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6617:	00 00 
    6619:	74 05                	je     6620 <posix_print_trace+0xc7>
    661b:	e8 90 be ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6620:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
    6627:	c3                   	retq   

0000000000006628 <native_add_tracing_options>:

NATIVE_TASK(decide_about_color, PRE_BOOT_2, 0);

void native_add_tracing_options(void)
{
    6628:	f3 0f 1e fa          	endbr64 
		"force-color", "force-color", 'b',
		NULL, trace_force_color,
		"Enable color in traces even if printing to files/pipes"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(trace_options);
    662c:	48 8d 3d 8d 5b 00 00 	lea    0x5b8d(%rip),%rdi        # c1c0 <trace_options.3560>
    6633:	e9 d8 07 00 00       	jmpq   6e10 <native_add_command_line_opts>

0000000000006638 <cmd_gen_switch_syntax.constprop.0>:
 * should be used
 *
 * The string is saved in <buf> which has been allocated <size> bytes by the
 * caller
 */
static void cmd_gen_switch_syntax(char *buf, int size,
    6638:	41 55                	push   %r13
    663a:	41 bd 46 00 00 00    	mov    $0x46,%r13d
    6640:	41 54                	push   %r12
    6642:	49 89 f4             	mov    %rsi,%r12
    6645:	55                   	push   %rbp
    6646:	48 89 fd             	mov    %rdi,%rbp
    6649:	53                   	push   %rbx
    664a:	41 53                	push   %r11

	if (size <= 0) {
		return;
	}

	if (args_s_el->is_mandatory == false) {
    664c:	80 7e 01 00          	cmpb   $0x0,0x1(%rsi)
    6650:	75 0c                	jne    665e <cmd_gen_switch_syntax.constprop.0+0x26>
		*buf++ = '[';
    6652:	c6 07 5b             	movb   $0x5b,(%rdi)
    6655:	48 ff c5             	inc    %rbp
		size--;
    6658:	41 bd 45 00 00 00    	mov    $0x45,%r13d
	}

	if (args_s_el->is_switch == true) {
    665e:	41 80 7c 24 02 00    	cmpb   $0x0,0x2(%r12)
    6664:	4d 8b 4c 24 08       	mov    0x8(%r12),%r9
    6669:	49 63 f5             	movslq %r13d,%rsi
    666c:	74 1c                	je     668a <cmd_gen_switch_syntax.constprop.0+0x52>
  return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
    666e:	4c 8d 05 99 38 00 00 	lea    0x3899(%rip),%r8        # 9f0e <default_cmd+0xcae>
    6675:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6679:	48 89 ef             	mov    %rbp,%rdi
    667c:	31 c0                	xor    %eax,%eax
    667e:	ba 01 00 00 00       	mov    $0x1,%edx
    6683:	e8 18 bd ff ff       	callq  23a0 <__snprintf_chk@plt>
    6688:	eb 38                	jmp    66c2 <cmd_gen_switch_syntax.constprop.0+0x8a>
		ret = snprintf(buf, size, "-%s", args_s_el->option);
	} else {
		if (args_s_el->type != 'l') {
    668a:	41 80 7c 24 18 6c    	cmpb   $0x6c,0x18(%r12)
    6690:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    6695:	74 0c                	je     66a3 <cmd_gen_switch_syntax.constprop.0+0x6b>
    6697:	4c 8d 05 74 38 00 00 	lea    0x3874(%rip),%r8        # 9f12 <default_cmd+0xcb2>
    669e:	41 52                	push   %r10
    66a0:	50                   	push   %rax
    66a1:	eb 0a                	jmp    66ad <cmd_gen_switch_syntax.constprop.0+0x75>
    66a3:	41 50                	push   %r8
    66a5:	4c 8d 05 6f 38 00 00 	lea    0x386f(%rip),%r8        # 9f1b <default_cmd+0xcbb>
    66ac:	50                   	push   %rax
    66ad:	48 89 ef             	mov    %rbp,%rdi
    66b0:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    66b4:	ba 01 00 00 00       	mov    $0x1,%edx
    66b9:	31 c0                	xor    %eax,%eax
    66bb:	e8 e0 bc ff ff       	callq  23a0 <__snprintf_chk@plt>
    66c0:	5e                   	pop    %rsi
    66c1:	5f                   	pop    %rdi
    66c2:	48 63 d8             	movslq %eax,%rbx
			ret = snprintf(buf, size, "-%s <%s>...",
					args_s_el->option, args_s_el->name);
		}
	}

	if (ret < 0) {
    66c5:	85 db                	test   %ebx,%ebx
    66c7:	79 1a                	jns    66e3 <cmd_gen_switch_syntax.constprop.0+0xab>
		posix_print_error_and_exit("Unexpected error in %s %i\n",
    66c9:	ba 07 01 00 00       	mov    $0x107,%edx
    66ce:	48 8d 35 52 38 00 00 	lea    0x3852(%rip),%rsi        # 9f27 <default_cmd+0xcc7>
    66d5:	48 8d 3d 89 38 00 00 	lea    0x3889(%rip),%rdi        # 9f65 <default_cmd+0xd05>
    66dc:	31 c0                	xor    %eax,%eax
    66de:	e8 ce fc ff ff       	callq  63b1 <posix_print_error_and_exit>
					   __FILE__, __LINE__);
	}
	if (size - ret < 0) {
    66e3:	41 29 dd             	sub    %ebx,%r13d
    66e6:	78 2c                	js     6714 <cmd_gen_switch_syntax.constprop.0+0xdc>
		return;
	}
	buf += ret;
	size -= ret;

	if (args_s_el->is_mandatory == false) {
    66e8:	41 80 7c 24 01 00    	cmpb   $0x0,0x1(%r12)
	buf += ret;
    66ee:	48 8d 7c 1d 00       	lea    0x0(%rbp,%rbx,1),%rdi
	if (args_s_el->is_mandatory == false) {
    66f3:	49 63 f5             	movslq %r13d,%rsi
    66f6:	48 8d 15 83 38 00 00 	lea    0x3883(%rip),%rdx        # 9f80 <default_cmd+0xd20>
    66fd:	74 07                	je     6706 <cmd_gen_switch_syntax.constprop.0+0xce>
    66ff:	48 8d 15 7b 38 00 00 	lea    0x387b(%rip),%rdx        # 9f81 <default_cmd+0xd21>
		snprintf(buf, size, "] ");
	} else {
		snprintf(buf, size, " ");
	}
}
    6706:	59                   	pop    %rcx
    6707:	31 c0                	xor    %eax,%eax
    6709:	5b                   	pop    %rbx
    670a:	5d                   	pop    %rbp
    670b:	41 5c                	pop    %r12
    670d:	41 5d                	pop    %r13
    670f:	e9 bc bd ff ff       	jmpq   24d0 <snprintf@plt>
    6714:	58                   	pop    %rax
    6715:	5b                   	pop    %rbx
    6716:	5d                   	pop    %rbp
    6717:	41 5c                	pop    %r12
    6719:	41 5d                	pop    %r13
    671b:	c3                   	retq   

000000000000671c <cmd_is_option>:
{
    671c:	f3 0f 1e fa          	endbr64 
    6720:	41 54                	push   %r12
    6722:	49 89 f8             	mov    %rdi,%r8
    6725:	41 89 d4             	mov    %edx,%r12d
    6728:	55                   	push   %rbp
    6729:	48 89 f5             	mov    %rsi,%rbp
    672c:	53                   	push   %rbx
	int of = 0;
    672d:	31 db                	xor    %ebx,%ebx
    672f:	80 3f 2d             	cmpb   $0x2d,(%rdi)
	if (arg[of] == '-') {
    6732:	0f 94 c0             	sete   %al
	int of = 0;
    6735:	0f 94 c3             	sete   %bl
	if (arg[of] == '-') {
    6738:	0f b6 c0             	movzbl %al,%eax
    673b:	80 3c 07 2d          	cmpb   $0x2d,(%rdi,%rax,1)
    673f:	75 02                	jne    6743 <cmd_is_option+0x27>
		of++;
    6741:	ff c3                	inc    %ebx
	if (!with_value) {
    6743:	45 85 e4             	test   %r12d,%r12d
    6746:	75 28                	jne    6770 <cmd_is_option+0x54>
		if (strcmp(&arg[of], option) != 0) {
    6748:	48 63 fb             	movslq %ebx,%rdi
    674b:	48 89 ee             	mov    %rbp,%rsi
    674e:	4c 01 c7             	add    %r8,%rdi
    6751:	e8 ea bd ff ff       	callq  2540 <strcmp@plt>
    6756:	85 c0                	test   %eax,%eax
    6758:	75 68                	jne    67c2 <cmd_is_option+0xa6>
	size_t to_match_len = strlen(option);
    675a:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    675e:	48 89 ef             	mov    %rbp,%rdi
    6761:	f2 ae                	repnz scas %es:(%rdi),%al
    6763:	48 89 c8             	mov    %rcx,%rax
    6766:	48 f7 d0             	not    %rax
			return of + to_match_len;
    6769:	44 8d 64 03 ff       	lea    -0x1(%rbx,%rax,1),%r12d
    676e:	eb 52                	jmp    67c2 <cmd_is_option+0xa6>
    6770:	31 d2                	xor    %edx,%edx
    6772:	44 8d 24 13          	lea    (%rbx,%rdx,1),%r12d
	while (!(arg[of] == 0 && *option == 0)) {
    6776:	8a 4c 15 00          	mov    0x0(%rbp,%rdx,1),%cl
    677a:	49 63 c4             	movslq %r12d,%rax
    677d:	41 8a 04 00          	mov    (%r8,%rax,1),%al
    6781:	89 c6                	mov    %eax,%esi
    6783:	40 08 ce             	or     %cl,%sil
    6786:	74 24                	je     67ac <cmd_is_option+0x90>
		if (*option == 0) {
    6788:	84 c9                	test   %cl,%cl
    678a:	75 17                	jne    67a3 <cmd_is_option+0x87>
			if ((arg[of] == ':') || (arg[of] == '=')) {
    678c:	3c 3a                	cmp    $0x3a,%al
    678e:	74 04                	je     6794 <cmd_is_option+0x78>
    6790:	3c 3d                	cmp    $0x3d,%al
    6792:	75 2b                	jne    67bf <cmd_is_option+0xa3>
				of++;
    6794:	41 ff c4             	inc    %r12d
	if (arg[of] == 0) { /* we need a value to follow */
    6797:	49 63 c4             	movslq %r12d,%rax
    679a:	41 80 3c 00 00       	cmpb   $0x0,(%r8,%rax,1)
    679f:	75 21                	jne    67c2 <cmd_is_option+0xa6>
    67a1:	eb 09                	jmp    67ac <cmd_is_option+0x90>
		if (arg[of] != *option) {
    67a3:	48 ff c2             	inc    %rdx
    67a6:	38 c8                	cmp    %cl,%al
    67a8:	74 c8                	je     6772 <cmd_is_option+0x56>
    67aa:	eb 13                	jmp    67bf <cmd_is_option+0xa3>
		posix_print_error_and_exit("Incorrect option syntax '%s'. The "
    67ac:	4c 89 c6             	mov    %r8,%rsi
    67af:	48 8d 3d cd 37 00 00 	lea    0x37cd(%rip),%rdi        # 9f83 <default_cmd+0xd23>
    67b6:	31 c0                	xor    %eax,%eax
    67b8:	e8 f4 fb ff ff       	callq  63b1 <posix_print_error_and_exit>
    67bd:	eb 03                	jmp    67c2 <cmd_is_option+0xa6>
			return 0;
    67bf:	45 31 e4             	xor    %r12d,%r12d
}
    67c2:	44 89 e0             	mov    %r12d,%eax
    67c5:	5b                   	pop    %rbx
    67c6:	5d                   	pop    %rbp
    67c7:	41 5c                	pop    %r12
    67c9:	c3                   	retq   

00000000000067ca <cmd_is_help_option>:
{
    67ca:	f3 0f 1e fa          	endbr64 
    67ce:	55                   	push   %rbp
	if (arg[0] == '-') {
    67cf:	80 3f 2d             	cmpb   $0x2d,(%rdi)
{
    67d2:	48 89 fd             	mov    %rdi,%rbp
	if (arg[0] == '-') {
    67d5:	75 0f                	jne    67e6 <cmd_is_help_option+0x1c>
	if (arg[0] == '-') {
    67d7:	80 7f 01 2d          	cmpb   $0x2d,0x1(%rdi)
    67db:	74 05                	je     67e2 <cmd_is_help_option+0x18>
		arg++;
    67dd:	48 ff c5             	inc    %rbp
    67e0:	eb 04                	jmp    67e6 <cmd_is_help_option+0x1c>
		arg++;
    67e2:	48 83 c5 02          	add    $0x2,%rbp
	if ((strcasecmp(arg, "?") == 0) ||
    67e6:	48 8d 35 f0 37 00 00 	lea    0x37f0(%rip),%rsi        # 9fdd <default_cmd+0xd7d>
    67ed:	48 89 ef             	mov    %rbp,%rdi
    67f0:	e8 db bb ff ff       	callq  23d0 <strcasecmp@plt>
    67f5:	41 89 c0             	mov    %eax,%r8d
		return 1;
    67f8:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    67fd:	45 85 c0             	test   %r8d,%r8d
    6800:	74 33                	je     6835 <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "h") == 0) ||
    6802:	48 8d 35 d6 37 00 00 	lea    0x37d6(%rip),%rsi        # 9fdf <default_cmd+0xd7f>
    6809:	48 89 ef             	mov    %rbp,%rdi
    680c:	e8 bf bb ff ff       	callq  23d0 <strcasecmp@plt>
    6811:	41 89 c0             	mov    %eax,%r8d
		return 1;
    6814:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((strcasecmp(arg, "?") == 0) ||
    6819:	45 85 c0             	test   %r8d,%r8d
    681c:	74 17                	je     6835 <cmd_is_help_option+0x6b>
	    (strcasecmp(arg, "help") == 0)) {
    681e:	48 8d 35 5a 38 00 00 	lea    0x385a(%rip),%rsi        # a07f <default_cmd+0xe1f>
    6825:	48 89 ef             	mov    %rbp,%rdi
    6828:	e8 a3 bb ff ff       	callq  23d0 <strcasecmp@plt>
	    (strcasecmp(arg, "h") == 0) ||
    682d:	85 c0                	test   %eax,%eax
    682f:	0f 94 c0             	sete   %al
    6832:	0f b6 c0             	movzbl %al,%eax
}
    6835:	5d                   	pop    %rbp
    6836:	c3                   	retq   

0000000000006837 <cmd_read_option_value>:
{
    6837:	f3 0f 1e fa          	endbr64 
    683b:	41 54                	push   %r12
    683d:	49 89 fc             	mov    %rdi,%r12
    6840:	55                   	push   %rbp
    6841:	48 89 cd             	mov    %rcx,%rbp
    6844:	53                   	push   %rbx
    6845:	48 89 f3             	mov    %rsi,%rbx
    6848:	48 83 ec 10          	sub    $0x10,%rsp
    684c:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6853:	00 00 
    6855:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    685a:	31 c0                	xor    %eax,%eax
	char *endptr = NULL;
    685c:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
    6863:	00 
	switch (type) {
    6864:	80 fa 64             	cmp    $0x64,%dl
    6867:	0f 84 11 01 00 00    	je     697e <cmd_read_option_value+0x147>
    686d:	7f 26                	jg     6895 <cmd_read_option_value+0x5e>
    686f:	80 fa 55             	cmp    $0x55,%dl
    6872:	0f 84 f1 00 00 00    	je     6969 <cmd_read_option_value+0x132>
    6878:	80 fa 62             	cmp    $0x62,%dl
    687b:	74 42                	je     68bf <cmd_read_option_value+0x88>
    687d:	80 fa 49             	cmp    $0x49,%dl
    6880:	0f 85 06 01 00 00    	jne    698c <cmd_read_option_value+0x155>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    6886:	48 89 e6             	mov    %rsp,%rsi
    6889:	31 d2                	xor    %edx,%edx
    688b:	e8 c0 bc ff ff       	callq  2550 <strtoll@plt>
    6890:	e9 e4 00 00 00       	jmpq   6979 <cmd_read_option_value+0x142>
	switch (type) {
    6895:	80 fa 73             	cmp    $0x73,%dl
    6898:	0f 84 aa 00 00 00    	je     6948 <cmd_read_option_value+0x111>
    689e:	80 fa 75             	cmp    $0x75,%dl
    68a1:	0f 84 b6 00 00 00    	je     695d <cmd_read_option_value+0x126>
    68a7:	80 fa 69             	cmp    $0x69,%dl
    68aa:	0f 85 dc 00 00 00    	jne    698c <cmd_read_option_value+0x155>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    68b0:	48 89 e6             	mov    %rsp,%rsi
    68b3:	31 d2                	xor    %edx,%edx
    68b5:	e8 d6 bc ff ff       	callq  2590 <strtol@plt>
    68ba:	e9 b6 00 00 00       	jmpq   6975 <cmd_read_option_value+0x13e>
		if (strcasecmp(str, "false") == 0) {
    68bf:	48 8d 35 1b 37 00 00 	lea    0x371b(%rip),%rsi        # 9fe1 <default_cmd+0xd81>
    68c6:	e8 05 bb ff ff       	callq  23d0 <strcasecmp@plt>
    68cb:	85 c0                	test   %eax,%eax
    68cd:	75 0a                	jne    68d9 <cmd_read_option_value+0xa2>
			*(bool *)dest = false;
    68cf:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 5;
    68d2:	49 8d 44 24 05       	lea    0x5(%r12),%rax
    68d7:	eb 1b                	jmp    68f4 <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "0") == 0) {
    68d9:	48 8d 35 f9 3b 00 00 	lea    0x3bf9(%rip),%rsi        # a4d9 <default_cmd+0x1279>
    68e0:	4c 89 e7             	mov    %r12,%rdi
    68e3:	e8 58 bc ff ff       	callq  2540 <strcmp@plt>
    68e8:	85 c0                	test   %eax,%eax
    68ea:	75 11                	jne    68fd <cmd_read_option_value+0xc6>
			*(bool *)dest = false;
    68ec:	c6 03 00             	movb   $0x0,(%rbx)
			endptr = (char *)str + 1;
    68ef:	49 8d 44 24 01       	lea    0x1(%r12),%rax
    68f4:	48 89 04 24          	mov    %rax,(%rsp)
	if (!error && endptr && *endptr != 0) {
    68f8:	e9 a0 00 00 00       	jmpq   699d <cmd_read_option_value+0x166>
		} else if (strcasecmp(str, "true") == 0) {
    68fd:	48 8d 35 e3 36 00 00 	lea    0x36e3(%rip),%rsi        # 9fe7 <default_cmd+0xd87>
    6904:	4c 89 e7             	mov    %r12,%rdi
    6907:	e8 c4 ba ff ff       	callq  23d0 <strcasecmp@plt>
    690c:	85 c0                	test   %eax,%eax
    690e:	75 0a                	jne    691a <cmd_read_option_value+0xe3>
			*(bool *)dest = true;
    6910:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 4;
    6913:	49 8d 44 24 04       	lea    0x4(%r12),%rax
    6918:	eb da                	jmp    68f4 <cmd_read_option_value+0xbd>
		} else if (strcmp(str, "1") == 0) {
    691a:	48 8d 35 cb 36 00 00 	lea    0x36cb(%rip),%rsi        # 9fec <default_cmd+0xd8c>
    6921:	4c 89 e7             	mov    %r12,%rdi
    6924:	e8 17 bc ff ff       	callq  2540 <strcmp@plt>
    6929:	85 c0                	test   %eax,%eax
    692b:	74 16                	je     6943 <cmd_read_option_value+0x10c>
		posix_print_error_and_exit("Error reading value of %s '%s'. Use"
    692d:	4c 89 e2             	mov    %r12,%rdx
    6930:	48 89 ee             	mov    %rbp,%rsi
    6933:	48 8d 3d b4 36 00 00 	lea    0x36b4(%rip),%rdi        # 9fee <default_cmd+0xd8e>
    693a:	31 c0                	xor    %eax,%eax
    693c:	e8 70 fa ff ff       	callq  63b1 <posix_print_error_and_exit>
    6941:	eb 68                	jmp    69ab <cmd_read_option_value+0x174>
			*(bool *)dest = true;
    6943:	c6 03 01             	movb   $0x1,(%rbx)
			endptr = (char *)str + 1;
    6946:	eb a7                	jmp    68ef <cmd_read_option_value+0xb8>
		*(char **)dest = (char *)str;
    6948:	48 89 3b             	mov    %rdi,(%rbx)
		endptr = (char *)str + strlen(str);
    694b:	31 c0                	xor    %eax,%eax
    694d:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6951:	f2 ae                	repnz scas %es:(%rdi),%al
    6953:	48 f7 d1             	not    %rcx
    6956:	49 8d 44 0c ff       	lea    -0x1(%r12,%rcx,1),%rax
    695b:	eb 97                	jmp    68f4 <cmd_read_option_value+0xbd>
		*(uint32_t *)dest = strtoul(str, &endptr, 0);
    695d:	48 89 e6             	mov    %rsp,%rsi
    6960:	31 d2                	xor    %edx,%edx
    6962:	e8 b9 bc ff ff       	callq  2620 <strtoul@plt>
    6967:	eb 0c                	jmp    6975 <cmd_read_option_value+0x13e>
		*(uint64_t *)dest = strtoull(str, &endptr, 0);
    6969:	48 89 e6             	mov    %rsp,%rsi
    696c:	31 d2                	xor    %edx,%edx
    696e:	e8 ad bb ff ff       	callq  2520 <strtoull@plt>
    6973:	eb 04                	jmp    6979 <cmd_read_option_value+0x142>
		*(int32_t *)dest = strtol(str, &endptr, 0);
    6975:	89 03                	mov    %eax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    6977:	eb 24                	jmp    699d <cmd_read_option_value+0x166>
		*(int64_t *)dest = strtoll(str, &endptr, 0);
    6979:	48 89 03             	mov    %rax,(%rbx)
	if (!error && endptr && *endptr != 0) {
    697c:	eb 1f                	jmp    699d <cmd_read_option_value+0x166>
		*(double *)dest = strtod(str, &endptr);
    697e:	48 89 e6             	mov    %rsp,%rsi
    6981:	e8 da ba ff ff       	callq  2460 <strtod@plt>
    6986:	f2 0f 11 03          	movsd  %xmm0,(%rbx)
	if (!error && endptr && *endptr != 0) {
    698a:	eb 11                	jmp    699d <cmd_read_option_value+0x166>
	switch (type) {
    698c:	0f be f2             	movsbl %dl,%esi
		posix_print_error_and_exit(CMD_TYPE_ERROR, type);
    698f:	48 8d 3d 9a 36 00 00 	lea    0x369a(%rip),%rdi        # a030 <default_cmd+0xdd0>
    6996:	31 c0                	xor    %eax,%eax
    6998:	e8 14 fa ff ff       	callq  63b1 <posix_print_error_and_exit>
	if (!error && endptr && *endptr != 0) {
    699d:	48 8b 04 24          	mov    (%rsp),%rax
    69a1:	48 85 c0             	test   %rax,%rax
    69a4:	74 05                	je     69ab <cmd_read_option_value+0x174>
    69a6:	80 38 00             	cmpb   $0x0,(%rax)
    69a9:	75 82                	jne    692d <cmd_read_option_value+0xf6>
}
    69ab:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
    69b0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    69b7:	00 00 
    69b9:	74 05                	je     69c0 <cmd_read_option_value+0x189>
    69bb:	e8 f0 ba ff ff       	callq  24b0 <__stack_chk_fail@plt>
    69c0:	48 83 c4 10          	add    $0x10,%rsp
    69c4:	5b                   	pop    %rbx
    69c5:	5d                   	pop    %rbp
    69c6:	41 5c                	pop    %r12
    69c8:	c3                   	retq   

00000000000069c9 <cmd_args_set_defaults>:
{
    69c9:	f3 0f 1e fa          	endbr64 
    69cd:	55                   	push   %rbp
	int count = 0;
    69ce:	31 ed                	xor    %ebp,%ebp
{
    69d0:	53                   	push   %rbx
    69d1:	48 89 fb             	mov    %rdi,%rbx
    69d4:	52                   	push   %rdx
	while (args_struct[count].option != NULL) {
    69d5:	48 63 d5             	movslq %ebp,%rdx
    69d8:	48 6b d2 38          	imul   $0x38,%rdx,%rdx
    69dc:	48 01 da             	add    %rbx,%rdx
    69df:	48 83 7a 08 00       	cmpq   $0x0,0x8(%rdx)
    69e4:	0f 84 a0 00 00 00    	je     6a8a <cmd_args_set_defaults+0xc1>
		if (args_struct[count].dest == NULL) {
    69ea:	48 8b 42 20          	mov    0x20(%rdx),%rax
    69ee:	ff c5                	inc    %ebp
    69f0:	48 85 c0             	test   %rax,%rax
    69f3:	74 e0                	je     69d5 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    69f5:	0f be 72 18          	movsbl 0x18(%rdx),%esi
    69f9:	40 80 fe 64          	cmp    $0x64,%sil
    69fd:	74 69                	je     6a68 <cmd_args_set_defaults+0x9f>
    69ff:	7f 2d                	jg     6a2e <cmd_args_set_defaults+0x65>
    6a01:	40 80 fe 55          	cmp    $0x55,%sil
    6a05:	74 55                	je     6a5c <cmd_args_set_defaults+0x93>
    6a07:	7f 1a                	jg     6a23 <cmd_args_set_defaults+0x5a>
    6a09:	40 84 f6             	test   %sil,%sil
    6a0c:	74 c7                	je     69d5 <cmd_args_set_defaults+0xc>
    6a0e:	40 80 fe 49          	cmp    $0x49,%sil
    6a12:	75 63                	jne    6a77 <cmd_args_set_defaults+0xae>
			*(int64_t *)args_struct[count].dest = INT64_MAX;
    6a14:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
    6a1b:	ff ff 7f 
    6a1e:	48 89 08             	mov    %rcx,(%rax)
			break;
    6a21:	eb b2                	jmp    69d5 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6a23:	40 80 fe 62          	cmp    $0x62,%sil
    6a27:	75 4e                	jne    6a77 <cmd_args_set_defaults+0xae>
			*(bool *)args_struct[count].dest = false;
    6a29:	c6 00 00             	movb   $0x0,(%rax)
			break;
    6a2c:	eb a7                	jmp    69d5 <cmd_args_set_defaults+0xc>
		switch (args_struct[count].type) {
    6a2e:	40 80 fe 73          	cmp    $0x73,%sil
    6a32:	74 14                	je     6a48 <cmd_args_set_defaults+0x7f>
    6a34:	40 80 fe 75          	cmp    $0x75,%sil
    6a38:	74 17                	je     6a51 <cmd_args_set_defaults+0x88>
    6a3a:	40 80 fe 69          	cmp    $0x69,%sil
    6a3e:	75 37                	jne    6a77 <cmd_args_set_defaults+0xae>
			*(int32_t *)args_struct[count].dest = INT32_MAX;
    6a40:	c7 00 ff ff ff 7f    	movl   $0x7fffffff,(%rax)
			break;
    6a46:	eb 8d                	jmp    69d5 <cmd_args_set_defaults+0xc>
			*(char **)args_struct[count].dest = NULL;
    6a48:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			break;
    6a4f:	eb 84                	jmp    69d5 <cmd_args_set_defaults+0xc>
			*(uint32_t *)args_struct[count].dest = UINT32_MAX;
    6a51:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%rax)
			break;
    6a57:	e9 79 ff ff ff       	jmpq   69d5 <cmd_args_set_defaults+0xc>
			*(uint64_t *)args_struct[count].dest = UINT64_MAX;
    6a5c:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
			break;
    6a63:	e9 6d ff ff ff       	jmpq   69d5 <cmd_args_set_defaults+0xc>
			*(double *)args_struct[count].dest = NAN;
    6a68:	48 8b 0d 31 28 00 00 	mov    0x2831(%rip),%rcx        # 92a0 <default_cmd+0x40>
    6a6f:	48 89 08             	mov    %rcx,(%rax)
			break;
    6a72:	e9 5e ff ff ff       	jmpq   69d5 <cmd_args_set_defaults+0xc>
			posix_print_error_and_exit(CMD_TYPE_ERROR,
    6a77:	48 8d 3d b2 35 00 00 	lea    0x35b2(%rip),%rdi        # a030 <default_cmd+0xdd0>
    6a7e:	31 c0                	xor    %eax,%eax
    6a80:	e8 2c f9 ff ff       	callq  63b1 <posix_print_error_and_exit>
			break;
    6a85:	e9 4b ff ff ff       	jmpq   69d5 <cmd_args_set_defaults+0xc>
}
    6a8a:	58                   	pop    %rax
    6a8b:	5b                   	pop    %rbx
    6a8c:	5d                   	pop    %rbp
    6a8d:	c3                   	retq   

0000000000006a8e <cmd_print_switches_help>:

/**
 * Print short list of available switches
 */
void cmd_print_switches_help(struct args_struct_t args_struct[])
{
    6a8e:	f3 0f 1e fa          	endbr64 
    6a92:	41 56                	push   %r14
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    6a94:	be 01 00 00 00       	mov    $0x1,%esi
    6a99:	48 8d 0d b5 35 00 00 	lea    0x35b5(%rip),%rcx        # a055 <default_cmd+0xdf5>
    6aa0:	48 8d 15 c7 35 00 00 	lea    0x35c7(%rip),%rdx        # a06e <default_cmd+0xe0e>
    6aa7:	41 55                	push   %r13
	int count = 0;
	int printed_in_line = strlen(_HELP_SWITCH) + 1;
    6aa9:	41 be 19 00 00 00    	mov    $0x19,%r14d
	int count = 0;
    6aaf:	45 31 ed             	xor    %r13d,%r13d
{
    6ab2:	41 54                	push   %r12
    6ab4:	49 89 fc             	mov    %rdi,%r12
    6ab7:	55                   	push   %rbp
    6ab8:	53                   	push   %rbx
    6ab9:	48 83 ec 50          	sub    $0x50,%rsp

	fprintf(stdout, "%s ", _HELP_SWITCH);
    6abd:	48 8b 1d e4 54 00 00 	mov    0x54e4(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
{
    6ac4:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6acb:	00 00 
    6acd:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    6ad2:	31 c0                	xor    %eax,%eax

	while (args_struct[count].option != NULL) {
		char stringy[_MAX_STRINGY_LEN];

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6ad4:	48 8d 6c 24 02       	lea    0x2(%rsp),%rbp
    6ad9:	48 8b 3b             	mov    (%rbx),%rdi
    6adc:	e8 8f bb ff ff       	callq  2670 <__fprintf_chk@plt>
	while (args_struct[count].option != NULL) {
    6ae1:	49 63 f5             	movslq %r13d,%rsi
    6ae4:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    6ae8:	4c 01 e6             	add    %r12,%rsi
    6aeb:	48 83 7e 08 00       	cmpq   $0x0,0x8(%rsi)
    6af0:	74 6e                	je     6b60 <cmd_print_switches_help+0xd2>
		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6af2:	48 89 ef             	mov    %rbp,%rdi
    6af5:	e8 3e fb ff ff       	callq  6638 <cmd_gen_switch_syntax.constprop.0>
				      &args_struct[count]);

		if (printed_in_line + strlen(stringy) > _MAX_LINE_WIDTH) {
    6afa:	31 c0                	xor    %eax,%eax
    6afc:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6b00:	48 89 ef             	mov    %rbp,%rdi
    6b03:	f2 ae                	repnz scas %es:(%rdi),%al
    6b05:	49 63 c6             	movslq %r14d,%rax
    6b08:	48 f7 d1             	not    %rcx
    6b0b:	48 8d 44 01 ff       	lea    -0x1(%rcx,%rax,1),%rax
    6b10:	48 83 f8 64          	cmp    $0x64,%rax
    6b14:	76 19                	jbe    6b2f <cmd_print_switches_help+0xa1>
    6b16:	48 8b 3b             	mov    (%rbx),%rdi
    6b19:	48 8d 15 ce 35 00 00 	lea    0x35ce(%rip),%rdx        # a0ee <default_cmd+0xe8e>
    6b20:	31 c0                	xor    %eax,%eax
			fprintf(stdout, "\n");
			printed_in_line = 0;
    6b22:	45 31 f6             	xor    %r14d,%r14d
    6b25:	be 01 00 00 00       	mov    $0x1,%esi
    6b2a:	e8 41 bb ff ff       	callq  2670 <__fprintf_chk@plt>
    6b2f:	48 8b 3b             	mov    (%rbx),%rdi
    6b32:	48 89 e9             	mov    %rbp,%rcx
    6b35:	48 8d 15 d3 33 00 00 	lea    0x33d3(%rip),%rdx        # 9f0f <default_cmd+0xcaf>
    6b3c:	31 c0                	xor    %eax,%eax
    6b3e:	be 01 00 00 00       	mov    $0x1,%esi
		}

		fprintf(stdout, "%s", stringy);
		printed_in_line += strlen(stringy);
		count++;
    6b43:	41 ff c5             	inc    %r13d
    6b46:	e8 25 bb ff ff       	callq  2670 <__fprintf_chk@plt>
		printed_in_line += strlen(stringy);
    6b4b:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6b4f:	31 c0                	xor    %eax,%eax
    6b51:	48 89 ef             	mov    %rbp,%rdi
    6b54:	f2 ae                	repnz scas %es:(%rdi),%al
    6b56:	48 f7 d1             	not    %rcx
    6b59:	45 8d 74 0e ff       	lea    -0x1(%r14,%rcx,1),%r14d
		count++;
    6b5e:	eb 81                	jmp    6ae1 <cmd_print_switches_help+0x53>
    6b60:	48 8b 3b             	mov    (%rbx),%rdi
    6b63:	31 c0                	xor    %eax,%eax
    6b65:	be 01 00 00 00       	mov    $0x1,%esi
    6b6a:	48 8d 15 7d 35 00 00 	lea    0x357d(%rip),%rdx        # a0ee <default_cmd+0xe8e>
    6b71:	e8 fa ba ff ff       	callq  2670 <__fprintf_chk@plt>
	}

	fprintf(stdout, "\n");
}
    6b76:	48 8b 44 24 48       	mov    0x48(%rsp),%rax
    6b7b:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6b82:	00 00 
    6b84:	74 05                	je     6b8b <cmd_print_switches_help+0xfd>
    6b86:	e8 25 b9 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6b8b:	48 83 c4 50          	add    $0x50,%rsp
    6b8f:	5b                   	pop    %rbx
    6b90:	5d                   	pop    %rbp
    6b91:	41 5c                	pop    %r12
    6b93:	41 5d                	pop    %r13
    6b95:	41 5e                	pop    %r14
    6b97:	c3                   	retq   

0000000000006b98 <cmd_print_long_help>:

/**
 * Print the long help message of the program
 */
void cmd_print_long_help(struct args_struct_t args_struct[])
{
    6b98:	f3 0f 1e fa          	endbr64 
    6b9c:	41 57                	push   %r15
    6b9e:	4c 8d 3d 4a 35 00 00 	lea    0x354a(%rip),%r15        # a0ef <default_cmd+0xe8f>
    6ba5:	41 56                	push   %r14
    6ba7:	41 55                	push   %r13
	int ret;
	int count = 0;
    6ba9:	45 31 ed             	xor    %r13d,%r13d
{
    6bac:	41 54                	push   %r12
    6bae:	49 89 fc             	mov    %rdi,%r12
    6bb1:	55                   	push   %rbp
    6bb2:	53                   	push   %rbx
    6bb3:	48 83 ec 68          	sub    $0x68,%rsp
    6bb7:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    6bbe:	00 00 
    6bc0:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    6bc5:	31 c0                	xor    %eax,%eax
	int printed_in_line = 0;
	char stringy[_MAX_STRINGY_LEN];

	cmd_print_switches_help(args_struct);
    6bc7:	e8 c2 fe ff ff       	callq  6a8e <cmd_print_switches_help>

	fprintf(stdout, "\n %-*s:%s\n", _LONG_HELP_ALIGN-1,
    6bcc:	48 8b 1d d5 53 00 00 	mov    0x53d5(%rip),%rbx        # bfa8 <stdout@GLIBC_2.2.5>
    6bd3:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    6bd8:	31 c0                	xor    %eax,%eax
    6bda:	4c 8d 0d 91 34 00 00 	lea    0x3491(%rip),%r9        # a072 <default_cmd+0xe12>
    6be1:	4c 8d 05 6d 34 00 00 	lea    0x346d(%rip),%r8        # a055 <default_cmd+0xdf5>
    6be8:	be 01 00 00 00       	mov    $0x1,%esi
    6bed:	48 8b 3b             	mov    (%rbx),%rdi
    6bf0:	48 8d 15 8d 34 00 00 	lea    0x348d(%rip),%rdx        # a084 <default_cmd+0xe24>
    6bf7:	e8 74 ba ff ff       	callq  2670 <__fprintf_chk@plt>
		_HELP_SWITCH, _HELP_DESCR);

	while (args_struct[count].option != NULL) {
    6bfc:	49 63 ed             	movslq %r13d,%rbp
    6bff:	48 6b ed 38          	imul   $0x38,%rbp,%rbp
    6c03:	4c 01 e5             	add    %r12,%rbp
    6c06:	48 83 7d 08 00       	cmpq   $0x0,0x8(%rbp)
    6c0b:	0f 84 c8 00 00 00    	je     6cd9 <cmd_print_long_help+0x141>
		int printed_right;
		char *toprint;
		int total_to_print;

		cmd_gen_switch_syntax(stringy, _MAX_STRINGY_LEN,
    6c11:	4c 8d 44 24 12       	lea    0x12(%rsp),%r8
    6c16:	48 89 ee             	mov    %rbp,%rsi
    6c19:	4c 89 c7             	mov    %r8,%rdi
    6c1c:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    6c21:	e8 12 fa ff ff       	callq  6638 <cmd_gen_switch_syntax.constprop.0>
    6c26:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
    6c2b:	48 8b 3b             	mov    (%rbx),%rdi
    6c2e:	31 c0                	xor    %eax,%eax
    6c30:	b9 1d 00 00 00       	mov    $0x1d,%ecx
    6c35:	48 8d 15 53 34 00 00 	lea    0x3453(%rip),%rdx        # a08f <default_cmd+0xe2f>
    6c3c:	be 01 00 00 00       	mov    $0x1,%esi
    6c41:	e8 2a ba ff ff       	callq  2670 <__fprintf_chk@plt>
				      &args_struct[count]);

		ret = fprintf(stdout, " %-*s:", _LONG_HELP_ALIGN-1, stringy);
		printed_in_line = ret;
		printed_right = 0;
		toprint = args_struct[count].descript;
    6c46:	4c 8b 75 30          	mov    0x30(%rbp),%r14
		total_to_print = strlen(toprint);
    6c4a:	48 83 c9 ff          	or     $0xffffffffffffffff,%rcx
    6c4e:	48 8d 15 41 34 00 00 	lea    0x3441(%rip),%rdx        # a096 <default_cmd+0xe36>
    6c55:	41 89 c0             	mov    %eax,%r8d
    6c58:	31 c0                	xor    %eax,%eax
    6c5a:	be 01 00 00 00       	mov    $0x1,%esi
    6c5f:	4c 89 f7             	mov    %r14,%rdi
    6c62:	f2 ae                	repnz scas %es:(%rdi),%al
    6c64:	48 8b 3b             	mov    (%rbx),%rdi
    6c67:	48 f7 d1             	not    %rcx
    6c6a:	8d 41 ff             	lea    -0x1(%rcx),%eax
		ret = fprintf(stdout, "%.*s\n",
    6c6d:	b9 64 00 00 00       	mov    $0x64,%ecx
		total_to_print = strlen(toprint);
    6c72:	89 44 24 08          	mov    %eax,0x8(%rsp)
		ret = fprintf(stdout, "%.*s\n",
    6c76:	44 29 c1             	sub    %r8d,%ecx
    6c79:	31 c0                	xor    %eax,%eax
    6c7b:	4d 89 f0             	mov    %r14,%r8
    6c7e:	e8 ed b9 ff ff       	callq  2670 <__fprintf_chk@plt>
				_MAX_LINE_WIDTH - printed_in_line,
				&toprint[printed_right]);
		printed_right += ret - 1;
    6c83:	8d 68 ff             	lea    -0x1(%rax),%ebp

		while (printed_right < total_to_print) {
    6c86:	3b 6c 24 08          	cmp    0x8(%rsp),%ebp
    6c8a:	7d 45                	jge    6cd1 <cmd_print_long_help+0x139>
    6c8c:	48 8b 3b             	mov    (%rbx),%rdi
    6c8f:	4d 89 f8             	mov    %r15,%r8
    6c92:	b9 1e 00 00 00       	mov    $0x1e,%ecx
    6c97:	be 01 00 00 00       	mov    $0x1,%esi
    6c9c:	48 8d 15 f9 33 00 00 	lea    0x33f9(%rip),%rdx        # a09c <default_cmd+0xe3c>
    6ca3:	31 c0                	xor    %eax,%eax
    6ca5:	e8 c6 b9 ff ff       	callq  2670 <__fprintf_chk@plt>
			fprintf(stdout, "%*s", _LONG_HELP_ALIGN, "");
			ret = fprintf(stdout, "%.*s\n",
    6caa:	4c 63 c5             	movslq %ebp,%r8
    6cad:	48 8b 3b             	mov    (%rbx),%rdi
    6cb0:	b9 46 00 00 00       	mov    $0x46,%ecx
    6cb5:	4d 01 f0             	add    %r14,%r8
    6cb8:	48 8d 15 d7 33 00 00 	lea    0x33d7(%rip),%rdx        # a096 <default_cmd+0xe36>
    6cbf:	be 01 00 00 00       	mov    $0x1,%esi
    6cc4:	31 c0                	xor    %eax,%eax
    6cc6:	e8 a5 b9 ff ff       	callq  2670 <__fprintf_chk@plt>
				      _MAX_LINE_WIDTH - _LONG_HELP_ALIGN,
				      &toprint[printed_right]);
			printed_right += ret - 1;
    6ccb:	8d 6c 05 ff          	lea    -0x1(%rbp,%rax,1),%ebp
    6ccf:	eb b5                	jmp    6c86 <cmd_print_long_help+0xee>
		}
		count++;
    6cd1:	41 ff c5             	inc    %r13d
    6cd4:	e9 23 ff ff ff       	jmpq   6bfc <cmd_print_long_help+0x64>
    6cd9:	48 8b 3b             	mov    (%rbx),%rdi
    6cdc:	48 8d 15 0b 34 00 00 	lea    0x340b(%rip),%rdx        # a0ee <default_cmd+0xe8e>
    6ce3:	be 01 00 00 00       	mov    $0x1,%esi
    6ce8:	31 c0                	xor    %eax,%eax
    6cea:	e8 81 b9 ff ff       	callq  2670 <__fprintf_chk@plt>
    6cef:	48 8b 3b             	mov    (%rbx),%rdi
    6cf2:	31 c0                	xor    %eax,%eax
    6cf4:	be 01 00 00 00       	mov    $0x1,%esi
    6cf9:	48 8d 15 a0 33 00 00 	lea    0x33a0(%rip),%rdx        # a0a0 <default_cmd+0xe40>
    6d00:	e8 6b b9 ff ff       	callq  2670 <__fprintf_chk@plt>
	}
	fprintf(stdout, "\n");
	fprintf(stdout, "Note that which options are available depends on the "
		"enabled features/drivers\n\n");
}
    6d05:	48 8b 44 24 58       	mov    0x58(%rsp),%rax
    6d0a:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    6d11:	00 00 
    6d13:	74 05                	je     6d1a <cmd_print_long_help+0x182>
    6d15:	e8 96 b7 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    6d1a:	48 83 c4 68          	add    $0x68,%rsp
    6d1e:	5b                   	pop    %rbx
    6d1f:	5d                   	pop    %rbp
    6d20:	41 5c                	pop    %r12
    6d22:	41 5d                	pop    %r13
    6d24:	41 5e                	pop    %r14
    6d26:	41 5f                	pop    %r15
    6d28:	c3                   	retq   

0000000000006d29 <cmd_parse_one_arg>:
 * Try to find if this argument is in the list (and it is not manual)
 * if it does, try to parse it, set its dest accordingly, and return true
 * if it is not found, return false
 */
bool cmd_parse_one_arg(char *argv, struct args_struct_t args_struct[])
{
    6d29:	f3 0f 1e fa          	endbr64 
    6d2d:	41 56                	push   %r14
    6d2f:	41 55                	push   %r13
    6d31:	49 89 f5             	mov    %rsi,%r13
    6d34:	41 54                	push   %r12
    6d36:	55                   	push   %rbp
    6d37:	48 89 fd             	mov    %rdi,%rbp
    6d3a:	53                   	push   %rbx
	int count = 0;
	int ret;

	if (cmd_is_help_option(argv)) {
    6d3b:	e8 8a fa ff ff       	callq  67ca <cmd_is_help_option>
    6d40:	85 c0                	test   %eax,%eax
    6d42:	74 0f                	je     6d53 <cmd_parse_one_arg+0x2a>
		cmd_print_long_help(args_struct);
    6d44:	4c 89 ef             	mov    %r13,%rdi
    6d47:	e8 4c fe ff ff       	callq  6b98 <cmd_print_long_help>
		posix_exit(0);
    6d4c:	31 ff                	xor    %edi,%edi
    6d4e:	e8 62 f5 ff ff       	callq  62b5 <posix_exit>
{
    6d53:	45 31 f6             	xor    %r14d,%r14d
	}

	while (args_struct[count].option != NULL) {
    6d56:	49 63 de             	movslq %r14d,%rbx
    6d59:	48 6b db 38          	imul   $0x38,%rbx,%rbx
    6d5d:	4c 01 eb             	add    %r13,%rbx
    6d60:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    6d64:	48 85 f6             	test   %rsi,%rsi
    6d67:	74 78                	je     6de1 <cmd_parse_one_arg+0xb8>
		if (args_struct[count].manual) {
    6d69:	80 3b 00             	cmpb   $0x0,(%rbx)
    6d6c:	75 6b                	jne    6dd9 <cmd_parse_one_arg+0xb0>
			count++;
			continue;
		}
		ret = cmd_is_option(argv, args_struct[count].option,
				    !args_struct[count].is_switch);
    6d6e:	8a 53 02             	mov    0x2(%rbx),%dl
		ret = cmd_is_option(argv, args_struct[count].option,
    6d71:	48 89 ef             	mov    %rbp,%rdi
				    !args_struct[count].is_switch);
    6d74:	83 f2 01             	xor    $0x1,%edx
		ret = cmd_is_option(argv, args_struct[count].option,
    6d77:	0f b6 d2             	movzbl %dl,%edx
    6d7a:	e8 9d f9 ff ff       	callq  671c <cmd_is_option>
    6d7f:	41 89 c4             	mov    %eax,%r12d
		if (ret) {
    6d82:	85 c0                	test   %eax,%eax
    6d84:	74 53                	je     6dd9 <cmd_parse_one_arg+0xb0>
	if (arg_element->dest != NULL) {
    6d86:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    6d8a:	48 85 f6             	test   %rsi,%rsi
    6d8d:	74 33                	je     6dc2 <cmd_parse_one_arg+0x99>
		if (arg_element->is_switch) {
    6d8f:	80 7b 02 00          	cmpb   $0x0,0x2(%rbx)
    6d93:	0f be 53 18          	movsbl 0x18(%rbx),%edx
    6d97:	74 1a                	je     6db3 <cmd_parse_one_arg+0x8a>
			if (arg_element->type == 'b') {
    6d99:	80 fa 62             	cmp    $0x62,%dl
    6d9c:	75 05                	jne    6da3 <cmd_parse_one_arg+0x7a>
				*(bool *)arg_element->dest = true;
    6d9e:	c6 06 01             	movb   $0x1,(%rsi)
    6da1:	eb 1f                	jmp    6dc2 <cmd_parse_one_arg+0x99>
				posix_print_error_and_exit(CMD_ERR_BOOL_SWI);
    6da3:	48 8d 3d 46 33 00 00 	lea    0x3346(%rip),%rdi        # a0f0 <default_cmd+0xe90>
    6daa:	31 c0                	xor    %eax,%eax
    6dac:	e8 00 f6 ff ff       	callq  63b1 <posix_print_error_and_exit>
    6db1:	eb 0f                	jmp    6dc2 <cmd_parse_one_arg+0x99>
			cmd_read_option_value(&argv[offset],
    6db3:	48 63 f8             	movslq %eax,%rdi
    6db6:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
    6dba:	48 01 ef             	add    %rbp,%rdi
    6dbd:	e8 75 fa ff ff       	callq  6837 <cmd_read_option_value>
	if (arg_element->call_when_found) {
    6dc2:	48 8b 53 28          	mov    0x28(%rbx),%rdx
			cmd_handle_this_matched_arg(argv,
						    ret,
						    &args_struct[count]);
			return true;
    6dc6:	b0 01                	mov    $0x1,%al
	if (arg_element->call_when_found) {
    6dc8:	48 85 d2             	test   %rdx,%rdx
    6dcb:	74 16                	je     6de3 <cmd_parse_one_arg+0xba>
		arg_element->call_when_found(argv, offset);
    6dcd:	44 89 e6             	mov    %r12d,%esi
    6dd0:	48 89 ef             	mov    %rbp,%rdi
    6dd3:	ff d2                	callq  *%rdx
			return true;
    6dd5:	b0 01                	mov    $0x1,%al
    6dd7:	eb 0a                	jmp    6de3 <cmd_parse_one_arg+0xba>
    6dd9:	41 ff c6             	inc    %r14d
    6ddc:	e9 75 ff ff ff       	jmpq   6d56 <cmd_parse_one_arg+0x2d>
		}
		count++;
	}
	return false;
    6de1:	31 c0                	xor    %eax,%eax
}
    6de3:	5b                   	pop    %rbx
    6de4:	5d                   	pop    %rbp
    6de5:	41 5c                	pop    %r12
    6de7:	41 5d                	pop    %r13
    6de9:	41 5e                	pop    %r14
    6deb:	c3                   	retq   

0000000000006dec <native_cleanup_cmd_line>:
static int used_args;
static int args_aval;
#define ARGS_ALLOC_CHUNK_SIZE 20

void native_cleanup_cmd_line(void)
{
    6dec:	f3 0f 1e fa          	endbr64 
	if (args_struct != NULL) { /* LCOV_EXCL_BR_LINE */
    6df0:	48 8b 3d 11 87 00 00 	mov    0x8711(%rip),%rdi        # f508 <args_struct>
    6df7:	48 85 ff             	test   %rdi,%rdi
    6dfa:	74 13                	je     6e0f <native_cleanup_cmd_line+0x23>
{
    6dfc:	50                   	push   %rax
		free(args_struct);
    6dfd:	e8 ae b5 ff ff       	callq  23b0 <free@plt>
		args_struct = NULL;
    6e02:	48 c7 05 fb 86 00 00 	movq   $0x0,0x86fb(%rip)        # f508 <args_struct>
    6e09:	00 00 00 00 
	}
}
    6e0d:	5a                   	pop    %rdx
    6e0e:	c3                   	retq   
    6e0f:	c3                   	retq   

0000000000006e10 <native_add_command_line_opts>:
 *
 * Each option to be added is described in one entry of the input <args>
 * This input must be terminated with an entry containing ARG_TABLE_ENDMARKER.
 */
void native_add_command_line_opts(struct args_struct_t *args)
{
    6e10:	f3 0f 1e fa          	endbr64 
    6e14:	41 54                	push   %r12
    6e16:	55                   	push   %rbp
    6e17:	48 89 fd             	mov    %rdi,%rbp
    6e1a:	53                   	push   %rbx
	int count = 0;
    6e1b:	31 db                	xor    %ebx,%ebx

	while (args[count].option != NULL) {
    6e1d:	48 63 c3             	movslq %ebx,%rax
    6e20:	ff c3                	inc    %ebx
    6e22:	48 6b c0 38          	imul   $0x38,%rax,%rax
    6e26:	48 83 7c 05 08 00    	cmpq   $0x0,0x8(%rbp,%rax,1)
    6e2c:	75 ef                	jne    6e1d <native_add_command_line_opts+0xd>
		count++;
	}
	count++; /*for the end marker*/

	if (used_args + count >= args_aval) {
    6e2e:	8b 15 4c 87 00 00    	mov    0x874c(%rip),%edx        # f580 <used_args>
    6e34:	8b 05 42 87 00 00    	mov    0x8742(%rip),%eax        # f57c <args_aval>
    6e3a:	01 da                	add    %ebx,%edx
    6e3c:	39 c2                	cmp    %eax,%edx
    6e3e:	7c 44                	jl     6e84 <native_add_command_line_opts+0x74>
		if (growby < ARGS_ALLOC_CHUNK_SIZE) {
			growby = ARGS_ALLOC_CHUNK_SIZE;
		}

		struct args_struct_t *new_args_struct = realloc(args_struct,
				      (args_aval + growby)*
    6e40:	83 fb 14             	cmp    $0x14,%ebx
    6e43:	41 bc 14 00 00 00    	mov    $0x14,%r12d
		struct args_struct_t *new_args_struct = realloc(args_struct,
    6e49:	48 8b 3d b8 86 00 00 	mov    0x86b8(%rip),%rdi        # f508 <args_struct>
				      (args_aval + growby)*
    6e50:	44 0f 4d e3          	cmovge %ebx,%r12d
    6e54:	41 01 c4             	add    %eax,%r12d
    6e57:	49 63 f4             	movslq %r12d,%rsi
		struct args_struct_t *new_args_struct = realloc(args_struct,
    6e5a:	48 6b f6 38          	imul   $0x38,%rsi,%rsi
    6e5e:	e8 6d b7 ff ff       	callq  25d0 <realloc@plt>
				      sizeof(struct args_struct_t));
		args_aval += growby;
    6e63:	44 89 25 12 87 00 00 	mov    %r12d,0x8712(%rip)        # f57c <args_aval>
		/* LCOV_EXCL_START */
		if (new_args_struct == NULL) {
    6e6a:	48 85 c0             	test   %rax,%rax
    6e6d:	75 0e                	jne    6e7d <native_add_command_line_opts+0x6d>
			posix_print_error_and_exit("Could not allocate memory");
    6e6f:	48 8d 3d c5 32 00 00 	lea    0x32c5(%rip),%rdi        # a13b <default_cmd+0xedb>
    6e76:	e8 36 f5 ff ff       	callq  63b1 <posix_print_error_and_exit>
    6e7b:	eb 07                	jmp    6e84 <native_add_command_line_opts+0x74>
		} else {
			args_struct = new_args_struct;
    6e7d:	48 89 05 84 86 00 00 	mov    %rax,0x8684(%rip)        # f508 <args_struct>
		}
		/* LCOV_EXCL_STOP */
	}

	memcpy(&args_struct[used_args], args,
    6e84:	48 63 05 f5 86 00 00 	movslq 0x86f5(%rip),%rax        # f580 <used_args>
    6e8b:	48 63 cb             	movslq %ebx,%rcx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    6e8e:	48 89 ee             	mov    %rbp,%rsi
    6e91:	48 6b c9 38          	imul   $0x38,%rcx,%rcx
    6e95:	48 89 c2             	mov    %rax,%rdx
    6e98:	48 6b c0 38          	imul   $0x38,%rax,%rax
    6e9c:	48 03 05 65 86 00 00 	add    0x8665(%rip),%rax        # f508 <args_struct>
    6ea3:	48 89 c7             	mov    %rax,%rdi
		count*sizeof(struct args_struct_t));

	used_args += count - 1;
    6ea6:	8d 44 1a ff          	lea    -0x1(%rdx,%rbx,1),%eax
    6eaa:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
    6eac:	89 05 ce 86 00 00    	mov    %eax,0x86ce(%rip)        # f580 <used_args>
	/*
	 * -1 as the end marker should be overwritten next time something
	 * is added
	 */
}
    6eb2:	5b                   	pop    %rbx
    6eb3:	5d                   	pop    %rbp
    6eb4:	41 5c                	pop    %r12
    6eb6:	c3                   	retq   

0000000000006eb7 <native_add_testargs_option>:

void native_add_testargs_option(void)
{
    6eb7:	f3 0f 1e fa          	endbr64 
		(void *)NULL, NULL,
		"Any argument that follows will be ignored by the top level, "
		"and made available for possible tests"},
		ARG_TABLE_ENDMARKER};

	native_add_command_line_opts(testargs_options);
    6ebb:	48 8d 3d de 53 00 00 	lea    0x53de(%rip),%rdi        # c2a0 <testargs_options.2552>
    6ec2:	e9 49 ff ff ff       	jmpq   6e10 <native_add_command_line_opts>

0000000000006ec7 <native_handle_cmd_line>:
 * Handle possible command line arguments.
 *
 * We also store them for later use by possible test applications
 */
void native_handle_cmd_line(int argc, char *argv[])
{
    6ec7:	f3 0f 1e fa          	endbr64 
    6ecb:	41 57                	push   %r15

	cmd_args_set_defaults(args_struct);

	for (i = 1; i < argc; i++) {

		if ((cmd_is_option(argv[i], "testargs", 0))) {
    6ecd:	4c 8d 3d 81 32 00 00 	lea    0x3281(%rip),%r15        # a155 <default_cmd+0xef5>
{
    6ed4:	41 56                	push   %r14
    6ed6:	41 55                	push   %r13
    6ed8:	41 54                	push   %r12
    6eda:	49 89 f4             	mov    %rsi,%r12
    6edd:	55                   	push   %rbp
	for (i = 1; i < argc; i++) {
    6ede:	bd 01 00 00 00       	mov    $0x1,%ebp
{
    6ee3:	53                   	push   %rbx
    6ee4:	89 fb                	mov    %edi,%ebx
    6ee6:	52                   	push   %rdx
	native_add_tracing_options();
    6ee7:	e8 3c f7 ff ff       	callq  6628 <native_add_tracing_options>
	native_add_testargs_option();
    6eec:	e8 c6 ff ff ff       	callq  6eb7 <native_add_testargs_option>
	cmd_args_set_defaults(args_struct);
    6ef1:	48 8b 3d 10 86 00 00 	mov    0x8610(%rip),%rdi        # f508 <args_struct>
	s_argv = argv;
    6ef8:	4c 89 25 19 86 00 00 	mov    %r12,0x8619(%rip)        # f518 <s_argv>
	s_argc = argc;
    6eff:	89 1d 83 86 00 00    	mov    %ebx,0x8683(%rip)        # f588 <s_argc>
	cmd_args_set_defaults(args_struct);
    6f05:	e8 bf fa ff ff       	callq  69c9 <cmd_args_set_defaults>
	for (i = 1; i < argc; i++) {
    6f0a:	41 89 ee             	mov    %ebp,%r14d
    6f0d:	39 eb                	cmp    %ebp,%ebx
    6f0f:	7e 65                	jle    6f76 <native_handle_cmd_line+0xaf>
		if ((cmd_is_option(argv[i], "testargs", 0))) {
    6f11:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    6f15:	31 d2                	xor    %edx,%edx
    6f17:	4c 89 fe             	mov    %r15,%rsi
    6f1a:	4c 8d 6d 01          	lea    0x1(%rbp),%r13
    6f1e:	e8 f9 f7 ff ff       	callq  671c <cmd_is_option>
    6f23:	85 c0                	test   %eax,%eax
    6f25:	74 18                	je     6f3f <native_handle_cmd_line+0x78>
			test_argc = argc - i - 1;
    6f27:	ff cb                	dec    %ebx
			test_argv = &argv[i+1];
    6f29:	4b 8d 04 ec          	lea    (%r12,%r13,8),%rax
			test_argc = argc - i - 1;
    6f2d:	44 29 f3             	sub    %r14d,%ebx
			test_argv = &argv[i+1];
    6f30:	48 89 05 d9 85 00 00 	mov    %rax,0x85d9(%rip)        # f510 <test_argv>
			test_argc = argc - i - 1;
    6f37:	89 1d 47 86 00 00    	mov    %ebx,0x8647(%rip)        # f584 <test_argc>
			break;
    6f3d:	eb 37                	jmp    6f76 <native_handle_cmd_line+0xaf>
		}

		if (!cmd_parse_one_arg(argv[i], args_struct)) {
    6f3f:	49 8b 3c ec          	mov    (%r12,%rbp,8),%rdi
    6f43:	48 8b 35 be 85 00 00 	mov    0x85be(%rip),%rsi        # f508 <args_struct>
    6f4a:	e8 da fd ff ff       	callq  6d29 <cmd_parse_one_arg>
    6f4f:	84 c0                	test   %al,%al
    6f51:	75 1e                	jne    6f71 <native_handle_cmd_line+0xaa>
			cmd_print_switches_help(args_struct);
    6f53:	48 8b 3d ae 85 00 00 	mov    0x85ae(%rip),%rdi        # f508 <args_struct>
    6f5a:	e8 2f fb ff ff       	callq  6a8e <cmd_print_switches_help>
	posix_print_error_and_exit("Incorrect option '%s'. Did you misspell it?"
    6f5f:	49 8b 34 ec          	mov    (%r12,%rbp,8),%rsi
    6f63:	48 8d 3d f4 31 00 00 	lea    0x31f4(%rip),%rdi        # a15e <default_cmd+0xefe>
    6f6a:	31 c0                	xor    %eax,%eax
    6f6c:	e8 40 f4 ff ff       	callq  63b1 <posix_print_error_and_exit>
	for (i = 1; i < argc; i++) {
    6f71:	4c 89 ed             	mov    %r13,%rbp
    6f74:	eb 94                	jmp    6f0a <native_handle_cmd_line+0x43>
			print_invalid_opt_error(argv[i]);
		}
	}
}
    6f76:	58                   	pop    %rax
    6f77:	5b                   	pop    %rbx
    6f78:	5d                   	pop    %rbp
    6f79:	41 5c                	pop    %r12
    6f7b:	41 5d                	pop    %r13
    6f7d:	41 5e                	pop    %r14
    6f7f:	41 5f                	pop    %r15
    6f81:	c3                   	retq   

0000000000006f82 <hw_counter_init>:

/**
 * Initialize the counter with prescaler of HW
 */
void hw_counter_init(void)
{
    6f82:	f3 0f 1e fa          	endbr64 
	hw_counter_timer = NEVER;
    6f86:	48 8d 05 ab 85 00 00 	lea    0x85ab(%rip),%rax        # f538 <hw_counter_timer>
	counter_target = NEVER;
	counter_value = 0;
	counter_running = false;
    6f8d:	c6 05 12 86 00 00 00 	movb   $0x0,0x8612(%rip)        # f5a6 <counter_running>
	counter_target = NEVER;
    6f94:	48 c7 05 89 85 00 00 	movq   $0xffffffffffffffff,0x8589(%rip)        # f528 <counter_target>
    6f9b:	ff ff ff ff 
	hw_counter_timer = NEVER;
    6f9f:	48 c7 00 ff ff ff ff 	movq   $0xffffffffffffffff,(%rax)
	counter_value = 0;
    6fa6:	48 c7 05 7f 85 00 00 	movq   $0x0,0x857f(%rip)        # f530 <counter_value>
    6fad:	00 00 00 00 
	counter_period = NEVER;
    6fb1:	48 c7 05 64 85 00 00 	movq   $0xffffffffffffffff,0x8564(%rip)        # f520 <counter_period>
    6fb8:	ff ff ff ff 
}
    6fbc:	c3                   	retq   

0000000000006fbd <hw_counter_triggered>:

void hw_counter_triggered(void)
{
    6fbd:	f3 0f 1e fa          	endbr64 
	if (!counter_running) {
    6fc1:	80 3d de 85 00 00 00 	cmpb   $0x0,0x85de(%rip)        # f5a6 <counter_running>
{
    6fc8:	53                   	push   %rbx
    6fc9:	48 8d 1d 68 85 00 00 	lea    0x8568(%rip),%rbx        # f538 <hw_counter_timer>
	if (!counter_running) {
    6fd0:	75 09                	jne    6fdb <hw_counter_triggered+0x1e>
		hw_counter_timer = NEVER;
    6fd2:	48 c7 03 ff ff ff ff 	movq   $0xffffffffffffffff,(%rbx)
		return;
    6fd9:	eb 34                	jmp    700f <hw_counter_triggered+0x52>
	}

	hw_counter_timer = hwm_get_time() + counter_period;
    6fdb:	e8 da e9 ff ff       	callq  59ba <hwm_get_time>
    6fe0:	48 03 05 39 85 00 00 	add    0x8539(%rip),%rax        # f520 <counter_period>
    6fe7:	48 89 03             	mov    %rax,(%rbx)
	counter_value = counter_value + 1;
    6fea:	48 8b 05 3f 85 00 00 	mov    0x853f(%rip),%rax        # f530 <counter_value>
    6ff1:	48 ff c0             	inc    %rax

	if (counter_value == counter_target) {
    6ff4:	48 3b 05 2d 85 00 00 	cmp    0x852d(%rip),%rax        # f528 <counter_target>
	counter_value = counter_value + 1;
    6ffb:	48 89 05 2e 85 00 00 	mov    %rax,0x852e(%rip)        # f530 <counter_value>
	if (counter_value == counter_target) {
    7002:	75 0b                	jne    700f <hw_counter_triggered+0x52>
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    7004:	bf 02 00 00 00       	mov    $0x2,%edi
	}
}
    7009:	5b                   	pop    %rbx
		hw_irq_ctrl_set_irq(COUNTER_EVENT_IRQ);
    700a:	e9 19 f2 ff ff       	jmpq   6228 <hw_irq_ctrl_set_irq>
}
    700f:	5b                   	pop    %rbx
    7010:	c3                   	retq   

0000000000007011 <tc_query_caps>:

	return 0;
}

static int tc_query_caps(const struct device *dev)
{
    7011:	f3 0f 1e fa          	endbr64 
	return (CAP_RAW_KEY | CAP_SEPARATE_IO_BUFS | CAP_SYNC_OPS);
}
    7015:	b8 32 00 00 00       	mov    $0x32,%eax
    701a:	c3                   	retq   

000000000000701b <tc_shim_init>:

	return 0;
}

static int tc_shim_init(const struct device *dev)
{
    701b:	f3 0f 1e fa          	endbr64 
	int i;

	ARG_UNUSED(dev);
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
		tc_driver_state[i].in_use = 0;
    701f:	c7 05 37 81 00 00 00 	movl   $0x0,0x8137(%rip)        # f160 <tc_driver_state>
    7026:	00 00 00 
	}

	return 0;
}
    7029:	31 c0                	xor    %eax,%eax
		tc_driver_state[i].in_use = 0;
    702b:	c7 05 df 81 00 00 00 	movl   $0x0,0x81df(%rip)        # f214 <tc_driver_state+0xb4>
    7032:	00 00 00 
}
    7035:	c3                   	retq   

0000000000007036 <tc_session_free>:
{
    7036:	f3 0f 1e fa          	endbr64 
	struct tc_shim_drv_state *data =  sessn->drv_sessn_state;
    703a:	48 8b 56 20          	mov    0x20(%rsi),%rdx
  return __builtin___memset_chk (__dest, __ch, __len, __bos0 (__dest));
    703e:	31 c0                	xor    %eax,%eax
    7040:	b9 2d 00 00 00       	mov    $0x2d,%ecx
    7045:	48 89 d7             	mov    %rdx,%rdi
    7048:	f3 ab                	rep stos %eax,%es:(%rdi)
}
    704a:	c3                   	retq   

000000000000704b <tc_session_setup>:
{
    704b:	f3 0f 1e fa          	endbr64 
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    704f:	ff ca                	dec    %edx
		return -EINVAL;
    7051:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (algo != CRYPTO_CIPHER_ALGO_AES) {
    7056:	0f 85 fb 00 00 00    	jne    7157 <tc_session_setup+0x10c>
{
    705c:	55                   	push   %rbp
    705d:	53                   	push   %rbx
    705e:	48 89 f3             	mov    %rsi,%rbx
    7061:	57                   	push   %rdi
	if (!(ctx->flags & CAP_SYNC_OPS)) {
    7062:	f6 46 36 20          	testb  $0x20,0x36(%rsi)
    7066:	0f 84 e7 00 00 00    	je     7153 <tc_session_setup+0x108>
	if (ctx->keylen != TC_AES_KEY_SIZE) {
    706c:	66 83 7e 34 10       	cmpw   $0x10,0x34(%rsi)
    7071:	0f 85 dc 00 00 00    	jne    7153 <tc_session_setup+0x108>
	if (op_type == CRYPTO_CIPHER_OP_ENCRYPT) {
    7077:	41 ff c8             	dec    %r8d
    707a:	75 1c                	jne    7098 <tc_session_setup+0x4d>
		switch (mode) {
    707c:	83 f9 03             	cmp    $0x3,%ecx
    707f:	74 1c                	je     709d <tc_session_setup+0x52>
    7081:	83 f9 04             	cmp    $0x4,%ecx
    7084:	74 2f                	je     70b5 <tc_session_setup+0x6a>
    7086:	83 f9 02             	cmp    $0x2,%ecx
    7089:	0f 85 c4 00 00 00    	jne    7153 <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_encrypt;
    708f:	48 8d 05 0e 03 00 00 	lea    0x30e(%rip),%rax        # 73a4 <do_cbc_encrypt>
    7096:	eb 49                	jmp    70e1 <tc_session_setup+0x96>
		switch (mode) {
    7098:	83 f9 03             	cmp    $0x3,%ecx
    709b:	75 21                	jne    70be <tc_session_setup+0x73>
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    709d:	83 7b 30 20          	cmpl   $0x20,0x30(%rbx)
		return -EINVAL;
    70a1:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
			if (ctx->mode_params.ctr_info.ctr_len != 32U) {
    70a6:	0f 85 a7 00 00 00    	jne    7153 <tc_session_setup+0x108>
			ctx->ops.ctr_crypt_hndlr = do_ctr_op;
    70ac:	48 8d 05 5a 02 00 00 	lea    0x25a(%rip),%rax        # 730d <do_ctr_op>
    70b3:	eb 2c                	jmp    70e1 <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_encrypt_mac;
    70b5:	48 8d 05 a1 01 00 00 	lea    0x1a1(%rip),%rax        # 725d <do_ccm_encrypt_mac>
    70bc:	eb 23                	jmp    70e1 <tc_session_setup+0x96>
		switch (mode) {
    70be:	83 f9 04             	cmp    $0x4,%ecx
    70c1:	74 17                	je     70da <tc_session_setup+0x8f>
    70c3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    70c8:	83 f9 02             	cmp    $0x2,%ecx
    70cb:	0f 85 82 00 00 00    	jne    7153 <tc_session_setup+0x108>
			ctx->ops.cbc_crypt_hndlr = do_cbc_decrypt;
    70d1:	48 8d 05 3c 01 00 00 	lea    0x13c(%rip),%rax        # 7214 <do_cbc_decrypt>
    70d8:	eb 07                	jmp    70e1 <tc_session_setup+0x96>
			ctx->ops.ccm_crypt_hndlr = do_ccm_decrypt_auth;
    70da:	48 8d 05 77 00 00 00 	lea    0x77(%rip),%rax        # 7158 <do_ccm_decrypt_auth>
    70e1:	48 89 43 08          	mov    %rax,0x8(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    70e5:	48 63 05 74 80 00 00 	movslq 0x8074(%rip),%rax        # f160 <tc_driver_state>
	ctx->ops.cipher_mode = mode;
    70ec:	89 0b                	mov    %ecx,(%rbx)
		if (tc_driver_state[i].in_use == 0) {
    70ee:	85 c0                	test   %eax,%eax
    70f0:	74 1f                	je     7111 <tc_session_setup+0xc6>
    70f2:	83 3d 1b 81 00 00 00 	cmpl   $0x0,0x811b(%rip)        # f214 <tc_driver_state+0xb4>
		return -ENOSPC;
    70f9:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
		if (tc_driver_state[i].in_use == 0) {
    70fe:	75 53                	jne    7153 <tc_session_setup+0x108>
			tc_driver_state[i].in_use = 1;
    7100:	c7 05 0a 81 00 00 01 	movl   $0x1,0x810a(%rip)        # f214 <tc_driver_state+0xb4>
    7107:	00 00 00 
	for (i = 0; i < CRYPTO_MAX_SESSION; i++) {
    710a:	b8 01 00 00 00       	mov    $0x1,%eax
    710f:	eb 0a                	jmp    711b <tc_session_setup+0xd0>
			tc_driver_state[i].in_use = 1;
    7111:	c7 05 45 80 00 00 01 	movl   $0x1,0x8045(%rip)        # f160 <tc_driver_state>
    7118:	00 00 00 
	data = &tc_driver_state[idx];
    711b:	48 69 c0 b4 00 00 00 	imul   $0xb4,%rax,%rax
    7122:	48 8d 15 37 80 00 00 	lea    0x8037(%rip),%rdx        # f160 <tc_driver_state>
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    7129:	48 8b 73 10          	mov    0x10(%rbx),%rsi
    712d:	48 8d 7c 02 04       	lea    0x4(%rdx,%rax,1),%rdi
	data = &tc_driver_state[idx];
    7132:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
	if (tc_aes128_set_encrypt_key(&data->session_key, ctx->key.bit_stream)
    7136:	e8 48 d3 ff ff       	callq  4483 <tc_aes128_set_encrypt_key>
    713b:	85 c0                	test   %eax,%eax
    713d:	75 0e                	jne    714d <tc_session_setup+0x102>
		tc_driver_state[idx].in_use = 0;
    713f:	c7 45 00 00 00 00 00 	movl   $0x0,0x0(%rbp)
		return -EIO;
    7146:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    714b:	eb 06                	jmp    7153 <tc_session_setup+0x108>
	ctx->drv_sessn_state = data;
    714d:	48 89 6b 20          	mov    %rbp,0x20(%rbx)
	return 0;
    7151:	31 c0                	xor    %eax,%eax
}
    7153:	5a                   	pop    %rdx
    7154:	5b                   	pop    %rbx
    7155:	5d                   	pop    %rbp
    7156:	c3                   	retq   
    7157:	c3                   	retq   

0000000000007158 <do_ccm_decrypt_auth>:
{
    7158:	f3 0f 1e fa          	endbr64 
    715c:	41 55                	push   %r13
    715e:	41 54                	push   %r12
    7160:	49 89 f4             	mov    %rsi,%r12
    7163:	55                   	push   %rbp
    7164:	53                   	push   %rbx
    7165:	48 89 fb             	mov    %rdi,%rbx
    7168:	48 83 ec 28          	sub    $0x28,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    716c:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    7170:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    7175:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    717c:	00 00 
    717e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    7183:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7185:	48 8b 47 20          	mov    0x20(%rdi),%rax
    7189:	49 89 e5             	mov    %rsp,%r13
	struct cipher_pkt *op = aead_op->pkt;
    718c:	48 8b 2e             	mov    (%rsi),%rbp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    718f:	4c 89 ef             	mov    %r13,%rdi
    7192:	48 8d 70 04          	lea    0x4(%rax),%rsi
    7196:	e8 1a da ff ff       	callq  4bb5 <tc_ccm_config>
    719b:	85 c0                	test   %eax,%eax
    719d:	75 07                	jne    71a6 <do_ccm_decrypt_auth+0x4e>
		return -EIO;
    719f:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    71a4:	eb 4e                	jmp    71f4 <do_ccm_decrypt_auth+0x9c>
	if (aead_op->tag != op->in_buf + op->in_len) {
    71a6:	48 63 45 08          	movslq 0x8(%rbp),%rax
    71aa:	4c 8b 45 00          	mov    0x0(%rbp),%r8
    71ae:	48 89 c2             	mov    %rax,%rdx
    71b1:	4c 01 c0             	add    %r8,%rax
    71b4:	49 39 44 24 18       	cmp    %rax,0x18(%r12)
    71b9:	75 e4                	jne    719f <do_ccm_decrypt_auth+0x47>
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    71bb:	4d 8b 54 24 08       	mov    0x8(%r12),%r10
    71c0:	8b 75 18             	mov    0x18(%rbp),%esi
    71c3:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
					   op->in_len + ccm_param->tag_len,
    71c7:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
	if (tc_ccm_decryption_verification(op->out_buf, op->out_buf_max,
    71cb:	41 51                	push   %r9
    71cd:	41 55                	push   %r13
    71cf:	41 8b 4c 24 10       	mov    0x10(%r12),%ecx
    71d4:	44 8d 0c 10          	lea    (%rax,%rdx,1),%r9d
    71d8:	4c 89 d2             	mov    %r10,%rdx
    71db:	e8 d5 db ff ff       	callq  4db5 <tc_ccm_decryption_verification>
    71e0:	41 5a                	pop    %r10
    71e2:	41 5b                	pop    %r11
    71e4:	85 c0                	test   %eax,%eax
    71e6:	74 b7                	je     719f <do_ccm_decrypt_auth+0x47>
	op->out_len = op->in_len + ccm_param->tag_len;
    71e8:	0f b7 43 30          	movzwl 0x30(%rbx),%eax
    71ec:	03 45 08             	add    0x8(%rbp),%eax
    71ef:	89 45 1c             	mov    %eax,0x1c(%rbp)
	return 0;
    71f2:	31 c0                	xor    %eax,%eax
}
    71f4:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    71f9:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7200:	00 00 
    7202:	74 05                	je     7209 <do_ccm_decrypt_auth+0xb1>
    7204:	e8 a7 b2 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    7209:	48 83 c4 28          	add    $0x28,%rsp
    720d:	5b                   	pop    %rbx
    720e:	5d                   	pop    %rbp
    720f:	41 5c                	pop    %r12
    7211:	41 5d                	pop    %r13
    7213:	c3                   	retq   

0000000000007214 <do_cbc_decrypt>:
{
    7214:	f3 0f 1e fa          	endbr64 
	if (iv != op->in_buf) {
    7218:	4c 8b 06             	mov    (%rsi),%r8
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    721b:	48 8b 47 20          	mov    0x20(%rdi),%rax
	if (iv != op->in_buf) {
    721f:	49 39 d0             	cmp    %rdx,%r8
    7222:	75 33                	jne    7257 <do_cbc_decrypt+0x43>
{
    7224:	53                   	push   %rbx
    7225:	48 89 f3             	mov    %rsi,%rbx
			op->in_len - TC_AES_BLOCK_SIZE,
    7228:	8b 4e 08             	mov    0x8(%rsi),%ecx
			op->in_buf + TC_AES_BLOCK_SIZE,
    722b:	49 8d 50 10          	lea    0x10(%r8),%rdx
	if (tc_cbc_mode_decrypt(op->out_buf,
    722f:	8b 76 18             	mov    0x18(%rsi),%esi
    7232:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7236:	4c 8d 48 04          	lea    0x4(%rax),%r9
			op->in_len - TC_AES_BLOCK_SIZE,
    723a:	83 e9 10             	sub    $0x10,%ecx
	if (tc_cbc_mode_decrypt(op->out_buf,
    723d:	e8 f1 d5 ff ff       	callq  4833 <tc_cbc_mode_decrypt>
    7242:	85 c0                	test   %eax,%eax
    7244:	75 07                	jne    724d <do_cbc_decrypt+0x39>
		return -EIO;
    7246:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    724b:	eb 08                	jmp    7255 <do_cbc_decrypt+0x41>
	op->out_len = op->in_len;
    724d:	8b 43 08             	mov    0x8(%rbx),%eax
    7250:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    7253:	31 c0                	xor    %eax,%eax
}
    7255:	5b                   	pop    %rbx
    7256:	c3                   	retq   
		return -EIO;
    7257:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
    725c:	c3                   	retq   

000000000000725d <do_ccm_encrypt_mac>:
{
    725d:	f3 0f 1e fa          	endbr64 
    7261:	41 54                	push   %r12
    7263:	55                   	push   %rbp
    7264:	48 89 f5             	mov    %rsi,%rbp
    7267:	53                   	push   %rbx
    7268:	48 83 ec 20          	sub    $0x20,%rsp
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    726c:	0f b7 4f 32          	movzwl 0x32(%rdi),%ecx
    7270:	44 0f b7 47 30       	movzwl 0x30(%rdi),%r8d
{
    7275:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    727c:	00 00 
    727e:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    7283:	31 c0                	xor    %eax,%eax
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    7285:	48 8b 47 20          	mov    0x20(%rdi),%rax
    7289:	49 89 e4             	mov    %rsp,%r12
	struct cipher_pkt *op = aead_op->pkt;
    728c:	48 8b 1e             	mov    (%rsi),%rbx
	if (tc_ccm_config(&ccm, &data->session_key, nonce,
    728f:	4c 89 e7             	mov    %r12,%rdi
    7292:	48 8d 70 04          	lea    0x4(%rax),%rsi
    7296:	e8 1a d9 ff ff       	callq  4bb5 <tc_ccm_config>
    729b:	85 c0                	test   %eax,%eax
    729d:	75 07                	jne    72a6 <do_ccm_encrypt_mac+0x49>
		return -EIO;
    729f:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    72a4:	eb 49                	jmp    72ef <do_ccm_encrypt_mac+0x92>
	if (tc_ccm_generation_encryption(op->out_buf, op->out_buf_max,
    72a6:	44 8b 4b 08          	mov    0x8(%rbx),%r9d
    72aa:	8b 73 18             	mov    0x18(%rbx),%esi
    72ad:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    72b1:	8b 4d 10             	mov    0x10(%rbp),%ecx
    72b4:	50                   	push   %rax
    72b5:	48 8b 55 08          	mov    0x8(%rbp),%rdx
    72b9:	4c 8b 03             	mov    (%rbx),%r8
    72bc:	41 54                	push   %r12
    72be:	e8 3c d9 ff ff       	callq  4bff <tc_ccm_generation_encryption>
    72c3:	5a                   	pop    %rdx
    72c4:	59                   	pop    %rcx
    72c5:	85 c0                	test   %eax,%eax
    72c7:	74 d6                	je     729f <do_ccm_encrypt_mac+0x42>
	if (aead_op->tag) {
    72c9:	48 8b 45 18          	mov    0x18(%rbp),%rax
    72cd:	48 85 c0             	test   %rax,%rax
    72d0:	74 11                	je     72e3 <do_ccm_encrypt_mac+0x86>
		memcpy(aead_op->tag, op->out_buf + op->in_len, ccm.mlen);
    72d2:	48 63 73 08          	movslq 0x8(%rbx),%rsi
    72d6:	8b 4c 24 10          	mov    0x10(%rsp),%ecx
  return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
    72da:	48 89 c7             	mov    %rax,%rdi
    72dd:	48 03 73 10          	add    0x10(%rbx),%rsi
    72e1:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
	op->out_len = op->in_len + ccm.mlen;
    72e3:	8b 44 24 10          	mov    0x10(%rsp),%eax
    72e7:	03 43 08             	add    0x8(%rbx),%eax
    72ea:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    72ed:	31 c0                	xor    %eax,%eax
}
    72ef:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    72f4:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
    72fb:	00 00 
    72fd:	74 05                	je     7304 <do_ccm_encrypt_mac+0xa7>
    72ff:	e8 ac b1 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    7304:	48 83 c4 20          	add    $0x20,%rsp
    7308:	5b                   	pop    %rbx
    7309:	5d                   	pop    %rbp
    730a:	41 5c                	pop    %r12
    730c:	c3                   	retq   

000000000000730d <do_ctr_op>:
{
    730d:	f3 0f 1e fa          	endbr64 
    7311:	55                   	push   %rbp
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    7312:	0f 57 c0             	xorps  %xmm0,%xmm0
    7315:	b9 10 00 00 00       	mov    $0x10,%ecx
{
    731a:	53                   	push   %rbx
    731b:	48 89 f3             	mov    %rsi,%rbx
    731e:	48 89 d6             	mov    %rdx,%rsi
    7321:	48 83 ec 28          	sub    $0x28,%rsp
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    7325:	0f b7 57 34          	movzwl 0x34(%rdi),%edx
	struct tc_shim_drv_state *data =  ctx->drv_sessn_state;
    7329:	48 8b 6f 20          	mov    0x20(%rdi),%rbp
{
    732d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7334:	00 00 
    7336:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    733b:	31 c0                	xor    %eax,%eax
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    733d:	8b 47 30             	mov    0x30(%rdi),%eax
    7340:	4c 8d 44 24 08       	lea    0x8(%rsp),%r8
	uint8_t ctr[16] = {0};	/* CTR mode Counter =  iv:ctr */
    7345:	0f 11 44 24 08       	movups %xmm0,0x8(%rsp)
    734a:	4c 89 c7             	mov    %r8,%rdi
	int ivlen = ctx->keylen - (ctx->mode_params.ctr_info.ctr_len >> 3);
    734d:	c1 e8 03             	shr    $0x3,%eax
    7350:	29 c2                	sub    %eax,%edx
	memcpy(ctr, iv, ivlen);
    7352:	48 63 d2             	movslq %edx,%rdx
    7355:	e8 16 b2 ff ff       	callq  2570 <__memcpy_chk@plt>
	if (tc_ctr_mode(op->out_buf, op->out_buf_max, op->in_buf,
    735a:	8b 4b 08             	mov    0x8(%rbx),%ecx
    735d:	8b 73 18             	mov    0x18(%rbx),%esi
    7360:	4c 8d 4d 04          	lea    0x4(%rbp),%r9
    7364:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    7368:	48 8b 13             	mov    (%rbx),%rdx
    736b:	49 89 c0             	mov    %rax,%r8
    736e:	e8 8a d5 ff ff       	callq  48fd <tc_ctr_mode>
    7373:	41 89 c0             	mov    %eax,%r8d
    7376:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    737b:	45 85 c0             	test   %r8d,%r8d
    737e:	74 08                	je     7388 <do_ctr_op+0x7b>
	op->out_len = op->in_len;
    7380:	8b 43 08             	mov    0x8(%rbx),%eax
    7383:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    7386:	31 c0                	xor    %eax,%eax
}
    7388:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
    738d:	64 48 33 0c 25 28 00 	xor    %fs:0x28,%rcx
    7394:	00 00 
    7396:	74 05                	je     739d <do_ctr_op+0x90>
    7398:	e8 13 b1 ff ff       	callq  24b0 <__stack_chk_fail@plt>
    739d:	48 83 c4 28          	add    $0x28,%rsp
    73a1:	5b                   	pop    %rbx
    73a2:	5d                   	pop    %rbp
    73a3:	c3                   	retq   

00000000000073a4 <do_cbc_encrypt>:
{
    73a4:	f3 0f 1e fa          	endbr64 
    73a8:	53                   	push   %rbx
    73a9:	48 89 f3             	mov    %rsi,%rbx
	if (tc_cbc_mode_encrypt(op->out_buf,
    73ac:	48 8b 47 20          	mov    0x20(%rdi),%rax
{
    73b0:	49 89 d0             	mov    %rdx,%r8
	if (tc_cbc_mode_encrypt(op->out_buf,
    73b3:	8b 4e 08             	mov    0x8(%rsi),%ecx
    73b6:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    73ba:	8b 76 18             	mov    0x18(%rsi),%esi
    73bd:	48 8b 13             	mov    (%rbx),%rdx
    73c0:	4c 8d 48 04          	lea    0x4(%rax),%r9
    73c4:	e8 41 d3 ff ff       	callq  470a <tc_cbc_mode_encrypt>
    73c9:	41 89 c0             	mov    %eax,%r8d
    73cc:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    73d1:	45 85 c0             	test   %r8d,%r8d
    73d4:	74 08                	je     73de <do_cbc_encrypt+0x3a>
	op->out_len = op->in_len;
    73d6:	8b 43 08             	mov    0x8(%rbx),%eax
    73d9:	89 43 1c             	mov    %eax,0x1c(%rbx)
	return 0;
    73dc:	31 c0                	xor    %eax,%eax
}
    73de:	5b                   	pop    %rbx
    73df:	c3                   	retq   

00000000000073e0 <np_uart_tty_poll_in>:
 * @retval 0 If a character arrived and was stored in p_char
 * @retval -1 If no character was available to read
 */
static int np_uart_tty_poll_in(const struct device *dev,
			       unsigned char *p_char)
{
    73e0:	f3 0f 1e fa          	endbr64 
    73e4:	50                   	push   %rax
	int n = -1;
	int in_f = ((struct native_uart_status *)dev->data)->in_fd;
    73e5:	48 8b 47 20          	mov    0x20(%rdi),%rax
	return __read_chk (__fd, __buf, __nbytes, __bos0 (__buf));

      if (__nbytes > __bos0 (__buf))
	return __read_chk_warn (__fd, __buf, __nbytes, __bos0 (__buf));
    }
  return __read_alias (__fd, __buf, __nbytes);
    73e9:	ba 01 00 00 00       	mov    $0x1,%edx
    73ee:	8b 78 04             	mov    0x4(%rax),%edi
    73f1:	e8 1a b1 ff ff       	callq  2510 <read@plt>
	n = read(in_f, p_char, 1);
	if (n == -1) {
		return -1;
	}
	return 0;
}
    73f6:	5a                   	pop    %rdx
	if (n == -1) {
    73f7:	ff c0                	inc    %eax
    73f9:	0f 94 c0             	sete   %al
    73fc:	0f b6 c0             	movzbl %al,%eax
    73ff:	f7 d8                	neg    %eax
}
    7401:	c3                   	retq   

0000000000007402 <np_cleanup_uart>:

	native_add_command_line_opts(uart_options);
}

static void np_cleanup_uart(void)
{
    7402:	f3 0f 1e fa          	endbr64 
	if (IS_ENABLED(CONFIG_NATIVE_UART_0_ON_OWN_PTY)) {
		if (native_uart_status_0.in_fd != 0) {
    7406:	8b 3d 38 81 00 00    	mov    0x8138(%rip),%edi        # f544 <native_uart_status_0+0x4>
    740c:	85 ff                	test   %edi,%edi
    740e:	74 05                	je     7415 <np_cleanup_uart+0x13>
			close(native_uart_status_0.in_fd);
    7410:	e9 eb b0 ff ff       	jmpq   2500 <close@plt>
#if defined(CONFIG_UART_NATIVE_POSIX_PORT_1_ENABLE)
	if (native_uart_status_1.in_fd != 0) {
		close(native_uart_status_1.in_fd);
	}
#endif
}
    7415:	c3                   	retq   

0000000000007416 <np_add_uart_options>:
{
    7416:	f3 0f 1e fa          	endbr64 
	native_add_command_line_opts(uart_options);
    741a:	48 8d 3d 1f 4f 00 00 	lea    0x4f1f(%rip),%rdi        # c340 <uart_options.7281>
    7421:	e9 ea f9 ff ff       	jmpq   6e10 <native_add_command_line_opts>

0000000000007426 <np_uart_0_init>:
{
    7426:	f3 0f 1e fa          	endbr64 
    742a:	55                   	push   %rbp
    742b:	48 89 e5             	mov    %rsp,%rbp
    742e:	41 57                	push   %r15
    7430:	41 56                	push   %r14
    7432:	41 55                	push   %r13
    7434:	41 54                	push   %r12
    7436:	53                   	push   %rbx
    7437:	48 83 ec 68          	sub    $0x68,%rsp
	d = (struct native_uart_status *)dev->data;
    743b:	4c 8b 6f 20          	mov    0x20(%rdi),%r13
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    743f:	bf 02 01 00 00       	mov    $0x102,%edi
		int tty_fn = open_tty(d, DT_INST_LABEL(0),
    7444:	44 8a 3d 5c 81 00 00 	mov    0x815c(%rip),%r15b        # f5a7 <auto_attach>
{
    744b:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7452:	00 00 
    7454:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    7458:	31 c0                	xor    %eax,%eax
	master_pty = posix_openpt(O_RDWR | O_NOCTTY);
    745a:	e8 31 b2 ff ff       	callq  2690 <posix_openpt@plt>
    745f:	89 c3                	mov    %eax,%ebx
	if (master_pty == -1) {
    7461:	ff c0                	inc    %eax
    7463:	75 0e                	jne    7473 <np_uart_0_init+0x4d>
		ERROR("Could not open a new TTY for the UART\n");
    7465:	48 8d 3d b8 2d 00 00 	lea    0x2db8(%rip),%rdi        # a224 <default_cmd+0xfc4>
    746c:	31 c0                	xor    %eax,%eax
    746e:	e8 3e ef ff ff       	callq  63b1 <posix_print_error_and_exit>
	ret = grantpt(master_pty);
    7473:	89 df                	mov    %ebx,%edi
    7475:	e8 b6 b1 ff ff       	callq  2630 <grantpt@plt>
	if (ret == -1) {
    747a:	ff c0                	inc    %eax
    747c:	75 21                	jne    749f <np_uart_0_init+0x79>
		err_nbr = errno;
    747e:	e8 7d af ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7483:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7485:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    7488:	e8 73 b0 ff ff       	callq  2500 <close@plt>
		ERROR("Could not grant access to the slave PTY side (%i)\n",
    748d:	41 8b 34 24          	mov    (%r12),%esi
    7491:	48 8d 3d b3 2d 00 00 	lea    0x2db3(%rip),%rdi        # a24b <default_cmd+0xfeb>
    7498:	31 c0                	xor    %eax,%eax
    749a:	e8 12 ef ff ff       	callq  63b1 <posix_print_error_and_exit>
	ret = unlockpt(master_pty);
    749f:	89 df                	mov    %ebx,%edi
    74a1:	e8 ba b0 ff ff       	callq  2560 <unlockpt@plt>
	if (ret == -1) {
    74a6:	ff c0                	inc    %eax
    74a8:	75 21                	jne    74cb <np_uart_0_init+0xa5>
		err_nbr = errno;
    74aa:	e8 51 af ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    74af:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    74b1:	49 89 c4             	mov    %rax,%r12
		close(master_pty);
    74b4:	e8 47 b0 ff ff       	callq  2500 <close@plt>
		ERROR("Could not unlock the slave PTY side (%i)\n", errno);
    74b9:	41 8b 34 24          	mov    (%r12),%esi
    74bd:	48 8d 3d ba 2d 00 00 	lea    0x2dba(%rip),%rdi        # a27e <default_cmd+0x101e>
    74c4:	31 c0                	xor    %eax,%eax
    74c6:	e8 e6 ee ff ff       	callq  63b1 <posix_print_error_and_exit>
	slave_pty_name = ptsname(master_pty);
    74cb:	89 df                	mov    %ebx,%edi
    74cd:	e8 be ae ff ff       	callq  2390 <ptsname@plt>
    74d2:	49 89 c4             	mov    %rax,%r12
	if (slave_pty_name == NULL) {
    74d5:	48 85 c0             	test   %rax,%rax
    74d8:	75 20                	jne    74fa <np_uart_0_init+0xd4>
		err_nbr = errno;
    74da:	e8 21 af ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    74df:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    74e1:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    74e4:	e8 17 b0 ff ff       	callq  2500 <close@plt>
		ERROR("Error getting slave PTY device name (%i)\n", errno);
    74e9:	41 8b 36             	mov    (%r14),%esi
    74ec:	48 8d 3d b5 2d 00 00 	lea    0x2db5(%rip),%rdi        # a2a8 <default_cmd+0x1048>
    74f3:	31 c0                	xor    %eax,%eax
    74f5:	e8 b7 ee ff ff       	callq  63b1 <posix_print_error_and_exit>
	flags = fcntl(master_pty, F_GETFL);
    74fa:	be 03 00 00 00       	mov    $0x3,%esi
    74ff:	89 df                	mov    %ebx,%edi
    7501:	31 c0                	xor    %eax,%eax
    7503:	e8 68 af ff ff       	callq  2470 <fcntl@plt>
    7508:	41 89 c6             	mov    %eax,%r14d
	if (flags == -1) {
    750b:	83 f8 ff             	cmp    $0xffffffff,%eax
    750e:	75 2a                	jne    753a <np_uart_0_init+0x114>
		err_nbr = errno;
    7510:	e8 eb ae ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7515:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7517:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
		close(master_pty);
    751e:	e8 dd af ff ff       	callq  2500 <close@plt>
		ERROR("Could not read the master PTY file status flags (%i)\n",
    7523:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
    752a:	48 8d 3d a1 2d 00 00 	lea    0x2da1(%rip),%rdi        # a2d2 <default_cmd+0x1072>
    7531:	31 c0                	xor    %eax,%eax
    7533:	8b 32                	mov    (%rdx),%esi
    7535:	e8 77 ee ff ff       	callq  63b1 <posix_print_error_and_exit>
	ret = fcntl(master_pty, F_SETFL, flags | O_NONBLOCK);
    753a:	44 89 f2             	mov    %r14d,%edx
    753d:	31 c0                	xor    %eax,%eax
    753f:	be 04 00 00 00       	mov    $0x4,%esi
    7544:	89 df                	mov    %ebx,%edi
    7546:	80 ce 08             	or     $0x8,%dh
    7549:	e8 22 af ff ff       	callq  2470 <fcntl@plt>
	if (ret == -1) {
    754e:	ff c0                	inc    %eax
    7550:	75 20                	jne    7572 <np_uart_0_init+0x14c>
		err_nbr = errno;
    7552:	e8 a9 ae ff ff       	callq  2400 <__errno_location@plt>
		close(master_pty);
    7557:	89 df                	mov    %ebx,%edi
		err_nbr = errno;
    7559:	49 89 c6             	mov    %rax,%r14
		close(master_pty);
    755c:	e8 9f af ff ff       	callq  2500 <close@plt>
		ERROR("Could not set the master PTY as non-blocking (%i)\n",
    7561:	41 8b 36             	mov    (%r14),%esi
    7564:	48 8d 3d 9d 2d 00 00 	lea    0x2d9d(%rip),%rdi        # a308 <default_cmd+0x10a8>
    756b:	31 c0                	xor    %eax,%eax
    756d:	e8 3f ee ff ff       	callq  63b1 <posix_print_error_and_exit>
	ret = tcgetattr(master_pty, &ter);
    7572:	4c 8d 75 8c          	lea    -0x74(%rbp),%r14
    7576:	89 df                	mov    %ebx,%edi
    7578:	4c 89 f6             	mov    %r14,%rsi
    757b:	e8 80 b0 ff ff       	callq  2600 <tcgetattr@plt>
	if (ret == -1) {
    7580:	ff c0                	inc    %eax
    7582:	75 0e                	jne    7592 <np_uart_0_init+0x16c>
		ERROR("Could not read terminal driver settings\n");
    7584:	48 8d 3d b0 2d 00 00 	lea    0x2db0(%rip),%rdi        # a33b <default_cmd+0x10db>
    758b:	31 c0                	xor    %eax,%eax
    758d:	e8 1f ee ff ff       	callq  63b1 <posix_print_error_and_exit>
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    7592:	31 f6                	xor    %esi,%esi
    7594:	4c 89 f2             	mov    %r14,%rdx
    7597:	89 df                	mov    %ebx,%edi
	ter.c_lflag &= ~(ICANON | ISIG | IEXTEN | ECHO);
    7599:	81 65 98 f4 7f ff ff 	andl   $0xffff7ff4,-0x68(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    75a0:	48 b8 04 fa ff ff fe 	movabs $0xfffffffefffffa04,%rax
    75a7:	ff ff ff 
	ter.c_cc[VTIME] = 0;
    75aa:	66 c7 45 a2 00 00    	movw   $0x0,-0x5e(%rbp)
	ter.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK
    75b0:	48 21 45 8c          	and    %rax,-0x74(%rbp)
	ret = tcsetattr(master_pty, TCSANOW, &ter);
    75b4:	e8 57 b0 ff ff       	callq  2610 <tcsetattr@plt>
	if (ret == -1) {
    75b9:	ff c0                	inc    %eax
    75bb:	75 0e                	jne    75cb <np_uart_0_init+0x1a5>
		ERROR("Could not change terminal driver settings\n");
    75bd:	48 8d 3d a0 2d 00 00 	lea    0x2da0(%rip),%rdi        # a364 <default_cmd+0x1104>
    75c4:	31 c0                	xor    %eax,%eax
    75c6:	e8 e6 ed ff ff       	callq  63b1 <posix_print_error_and_exit>
	posix_print_trace("%s connected to pseudotty: %s\n",
    75cb:	31 c0                	xor    %eax,%eax
    75cd:	4c 89 e2             	mov    %r12,%rdx
    75d0:	48 8d 35 36 1f 00 00 	lea    0x1f36(%rip),%rsi        # 950d <default_cmd+0x2ad>
    75d7:	48 8d 3d b1 2d 00 00 	lea    0x2db1(%rip),%rdi        # a38f <default_cmd+0x112f>
    75de:	e8 76 ef ff ff       	callq  6559 <posix_print_trace>
	if (do_auto_attach) {
    75e3:	45 84 ff             	test   %r15b,%r15b
    75e6:	0f 84 da 00 00 00    	je     76c6 <np_uart_0_init+0x2a0>
	if (auto_attach_cmd == NULL) {
    75ec:	48 83 3d 54 7f 00 00 	cmpq   $0x0,0x7f54(%rip)        # f548 <auto_attach_cmd>
    75f3:	00 
{
    75f4:	49 89 e6             	mov    %rsp,%r14
	if (auto_attach_cmd == NULL) {
    75f7:	75 0e                	jne    7607 <np_uart_0_init+0x1e1>
		auto_attach_cmd = (char *)default_cmd;
    75f9:	48 8d 05 60 1c 00 00 	lea    0x1c60(%rip),%rax        # 9260 <default_cmd>
    7600:	48 89 05 41 7f 00 00 	mov    %rax,0x7f41(%rip)        # f548 <auto_attach_cmd>
	char command[strlen(auto_attach_cmd) + strlen(slave_tty) + 1];
    7607:	4c 8b 0d 3a 7f 00 00 	mov    0x7f3a(%rip),%r9        # f548 <auto_attach_cmd>
    760e:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
    7612:	31 c0                	xor    %eax,%eax
    7614:	48 89 f1             	mov    %rsi,%rcx
    7617:	4c 89 cf             	mov    %r9,%rdi
    761a:	f2 ae                	repnz scas %es:(%rdi),%al
    761c:	4c 89 e7             	mov    %r12,%rdi
    761f:	48 f7 d1             	not    %rcx
    7622:	48 89 ca             	mov    %rcx,%rdx
    7625:	48 89 f1             	mov    %rsi,%rcx
    7628:	f2 ae                	repnz scas %es:(%rdi),%al
    762a:	48 89 c8             	mov    %rcx,%rax
    762d:	48 89 e1             	mov    %rsp,%rcx
    7630:	48 f7 d0             	not    %rax
    7633:	48 8d 54 02 0e       	lea    0xe(%rdx,%rax,1),%rdx
    7638:	48 89 d0             	mov    %rdx,%rax
    763b:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
    7642:	48 29 d1             	sub    %rdx,%rcx
    7645:	48 83 e0 f0          	and    $0xfffffffffffffff0,%rax
    7649:	48 89 ca             	mov    %rcx,%rdx
    764c:	48 39 d4             	cmp    %rdx,%rsp
    764f:	74 12                	je     7663 <np_uart_0_init+0x23d>
    7651:	48 81 ec 00 10 00 00 	sub    $0x1000,%rsp
    7658:	48 83 8c 24 f8 0f 00 	orq    $0x0,0xff8(%rsp)
    765f:	00 00 
    7661:	eb e9                	jmp    764c <np_uart_0_init+0x226>
    7663:	25 ff 0f 00 00       	and    $0xfff,%eax
    7668:	48 29 c4             	sub    %rax,%rsp
    766b:	48 85 c0             	test   %rax,%rax
    766e:	74 06                	je     7676 <np_uart_0_init+0x250>
    7670:	48 83 4c 04 f8 00    	orq    $0x0,-0x8(%rsp,%rax,1)
  return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
    7676:	4d 89 e0             	mov    %r12,%r8
    7679:	4c 89 c9             	mov    %r9,%rcx
    767c:	48 83 ca ff          	or     $0xffffffffffffffff,%rdx
    7680:	be 01 00 00 00       	mov    $0x1,%esi
    7685:	48 89 e7             	mov    %rsp,%rdi
    7688:	31 c0                	xor    %eax,%eax
    768a:	e8 41 b0 ff ff       	callq  26d0 <__sprintf_chk@plt>
	int ret = system(command);
    768f:	48 89 e7             	mov    %rsp,%rdi
    7692:	e8 29 ae ff ff       	callq  24c0 <system@plt>
    7697:	41 89 c4             	mov    %eax,%r12d
	if (ret != 0) {
    769a:	85 c0                	test   %eax,%eax
    769c:	74 25                	je     76c3 <np_uart_0_init+0x29d>
		WARN("Could not attach to the UART with \"%s\"\n", command);
    769e:	48 89 e6             	mov    %rsp,%rsi
    76a1:	48 8d 3d 06 2d 00 00 	lea    0x2d06(%rip),%rdi        # a3ae <default_cmd+0x114e>
    76a8:	31 c0                	xor    %eax,%eax
    76aa:	e8 db ed ff ff       	callq  648a <posix_print_warning>
		WARN("The command returned %i\n", WEXITSTATUS(ret));
    76af:	44 89 e0             	mov    %r12d,%eax
    76b2:	48 8d 3d 1d 2d 00 00 	lea    0x2d1d(%rip),%rdi        # a3d6 <default_cmd+0x1176>
    76b9:	0f b6 f4             	movzbl %ah,%esi
    76bc:	31 c0                	xor    %eax,%eax
    76be:	e8 c7 ed ff ff       	callq  648a <posix_print_warning>
    76c3:	4c 89 f4             	mov    %r14,%rsp
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    76c6:	48 8d 05 13 fd ff ff 	lea    -0x2ed(%rip),%rax        # 73e0 <np_uart_tty_poll_in>
		d->in_fd = tty_fn;
    76cd:	41 89 5d 04          	mov    %ebx,0x4(%r13)
		d->out_fd = tty_fn;
    76d1:	41 89 5d 00          	mov    %ebx,0x0(%r13)
		np_uart_driver_api_0.poll_in = np_uart_tty_poll_in;
    76d5:	48 89 05 24 4d 00 00 	mov    %rax,0x4d24(%rip)        # c400 <np_uart_driver_api_0>
}
    76dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    76e0:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
    76e7:	00 00 
    76e9:	74 05                	je     76f0 <np_uart_0_init+0x2ca>
    76eb:	e8 c0 ad ff ff       	callq  24b0 <__stack_chk_fail@plt>
    76f0:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    76f4:	31 c0                	xor    %eax,%eax
    76f6:	5b                   	pop    %rbx
    76f7:	41 5c                	pop    %r12
    76f9:	41 5d                	pop    %r13
    76fb:	41 5e                	pop    %r14
    76fd:	41 5f                	pop    %r15
    76ff:	5d                   	pop    %rbp
    7700:	c3                   	retq   

0000000000007701 <np_uart_poll_out>:
{
    7701:	f3 0f 1e fa          	endbr64 
    7705:	48 83 ec 18          	sub    $0x18,%rsp
	ret = write(d->out_fd, &out_char, 1);
    7709:	48 8b 47 20          	mov    0x20(%rdi),%rax
    770d:	ba 01 00 00 00       	mov    $0x1,%edx
{
    7712:	40 88 74 24 0c       	mov    %sil,0xc(%rsp)
	ret = write(d->out_fd, &out_char, 1);
    7717:	48 8d 74 24 0c       	lea    0xc(%rsp),%rsi
    771c:	8b 38                	mov    (%rax),%edi
    771e:	e8 6d ad ff ff       	callq  2490 <write@plt>
}
    7723:	48 83 c4 18          	add    $0x18,%rsp
    7727:	c3                   	retq   

0000000000007728 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    7728:	f3 0f 1e fa          	endbr64 
	while (dev < __device_end) {
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
	}
}
    772c:	c3                   	retq   

000000000000772d <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    772d:	f3 0f 1e fa          	endbr64 
    7731:	41 55                	push   %r13
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7733:	48 8d 05 66 44 00 00 	lea    0x4466(%rip),%rax        # bba0 <levels.4940>
{
    773a:	41 54                	push   %r12
    773c:	49 89 c4             	mov    %rax,%r12
    773f:	55                   	push   %rbp
    7740:	53                   	push   %rbx
    7741:	52                   	push   %rdx
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7742:	48 63 d7             	movslq %edi,%rdx
    7745:	ff c7                	inc    %edi
    7747:	48 8b 2c d0          	mov    (%rax,%rdx,8),%rbp
    774b:	48 63 df             	movslq %edi,%rbx
    774e:	49 39 2c dc          	cmp    %rbp,(%r12,%rbx,8)
    7752:	76 39                	jbe    778d <z_sys_init_run_level+0x60>
		const struct device *dev = entry->dev;
    7754:	4c 8b 6d 08          	mov    0x8(%rbp),%r13
		int rc = entry->init(dev);
    7758:	4c 89 ef             	mov    %r13,%rdi
    775b:	ff 55 00             	callq  *0x0(%rbp)

		if (dev != NULL) {
    775e:	4d 85 ed             	test   %r13,%r13
    7761:	74 24                	je     7787 <z_sys_init_run_level+0x5a>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
    7763:	49 8b 55 18          	mov    0x18(%r13),%rdx
    7767:	85 c0                	test   %eax,%eax
    7769:	74 18                	je     7783 <z_sys_init_run_level+0x56>
				if (rc < 0) {
    776b:	89 c1                	mov    %eax,%ecx
    776d:	c1 f9 1f             	sar    $0x1f,%ecx
    7770:	31 c8                	xor    %ecx,%eax
    7772:	29 c8                	sub    %ecx,%eax
					rc = -rc;
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    7774:	b9 ff 00 00 00       	mov    $0xff,%ecx
    7779:	3d ff 00 00 00       	cmp    $0xff,%eax
    777e:	0f 4f c1             	cmovg  %ecx,%eax
    7781:	88 02                	mov    %al,(%rdx)
			}
			dev->state->initialized = true;
    7783:	80 4a 01 01          	orb    $0x1,0x1(%rdx)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7787:	48 83 c5 10          	add    $0x10,%rbp
    778b:	eb c1                	jmp    774e <z_sys_init_run_level+0x21>
		}
	}
}
    778d:	58                   	pop    %rax
    778e:	5b                   	pop    %rbx
    778f:	5d                   	pop    %rbp
    7790:	41 5c                	pop    %r12
    7792:	41 5d                	pop    %r13
    7794:	c3                   	retq   

0000000000007795 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
    7795:	f3 0f 1e fa          	endbr64 
	return dev->state->initialized && (dev->state->init_res == 0U);
    7799:	48 8b 47 18          	mov    0x18(%rdi),%rax
    779d:	8b 00                	mov    (%rax),%eax
    779f:	66 25 ff 01          	and    $0x1ff,%ax
    77a3:	66 3d 00 01          	cmp    $0x100,%ax
    77a7:	0f 94 c0             	sete   %al
}
    77aa:	c3                   	retq   

00000000000077ab <z_impl_device_get_binding>:
{
    77ab:	f3 0f 1e fa          	endbr64 
    77af:	41 54                	push   %r12
    77b1:	55                   	push   %rbp
    77b2:	53                   	push   %rbx
	if ((name == NULL) || (name[0] == '\0')) {
    77b3:	48 85 ff             	test   %rdi,%rdi
    77b6:	75 05                	jne    77bd <z_impl_device_get_binding+0x12>
		return NULL;
    77b8:	45 31 e4             	xor    %r12d,%r12d
    77bb:	eb 61                	jmp    781e <z_impl_device_get_binding+0x73>
	if ((name == NULL) || (name[0] == '\0')) {
    77bd:	80 3f 00             	cmpb   $0x0,(%rdi)
    77c0:	48 89 fb             	mov    %rdi,%rbx
    77c3:	74 f3                	je     77b8 <z_impl_device_get_binding+0xd>
	for (dev = __device_start; dev != __device_end; dev++) {
    77c5:	4c 8d 25 24 71 00 00 	lea    0x7124(%rip),%r12        # e8f0 <__device_dts_ord_10>
    77cc:	4c 89 e5             	mov    %r12,%rbp
    77cf:	4c 3b 25 02 48 00 00 	cmp    0x4802(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    77d6:	74 18                	je     77f0 <z_impl_device_get_binding+0x45>
		if (z_device_ready(dev) && (dev->name == name)) {
    77d8:	4c 89 e7             	mov    %r12,%rdi
    77db:	e8 b5 ff ff ff       	callq  7795 <z_device_ready>
    77e0:	84 c0                	test   %al,%al
    77e2:	74 06                	je     77ea <z_impl_device_get_binding+0x3f>
    77e4:	49 39 1c 24          	cmp    %rbx,(%r12)
    77e8:	74 34                	je     781e <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    77ea:	49 83 c4 30          	add    $0x30,%r12
    77ee:	eb df                	jmp    77cf <z_impl_device_get_binding+0x24>
	for (dev = __device_start; dev != __device_end; dev++) {
    77f0:	49 89 ec             	mov    %rbp,%r12
    77f3:	4c 3b 25 de 47 00 00 	cmp    0x47de(%rip),%r12        # bfd8 <_GLOBAL_OFFSET_TABLE_+0x200>
    77fa:	74 bc                	je     77b8 <z_impl_device_get_binding+0xd>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    77fc:	4c 89 e7             	mov    %r12,%rdi
    77ff:	e8 91 ff ff ff       	callq  7795 <z_device_ready>
    7804:	84 c0                	test   %al,%al
    7806:	74 10                	je     7818 <z_impl_device_get_binding+0x6d>
    7808:	49 8b 34 24          	mov    (%r12),%rsi
    780c:	48 89 df             	mov    %rbx,%rdi
    780f:	e8 2c ad ff ff       	callq  2540 <strcmp@plt>
    7814:	85 c0                	test   %eax,%eax
    7816:	74 06                	je     781e <z_impl_device_get_binding+0x73>
	for (dev = __device_start; dev != __device_end; dev++) {
    7818:	49 83 c4 30          	add    $0x30,%r12
    781c:	eb d5                	jmp    77f3 <z_impl_device_get_binding+0x48>
}
    781e:	4c 89 e0             	mov    %r12,%rax
    7821:	5b                   	pop    %rbx
    7822:	5d                   	pop    %rbp
    7823:	41 5c                	pop    %r12
    7825:	c3                   	retq   

0000000000007826 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7826:	f3 0f 1e fa          	endbr64 
    782a:	50                   	push   %rax
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    782b:	48 8d 05 76 7d 00 00 	lea    0x7d76(%rip),%rax        # f5a8 <z_sys_post_kernel>

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    7832:	bf 02 00 00 00       	mov    $0x2,%edi
	z_sys_post_kernel = true;
    7837:	c6 00 01             	movb   $0x1,(%rax)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    783a:	e8 ee fe ff ff       	callq  772d <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    783f:	e8 d9 0d 00 00       	callq  861d <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    7844:	bf 03 00 00 00       	mov    $0x3,%edi
    7849:	e8 df fe ff ff       	callq  772d <z_sys_init_run_level>

	z_init_static_threads();
    784e:	e8 15 0d 00 00       	callq  8568 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    7853:	e8 d0 b2 ff ff       	callq  2b28 <zephyr_app_main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7858:	48 8d 05 21 7b 00 00 	lea    0x7b21(%rip),%rax        # f380 <z_main_thread>
    785f:	80 60 18 fe          	andb   $0xfe,0x18(%rax)

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7863:	5a                   	pop    %rdx
    7864:	c3                   	retq   

0000000000007865 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    7865:	f3 0f 1e fa          	endbr64 
    7869:	41 55                	push   %r13
    786b:	41 54                	push   %r12
    786d:	55                   	push   %rbp
    786e:	53                   	push   %rbx
    786f:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    7876:	48 8d 1d a3 7b 00 00 	lea    0x7ba3(%rip),%rbx        # f420 <_kernel>
    787d:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
    7884:	00 00 
    7886:	48 89 84 24 88 00 00 	mov    %rax,0x88(%rsp)
    788d:	00 
    788e:	31 c0                	xor    %eax,%eax
    7890:	48 89 e0             	mov    %rsp,%rax
	dummy_thread->base.user_options = K_ESSENTIAL;
    7893:	66 c7 44 24 18 01 01 	movw   $0x101,0x18(%rsp)
	_current_cpu->current = dummy_thread;
    789a:	48 89 43 10          	mov    %rax,0x10(%rbx)
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    789e:	e8 85 fe ff ff       	callq  7728 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    78a3:	31 ff                	xor    %edi,%edi
    78a5:	e8 83 fe ff ff       	callq  772d <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    78aa:	bf 01 00 00 00       	mov    $0x1,%edi
    78af:	e8 79 fe ff ff       	callq  772d <z_sys_init_run_level>
	z_sched_init();
    78b4:	e8 af 09 00 00       	callq  8268 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    78b9:	45 31 c9             	xor    %r9d,%r9d
    78bc:	45 31 c0             	xor    %r8d,%r8d
    78bf:	ba 00 04 00 00       	mov    $0x400,%edx
	_kernel.ready_q.cache = &z_main_thread;
    78c4:	48 8d 2d b5 7a 00 00 	lea    0x7ab5(%rip),%rbp        # f380 <z_main_thread>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    78cb:	48 8d 05 c2 2b 00 00 	lea    0x2bc2(%rip),%rax        # a494 <default_cmd+0x1234>
    78d2:	48 8d 35 9f 63 00 00 	lea    0x639f(%rip),%rsi        # dc78 <z_main_stack>
    78d9:	48 8d 0d 46 ff ff ff 	lea    -0xba(%rip),%rcx        # 7826 <bg_thread_main>
	_kernel.ready_q.cache = &z_main_thread;
    78e0:	48 89 6b 38          	mov    %rbp,0x38(%rbx)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    78e4:	48 89 ef             	mov    %rbp,%rdi
    78e7:	50                   	push   %rax
    78e8:	6a 01                	pushq  $0x1
    78ea:	6a 00                	pushq  $0x0
    78ec:	6a 00                	pushq  $0x0
    78ee:	e8 d9 0b 00 00       	callq  84cc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    78f3:	80 65 19 fb          	andb   $0xfb,0x19(%rbp)
    78f7:	48 83 c4 20          	add    $0x20,%rsp
	z_ready_thread(&z_main_thread);
    78fb:	48 89 ef             	mov    %rbp,%rdi
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    78fe:	49 89 c5             	mov    %rax,%r13
	z_ready_thread(&z_main_thread);
    7901:	e8 57 08 00 00       	callq  815d <z_ready_thread>
	z_setup_new_thread(thread, stack,
    7906:	6a 00                	pushq  $0x0
    7908:	45 31 c9             	xor    %r9d,%r9d
    790b:	49 89 d8             	mov    %rbx,%r8
    790e:	6a 01                	pushq  $0x1
    7910:	4c 8d 25 c9 79 00 00 	lea    0x79c9(%rip),%r12        # f2e0 <z_idle_threads>
    7917:	ba 00 01 00 00       	mov    $0x100,%edx
    791c:	48 8d 35 55 62 00 00 	lea    0x6255(%rip),%rsi        # db78 <z_idle_stacks>
    7923:	6a 0f                	pushq  $0xf
    7925:	48 8d 0d 51 10 00 00 	lea    0x1051(%rip),%rcx        # 897d <idle>
    792c:	6a 00                	pushq  $0x0
    792e:	4c 89 e7             	mov    %r12,%rdi
    7931:	e8 96 0b 00 00       	callq  84cc <z_setup_new_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    7936:	4c 89 63 18          	mov    %r12,0x18(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    793a:	4c 89 ee             	mov    %r13,%rsi
    793d:	48 89 ef             	mov    %rbp,%rdi
		_kernel.cpus[i].irq_stack =
    7940:	48 8d 05 31 67 00 00 	lea    0x6731(%rip),%rax        # e078 <z_interrupt_stacks>
		_kernel.cpus[i].id = i;
    7947:	c6 43 24 00          	movb   $0x0,0x24(%rbx)
	z_setup_new_thread(thread, stack,
    794b:	48 83 c4 20          	add    $0x20,%rsp
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    794f:	48 8d 15 d0 fe ff ff 	lea    -0x130(%rip),%rdx        # 7826 <bg_thread_main>
    7956:	41 80 64 24 19 fb    	andb   $0xfb,0x19(%r12)
		_kernel.cpus[i].irq_stack =
    795c:	48 05 00 08 00 00    	add    $0x800,%rax
    7962:	48 89 43 08          	mov    %rax,0x8(%rbx)
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    7966:	48 8d 43 28          	lea    0x28(%rbx),%rax
    796a:	48 89 43 28          	mov    %rax,0x28(%rbx)
	list->tail = (sys_dnode_t *)list;
    796e:	48 89 43 30          	mov    %rax,0x30(%rbx)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7972:	e8 2b db ff ff       	callq  54a2 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7977:	ba 27 01 00 00       	mov    $0x127,%edx
    797c:	48 8d 35 16 2b 00 00 	lea    0x2b16(%rip),%rsi        # a499 <default_cmd+0x1239>
    7983:	31 c0                	xor    %eax,%eax
    7985:	48 8d 3d a5 1c 00 00 	lea    0x1ca5(%rip),%rdi        # 9631 <default_cmd+0x3d1>
    798c:	e8 20 ea ff ff       	callq  63b1 <posix_print_error_and_exit>

0000000000007991 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    7991:	f3 0f 1e fa          	endbr64 
    7995:	41 57                	push   %r15
    7997:	41 56                	push   %r14
    7999:	49 89 d6             	mov    %rdx,%r14
    799c:	41 55                	push   %r13
    799e:	41 54                	push   %r12
    79a0:	49 89 fc             	mov    %rdi,%r12
    79a3:	55                   	push   %rbp

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    79a4:	48 8d 6f 10          	lea    0x10(%rdi),%rbp
{
    79a8:	48 83 ec 10          	sub    $0x10,%rsp
    79ac:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    79b1:	e8 64 e6 ff ff       	callq  601a <posix_irq_lock>

	if (msgq->used_msgs < msgq->max_msgs) {
    79b6:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    79bb:	41 89 c5             	mov    %eax,%r13d
    79be:	41 8b 44 24 18       	mov    0x18(%r12),%eax
    79c3:	41 39 44 24 40       	cmp    %eax,0x40(%r12)
    79c8:	73 6d                	jae    7a37 <z_impl_k_msgq_put+0xa6>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    79ca:	4c 89 e7             	mov    %r12,%rdi
    79cd:	e8 49 08 00 00       	callq  821b <z_unpend_first_thread>
		if (pending_thread != NULL) {
    79d2:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    79d7:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    79dc:	48 85 c0             	test   %rax,%rax
    79df:	74 25                	je     7a06 <z_impl_k_msgq_put+0x75>
    79e1:	48 8b 78 20          	mov    0x20(%rax),%rdi
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
    79e5:	45 31 ff             	xor    %r15d,%r15d
    79e8:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->callee_saved.retval = value;
    79ea:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
			z_ready_thread(pending_thread);
    79f1:	48 89 c7             	mov    %rax,%rdi
    79f4:	e8 64 07 00 00       	callq  815d <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    79f9:	44 89 ee             	mov    %r13d,%esi
    79fc:	48 89 ef             	mov    %rbp,%rdi
    79ff:	e8 5a 02 00 00       	callq  7c5e <z_reschedule>
			return 0;
    7a04:	eb 71                	jmp    7a77 <z_impl_k_msgq_put+0xe6>
    7a06:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7a0b:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		} else {
			/* put message in queue */
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    7a0d:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7a12:	49 03 44 24 38       	add    0x38(%r12),%rax
    7a17:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    7a1c:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7a21:	75 0a                	jne    7a2d <z_impl_k_msgq_put+0x9c>
				msgq->write_ptr = msgq->buffer_start;
    7a23:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7a28:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			}
			msgq->used_msgs++;
    7a2d:	41 ff 44 24 40       	incl   0x40(%r12)
		}
		result = 0;
    7a32:	45 31 ff             	xor    %r15d,%r15d
    7a35:	eb 38                	jmp    7a6f <z_impl_k_msgq_put+0xde>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for message space to become available */
		result = -ENOMSG;
    7a37:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7a3d:	4d 85 f6             	test   %r14,%r14
    7a40:	74 2d                	je     7a6f <z_impl_k_msgq_put+0xde>
	} else {
		/* wait for put message success, failure, or timeout */
		_current->base.swap_data = (void *) data;
    7a42:	48 8d 05 d7 79 00 00 	lea    0x79d7(%rip),%rax        # f420 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7a49:	4c 89 f1             	mov    %r14,%rcx
    7a4c:	4c 89 e2             	mov    %r12,%rdx
    7a4f:	48 89 ef             	mov    %rbp,%rdi
		_current->base.swap_data = (void *) data;
    7a52:	48 8b 40 10          	mov    0x10(%rax),%rax
    7a56:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7a5a:	48 83 c4 10          	add    $0x10,%rsp
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7a5e:	44 89 ee             	mov    %r13d,%esi
}
    7a61:	5d                   	pop    %rbp
    7a62:	41 5c                	pop    %r12
    7a64:	41 5d                	pop    %r13
    7a66:	41 5e                	pop    %r14
    7a68:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7a6a:	e9 0c 04 00 00       	jmpq   7e7b <z_pend_curr>
	posix_irq_unlock(key);
    7a6f:	44 89 ef             	mov    %r13d,%edi
    7a72:	e8 b1 e5 ff ff       	callq  6028 <posix_irq_unlock>
}
    7a77:	48 83 c4 10          	add    $0x10,%rsp
    7a7b:	44 89 f8             	mov    %r15d,%eax
    7a7e:	5d                   	pop    %rbp
    7a7f:	41 5c                	pop    %r12
    7a81:	41 5d                	pop    %r13
    7a83:	41 5e                	pop    %r14
    7a85:	41 5f                	pop    %r15
    7a87:	c3                   	retq   

0000000000007a88 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    7a88:	f3 0f 1e fa          	endbr64 
    7a8c:	41 57                	push   %r15
    7a8e:	41 56                	push   %r14
    7a90:	49 89 d6             	mov    %rdx,%r14
    7a93:	41 55                	push   %r13

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    7a95:	4c 8d 6f 10          	lea    0x10(%rdi),%r13
{
    7a99:	41 54                	push   %r12
    7a9b:	49 89 fc             	mov    %rdi,%r12
    7a9e:	55                   	push   %rbp
    7a9f:	53                   	push   %rbx
    7aa0:	48 89 f3             	mov    %rsi,%rbx
    7aa3:	41 51                	push   %r9
	return posix_irq_lock();
    7aa5:	e8 70 e5 ff ff       	callq  601a <posix_irq_lock>

	if (msgq->used_msgs > 0U) {
    7aaa:	41 83 7c 24 40 00    	cmpl   $0x0,0x40(%r12)
    7ab0:	89 c5                	mov    %eax,%ebp
    7ab2:	0f 84 9f 00 00 00    	je     7b57 <z_impl_k_msgq_get+0xcf>
    7ab8:	49 8b 74 24 30       	mov    0x30(%r12),%rsi
    7abd:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    7ac2:	48 89 df             	mov    %rbx,%rdi
    7ac5:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
    7ac7:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7acc:	49 03 44 24 30       	add    0x30(%r12),%rax
    7ad1:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		if (msgq->read_ptr == msgq->buffer_end) {
    7ad6:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7adb:	75 0a                	jne    7ae7 <z_impl_k_msgq_get+0x5f>
			msgq->read_ptr = msgq->buffer_start;
    7add:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7ae2:	49 89 44 24 30       	mov    %rax,0x30(%r12)
		}
		msgq->used_msgs--;
    7ae7:	41 ff 4c 24 40       	decl   0x40(%r12)

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7aec:	4c 89 e7             	mov    %r12,%rdi
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
			z_reschedule(&msgq->lock, key);
			return 0;
		}
		result = 0;
    7aef:	45 31 ff             	xor    %r15d,%r15d
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    7af2:	e8 24 07 00 00       	callq  821b <z_unpend_first_thread>
    7af7:	49 89 c0             	mov    %rax,%r8
		if (pending_thread != NULL) {
    7afa:	48 85 c0             	test   %rax,%rax
    7afd:	0f 84 8a 00 00 00    	je     7b8d <z_impl_k_msgq_get+0x105>
    7b03:	48 8b 70 20          	mov    0x20(%rax),%rsi
    7b07:	49 8b 7c 24 38       	mov    0x38(%r12),%rdi
    7b0c:	49 8b 4c 24 10       	mov    0x10(%r12),%rcx
    7b11:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
			msgq->write_ptr += msgq->msg_size;
    7b13:	49 8b 44 24 10       	mov    0x10(%r12),%rax
    7b18:	49 03 44 24 38       	add    0x38(%r12),%rax
    7b1d:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			if (msgq->write_ptr == msgq->buffer_end) {
    7b22:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
    7b27:	75 0a                	jne    7b33 <z_impl_k_msgq_get+0xab>
				msgq->write_ptr = msgq->buffer_start;
    7b29:	49 8b 44 24 20       	mov    0x20(%r12),%rax
    7b2e:	49 89 44 24 38       	mov    %rax,0x38(%r12)
			msgq->used_msgs++;
    7b33:	41 ff 44 24 40       	incl   0x40(%r12)
			z_ready_thread(pending_thread);
    7b38:	4c 89 c7             	mov    %r8,%rdi
			return 0;
    7b3b:	45 31 ff             	xor    %r15d,%r15d
    7b3e:	41 c7 40 4c 00 00 00 	movl   $0x0,0x4c(%r8)
    7b45:	00 
			z_ready_thread(pending_thread);
    7b46:	e8 12 06 00 00       	callq  815d <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    7b4b:	89 ee                	mov    %ebp,%esi
    7b4d:	4c 89 ef             	mov    %r13,%rdi
    7b50:	e8 09 01 00 00       	callq  7c5e <z_reschedule>
			return 0;
    7b55:	eb 3d                	jmp    7b94 <z_impl_k_msgq_get+0x10c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
		/* don't wait for a message to become available */
		result = -ENOMSG;
    7b57:	41 bf d6 ff ff ff    	mov    $0xffffffd6,%r15d
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7b5d:	4d 85 f6             	test   %r14,%r14
    7b60:	74 2b                	je     7b8d <z_impl_k_msgq_get+0x105>
	} else {
		/* wait for get message success or timeout */
		_current->base.swap_data = data;
    7b62:	48 8d 05 b7 78 00 00 	lea    0x78b7(%rip),%rax        # f420 <_kernel>
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7b69:	4c 89 f1             	mov    %r14,%rcx
    7b6c:	4c 89 e2             	mov    %r12,%rdx
    7b6f:	89 ee                	mov    %ebp,%esi
    7b71:	4c 89 ef             	mov    %r13,%rdi
		_current->base.swap_data = data;
    7b74:	48 8b 40 10          	mov    0x10(%rax),%rax
    7b78:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    7b7c:	41 58                	pop    %r8
    7b7e:	5b                   	pop    %rbx
    7b7f:	5d                   	pop    %rbp
    7b80:	41 5c                	pop    %r12
    7b82:	41 5d                	pop    %r13
    7b84:	41 5e                	pop    %r14
    7b86:	41 5f                	pop    %r15
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    7b88:	e9 ee 02 00 00       	jmpq   7e7b <z_pend_curr>
	posix_irq_unlock(key);
    7b8d:	89 ef                	mov    %ebp,%edi
    7b8f:	e8 94 e4 ff ff       	callq  6028 <posix_irq_unlock>
}
    7b94:	5a                   	pop    %rdx
    7b95:	44 89 f8             	mov    %r15d,%eax
    7b98:	5b                   	pop    %rbx
    7b99:	5d                   	pop    %rbp
    7b9a:	41 5c                	pop    %r12
    7b9c:	41 5d                	pop    %r13
    7b9e:	41 5e                	pop    %r14
    7ba0:	41 5f                	pop    %r15
    7ba2:	c3                   	retq   

0000000000007ba3 <z_sched_prio_cmp>:
 * Do not rely on the actual value returned aside from the above.
 * (Again, like memcmp.)
 */
int32_t z_sched_prio_cmp(struct k_thread *thread_1,
	struct k_thread *thread_2)
{
    7ba3:	f3 0f 1e fa          	endbr64 
	/* `prio` is <32b, so the below cannot overflow. */
	int32_t b1 = thread_1->base.prio;
    7ba7:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
	int32_t b2 = thread_2->base.prio;
    7bab:	0f be 4e 1a          	movsbl 0x1a(%rsi),%ecx
		 * from UB on overflow to impdef.
		 */
		return (int32_t) (d2 - d1);
	}
#endif
	return 0;
    7baf:	31 c0                	xor    %eax,%eax
	if (b1 != b2) {
    7bb1:	39 ca                	cmp    %ecx,%edx
    7bb3:	74 04                	je     7bb9 <z_sched_prio_cmp+0x16>
		return b2 - b1;
    7bb5:	89 c8                	mov    %ecx,%eax
    7bb7:	29 d0                	sub    %edx,%eax
}
    7bb9:	c3                   	retq   

0000000000007bba <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    7bba:	f3 0f 1e fa          	endbr64 
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    7bbe:	83 3d d3 79 00 00 00 	cmpl   $0x0,0x79d3(%rip)        # f598 <slice_time>
    7bc5:	74 20                	je     7be7 <z_reset_time_slice+0x2d>
{
    7bc7:	50                   	push   %rax
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7bc8:	e8 21 c0 ff ff       	callq  3bee <sys_clock_elapsed>
    7bcd:	8b 3d c5 79 00 00    	mov    0x79c5(%rip),%edi        # f598 <slice_time>
    7bd3:	48 8d 15 46 78 00 00 	lea    0x7846(%rip),%rdx        # f420 <_kernel>
		z_set_timeout_expiry(slice_time, false);
    7bda:	31 f6                	xor    %esi,%esi
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    7bdc:	01 f8                	add    %edi,%eax
    7bde:	89 42 20             	mov    %eax,0x20(%rdx)
	}
}
    7be1:	5a                   	pop    %rdx
		z_set_timeout_expiry(slice_time, false);
    7be2:	e9 5b 0c 00 00       	jmpq   8842 <z_set_timeout_expiry>
    7be7:	c3                   	retq   

0000000000007be8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    7be8:	f3 0f 1e fa          	endbr64 
    7bec:	41 54                	push   %r12
    7bee:	41 89 f4             	mov    %esi,%r12d
    7bf1:	55                   	push   %rbp
    7bf2:	53                   	push   %rbx
    7bf3:	89 fb                	mov    %edi,%ebx
	return posix_irq_lock();
    7bf5:	e8 20 e4 ff ff       	callq  601a <posix_irq_lock>
	 * without truncation to 32 bits (I couldn't find a way to make
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32 && (t < BIT64(32))) {
    7bfa:	ba ff ff ff ff       	mov    $0xffffffff,%edx
    7bff:	89 c5                	mov    %eax,%ebp
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    7c01:	48 8d 05 18 78 00 00 	lea    0x7818(%rip),%rax        # f420 <_kernel>
    7c08:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_ms_to_ticks_ceil32(uint32_t t)
{
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    7c0f:	89 d8                	mov    %ebx,%eax
		t += off;
    7c11:	48 83 c0 09          	add    $0x9,%rax
		if (result32 && (t < BIT64(32))) {
    7c15:	48 39 d0             	cmp    %rdx,%rax
    7c18:	77 0e                	ja     7c28 <k_sched_time_slice_set+0x40>
			return ((uint32_t)t) / (from_hz / to_hz);
    7c1a:	8d 43 09             	lea    0x9(%rbx),%eax
    7c1d:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7c22:	31 d2                	xor    %edx,%edx
    7c24:	f7 f1                	div    %ecx
    7c26:	eb 0a                	jmp    7c32 <k_sched_time_slice_set+0x4a>
			return t / (from_hz / to_hz);
    7c28:	b9 0a 00 00 00       	mov    $0xa,%ecx
    7c2d:	31 d2                	xor    %edx,%edx
    7c2f:	48 f7 f1             	div    %rcx
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    7c32:	85 db                	test   %ebx,%ebx
    7c34:	7e 0b                	jle    7c41 <k_sched_time_slice_set+0x59>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    7c36:	83 f8 02             	cmp    $0x2,%eax
    7c39:	ba 02 00 00 00       	mov    $0x2,%edx
    7c3e:	0f 4c c2             	cmovl  %edx,%eax
		}
		slice_max_prio = prio;
    7c41:	44 89 25 4c 79 00 00 	mov    %r12d,0x794c(%rip)        # f594 <slice_max_prio>
			slice_time = MAX(2, slice_time);
    7c48:	89 05 4a 79 00 00    	mov    %eax,0x794a(%rip)        # f598 <slice_time>
		z_reset_time_slice();
    7c4e:	e8 67 ff ff ff       	callq  7bba <z_reset_time_slice>
	}
}
    7c53:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    7c54:	89 ef                	mov    %ebp,%edi
    7c56:	5d                   	pop    %rbp
    7c57:	41 5c                	pop    %r12
    7c59:	e9 ca e3 ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000007c5e <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    7c5e:	f3 0f 1e fa          	endbr64 
}
#endif

static inline bool arch_is_in_isr(void)
{
	return _kernel.cpus[0].nested != 0U;
    7c62:	48 8d 05 b7 77 00 00 	lea    0x77b7(%rip),%rax        # f420 <_kernel>
	if (resched(key.key) && need_swap()) {
    7c69:	89 f2                	mov    %esi,%edx
{
    7c6b:	89 f7                	mov    %esi,%edi
	if (resched(key.key) && need_swap()) {
    7c6d:	0b 10                	or     (%rax),%edx
    7c6f:	75 11                	jne    7c82 <z_reschedule+0x24>
    7c71:	48 8b 48 10          	mov    0x10(%rax),%rcx
    7c75:	48 39 48 38          	cmp    %rcx,0x38(%rax)
    7c79:	74 07                	je     7c82 <z_reschedule+0x24>
	ret = arch_swap(key);
    7c7b:	31 ff                	xor    %edi,%edi
    7c7d:	e9 d6 d7 ff ff       	jmpq   5458 <arch_swap>
    7c82:	e9 a1 e3 ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000007c87 <z_reschedule_irqlock>:
		k_spin_unlock(lock, key);
	}
}

void z_reschedule_irqlock(uint32_t key)
{
    7c87:	f3 0f 1e fa          	endbr64 
	if (resched(key)) {
    7c8b:	48 8d 05 8e 77 00 00 	lea    0x778e(%rip),%rax        # f420 <_kernel>
    7c92:	89 fa                	mov    %edi,%edx
    7c94:	0b 10                	or     (%rax),%edx
    7c96:	75 07                	jne    7c9f <z_reschedule_irqlock+0x18>
    7c98:	31 ff                	xor    %edi,%edi
    7c9a:	e9 b9 d7 ff ff       	jmpq   5458 <arch_swap>
    7c9f:	e9 84 e3 ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000007ca4 <z_reschedule_unlocked>:
{
    7ca4:	50                   	push   %rax
	return posix_irq_lock();
    7ca5:	e8 70 e3 ff ff       	callq  601a <posix_irq_lock>
}
    7caa:	5a                   	pop    %rdx
    7cab:	89 c7                	mov    %eax,%edi
	(void) z_reschedule_irqlock(arch_irq_lock());
    7cad:	e9 d5 ff ff ff       	jmpq   7c87 <z_reschedule_irqlock>

0000000000007cb2 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7cb2:	f3 0f 1e fa          	endbr64 
    7cb6:	50                   	push   %rax
    7cb7:	e8 5e e3 ff ff       	callq  601a <posix_irq_lock>
    7cbc:	89 c7                	mov    %eax,%edi
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7cbe:	48 8d 05 5b 77 00 00 	lea    0x775b(%rip),%rax        # f420 <_kernel>
    7cc5:	48 8b 40 10          	mov    0x10(%rax),%rax
    7cc9:	fe 48 1b             	decb   0x1b(%rax)
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    7ccc:	5a                   	pop    %rdx
	posix_irq_unlock(key);
    7ccd:	e9 56 e3 ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000007cd2 <z_priq_dumb_remove>:

	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    7cd2:	f3 0f 1e fa          	endbr64 
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    7cd6:	48 8b 56 08          	mov    0x8(%rsi),%rdx
	sys_dnode_t *const next = node->next;
    7cda:	48 8b 06             	mov    (%rsi),%rax

	prev->next = next;
    7cdd:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    7ce0:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    7ce4:	48 c7 06 00 00 00 00 	movq   $0x0,(%rsi)
	node->prev = NULL;
    7ceb:	48 c7 46 08 00 00 00 	movq   $0x0,0x8(%rsi)
    7cf2:	00 
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    7cf3:	c3                   	retq   

0000000000007cf4 <unpend_thread_no_timeout>:
{
    7cf4:	53                   	push   %rbx
    7cf5:	48 89 fb             	mov    %rdi,%rbx
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7cf8:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    7cfc:	48 89 de             	mov    %rbx,%rsi
    7cff:	e8 ce ff ff ff       	callq  7cd2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7d04:	80 63 19 fd          	andb   $0xfd,0x19(%rbx)
	thread->base.pended_on = NULL;
    7d08:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    7d0f:	00 
}
    7d10:	5b                   	pop    %rbx
    7d11:	c3                   	retq   

0000000000007d12 <z_priq_dumb_best>:

struct k_thread *z_priq_dumb_best(sys_dlist_t *pq)
{
    7d12:	f3 0f 1e fa          	endbr64 
	return list->head == list;
    7d16:	48 8b 07             	mov    (%rdi),%rax
	struct k_thread *thread = NULL;
	sys_dnode_t *n = sys_dlist_peek_head(pq);

	if (n != NULL) {
    7d19:	48 85 c0             	test   %rax,%rax
    7d1c:	74 05                	je     7d23 <z_priq_dumb_best+0x11>
    7d1e:	48 39 c7             	cmp    %rax,%rdi
    7d21:	75 02                	jne    7d25 <z_priq_dumb_best+0x13>
	struct k_thread *thread = NULL;
    7d23:	31 c0                	xor    %eax,%eax
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
	}
	return thread;
}
    7d25:	c3                   	retq   

0000000000007d26 <update_cache>:
{
    7d26:	41 54                	push   %r12
    7d28:	41 89 fc             	mov    %edi,%r12d
    7d2b:	55                   	push   %rbp
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7d2c:	48 8d 2d ed 76 00 00 	lea    0x76ed(%rip),%rbp        # f420 <_kernel>
{
    7d33:	53                   	push   %rbx
	thread = _priq_run_best(&_kernel.ready_q.runq);
    7d34:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7d38:	e8 d5 ff ff ff       	callq  7d12 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7d3d:	48 89 c3             	mov    %rax,%rbx
    7d40:	48 85 c0             	test   %rax,%rax
    7d43:	75 04                	jne    7d49 <update_cache+0x23>
    7d45:	48 8b 5d 18          	mov    0x18(%rbp),%rbx
	if (preempt_ok != 0) {
    7d49:	48 8b 45 10          	mov    0x10(%rbp),%rax
    7d4d:	45 85 e4             	test   %r12d,%r12d
    7d50:	75 13                	jne    7d65 <update_cache+0x3f>
	if (z_is_thread_prevented_from_running(_current)) {
    7d52:	f6 40 19 1f          	testb  $0x1f,0x19(%rax)
    7d56:	75 0d                	jne    7d65 <update_cache+0x3f>
	if (is_preempt(_current) || is_metairq(thread)) {
    7d58:	66 83 78 1a 7f       	cmpw   $0x7f,0x1a(%rax)
    7d5d:	76 06                	jbe    7d65 <update_cache+0x3f>
		_kernel.ready_q.cache = _current;
    7d5f:	48 89 45 38          	mov    %rax,0x38(%rbp)
    7d63:	eb 0e                	jmp    7d73 <update_cache+0x4d>
		if (thread != _current) {
    7d65:	48 39 c3             	cmp    %rax,%rbx
    7d68:	74 05                	je     7d6f <update_cache+0x49>
			z_reset_time_slice();
    7d6a:	e8 4b fe ff ff       	callq  7bba <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7d6f:	48 89 5d 38          	mov    %rbx,0x38(%rbp)
}
    7d73:	5b                   	pop    %rbx
    7d74:	5d                   	pop    %rbp
    7d75:	41 5c                	pop    %r12
    7d77:	c3                   	retq   

0000000000007d78 <unready_thread>:
{
    7d78:	55                   	push   %rbp
    7d79:	53                   	push   %rbx
    7d7a:	48 89 fb             	mov    %rdi,%rbx
    7d7d:	52                   	push   %rdx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7d7e:	8a 47 19             	mov    0x19(%rdi),%al
	return (thread->base.thread_state & state) != 0U;
    7d81:	48 8d 2d 98 76 00 00 	lea    0x7698(%rip),%rbp        # f420 <_kernel>
	if (z_is_thread_queued(thread)) {
    7d88:	84 c0                	test   %al,%al
    7d8a:	79 12                	jns    7d9e <unready_thread+0x26>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d8c:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7d8f:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d92:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    7d95:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    7d99:	e8 34 ff ff ff       	callq  7cd2 <z_priq_dumb_remove>
	update_cache(thread == _current);
    7d9e:	31 ff                	xor    %edi,%edi
    7da0:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
}
    7da4:	58                   	pop    %rax
	update_cache(thread == _current);
    7da5:	40 0f 94 c7          	sete   %dil
}
    7da9:	5b                   	pop    %rbx
    7daa:	5d                   	pop    %rbp
	update_cache(thread == _current);
    7dab:	e9 76 ff ff ff       	jmpq   7d26 <update_cache>

0000000000007db0 <add_to_waitq_locked>:
{
    7db0:	41 54                	push   %r12
    7db2:	55                   	push   %rbp
    7db3:	48 89 f5             	mov    %rsi,%rbp
    7db6:	53                   	push   %rbx
    7db7:	48 89 fb             	mov    %rdi,%rbx
	unready_thread(thread);
    7dba:	e8 b9 ff ff ff       	callq  7d78 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7dbf:	80 4b 19 02          	orb    $0x2,0x19(%rbx)
	if (wait_q != NULL) {
    7dc3:	48 85 ed             	test   %rbp,%rbp
    7dc6:	74 5a                	je     7e22 <add_to_waitq_locked+0x72>
    7dc8:	4c 8b 65 00          	mov    0x0(%rbp),%r12
		thread->base.pended_on = wait_q;
    7dcc:	48 89 6b 10          	mov    %rbp,0x10(%rbx)
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7dd0:	4d 85 e4             	test   %r12,%r12
    7dd3:	74 05                	je     7dda <add_to_waitq_locked+0x2a>
    7dd5:	4c 39 e5             	cmp    %r12,%rbp
    7dd8:	75 14                	jne    7dee <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    7dda:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = list;
    7dde:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = tail;
    7de1:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7de5:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7de8:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    7dec:	eb 34                	jmp    7e22 <add_to_waitq_locked+0x72>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7dee:	4c 89 e6             	mov    %r12,%rsi
    7df1:	48 89 df             	mov    %rbx,%rdi
    7df4:	e8 aa fd ff ff       	callq  7ba3 <z_sched_prio_cmp>
    7df9:	85 c0                	test   %eax,%eax
    7dfb:	7e 16                	jle    7e13 <add_to_waitq_locked+0x63>
	sys_dnode_t *const prev = successor->prev;
    7dfd:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    7e02:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    7e05:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    7e09:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    7e0c:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    7e11:	eb 0f                	jmp    7e22 <add_to_waitq_locked+0x72>
	return (node == list->tail) ? NULL : node->next;
    7e13:	4c 3b 65 08          	cmp    0x8(%rbp),%r12
    7e17:	74 c1                	je     7dda <add_to_waitq_locked+0x2a>
    7e19:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7e1d:	4d 85 e4             	test   %r12,%r12
    7e20:	eb b6                	jmp    7dd8 <add_to_waitq_locked+0x28>
}
    7e22:	5b                   	pop    %rbx
    7e23:	5d                   	pop    %rbp
    7e24:	41 5c                	pop    %r12
    7e26:	c3                   	retq   

0000000000007e27 <pend>:
{
    7e27:	55                   	push   %rbp
    7e28:	53                   	push   %rbx
    7e29:	48 89 fb             	mov    %rdi,%rbx
    7e2c:	48 83 ec 18          	sub    $0x18,%rsp
    7e30:	48 89 14 24          	mov    %rdx,(%rsp)
    7e34:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
	return posix_irq_lock();
    7e39:	e8 dc e1 ff ff       	callq  601a <posix_irq_lock>
		add_to_waitq_locked(thread, wait_q);
    7e3e:	48 8b 74 24 08       	mov    0x8(%rsp),%rsi
    7e43:	48 89 df             	mov    %rbx,%rdi
    7e46:	89 c5                	mov    %eax,%ebp
    7e48:	e8 63 ff ff ff       	callq  7db0 <add_to_waitq_locked>
	posix_irq_unlock(key);
    7e4d:	89 ef                	mov    %ebp,%edi
    7e4f:	e8 d4 e1 ff ff       	callq  6028 <posix_irq_unlock>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7e54:	48 8b 14 24          	mov    (%rsp),%rdx
    7e58:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    7e5c:	74 16                	je     7e74 <pend+0x4d>

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7e5e:	48 8d 35 74 03 00 00 	lea    0x374(%rip),%rsi        # 81d9 <z_thread_timeout>
}
    7e65:	48 83 c4 18          	add    $0x18,%rsp
    7e69:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
    7e6d:	5b                   	pop    %rbx
    7e6e:	5d                   	pop    %rbp
    7e6f:	e9 70 08 00 00       	jmpq   86e4 <z_add_timeout>
    7e74:	48 83 c4 18          	add    $0x18,%rsp
    7e78:	5b                   	pop    %rbx
    7e79:	5d                   	pop    %rbp
    7e7a:	c3                   	retq   

0000000000007e7b <z_pend_curr>:
{
    7e7b:	f3 0f 1e fa          	endbr64 
	pend(_current, wait_q, timeout);
    7e7f:	48 8d 05 9a 75 00 00 	lea    0x759a(%rip),%rax        # f420 <_kernel>
{
    7e86:	55                   	push   %rbp
    7e87:	89 f5                	mov    %esi,%ebp
    7e89:	48 89 d6             	mov    %rdx,%rsi
    7e8c:	48 89 ca             	mov    %rcx,%rdx
	pend(_current, wait_q, timeout);
    7e8f:	48 8b 78 10          	mov    0x10(%rax),%rdi
    7e93:	e8 8f ff ff ff       	callq  7e27 <pend>
    7e98:	89 ef                	mov    %ebp,%edi
}
    7e9a:	5d                   	pop    %rbp
    7e9b:	e9 b8 d5 ff ff       	jmpq   5458 <arch_swap>

0000000000007ea0 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    7ea0:	41 55                	push   %r13
    7ea2:	41 54                	push   %r12
    7ea4:	55                   	push   %rbp
    7ea5:	53                   	push   %rbx
    7ea6:	48 89 fb             	mov    %rdi,%rbx
    7ea9:	50                   	push   %rax
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7eaa:	e8 c2 0a 00 00       	callq  8971 <sys_clock_tick_get_32>
    7eaf:	89 c5                	mov    %eax,%ebp
	return posix_irq_lock();
    7eb1:	e8 64 e1 ff ff       	callq  601a <posix_irq_lock>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
#endif
	unready_thread(_current);
    7eb6:	4c 8d 2d 63 75 00 00 	lea    0x7563(%rip),%r13        # f420 <_kernel>
    7ebd:	41 89 c4             	mov    %eax,%r12d
    7ec0:	49 8b 7d 10          	mov    0x10(%r13),%rdi
    7ec4:	e8 af fe ff ff       	callq  7d78 <unready_thread>
    7ec9:	49 8b 45 10          	mov    0x10(%r13),%rax
    7ecd:	48 8d 35 05 03 00 00 	lea    0x305(%rip),%rsi        # 81d9 <z_thread_timeout>
    7ed4:	48 89 da             	mov    %rbx,%rdx

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7ed7:	01 eb                	add    %ebp,%ebx
    7ed9:	48 8d 78 28          	lea    0x28(%rax),%rdi
    7edd:	e8 02 08 00 00       	callq  86e4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7ee2:	49 8b 45 10          	mov    0x10(%r13),%rax
    7ee6:	44 89 e7             	mov    %r12d,%edi
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7ee9:	80 48 19 10          	orb    $0x10,0x19(%rax)
    7eed:	e8 66 d5 ff ff       	callq  5458 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7ef2:	e8 7a 0a 00 00       	callq  8971 <sys_clock_tick_get_32>
	if (ticks > 0) {
    7ef7:	ba 00 00 00 00       	mov    $0x0,%edx
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7efc:	89 c0                	mov    %eax,%eax
    7efe:	48 29 c3             	sub    %rax,%rbx
    7f01:	48 89 d8             	mov    %rbx,%rax
    7f04:	48 0f 48 c2          	cmovs  %rdx,%rax
		return ticks;
	}
#endif

	return 0;
}
    7f08:	5a                   	pop    %rdx
    7f09:	5b                   	pop    %rbx
    7f0a:	5d                   	pop    %rbp
    7f0b:	41 5c                	pop    %r12
    7f0d:	41 5d                	pop    %r13
    7f0f:	c3                   	retq   

0000000000007f10 <z_impl_k_thread_suspend>:
{
    7f10:	f3 0f 1e fa          	endbr64 
    7f14:	41 54                	push   %r12
    7f16:	55                   	push   %rbp
    7f17:	53                   	push   %rbx
    7f18:	48 89 fb             	mov    %rdi,%rbx
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7f1b:	48 83 c7 28          	add    $0x28,%rdi
    7f1f:	e8 dc 08 00 00       	callq  8800 <z_abort_timeout>
    7f24:	e8 f1 e0 ff ff       	callq  601a <posix_irq_lock>
    7f29:	48 8d 2d f0 74 00 00 	lea    0x74f0(%rip),%rbp        # f420 <_kernel>
    7f30:	41 89 c4             	mov    %eax,%r12d
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7f33:	8a 43 19             	mov    0x19(%rbx),%al
		if (z_is_thread_queued(thread)) {
    7f36:	84 c0                	test   %al,%al
    7f38:	79 12                	jns    7f4c <z_impl_k_thread_suspend+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f3a:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7f3d:	48 89 de             	mov    %rbx,%rsi
    7f40:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f44:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    7f47:	e8 86 fd ff ff       	callq  7cd2 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7f4c:	80 4b 19 10          	orb    $0x10,0x19(%rbx)
		update_cache(thread == _current);
    7f50:	31 ff                	xor    %edi,%edi
    7f52:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    7f56:	40 0f 94 c7          	sete   %dil
    7f5a:	e8 c7 fd ff ff       	callq  7d26 <update_cache>
	posix_irq_unlock(key);
    7f5f:	44 89 e7             	mov    %r12d,%edi
    7f62:	e8 c1 e0 ff ff       	callq  6028 <posix_irq_unlock>
	if (thread == _current) {
    7f67:	48 39 5d 10          	cmp    %rbx,0x10(%rbp)
    7f6b:	75 09                	jne    7f76 <z_impl_k_thread_suspend+0x66>
}
    7f6d:	5b                   	pop    %rbx
    7f6e:	5d                   	pop    %rbp
    7f6f:	41 5c                	pop    %r12
		z_reschedule_unlocked();
    7f71:	e9 2e fd ff ff       	jmpq   7ca4 <z_reschedule_unlocked>
}
    7f76:	5b                   	pop    %rbx
    7f77:	5d                   	pop    %rbp
    7f78:	41 5c                	pop    %r12
    7f7a:	c3                   	retq   

0000000000007f7b <k_sched_unlock>:
{
    7f7b:	f3 0f 1e fa          	endbr64 
    7f7f:	55                   	push   %rbp
	return posix_irq_lock();
    7f80:	e8 95 e0 ff ff       	callq  601a <posix_irq_lock>
		update_cache(0);
    7f85:	31 ff                	xor    %edi,%edi
    7f87:	89 c5                	mov    %eax,%ebp
		++_current->base.sched_locked;
    7f89:	48 8d 05 90 74 00 00 	lea    0x7490(%rip),%rax        # f420 <_kernel>
    7f90:	48 8b 40 10          	mov    0x10(%rax),%rax
    7f94:	fe 40 1b             	incb   0x1b(%rax)
		update_cache(0);
    7f97:	e8 8a fd ff ff       	callq  7d26 <update_cache>
	posix_irq_unlock(key);
    7f9c:	89 ef                	mov    %ebp,%edi
    7f9e:	e8 85 e0 ff ff       	callq  6028 <posix_irq_unlock>
}
    7fa3:	5d                   	pop    %rbp
	z_reschedule_unlocked();
    7fa4:	e9 fb fc ff ff       	jmpq   7ca4 <z_reschedule_unlocked>

0000000000007fa9 <move_thread_to_end_of_prio_q>:
{
    7fa9:	41 54                	push   %r12
    7fab:	4c 8d 25 6e 74 00 00 	lea    0x746e(%rip),%r12        # f420 <_kernel>
    7fb2:	55                   	push   %rbp
    7fb3:	53                   	push   %rbx
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    7fb4:	8a 47 19             	mov    0x19(%rdi),%al
    7fb7:	48 89 fb             	mov    %rdi,%rbx
	if (z_is_thread_queued(thread)) {
    7fba:	84 c0                	test   %al,%al
    7fbc:	79 13                	jns    7fd1 <move_thread_to_end_of_prio_q+0x28>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7fbe:	83 e0 7f             	and    $0x7f,%eax
		_priq_run_remove(pq, thread);
    7fc1:	48 89 fe             	mov    %rdi,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7fc4:	88 47 19             	mov    %al,0x19(%rdi)
		_priq_run_remove(pq, thread);
    7fc7:	49 8d 7c 24 40       	lea    0x40(%r12),%rdi
    7fcc:	e8 01 fd ff ff       	callq  7cd2 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7fd1:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    7fd5:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fda:	48 85 ed             	test   %rbp,%rbp
    7fdd:	74 0a                	je     7fe9 <move_thread_to_end_of_prio_q+0x40>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7fdf:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    7fe4:	48 39 c5             	cmp    %rax,%rbp
    7fe7:	75 1b                	jne    8004 <move_thread_to_end_of_prio_q+0x5b>
	sys_dnode_t *const tail = list->tail;
    7fe9:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    7fee:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    7ff3:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    7ff6:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    7ffa:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    7ffd:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    8002:	eb 33                	jmp    8037 <move_thread_to_end_of_prio_q+0x8e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8004:	48 89 ee             	mov    %rbp,%rsi
    8007:	48 89 df             	mov    %rbx,%rdi
    800a:	e8 94 fb ff ff       	callq  7ba3 <z_sched_prio_cmp>
    800f:	85 c0                	test   %eax,%eax
    8011:	7e 14                	jle    8027 <move_thread_to_end_of_prio_q+0x7e>
	sys_dnode_t *const prev = successor->prev;
    8013:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    8017:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    801a:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    801e:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    8021:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    8025:	eb 10                	jmp    8037 <move_thread_to_end_of_prio_q+0x8e>
	return (node == list->tail) ? NULL : node->next;
    8027:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    802c:	74 bb                	je     7fe9 <move_thread_to_end_of_prio_q+0x40>
    802e:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8032:	48 85 ed             	test   %rbp,%rbp
    8035:	eb b0                	jmp    7fe7 <move_thread_to_end_of_prio_q+0x3e>
	update_cache(thread == _current);
    8037:	31 ff                	xor    %edi,%edi
    8039:	49 39 5c 24 10       	cmp    %rbx,0x10(%r12)
}
    803e:	5b                   	pop    %rbx
	update_cache(thread == _current);
    803f:	40 0f 94 c7          	sete   %dil
}
    8043:	5d                   	pop    %rbp
    8044:	41 5c                	pop    %r12
	update_cache(thread == _current);
    8046:	e9 db fc ff ff       	jmpq   7d26 <update_cache>

000000000000804b <z_time_slice>:
{
    804b:	f3 0f 1e fa          	endbr64 
    804f:	55                   	push   %rbp
    8050:	53                   	push   %rbx
    8051:	89 fb                	mov    %edi,%ebx
    8053:	52                   	push   %rdx
	return posix_irq_lock();
    8054:	e8 c1 df ff ff       	callq  601a <posix_irq_lock>
	if (slice_time && sliceable(_current)) {
    8059:	83 3d 38 75 00 00 00 	cmpl   $0x0,0x7538(%rip)        # f598 <slice_time>
    8060:	89 c5                	mov    %eax,%ebp
    8062:	48 8d 05 b7 73 00 00 	lea    0x73b7(%rip),%rax        # f420 <_kernel>
    8069:	74 40                	je     80ab <z_time_slice+0x60>
    806b:	48 8b 78 10          	mov    0x10(%rax),%rdi
		&& !z_is_idle_thread_object(thread);
    806f:	66 83 7f 1a 7f       	cmpw   $0x7f,0x1a(%rdi)
    8074:	77 35                	ja     80ab <z_time_slice+0x60>
		&& !z_is_thread_prevented_from_running(thread)
    8076:	f6 47 19 1f          	testb  $0x1f,0x19(%rdi)
    807a:	75 2f                	jne    80ab <z_time_slice+0x60>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    807c:	0f be 57 1a          	movsbl 0x1a(%rdi),%edx
		&& !z_is_idle_thread_object(thread);
    8080:	39 15 0e 75 00 00    	cmp    %edx,0x750e(%rip)        # f594 <slice_max_prio>
    8086:	7f 23                	jg     80ab <z_time_slice+0x60>
    8088:	48 3b 3d 21 3f 00 00 	cmp    0x3f21(%rip),%rdi        # bfb0 <_GLOBAL_OFFSET_TABLE_+0x1d8>
    808f:	74 1a                	je     80ab <z_time_slice+0x60>
		if (ticks >= _current_cpu->slice_ticks) {
    8091:	8b 50 20             	mov    0x20(%rax),%edx
    8094:	39 da                	cmp    %ebx,%edx
    8096:	7f 0c                	jg     80a4 <z_time_slice+0x59>
			move_thread_to_end_of_prio_q(_current);
    8098:	e8 0c ff ff ff       	callq  7fa9 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    809d:	e8 18 fb ff ff       	callq  7bba <z_reset_time_slice>
    80a2:	eb 0e                	jmp    80b2 <z_time_slice+0x67>
			_current_cpu->slice_ticks -= ticks;
    80a4:	29 da                	sub    %ebx,%edx
    80a6:	89 50 20             	mov    %edx,0x20(%rax)
    80a9:	eb 07                	jmp    80b2 <z_time_slice+0x67>
		_current_cpu->slice_ticks = 0;
    80ab:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
}
    80b2:	58                   	pop    %rax
	posix_irq_unlock(key);
    80b3:	89 ef                	mov    %ebp,%edi
    80b5:	5b                   	pop    %rbx
    80b6:	5d                   	pop    %rbp
    80b7:	e9 6c df ff ff       	jmpq   6028 <posix_irq_unlock>

00000000000080bc <ready_thread>:
    80bc:	8a 47 19             	mov    0x19(%rdi),%al
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    80bf:	84 c0                	test   %al,%al
    80c1:	0f 88 95 00 00 00    	js     815c <ready_thread+0xa0>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    80c7:	a8 1f                	test   $0x1f,%al
    80c9:	0f 85 8d 00 00 00    	jne    815c <ready_thread+0xa0>
{
    80cf:	41 54                	push   %r12
    80d1:	55                   	push   %rbp
    80d2:	53                   	push   %rbx
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    80d3:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
    80d8:	48 89 fb             	mov    %rdi,%rbx
    80db:	75 7a                	jne    8157 <ready_thread+0x9b>
	return list->head == list;
    80dd:	4c 8d 25 3c 73 00 00 	lea    0x733c(%rip),%r12        # f420 <_kernel>
	thread->base.thread_state |= _THREAD_QUEUED;
    80e4:	83 c8 80             	or     $0xffffff80,%eax
    80e7:	88 47 19             	mov    %al,0x19(%rdi)
    80ea:	49 8b 6c 24 40       	mov    0x40(%r12),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    80ef:	48 85 ed             	test   %rbp,%rbp
    80f2:	74 0a                	je     80fe <ready_thread+0x42>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80f4:	49 8d 44 24 40       	lea    0x40(%r12),%rax
    80f9:	48 39 c5             	cmp    %rax,%rbp
    80fc:	75 1b                	jne    8119 <ready_thread+0x5d>
	sys_dnode_t *const tail = list->tail;
    80fe:	49 8b 44 24 48       	mov    0x48(%r12),%rax
	node->next = list;
    8103:	49 8d 54 24 40       	lea    0x40(%r12),%rdx
    8108:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    810b:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    810f:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    8112:	49 89 5c 24 48       	mov    %rbx,0x48(%r12)
}
    8117:	eb 33                	jmp    814c <ready_thread+0x90>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8119:	48 89 ee             	mov    %rbp,%rsi
    811c:	48 89 df             	mov    %rbx,%rdi
    811f:	e8 7f fa ff ff       	callq  7ba3 <z_sched_prio_cmp>
    8124:	85 c0                	test   %eax,%eax
    8126:	7e 14                	jle    813c <ready_thread+0x80>
	sys_dnode_t *const prev = successor->prev;
    8128:	48 8b 45 08          	mov    0x8(%rbp),%rax
	node->next = successor;
    812c:	48 89 2b             	mov    %rbp,(%rbx)
	node->prev = prev;
    812f:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    8133:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    8136:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
}
    813a:	eb 10                	jmp    814c <ready_thread+0x90>
	return (node == list->tail) ? NULL : node->next;
    813c:	49 39 6c 24 48       	cmp    %rbp,0x48(%r12)
    8141:	74 bb                	je     80fe <ready_thread+0x42>
    8143:	48 8b 6d 00          	mov    0x0(%rbp),%rbp
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8147:	48 85 ed             	test   %rbp,%rbp
    814a:	eb b0                	jmp    80fc <ready_thread+0x40>
}
    814c:	5b                   	pop    %rbx
		update_cache(0);
    814d:	31 ff                	xor    %edi,%edi
}
    814f:	5d                   	pop    %rbp
    8150:	41 5c                	pop    %r12
		update_cache(0);
    8152:	e9 cf fb ff ff       	jmpq   7d26 <update_cache>
}
    8157:	5b                   	pop    %rbx
    8158:	5d                   	pop    %rbp
    8159:	41 5c                	pop    %r12
    815b:	c3                   	retq   
    815c:	c3                   	retq   

000000000000815d <z_ready_thread>:
{
    815d:	f3 0f 1e fa          	endbr64 
    8161:	55                   	push   %rbp
    8162:	48 83 ec 10          	sub    $0x10,%rsp
    8166:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    816b:	e8 aa de ff ff       	callq  601a <posix_irq_lock>
			ready_thread(thread);
    8170:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8175:	89 c5                	mov    %eax,%ebp
    8177:	e8 40 ff ff ff       	callq  80bc <ready_thread>
}
    817c:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    8180:	89 ef                	mov    %ebp,%edi
    8182:	5d                   	pop    %rbp
    8183:	e9 a0 de ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000008188 <z_sched_start>:
{
    8188:	f3 0f 1e fa          	endbr64 
    818c:	41 54                	push   %r12
    818e:	48 83 ec 10          	sub    $0x10,%rsp
    8192:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    8197:	e8 7e de ff ff       	callq  601a <posix_irq_lock>
	if (z_has_thread_started(thread)) {
    819c:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    81a1:	41 89 c4             	mov    %eax,%r12d
    81a4:	8a 47 19             	mov    0x19(%rdi),%al
    81a7:	a8 04                	test   $0x4,%al
    81a9:	75 0e                	jne    81b9 <z_sched_start+0x31>
}
    81ab:	48 83 c4 10          	add    $0x10,%rsp
	posix_irq_unlock(key);
    81af:	44 89 e7             	mov    %r12d,%edi
    81b2:	41 5c                	pop    %r12
    81b4:	e9 6f de ff ff       	jmpq   6028 <posix_irq_unlock>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    81b9:	83 e0 fb             	and    $0xfffffffb,%eax
    81bc:	88 47 19             	mov    %al,0x19(%rdi)
	ready_thread(thread);
    81bf:	e8 f8 fe ff ff       	callq  80bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    81c4:	48 8d 3d de 73 00 00 	lea    0x73de(%rip),%rdi        # f5a9 <sched_spinlock>
}
    81cb:	48 83 c4 10          	add    $0x10,%rsp
	z_reschedule(&sched_spinlock, key);
    81cf:	44 89 e6             	mov    %r12d,%esi
}
    81d2:	41 5c                	pop    %r12
	z_reschedule(&sched_spinlock, key);
    81d4:	e9 85 fa ff ff       	jmpq   7c5e <z_reschedule>

00000000000081d9 <z_thread_timeout>:
{
    81d9:	f3 0f 1e fa          	endbr64 
    81dd:	41 54                	push   %r12
    81df:	55                   	push   %rbp
    81e0:	53                   	push   %rbx
    81e1:	48 89 fb             	mov    %rdi,%rbx
	return posix_irq_lock();
    81e4:	e8 31 de ff ff       	callq  601a <posix_irq_lock>
    81e9:	89 c5                	mov    %eax,%ebp
		if (!killed) {
    81eb:	f6 43 f1 28          	testb  $0x28,-0xf(%rbx)
    81ef:	75 1f                	jne    8210 <z_thread_timeout+0x37>
			if (thread->base.pended_on != NULL) {
    81f1:	48 83 7b e8 00       	cmpq   $0x0,-0x18(%rbx)
	struct k_thread *thread = CONTAINER_OF(timeout,
    81f6:	4c 8d 63 d8          	lea    -0x28(%rbx),%r12
			if (thread->base.pended_on != NULL) {
    81fa:	74 08                	je     8204 <z_thread_timeout+0x2b>
				unpend_thread_no_timeout(thread);
    81fc:	4c 89 e7             	mov    %r12,%rdi
    81ff:	e8 f0 fa ff ff       	callq  7cf4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8204:	80 63 f1 eb          	andb   $0xeb,-0xf(%rbx)
			ready_thread(thread);
    8208:	4c 89 e7             	mov    %r12,%rdi
    820b:	e8 ac fe ff ff       	callq  80bc <ready_thread>
}
    8210:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    8211:	89 ef                	mov    %ebp,%edi
    8213:	5d                   	pop    %rbp
    8214:	41 5c                	pop    %r12
    8216:	e9 0d de ff ff       	jmpq   6028 <posix_irq_unlock>

000000000000821b <z_unpend_first_thread>:
{
    821b:	f3 0f 1e fa          	endbr64 
    821f:	41 54                	push   %r12
    8221:	55                   	push   %rbp
    8222:	48 83 ec 18          	sub    $0x18,%rsp
    8226:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    822b:	e8 ea dd ff ff       	callq  601a <posix_irq_lock>
		thread = _priq_wait_best(&wait_q->waitq);
    8230:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    8235:	89 c5                	mov    %eax,%ebp
    8237:	e8 d6 fa ff ff       	callq  7d12 <z_priq_dumb_best>
    823c:	49 89 c4             	mov    %rax,%r12
		if (thread != NULL) {
    823f:	48 85 c0             	test   %rax,%rax
    8242:	74 12                	je     8256 <z_unpend_first_thread+0x3b>
			unpend_thread_no_timeout(thread);
    8244:	48 89 c7             	mov    %rax,%rdi
    8247:	e8 a8 fa ff ff       	callq  7cf4 <unpend_thread_no_timeout>
    824c:	49 8d 7c 24 28       	lea    0x28(%r12),%rdi
    8251:	e8 aa 05 00 00       	callq  8800 <z_abort_timeout>
	posix_irq_unlock(key);
    8256:	89 ef                	mov    %ebp,%edi
    8258:	e8 cb dd ff ff       	callq  6028 <posix_irq_unlock>
}
    825d:	48 83 c4 18          	add    $0x18,%rsp
    8261:	4c 89 e0             	mov    %r12,%rax
    8264:	5d                   	pop    %rbp
    8265:	41 5c                	pop    %r12
    8267:	c3                   	retq   

0000000000008268 <z_sched_init>:
{
    8268:	f3 0f 1e fa          	endbr64 
	list->head = (sys_dnode_t *)list;
    826c:	48 8d 05 ad 71 00 00 	lea    0x71ad(%rip),%rax        # f420 <_kernel>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8273:	31 f6                	xor    %esi,%esi
    8275:	31 ff                	xor    %edi,%edi
    8277:	48 8d 50 40          	lea    0x40(%rax),%rdx
    827b:	48 89 50 40          	mov    %rdx,0x40(%rax)
	list->tail = (sys_dnode_t *)list;
    827f:	48 89 50 48          	mov    %rdx,0x48(%rax)
    8283:	e9 60 f9 ff ff       	jmpq   7be8 <k_sched_time_slice_set>

0000000000008288 <z_impl_k_yield>:
{
    8288:	f3 0f 1e fa          	endbr64 
    828c:	41 55                	push   %r13
    828e:	41 54                	push   %r12
    8290:	55                   	push   %rbp
    8291:	53                   	push   %rbx
    8292:	52                   	push   %rdx
	if (!z_is_idle_thread_object(_current)) {
    8293:	48 8d 2d 86 71 00 00 	lea    0x7186(%rip),%rbp        # f420 <_kernel>
    829a:	48 8d 05 3f 70 00 00 	lea    0x703f(%rip),%rax        # f2e0 <z_idle_threads>
    82a1:	48 39 45 10          	cmp    %rax,0x10(%rbp)
    82a5:	0f 84 8e 00 00 00    	je     8339 <z_impl_k_yield+0xb1>
	return posix_irq_lock();
    82ab:	e8 6a dd ff ff       	callq  601a <posix_irq_lock>
			dequeue_thread(&_kernel.ready_q.runq,
    82b0:	48 8b 75 10          	mov    0x10(%rbp),%rsi
		_priq_run_remove(pq, thread);
    82b4:	48 8d 7d 40          	lea    0x40(%rbp),%rdi
    82b8:	41 89 c5             	mov    %eax,%r13d
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82bb:	80 66 19 7f          	andb   $0x7f,0x19(%rsi)
		_priq_run_remove(pq, thread);
    82bf:	e8 0e fa ff ff       	callq  7cd2 <z_priq_dumb_remove>
		queue_thread(&_kernel.ready_q.runq, _current);
    82c4:	48 8b 5d 10          	mov    0x10(%rbp),%rbx
	thread->base.thread_state |= _THREAD_QUEUED;
    82c8:	80 4b 19 80          	orb    $0x80,0x19(%rbx)
	return list->head == list;
    82cc:	4c 8b 65 40          	mov    0x40(%rbp),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    82d0:	4d 85 e4             	test   %r12,%r12
    82d3:	74 09                	je     82de <z_impl_k_yield+0x56>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82d5:	48 8d 45 40          	lea    0x40(%rbp),%rax
    82d9:	49 39 c4             	cmp    %rax,%r12
    82dc:	75 18                	jne    82f6 <z_impl_k_yield+0x6e>
	sys_dnode_t *const tail = list->tail;
    82de:	48 8b 45 48          	mov    0x48(%rbp),%rax
	node->next = list;
    82e2:	48 8d 55 40          	lea    0x40(%rbp),%rdx
    82e6:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    82e9:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    82ed:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    82f0:	48 89 5d 48          	mov    %rbx,0x48(%rbp)
}
    82f4:	eb 34                	jmp    832a <z_impl_k_yield+0xa2>
		if (z_sched_prio_cmp(thread, t) > 0) {
    82f6:	4c 89 e6             	mov    %r12,%rsi
    82f9:	48 89 df             	mov    %rbx,%rdi
    82fc:	e8 a2 f8 ff ff       	callq  7ba3 <z_sched_prio_cmp>
    8301:	85 c0                	test   %eax,%eax
    8303:	7e 16                	jle    831b <z_impl_k_yield+0x93>
	sys_dnode_t *const prev = successor->prev;
    8305:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	node->next = successor;
    830a:	4c 89 23             	mov    %r12,(%rbx)
	node->prev = prev;
    830d:	48 89 43 08          	mov    %rax,0x8(%rbx)
	prev->next = node;
    8311:	48 89 18             	mov    %rbx,(%rax)
	successor->prev = node;
    8314:	49 89 5c 24 08       	mov    %rbx,0x8(%r12)
}
    8319:	eb 0f                	jmp    832a <z_impl_k_yield+0xa2>
	return (node == list->tail) ? NULL : node->next;
    831b:	4c 39 65 48          	cmp    %r12,0x48(%rbp)
    831f:	74 bd                	je     82de <z_impl_k_yield+0x56>
    8321:	4d 8b 24 24          	mov    (%r12),%r12
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8325:	4d 85 e4             	test   %r12,%r12
    8328:	eb b2                	jmp    82dc <z_impl_k_yield+0x54>
		update_cache(1);
    832a:	bf 01 00 00 00       	mov    $0x1,%edi
    832f:	e8 f2 f9 ff ff       	callq  7d26 <update_cache>
    8334:	44 89 ef             	mov    %r13d,%edi
    8337:	eb 07                	jmp    8340 <z_impl_k_yield+0xb8>
    8339:	e8 dc dc ff ff       	callq  601a <posix_irq_lock>
    833e:	89 c7                	mov    %eax,%edi
}
    8340:	58                   	pop    %rax
    8341:	5b                   	pop    %rbx
    8342:	5d                   	pop    %rbp
    8343:	41 5c                	pop    %r12
    8345:	41 5d                	pop    %r13
    8347:	e9 0c d1 ff ff       	jmpq   5458 <arch_swap>

000000000000834c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    834c:	f3 0f 1e fa          	endbr64 
    8350:	51                   	push   %rcx

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8351:	48 83 ff ff          	cmp    $0xffffffffffffffff,%rdi
    8355:	75 15                	jne    836c <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    8357:	48 8d 05 c2 70 00 00 	lea    0x70c2(%rip),%rax        # f420 <_kernel>
    835e:	48 8b 78 10          	mov    0x10(%rax),%rdi
	z_impl_k_thread_suspend(thread);
    8362:	e8 a9 fb ff ff       	callq  7f10 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    8367:	83 c8 ff             	or     $0xffffffff,%eax
}
    836a:	eb 16                	jmp    8382 <z_impl_k_sleep+0x36>
	if (ticks == 0) {
    836c:	48 85 ff             	test   %rdi,%rdi
    836f:	75 09                	jne    837a <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
    8371:	e8 12 ff ff ff       	callq  8288 <z_impl_k_yield>
		return 0;
    8376:	31 c0                	xor    %eax,%eax
}
    8378:	eb 05                	jmp    837f <z_impl_k_sleep+0x33>
    837a:	e8 21 fb ff ff       	callq  7ea0 <z_tick_sleep.part.0>

	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
    837f:	6b c0 0a             	imul   $0xa,%eax,%eax
}
    8382:	5a                   	pop    %rdx
    8383:	c3                   	retq   

0000000000008384 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    8384:	f3 0f 1e fa          	endbr64 
	int32_t ticks;

	ticks = k_us_to_ticks_ceil64(us);
    8388:	48 63 c7             	movslq %edi,%rax
    838b:	31 d2                	xor    %edx,%edx
{
    838d:	51                   	push   %rcx
    838e:	b9 10 27 00 00       	mov    $0x2710,%ecx
		t += off;
    8393:	48 05 0f 27 00 00    	add    $0x270f,%rax
			return t / (from_hz / to_hz);
    8399:	48 f7 f1             	div    %rcx
	ticks = z_tick_sleep(ticks);
    839c:	48 63 f8             	movslq %eax,%rdi
	if (ticks == 0) {
    839f:	48 85 ff             	test   %rdi,%rdi
    83a2:	75 09                	jne    83ad <z_impl_k_usleep+0x29>
	z_impl_k_yield();
    83a4:	e8 df fe ff ff       	callq  8288 <z_impl_k_yield>
		return 0;
    83a9:	31 c0                	xor    %eax,%eax
}
    83ab:	eb 05                	jmp    83b2 <z_impl_k_usleep+0x2e>
    83ad:	e8 ee fa ff ff       	callq  7ea0 <z_tick_sleep.part.0>
	return k_ticks_to_us_floor64(ticks);
    83b2:	48 98                	cltq   
}
    83b4:	5a                   	pop    %rdx
			return t * (to_hz / from_hz);
    83b5:	48 69 c0 10 27 00 00 	imul   $0x2710,%rax,%rax
    83bc:	c3                   	retq   

00000000000083bd <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
    83bd:	f3 0f 1e fa          	endbr64 
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    83c1:	48 8d 05 58 70 00 00 	lea    0x7058(%rip),%rax        # f420 <_kernel>

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    83c8:	48 8b 40 10          	mov    0x10(%rax),%rax
}
    83cc:	c3                   	retq   

00000000000083cd <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    83cd:	f3 0f 1e fa          	endbr64 
    83d1:	41 55                	push   %r13
    83d3:	41 54                	push   %r12
    83d5:	55                   	push   %rbp
    83d6:	53                   	push   %rbx
    83d7:	48 89 fb             	mov    %rdi,%rbx
    83da:	52                   	push   %rdx
    83db:	e8 3a dc ff ff       	callq  601a <posix_irq_lock>
    83e0:	41 89 c4             	mov    %eax,%r12d
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    83e3:	8a 43 19             	mov    0x19(%rbx),%al
    83e6:	a8 08                	test   $0x8,%al
    83e8:	0f 85 9b 00 00 00    	jne    8489 <z_thread_abort+0xbc>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    83ee:	89 c2                	mov    %eax,%edx
    83f0:	83 e2 df             	and    $0xffffffdf,%edx
		if (z_is_thread_queued(thread)) {
    83f3:	80 ca 08             	or     $0x8,%dl
    83f6:	78 05                	js     83fd <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    83f8:	88 53 19             	mov    %dl,0x19(%rbx)
    83fb:	eb 1c                	jmp    8419 <z_thread_abort+0x4c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83fd:	83 e0 5f             	and    $0x5f,%eax
		_priq_run_remove(pq, thread);
    8400:	48 89 de             	mov    %rbx,%rsi
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8403:	83 c8 08             	or     $0x8,%eax
    8406:	88 43 19             	mov    %al,0x19(%rbx)
		_priq_run_remove(pq, thread);
    8409:	48 8d 05 10 70 00 00 	lea    0x7010(%rip),%rax        # f420 <_kernel>
    8410:	48 8d 78 40          	lea    0x40(%rax),%rdi
    8414:	e8 b9 f8 ff ff       	callq  7cd2 <z_priq_dumb_remove>
		if (thread->base.pended_on != NULL) {
    8419:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
    841e:	74 08                	je     8428 <z_thread_abort+0x5b>
			unpend_thread_no_timeout(thread);
    8420:	48 89 df             	mov    %rbx,%rdi
    8423:	e8 cc f8 ff ff       	callq  7cf4 <unpend_thread_no_timeout>
    8428:	48 8d 7b 28          	lea    0x28(%rbx),%rdi
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    842c:	4c 8d 6b 60          	lea    0x60(%rbx),%r13
    8430:	e8 cb 03 00 00       	callq  8800 <z_abort_timeout>
	return list->head == list;
    8435:	48 8b 6b 60          	mov    0x60(%rbx),%rbp
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    8439:	48 85 ed             	test   %rbp,%rbp
    843c:	74 27                	je     8465 <z_thread_abort+0x98>
    843e:	4c 39 ed             	cmp    %r13,%rbp
    8441:	74 22                	je     8465 <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
    8443:	48 89 ef             	mov    %rbp,%rdi
    8446:	e8 a9 f8 ff ff       	callq  7cf4 <unpend_thread_no_timeout>
    844b:	48 8d 7d 28          	lea    0x28(%rbp),%rdi
    844f:	e8 ac 03 00 00       	callq  8800 <z_abort_timeout>
	thread->callee_saved.retval = value;
    8454:	c7 45 4c 00 00 00 00 	movl   $0x0,0x4c(%rbp)
		ready_thread(thread);
    845b:	48 89 ef             	mov    %rbp,%rdi
    845e:	e8 59 fc ff ff       	callq  80bc <ready_thread>
    8463:	eb d0                	jmp    8435 <z_thread_abort+0x68>
		update_cache(1);
    8465:	bf 01 00 00 00       	mov    $0x1,%edi
    846a:	e8 b7 f8 ff ff       	callq  7d26 <update_cache>
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
    846f:	48 8d 05 aa 6f 00 00 	lea    0x6faa(%rip),%rax        # f420 <_kernel>
    8476:	48 39 58 10          	cmp    %rbx,0x10(%rax)
    847a:	75 0d                	jne    8489 <z_thread_abort+0xbc>
    847c:	83 38 00             	cmpl   $0x0,(%rax)
    847f:	75 08                	jne    8489 <z_thread_abort+0xbc>
    8481:	44 89 e7             	mov    %r12d,%edi
    8484:	e8 cf cf ff ff       	callq  5458 <arch_swap>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8489:	58                   	pop    %rax
	posix_irq_unlock(key);
    848a:	44 89 e7             	mov    %r12d,%edi
    848d:	5b                   	pop    %rbx
    848e:	5d                   	pop    %rbp
    848f:	41 5c                	pop    %r12
    8491:	41 5d                	pop    %r13
    8493:	e9 90 db ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000008498 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    8498:	f3 0f 1e fa          	endbr64 
	z_sched_start(thread);
    849c:	e9 e7 fc ff ff       	jmpq   8188 <z_sched_start>

00000000000084a1 <z_init_thread_base>:
}
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    84a1:	f3 0f 1e fa          	endbr64 
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    84a5:	48 c7 47 10 00 00 00 	movq   $0x0,0x10(%rdi)
    84ac:	00 
	thread_base->user_options = (uint8_t)options;
    84ad:	88 4f 18             	mov    %cl,0x18(%rdi)
	thread_base->thread_state = (uint8_t)initial_state;
    84b0:	88 57 19             	mov    %dl,0x19(%rdi)

	thread_base->prio = priority;
    84b3:	40 88 77 1a          	mov    %sil,0x1a(%rdi)

	thread_base->sched_locked = 0U;
    84b7:	c6 47 1b 00          	movb   $0x0,0x1b(%rdi)
	node->next = NULL;
    84bb:	48 c7 47 28 00 00 00 	movq   $0x0,0x28(%rdi)
    84c2:	00 
	node->prev = NULL;
    84c3:	48 c7 47 30 00 00 00 	movq   $0x0,0x30(%rdi)
    84ca:	00 
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    84cb:	c3                   	retq   

00000000000084cc <z_setup_new_thread>:
{
    84cc:	f3 0f 1e fa          	endbr64 
    84d0:	41 55                	push   %r13
	sys_dlist_init(&w->waitq);
    84d2:	48 8d 47 60          	lea    0x60(%rdi),%rax
    84d6:	49 89 cd             	mov    %rcx,%r13
    84d9:	41 54                	push   %r12
    84db:	49 89 d4             	mov    %rdx,%r12
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    84de:	ba 04 00 00 00       	mov    $0x4,%edx
{
    84e3:	55                   	push   %rbp
    84e4:	48 89 f5             	mov    %rsi,%rbp
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    84e7:	49 83 c4 07          	add    $0x7,%r12
{
    84eb:	53                   	push   %rbx
    84ec:	48 89 fb             	mov    %rdi,%rbx
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    84ef:	49 83 e4 f8          	and    $0xfffffffffffffff8,%r12
	stack_ptr = (char *)stack + stack_obj_size;
    84f3:	49 01 ec             	add    %rbp,%r12
{
    84f6:	48 83 ec 18          	sub    $0x18,%rsp
	list->head = (sys_dnode_t *)list;
    84fa:	48 89 47 60          	mov    %rax,0x60(%rdi)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    84fe:	8b 4c 24 50          	mov    0x50(%rsp),%ecx
    8502:	8b 74 24 48          	mov    0x48(%rsp),%esi
	list->tail = (sys_dnode_t *)list;
    8506:	48 89 47 68          	mov    %rax,0x68(%rdi)
{
    850a:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
    850f:	4c 89 0c 24          	mov    %r9,(%rsp)
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    8513:	e8 89 ff ff ff       	callq  84a1 <z_init_thread_base>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8518:	4c 89 e9             	mov    %r13,%rcx
    851b:	4c 89 e2             	mov    %r12,%rdx
    851e:	48 89 ee             	mov    %rbp,%rsi
    8521:	50                   	push   %rax
    8522:	48 89 df             	mov    %rbx,%rdi
    8525:	ff 74 24 48          	pushq  0x48(%rsp)
    8529:	4c 8b 4c 24 10       	mov    0x10(%rsp),%r9
    852e:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
    8533:	e8 89 cf ff ff       	callq  54c1 <arch_new_thread>
	if (!_current) {
    8538:	48 8d 05 e1 6e 00 00 	lea    0x6ee1(%rip),%rax        # f420 <_kernel>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    853f:	5a                   	pop    %rdx
	new_thread->init_data = NULL;
    8540:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
    8547:	00 
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8548:	59                   	pop    %rcx
	if (!_current) {
    8549:	48 8b 40 10          	mov    0x10(%rax),%rax
    854d:	48 85 c0             	test   %rax,%rax
    8550:	74 04                	je     8556 <z_setup_new_thread+0x8a>
	new_thread->resource_pool = _current->resource_pool;
    8552:	48 8b 40 78          	mov    0x78(%rax),%rax
	return stack_ptr;
    8556:	48 89 43 78          	mov    %rax,0x78(%rbx)
}
    855a:	48 83 c4 18          	add    $0x18,%rsp
    855e:	4c 89 e0             	mov    %r12,%rax
    8561:	5b                   	pop    %rbx
    8562:	5d                   	pop    %rbp
    8563:	41 5c                	pop    %r12
    8565:	41 5d                	pop    %r13
    8567:	c3                   	retq   

0000000000008568 <z_init_static_threads>:
{
    8568:	f3 0f 1e fa          	endbr64 
    856c:	55                   	push   %rbp
    856d:	53                   	push   %rbx
    856e:	52                   	push   %rdx
	_FOREACH_STATIC_THREAD(thread_data) {
    856f:	48 8d 1d 0a 64 00 00 	lea    0x640a(%rip),%rbx        # e980 <_k_thread_data_processing_tid>
    8576:	48 89 dd             	mov    %rbx,%rbp
    8579:	48 3b 1d 38 3a 00 00 	cmp    0x3a38(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    8580:	73 3a                	jae    85bc <z_init_static_threads+0x54>
		z_setup_new_thread(
    8582:	4c 8b 4b 28          	mov    0x28(%rbx),%r9
    8586:	4c 8b 43 20          	mov    0x20(%rbx),%r8
    858a:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    858e:	8b 53 10             	mov    0x10(%rbx),%edx
    8591:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    8595:	ff 73 50             	pushq  0x50(%rbx)
    8598:	8b 43 3c             	mov    0x3c(%rbx),%eax
    859b:	50                   	push   %rax
    859c:	8b 43 38             	mov    0x38(%rbx),%eax
    859f:	50                   	push   %rax
    85a0:	ff 73 30             	pushq  0x30(%rbx)
    85a3:	48 8b 3b             	mov    (%rbx),%rdi
    85a6:	e8 21 ff ff ff       	callq  84cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    85ab:	48 8b 03             	mov    (%rbx),%rax
		z_setup_new_thread(
    85ae:	48 83 c4 20          	add    $0x20,%rsp
		thread_data->init_thread->init_data = thread_data;
    85b2:	48 89 58 58          	mov    %rbx,0x58(%rax)
	_FOREACH_STATIC_THREAD(thread_data) {
    85b6:	48 83 c3 58          	add    $0x58,%rbx
    85ba:	eb bd                	jmp    8579 <z_init_static_threads+0x11>
	k_sched_lock();
    85bc:	e8 f1 f6 ff ff       	callq  7cb2 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    85c1:	48 89 eb             	mov    %rbp,%rbx
					    K_MSEC(thread_data->init_delay));
    85c4:	31 ed                	xor    %ebp,%ebp
	_FOREACH_STATIC_THREAD(thread_data) {
    85c6:	48 3b 1d eb 39 00 00 	cmp    0x39eb(%rip),%rbx        # bfb8 <_GLOBAL_OFFSET_TABLE_+0x1e0>
    85cd:	73 46                	jae    8615 <z_init_static_threads+0xad>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    85cf:	8b 43 40             	mov    0x40(%rbx),%eax
    85d2:	83 f8 ff             	cmp    $0xffffffff,%eax
    85d5:	74 38                	je     860f <z_init_static_threads+0xa7>
					    K_MSEC(thread_data->init_delay));
    85d7:	85 c0                	test   %eax,%eax
			schedule_new_thread(thread_data->init_thread,
    85d9:	48 8b 3b             	mov    (%rbx),%rdi
					    K_MSEC(thread_data->init_delay));
    85dc:	0f 48 c5             	cmovs  %ebp,%eax
    85df:	48 63 c8             	movslq %eax,%rcx
		t += off;
    85e2:	48 8d 41 09          	lea    0x9(%rcx),%rax
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    85e6:	48 85 c9             	test   %rcx,%rcx
    85e9:	75 07                	jne    85f2 <z_init_static_threads+0x8a>
	z_impl_k_thread_start(thread);
    85eb:	e8 a8 fe ff ff       	callq  8498 <z_impl_k_thread_start>
}
    85f0:	eb 1d                	jmp    860f <z_init_static_threads+0xa7>
			return t / (from_hz / to_hz);
    85f2:	b9 0a 00 00 00       	mov    $0xa,%ecx
    85f7:	31 d2                	xor    %edx,%edx
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    85f9:	48 8d 35 d9 fb ff ff 	lea    -0x427(%rip),%rsi        # 81d9 <z_thread_timeout>
    8600:	48 83 c7 28          	add    $0x28,%rdi
    8604:	48 f7 f1             	div    %rcx
    8607:	48 89 c2             	mov    %rax,%rdx
    860a:	e8 d5 00 00 00       	callq  86e4 <z_add_timeout>
	_FOREACH_STATIC_THREAD(thread_data) {
    860f:	48 83 c3 58          	add    $0x58,%rbx
    8613:	eb b1                	jmp    85c6 <z_init_static_threads+0x5e>
}
    8615:	58                   	pop    %rax
    8616:	5b                   	pop    %rbx
    8617:	5d                   	pop    %rbp
	k_sched_unlock();
    8618:	e9 5e f9 ff ff       	jmpq   7f7b <k_sched_unlock>

000000000000861d <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    861d:	f3 0f 1e fa          	endbr64 
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8621:	48 8d 15 c7 1a 00 00 	lea    0x1ac7(%rip),%rdx        # a0ef <default_cmd+0xe8f>
    8628:	48 8d 35 8b 1e 00 00 	lea    0x1e8b(%rip),%rsi        # a4ba <default_cmd+0x125a>
    862f:	31 c0                	xor    %eax,%eax
    8631:	48 8d 3d a3 1e 00 00 	lea    0x1ea3(%rip),%rdi        # a4db <default_cmd+0x127b>
    8638:	e9 ad a6 ff ff       	jmpq   2cea <printk>

000000000000863d <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    863d:	83 3d 58 6f 00 00 00 	cmpl   $0x0,0x6f58(%rip)        # f59c <announce_remaining>
    8644:	75 05                	jne    864b <elapsed+0xe>
    8646:	e9 a3 b5 ff ff       	jmpq   3bee <sys_clock_elapsed>
}
    864b:	31 c0                	xor    %eax,%eax
    864d:	c3                   	retq   

000000000000864e <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    864e:	48 8b 07             	mov    (%rdi),%rax
    8651:	48 85 ff             	test   %rdi,%rdi
    8654:	74 16                	je     866c <remove_timeout+0x1e>
	return (node == list->tail) ? NULL : node->next;
    8656:	48 3b 3d db 3d 00 00 	cmp    0x3ddb(%rip),%rdi        # c438 <timeout_list+0x8>
    865d:	74 0d                	je     866c <remove_timeout+0x1e>
	if (next(t) != NULL) {
    865f:	48 85 c0             	test   %rax,%rax
    8662:	74 08                	je     866c <remove_timeout+0x1e>
		next(t)->dticks += t->dticks;
    8664:	48 8b 57 18          	mov    0x18(%rdi),%rdx
    8668:	48 01 50 18          	add    %rdx,0x18(%rax)
	sys_dnode_t *const prev = node->prev;
    866c:	48 8b 57 08          	mov    0x8(%rdi),%rdx
	prev->next = next;
    8670:	48 89 02             	mov    %rax,(%rdx)
	next->prev = prev;
    8673:	48 89 50 08          	mov    %rdx,0x8(%rax)
	node->next = NULL;
    8677:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
	node->prev = NULL;
    867e:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    8685:	00 
}
    8686:	c3                   	retq   

0000000000008687 <next_timeout>:

static int32_t next_timeout(void)
{
    8687:	53                   	push   %rbx
	return list->head == list;
    8688:	48 8b 1d a1 3d 00 00 	mov    0x3da1(%rip),%rbx        # c430 <timeout_list>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    868f:	48 8d 05 9a 3d 00 00 	lea    0x3d9a(%rip),%rax        # c430 <timeout_list>
    8696:	48 39 c3             	cmp    %rax,%rbx
    8699:	75 02                	jne    869d <next_timeout+0x16>
    869b:	31 db                	xor    %ebx,%ebx
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    869d:	e8 9b ff ff ff       	callq  863d <elapsed>
    86a2:	89 c2                	mov    %eax,%edx
	int32_t ret = to == NULL ? MAX_WAIT
    86a4:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    86a9:	48 85 db             	test   %rbx,%rbx
    86ac:	74 21                	je     86cf <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    86ae:	48 63 c2             	movslq %edx,%rax
    86b1:	48 8b 53 18          	mov    0x18(%rbx),%rdx
    86b5:	48 29 c2             	sub    %rax,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    86b8:	31 c0                	xor    %eax,%eax
    86ba:	48 85 d2             	test   %rdx,%rdx
    86bd:	7e 10                	jle    86cf <next_timeout+0x48>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    86bf:	48 81 fa ff ff ff 7f 	cmp    $0x7fffffff,%rdx
	int32_t ret = to == NULL ? MAX_WAIT
    86c6:	b8 ff ff ff 7f       	mov    $0x7fffffff,%eax
    86cb:	48 0f 4e c2          	cmovle %rdx,%rax

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    86cf:	48 8d 15 4a 6d 00 00 	lea    0x6d4a(%rip),%rdx        # f420 <_kernel>
    86d6:	8b 52 20             	mov    0x20(%rdx),%edx
    86d9:	85 d2                	test   %edx,%edx
    86db:	74 05                	je     86e2 <next_timeout+0x5b>
    86dd:	39 d0                	cmp    %edx,%eax
    86df:	0f 4f c2             	cmovg  %edx,%eax
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    86e2:	5b                   	pop    %rbx
    86e3:	c3                   	retq   

00000000000086e4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    86e4:	f3 0f 1e fa          	endbr64 
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    86e8:	48 83 fa ff          	cmp    $0xffffffffffffffff,%rdx
    86ec:	0f 84 0d 01 00 00    	je     87ff <z_add_timeout+0x11b>
{
    86f2:	41 56                	push   %r14
    86f4:	49 89 f6             	mov    %rsi,%r14
    86f7:	41 55                	push   %r13
    86f9:	49 89 d5             	mov    %rdx,%r13
    86fc:	41 54                	push   %r12
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    86fe:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
{
    8705:	55                   	push   %rbp
	k_ticks_t ticks = timeout.ticks + 1;
    8706:	48 8d 6a 01          	lea    0x1(%rdx),%rbp
{
    870a:	53                   	push   %rbx
    870b:	48 89 fb             	mov    %rdi,%rbx
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    870e:	49 39 ec             	cmp    %rbp,%r12
    8711:	78 17                	js     872a <z_add_timeout+0x46>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    8713:	e8 25 ff ff ff       	callq  863d <elapsed>
    8718:	4c 89 e5             	mov    %r12,%rbp
    871b:	48 2b 2d 2e 6e 00 00 	sub    0x6e2e(%rip),%rbp        # f550 <curr_tick>
    8722:	4c 29 ed             	sub    %r13,%rbp
    8725:	48 98                	cltq   
    8727:	48 29 c5             	sub    %rax,%rbp
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    872a:	4c 89 73 10          	mov    %r14,0x10(%rbx)
	return posix_irq_lock();
    872e:	e8 e7 d8 ff ff       	callq  601a <posix_irq_lock>
    8733:	41 89 c4             	mov    %eax,%r12d
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    8736:	e8 02 ff ff ff       	callq  863d <elapsed>
	ticks = MAX(1, ticks);
    873b:	48 85 ed             	test   %rbp,%rbp
    873e:	ba 01 00 00 00       	mov    $0x1,%edx
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8743:	48 8b 3d ee 3c 00 00 	mov    0x3cee(%rip),%rdi        # c438 <timeout_list+0x8>
    874a:	48 0f 4e ea          	cmovle %rdx,%rbp
		to->dticks = ticks + elapsed();
    874e:	48 98                	cltq   
	return list->head == list;
    8750:	48 8d 15 d9 3c 00 00 	lea    0x3cd9(%rip),%rdx        # c430 <timeout_list>
    8757:	48 01 c5             	add    %rax,%rbp
    875a:	48 8b 05 cf 3c 00 00 	mov    0x3ccf(%rip),%rax        # c430 <timeout_list>
    8761:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8765:	48 39 d0             	cmp    %rdx,%rax
    8768:	74 3e                	je     87a8 <z_add_timeout+0xc4>
		for (t = first(); t != NULL; t = next(t)) {
    876a:	48 85 c0             	test   %rax,%rax
    876d:	74 39                	je     87a8 <z_add_timeout+0xc4>
			if (t->dticks > to->dticks) {
    876f:	48 8b 70 18          	mov    0x18(%rax),%rsi
    8773:	48 8b 4b 18          	mov    0x18(%rbx),%rcx
    8777:	48 39 ce             	cmp    %rcx,%rsi
    877a:	7e 1b                	jle    8797 <z_add_timeout+0xb3>
				t->dticks -= to->dticks;
    877c:	48 29 ce             	sub    %rcx,%rsi
	sys_dnode_t *const prev = successor->prev;
    877f:	48 8b 48 08          	mov    0x8(%rax),%rcx
    8783:	48 89 70 18          	mov    %rsi,0x18(%rax)
	node->prev = prev;
    8787:	48 89 4b 08          	mov    %rcx,0x8(%rbx)
	node->next = successor;
    878b:	48 89 03             	mov    %rax,(%rbx)
	prev->next = node;
    878e:	48 89 19             	mov    %rbx,(%rcx)
	successor->prev = node;
    8791:	48 89 58 08          	mov    %rbx,0x8(%rax)
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    8795:	eb 29                	jmp    87c0 <z_add_timeout+0xdc>
			to->dticks -= t->dticks;
    8797:	48 29 f1             	sub    %rsi,%rcx
    879a:	48 89 4b 18          	mov    %rcx,0x18(%rbx)
	return (node == list->tail) ? NULL : node->next;
    879e:	48 39 f8             	cmp    %rdi,%rax
    87a1:	74 05                	je     87a8 <z_add_timeout+0xc4>
    87a3:	48 8b 00             	mov    (%rax),%rax
    87a6:	eb c2                	jmp    876a <z_add_timeout+0x86>
	sys_dnode_t *const tail = list->tail;
    87a8:	48 8b 05 89 3c 00 00 	mov    0x3c89(%rip),%rax        # c438 <timeout_list+0x8>
	node->next = list;
    87af:	48 89 13             	mov    %rdx,(%rbx)
	node->prev = tail;
    87b2:	48 89 43 08          	mov    %rax,0x8(%rbx)
	tail->next = node;
    87b6:	48 89 18             	mov    %rbx,(%rax)
	list->tail = node;
    87b9:	48 89 1d 78 3c 00 00 	mov    %rbx,0x3c78(%rip)        # c438 <timeout_list+0x8>
	return list->head == list;
    87c0:	48 8b 05 69 3c 00 00 	mov    0x3c69(%rip),%rax        # c430 <timeout_list>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    87c7:	48 39 c3             	cmp    %rax,%rbx
    87ca:	75 23                	jne    87ef <z_add_timeout+0x10b>
    87cc:	48 39 d0             	cmp    %rdx,%rax
    87cf:	74 1e                	je     87ef <z_add_timeout+0x10b>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    87d1:	e8 b1 fe ff ff       	callq  8687 <next_timeout>
    87d6:	89 c7                	mov    %eax,%edi

			if (next_time == 0 ||
    87d8:	85 c0                	test   %eax,%eax
    87da:	74 0c                	je     87e8 <z_add_timeout+0x104>
			    _current_cpu->slice_ticks != next_time) {
    87dc:	48 8d 05 3d 6c 00 00 	lea    0x6c3d(%rip),%rax        # f420 <_kernel>
			if (next_time == 0 ||
    87e3:	39 78 20             	cmp    %edi,0x20(%rax)
    87e6:	74 07                	je     87ef <z_add_timeout+0x10b>
				sys_clock_set_timeout(next_time, false);
    87e8:	31 f6                	xor    %esi,%esi
    87ea:	e8 d8 b3 ff ff       	callq  3bc7 <sys_clock_set_timeout>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    87ef:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    87f0:	44 89 e7             	mov    %r12d,%edi
    87f3:	5d                   	pop    %rbp
    87f4:	41 5c                	pop    %r12
    87f6:	41 5d                	pop    %r13
    87f8:	41 5e                	pop    %r14
    87fa:	e9 29 d8 ff ff       	jmpq   6028 <posix_irq_unlock>
    87ff:	c3                   	retq   

0000000000008800 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    8800:	f3 0f 1e fa          	endbr64 
    8804:	41 54                	push   %r12
    8806:	41 bc ea ff ff ff    	mov    $0xffffffea,%r12d
    880c:	48 83 ec 10          	sub    $0x10,%rsp
    8810:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
	return posix_irq_lock();
    8815:	e8 00 d8 ff ff       	callq  601a <posix_irq_lock>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    881a:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
    881f:	41 89 c0             	mov    %eax,%r8d
    8822:	48 83 3f 00          	cmpq   $0x0,(%rdi)
    8826:	74 08                	je     8830 <z_abort_timeout+0x30>
			remove_timeout(to);
    8828:	e8 21 fe ff ff       	callq  864e <remove_timeout>
			ret = 0;
    882d:	45 31 e4             	xor    %r12d,%r12d
	posix_irq_unlock(key);
    8830:	44 89 c7             	mov    %r8d,%edi
    8833:	e8 f0 d7 ff ff       	callq  6028 <posix_irq_unlock>
		}
	}

	return ret;
}
    8838:	48 83 c4 10          	add    $0x10,%rsp
    883c:	44 89 e0             	mov    %r12d,%eax
    883f:	41 5c                	pop    %r12
    8841:	c3                   	retq   

0000000000008842 <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8842:	f3 0f 1e fa          	endbr64 
    8846:	41 54                	push   %r12
    8848:	55                   	push   %rbp
    8849:	89 fd                	mov    %edi,%ebp
    884b:	53                   	push   %rbx
    884c:	89 f3                	mov    %esi,%ebx
	return posix_irq_lock();
    884e:	e8 c7 d7 ff ff       	callq  601a <posix_irq_lock>
    8853:	41 89 c4             	mov    %eax,%r12d
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8856:	e8 2c fe ff ff       	callq  8687 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
    885b:	83 f8 ff             	cmp    $0xffffffff,%eax
    885e:	0f 94 c1             	sete   %cl
			      || (ticks <= next_to);
    8861:	39 e8                	cmp    %ebp,%eax
    8863:	0f 9d c2             	setge  %dl
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8866:	08 d1                	or     %dl,%cl
    8868:	74 14                	je     887e <z_set_timeout_expiry+0x3c>
    886a:	83 f8 01             	cmp    $0x1,%eax
    886d:	7e 0f                	jle    887e <z_set_timeout_expiry+0x3c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    886f:	39 e8                	cmp    %ebp,%eax
    8871:	89 ef                	mov    %ebp,%edi
    8873:	0f b6 f3             	movzbl %bl,%esi
    8876:	0f 4e f8             	cmovle %eax,%edi
    8879:	e8 49 b3 ff ff       	callq  3bc7 <sys_clock_set_timeout>
		}
	}
}
    887e:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    887f:	44 89 e7             	mov    %r12d,%edi
    8882:	5d                   	pop    %rbp
    8883:	41 5c                	pop    %r12
    8885:	e9 9e d7 ff ff       	jmpq   6028 <posix_irq_unlock>

000000000000888a <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    888a:	f3 0f 1e fa          	endbr64 
    888e:	41 54                	push   %r12
    8890:	4c 8d 25 99 3b 00 00 	lea    0x3b99(%rip),%r12        # c430 <timeout_list>
    8897:	55                   	push   %rbp
    8898:	53                   	push   %rbx
    8899:	89 fb                	mov    %edi,%ebx
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    889b:	e8 ab f7 ff ff       	callq  804b <z_time_slice>
	return posix_irq_lock();
    88a0:	e8 75 d7 ff ff       	callq  601a <posix_irq_lock>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    88a5:	89 1d f1 6c 00 00    	mov    %ebx,0x6cf1(%rip)        # f59c <announce_remaining>
    88ab:	89 c5                	mov    %eax,%ebp
    88ad:	48 63 15 e8 6c 00 00 	movslq 0x6ce8(%rip),%rdx        # f59c <announce_remaining>
    88b4:	49 8b 1c 24          	mov    (%r12),%rbx
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    88b8:	48 8b 35 91 6c 00 00 	mov    0x6c91(%rip),%rsi        # f550 <curr_tick>
    88bf:	48 89 d1             	mov    %rdx,%rcx

	while (first() != NULL && first()->dticks <= announce_remaining) {
    88c2:	48 85 db             	test   %rbx,%rbx
    88c5:	74 50                	je     8917 <sys_clock_announce+0x8d>
    88c7:	4c 39 e3             	cmp    %r12,%rbx
    88ca:	74 4b                	je     8917 <sys_clock_announce+0x8d>
    88cc:	48 8b 43 18          	mov    0x18(%rbx),%rax
    88d0:	48 39 d0             	cmp    %rdx,%rax
    88d3:	7f 3b                	jg     8910 <sys_clock_announce+0x86>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
		announce_remaining -= dt;
		t->dticks = 0;
    88d5:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    88dc:	00 
		curr_tick += dt;
    88dd:	48 63 d0             	movslq %eax,%rdx
		announce_remaining -= dt;
    88e0:	29 c1                	sub    %eax,%ecx
		remove_timeout(t);
    88e2:	48 89 df             	mov    %rbx,%rdi
		curr_tick += dt;
    88e5:	48 01 f2             	add    %rsi,%rdx
		announce_remaining -= dt;
    88e8:	89 0d ae 6c 00 00    	mov    %ecx,0x6cae(%rip)        # f59c <announce_remaining>
		curr_tick += dt;
    88ee:	48 89 15 5b 6c 00 00 	mov    %rdx,0x6c5b(%rip)        # f550 <curr_tick>
		remove_timeout(t);
    88f5:	e8 54 fd ff ff       	callq  864e <remove_timeout>
	posix_irq_unlock(key);
    88fa:	89 ef                	mov    %ebp,%edi
    88fc:	e8 27 d7 ff ff       	callq  6028 <posix_irq_unlock>

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    8901:	48 89 df             	mov    %rbx,%rdi
    8904:	ff 53 10             	callq  *0x10(%rbx)
	return posix_irq_lock();
    8907:	e8 0e d7 ff ff       	callq  601a <posix_irq_lock>
    890c:	89 c5                	mov    %eax,%ebp
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    890e:	eb 9d                	jmp    88ad <sys_clock_announce+0x23>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8910:	48 29 d0             	sub    %rdx,%rax
    8913:	48 89 43 18          	mov    %rax,0x18(%rbx)
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    8917:	c7 05 7b 6c 00 00 00 	movl   $0x0,0x6c7b(%rip)        # f59c <announce_remaining>
    891e:	00 00 00 
	curr_tick += announce_remaining;
    8921:	48 01 f2             	add    %rsi,%rdx
    8924:	48 89 15 25 6c 00 00 	mov    %rdx,0x6c25(%rip)        # f550 <curr_tick>

	sys_clock_set_timeout(next_timeout(), false);
    892b:	e8 57 fd ff ff       	callq  8687 <next_timeout>
    8930:	31 f6                	xor    %esi,%esi
    8932:	89 c7                	mov    %eax,%edi
    8934:	e8 8e b2 ff ff       	callq  3bc7 <sys_clock_set_timeout>

	k_spin_unlock(&timeout_lock, key);
}
    8939:	5b                   	pop    %rbx
	posix_irq_unlock(key);
    893a:	89 ef                	mov    %ebp,%edi
    893c:	5d                   	pop    %rbp
    893d:	41 5c                	pop    %r12
    893f:	e9 e4 d6 ff ff       	jmpq   6028 <posix_irq_unlock>

0000000000008944 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8944:	f3 0f 1e fa          	endbr64 
    8948:	41 54                	push   %r12
    894a:	55                   	push   %rbp
    894b:	50                   	push   %rax
	return posix_irq_lock();
    894c:	e8 c9 d6 ff ff       	callq  601a <posix_irq_lock>
    8951:	89 c5                	mov    %eax,%ebp
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8953:	e8 96 b2 ff ff       	callq  3bee <sys_clock_elapsed>
	posix_irq_unlock(key);
    8958:	89 ef                	mov    %ebp,%edi
    895a:	41 89 c4             	mov    %eax,%r12d
    895d:	4c 03 25 ec 6b 00 00 	add    0x6bec(%rip),%r12        # f550 <curr_tick>
    8964:	e8 bf d6 ff ff       	callq  6028 <posix_irq_unlock>
	}
	return t;
}
    8969:	4c 89 e0             	mov    %r12,%rax
    896c:	5a                   	pop    %rdx
    896d:	5d                   	pop    %rbp
    896e:	41 5c                	pop    %r12
    8970:	c3                   	retq   

0000000000008971 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8971:	f3 0f 1e fa          	endbr64 
    8975:	50                   	push   %rax
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8976:	e8 c9 ff ff ff       	callq  8944 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    897b:	5a                   	pop    %rdx
    897c:	c3                   	retq   

000000000000897d <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    897d:	f3 0f 1e fa          	endbr64 
    8981:	50                   	push   %rax
	return posix_irq_lock();
    8982:	e8 93 d6 ff ff       	callq  601a <posix_irq_lock>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    8987:	e8 27 c6 ff ff       	callq  4fb3 <arch_cpu_idle>
    898c:	eb f4                	jmp    8982 <idle+0x5>

000000000000898e <k_heap_init>:
#include <ksched.h>
#include <wait_q.h>
#include <init.h>

void k_heap_init(struct k_heap *h, void *mem, size_t bytes)
{
    898e:	f3 0f 1e fa          	endbr64 
    8992:	48 8d 47 18          	lea    0x18(%rdi),%rax
	list->head = (sys_dnode_t *)list;
    8996:	48 89 47 18          	mov    %rax,0x18(%rdi)
	list->tail = (sys_dnode_t *)list;
    899a:	48 89 47 20          	mov    %rax,0x20(%rdi)
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
    899e:	e9 ce a4 ff ff       	jmpq   2e71 <sys_heap_init>

00000000000089a3 <statics_init>:
}

static int statics_init(const struct device *unused)
{
    89a3:	f3 0f 1e fa          	endbr64 
    89a7:	53                   	push   %rbx
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    89a8:	48 8d 1d d9 60 00 00 	lea    0x60d9(%rip),%rbx        # ea88 <processing_msgq>
    89af:	48 3b 1d 0a 36 00 00 	cmp    0x360a(%rip),%rbx        # bfc0 <_GLOBAL_OFFSET_TABLE_+0x1e8>
    89b6:	73 16                	jae    89ce <statics_init+0x2b>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    89b8:	48 8b 53 10          	mov    0x10(%rbx),%rdx
    89bc:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    89c0:	48 89 df             	mov    %rbx,%rdi
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    89c3:	48 83 c3 28          	add    $0x28,%rbx
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    89c7:	e8 c2 ff ff ff       	callq  898e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    89cc:	eb e1                	jmp    89af <statics_init+0xc>
	}
	return 0;
}
    89ce:	31 c0                	xor    %eax,%eax
    89d0:	5b                   	pop    %rbx
    89d1:	c3                   	retq   

00000000000089d2 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    89d2:	f3 0f 1e fa          	endbr64 

#if defined(CONFIG_FPU_SHARING)
GEN_OFFSET_SYM(_thread_arch_t, excNestCount);
#endif

GEN_ABS_SYM_END
    89d6:	c3                   	retq   

Disassembly of section .fini:

00000000000089d8 <_fini>:
    89d8:	f3 0f 1e fa          	endbr64 
    89dc:	48 83 ec 08          	sub    $0x8,%rsp
    89e0:	48 83 c4 08          	add    $0x8,%rsp
    89e4:	c3                   	retq   
